(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2728729,      50641]
NotebookOptionsPosition[   2698076,      50166]
NotebookOutlinePosition[   2698513,      50183]
CellTagsIndexPosition[   2698470,      50180]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Wolfram\:8bed\:8a00\:4e13\:9898\:8bb2\:5ea7
\:673a\:5668\:5b66\:4e60\:548c\:4eba\:5de5\:667a\:80fd\
\>", "Title",
 CellChangeTimes->{{3.8226048377657423`*^9, 3.8226048659630027`*^9}, {
  3.822605627428836*^9, 3.8226056301481385`*^9}, {3.822689473616071*^9, 
  3.82268950480484*^9}, {3.822756038925295*^9, 3.8227560662611094`*^9}, {
  3.822909028487238*^9, 3.8229090518815536`*^9}},
 FontSize->48,ExpressionUUID->"99752d21-7a5e-4645-a9fb-31d9d59674f8"],

Cell[TextData[StyleBox["\:6768\:5723\:6c47 Wolfram Research Inc",
 FontSize->24]], "Author",
 CellChangeTimes->{{3.822604883372121*^9, 3.8226048991398025`*^9}, {
  3.82260530073917*^9, 3.822605330506364*^9}, {3.822605563257403*^9, 
  3.82260556664116*^9}, {3.82260637260452*^9, 
  3.8226063730596457`*^9}},ExpressionUUID->"3991237c-57b4-4d36-b804-\
47fa9c4005dc"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
a8l8RPhdz84QKLWxOMHv4HE5HIFQanH5MfwB+Y7J+Tnvc5iG+zrbeO1cHrdH
MrrlCuLk4dfqJ1Am6opCRuVSZyef197O4/csb9izMBgRPBVwTfSLeKBfuO3S
0SV/AnqEloCTKx2WjcWOrp7tkxhOTBqwy6rpE3QAwnx+5+KGCXr40bdoLrE8
IgWPC7q7uzr5PcMzzmA2j6EH1o0nUi4DyD7C4NTiUGcNk63UmfSKmYaadwML
GxD2+APJMSR3aNN0NtX89Nv7KY0L8NUZjh7oF2h1tYPTcotR09tS29LdfxK9
r7+OugVK+mRtNEYTV2XasesVbY20hq6P8UzGbVqk1dYMPIoy9QpEDnUNtTUd
0mmrzfJpuOddHU+3F0JyyaXB7tq65pUN46Zitq6W1j+vzRC5Bx9iZJGvbchj
ba3545c/azYOiRchemrvbmW0dA+atywz/XwanaF1+rGS+fTlKhO3Jv17bBqd
JxxaXF5dmp9dWFN5E1DUu9vdSm8R3ED5a4Lqn0z4kMsEnbaZw3AMSi4NdzJa
pL7kY3YFUlLl0LbZxmIxa5k1tfRprQvBwcuV/CTtbO2UeWPpAo54ACfQmxVb
R/j9xCJ5CzA6djpa25c0uzCYw7GcZmGgjsF3B/yLQz3NHdLTx1E+I3g+sLcp
GxhxnCZIHtDTqusX9a54aF/QypDM6dJIHskmloYE7A6xJ0Jw7D1zdhXIJITZ
uHeqv/PDu6paOnPTFULxvH1znlHXoDsMATrxwJ6glSWaUGcJN+J9lG3yngLq
d6iYLZ2q7eNoPAEAwSiOYzubC/V1rFso36fK5UGBelvdOiaLq9w+JuZFHLNt
zDXQOU4qjd4DGZ0YTBw7cmyvq4xHu6a+juYJ9T7gKyh9Ku5uF45TbTzLhPY5
DNasykIKxfvmGMljcCwOOpB4/+BMbFLEY7QNnPjdA0K+cEz1FMo4hsIwBOeS
ezbTx/7OBjZ/1xMJ7+k6WPT1/SBBF4MP1VMsjmD7OHV2b74i7kSyymlZI69b
vjjHb2Yq94Mwhm4sDtFbpIEU8eYi2eSUWCAQTiYz98kYVmQrHIV21sar339o
43SC2Z/fKzbuHsFQTrMEKMseSbl8OOcrPYPJURrdxExcQO0b881MzsGj+IoC
hqGE696709fBPuerE7GgXTi8niFPiEsTpxU0LqgfNvolINm0Zm60+veq0dXt
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
    "], {{0, 100.}, {100., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->144.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{Automatic, 207.672727272732},
  ImageSizeRaw->{100., 100.},
  PlotRange->{{0, 100.}, {0, 100.}}]], "Text",
 CellChangeTimes->{
  3.8229090182103853`*^9},ExpressionUUID->"03662e20-947f-4998-be5e-\
da916980c117"],

Cell[CellGroupData[{

Cell["\:63d0\:7eb2", "Section",
 CellChangeTimes->{
  3.8229087463997035`*^9},ExpressionUUID->"ca935767-3ec5-4fc6-86b3-\
004916aaca4f"],

Cell[CellGroupData[{

Cell["\:76d1\:7763\:5b66\:4e60-\:9884\:6d4b\:56de\:5f52/Regression", \
"Subsection",
 CellChangeTimes->{{3.8229087787301927`*^9, 3.8229087882306347`*^9}, 
   3.823448972931223*^9},ExpressionUUID->"79f53764-d3f6-4256-9cc2-\
f3682fa06854"],

Cell["\:9002\:7528\:4e8e\:4f7f\:7528\:56de\:5f52\:6765\:89e3\:51b3\:7684\:95ee\
\:9898", "Item",
 CellChangeTimes->{{3.822908805085733*^9, 3.8229088214548817`*^9}, {
  3.822933091874343*^9, 
  3.8229330937744465`*^9}},ExpressionUUID->"d22c98c5-0b3d-4842-b08c-\
a869722e1986"],

Cell[TextData[{
 ButtonBox["Predict",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Predict.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Predict.html"],
 ": Wolfram\:8bed\:8a00\:4e2d\:5185\:7f6e\:7684\:9884\:6d4b\:548c\:56de\:5f52\
\:51fd\:6570"
}], "Item",
 CellChangeTimes->{{3.822908805085733*^9, 3.822908849341879*^9}, {
  3.8229091161609774`*^9, 
  3.822909116161975*^9}},ExpressionUUID->"27a430c4-382e-4da6-af67-\
220dcf141039"],

Cell["\:793a\:4f8b\:ff1a\:4eea\:8868\:677f\:8bfb\:6570\:9884\:6d4b", "Item",
 CellChangeTimes->{{3.822908805085733*^9, 3.8229088763064337`*^9}, {
  3.8229337393992014`*^9, 
  3.822933775633607*^9}},ExpressionUUID->"84a21846-1a50-415e-9aac-\
9655405663c4"],

Cell["\:793a\:4f8b\:ff1a\:9884\:6d4b\:6cb9\:8017 MPG = Miles per Gallon", \
"Item",
 CellChangeTimes->{{3.822908805085733*^9, 3.8229088965507045`*^9}, {
  3.823508957619843*^9, 
  3.82350895762084*^9}},ExpressionUUID->"64f56d1e-108f-4414-98b0-\
86bd8dcd7a4b"],

Cell["\:5176\:4ed6\:8f93\:5165\:6570\:636e\:7c7b\:578b", "Item",
 CellChangeTimes->{{3.822908805085733*^9, 3.8229088965507045`*^9}, {
  3.8235089596084423`*^9, 
  3.8235089688599453`*^9}},ExpressionUUID->"49c75289-751c-40f6-87c0-\
a7de52902c81"],

Cell["\:5b9a\:5236 Predict \:9884\:6d4b\:51fd\:6570\:ff1a\:7b97\:6cd5\:9009\
\:9879", "Item",
 CellChangeTimes->{{3.822908805085733*^9, 
  3.8229089339300027`*^9}},ExpressionUUID->"4c7785e9-1c10-4425-8ef9-\
ff4dfdb72921"],

Cell["\:5b9a\:5236 Predict \:9884\:6d4b\:51fd\:6570\:ff1a\:6027\:80fd\:76ee\
\:6807", "Item",
 CellChangeTimes->{{3.822908805085733*^9, 3.8229089490726485`*^9}, 
   3.8235089545227385`*^9},ExpressionUUID->"fec3844d-499b-4534-8db0-\
f7c45b77c388"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5e8f\:5217\:9884\:6d4b", "Subsection",
 CellChangeTimes->{{3.8229089635861435`*^9, 
  3.82290896686965*^9}},ExpressionUUID->"bde86e72-21c5-4ae0-b526-\
4a5e1b16830d"],

Cell[TextData[{
 ButtonBox["SequencePredict",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/SequencePredict.html"], 
    None},
  ButtonNote->
   "http://reference.wolfram.com/language/ref/SequencePredict.html"],
 ": Wolfram\:8bed\:8a00\:4e2d\:5185\:7f6e\:7684\:9884\:6d4b\:548c\:56de\:5f52\
\:51fd\:6570"
}], "Item",
 CellChangeTimes->{{3.822909218444688*^9, 
  3.822909277956251*^9}},ExpressionUUID->"580b14a0-128b-4423-88f4-\
a0d12f2cc191"],

Cell["\:793a\:4f8b\:ff1a\:838e\:58eb\:6bd4\:4e9a\:8bd7\:8bcd", "Item",
 CellChangeTimes->{{3.822909218444688*^9, 3.8229092573358583`*^9}, {
   3.8229330084974318`*^9, 3.8229330360270786`*^9}, 
   3.8235089509610295`*^9},ExpressionUUID->"f428e4a3-efa7-4418-ae52-\
beb144c10e2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:8fdb\:9636\:5185\:5bb9", "Subsection",
 CellChangeTimes->{{3.8229330447851105`*^9, 
  3.822933050082941*^9}},ExpressionUUID->"22ec5ae1-0fdc-433e-b120-\
5ce4aee12175"],

Cell["\:4e0d\:5e73\:8861\:7684\:6570\:636e", "Item",
 CellChangeTimes->{{3.8229330708193417`*^9, 
  3.822933072348421*^9}},ExpressionUUID->"f2b0e38e-f614-4158-8dfc-\
3dcf9dfd21b8"],

Cell["\:4e0d\:5e73\:8861\:7684\:9884\:6d4b\:8f93\:51fa", "Item",
 CellChangeTimes->{{3.8229330708193417`*^9, 
  3.822933081754471*^9}},ExpressionUUID->"095250f2-9289-4527-8a09-\
9bad039a97bf"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:9002\:7528\:4e8e\:4f7f\:7528Predict\:6765\:89e3\:51b3\:7684\:95ee\
\:9898", "Section",
 CellChangeTimes->{
  3.767484699506048*^9, {3.814098964963212*^9, 3.81409898359658*^9}, {
   3.814184020536783*^9, 3.814184022329809*^9}, {3.814185481720706*^9, 
   3.814185483833363*^9}, 3.8229331071671543`*^9, {3.823455871530134*^9, 
   3.823455879606303*^9}},ExpressionUUID->"cf677860-beab-44b8-9750-\
1f75762aff06"],

Cell["\<\
\:4e00\:822c\:6765\:8bb2\:56de\:5f52\:6a21\:578b\:901a\:8fc7\:7279\:5f81\:503c\
\:8f93\:5165\:ff08\:4f8b\:5982\:623f\:5c4b\:9762\:79ef\:ff0c\:5367\:5ba4\:6570\
\:91cf\:ff0c\:79bb\:5e02\:4e2d\:5fc3\:7684\:8ddd\:79bb\:7b49\:7b49\:ff09\:6765\
\:9884\:6d4b\:8fde\:7eed\:6570\:503c\:7ed3\:679c\:ff08\:4f8b\:5982\:623f\:4ef7\
\:ff09\:3002\:8f93\:51fa\:7ed3\:679c\:53ef\:4ee5\:8868\:8fbe\
\>", "Text",
 CellChangeTimes->{{3.8229331230597353`*^9, 3.8229331273681383`*^9}, {
  3.822933261580633*^9, 
  3.822933365377409*^9}},ExpressionUUID->"149d9c2f-2cc5-4fec-bd9a-\
3315f4a5b345"],

Cell["\:591a\:5c11\:4ef7\:683c", "Item",
 CellChangeTimes->{{3.8229333515934334`*^9, 
  3.822933369977214*^9}},ExpressionUUID->"f2b56e10-e6a5-48cb-aa75-\
a237a8cc25cf"],

Cell["\:5408\:7406\:5b9a\:4ef7\:8303\:56f4", "Item",
 CellChangeTimes->{{3.8229333515934334`*^9, 
  3.822933382739167*^9}},ExpressionUUID->"44fa17b6-e866-4f92-9b5d-\
9b24ef0bcc2a"],

Cell["\<\
\:8fd0\:52a8\:5458\:573a\:4e0a\:8868\:73b0\
\>", "Item",
 CellChangeTimes->{{3.8229333515934334`*^9, 
  3.82293340596646*^9}},ExpressionUUID->"e766ae45-6bbf-4344-958b-\
86b4d25e8699"],

Cell["\:53d1\:7535\:7ad9\:7684\:9884\:671f\:6536\:76ca", "Item",
 CellChangeTimes->{{3.8229333515934334`*^9, 
  3.822933415991639*^9}},ExpressionUUID->"3ebe8399-1011-4bde-a058-\
f7dca6ab6a03"],

Cell["\:7f51\:7ad9\:7684\:94fe\:63a5\:7684\:70b9\:51fb\:91cf", "Item",
 CellChangeTimes->{{3.8229333515934334`*^9, 
  3.8229334270481453`*^9}},ExpressionUUID->"90c34a18-28c4-4e96-a095-\
cc84adb43431"],

Cell["\:6307\:5b9a\:533a\:57df\:7684\:5171\:4eab\:5355\:8f66\:6295\:653e\:6570\
\:91cf", "Item",
 CellChangeTimes->{{3.8229333515934334`*^9, 
  3.8229334700027647`*^9}},ExpressionUUID->"1e2becca-2bdc-4e71-b54f-\
bb7d04fb13fa"],

Cell["\:7b49\:7b49", "Text",
 CellChangeTimes->{{3.8229333515934334`*^9, 
  3.8229334746281023`*^9}},ExpressionUUID->"9e52b1fd-0d24-4eb5-a878-\
c6b192eee9dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 ButtonBox["Predict",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Predict.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Predict.html"],
 ": Wolfram\:8bed\:8a00\:4e2d\:5185\:7f6e\:7684\:9884\:6d4b\:548c\:56de\:5f52\
\:51fd\:6570"
}], "Section",
 CellChangeTimes->{{3.705643802230044*^9, 3.705643805547908*^9}, {
   3.70565029504084*^9, 3.705650296423233*^9}, {3.705662015811219*^9, 
   3.705662017656415*^9}, {3.7057506318797817`*^9, 3.705750632811615*^9}, {
   3.813318461495941*^9, 3.813318462247773*^9}, 3.814187674578329*^9, {
   3.82293349206927*^9, 
   3.8229335089025183`*^9}},ExpressionUUID->"4377d5c2-a1be-4db8-8db7-\
f4a51ce0425e"],

Cell["\:6211\:4eec\:968f\:673a\:4ea7\:751f\:4e00\:7ec4\:8bad\:7ec3\:6570\:636e\
\:3002\:6570\:636e\:7531\:6570\:503c\:7279\:5f81/numeric feature \:548c\:76ee\
\:6807\:8f93\:51fa/target", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.8142860647048388`*^9, 3.814286085233502*^9}, {3.8229335286256485`*^9, 
  3.822933576171817*^9}},ExpressionUUID->"53590bbc-1336-48a4-a319-\
feb6d483c326"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1.3"}], ",", 
     RowBox[{"2", "\[Rule]", "2.4"}], ",", 
     RowBox[{"3", "\[Rule]", "6.4"}], ",", 
     RowBox[{"4", "\[Rule]", "10.1"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[24]:=",
 CellID->333472059,ExpressionUUID->"4374978f-3706-442c-8354-b5a0814a0fd9"],

Cell["\:8bad\:7ec3\:9884\:6d4b\:5668", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286094854479*^9, 3.814286106384598*^9}, {3.8229335870723433`*^9, 
  3.8229335932859936`*^9}},ExpressionUUID->"4b75f647-f3dd-4376-9e0e-\
8eb60c6bfaf5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "=", 
  RowBox[{"Predict", "[", "trainingset", "]"}]}]], "Input",
 CellLabel->"In[28]:=",
 CellID->1238196041,ExpressionUUID->"8794654c-c176-4317-8aa1-48c5ff699ad5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LinearRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2729918768343498454]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 4, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {2.5}, "Method" -> "Naive", "VectorLength" -> 1, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {2.5}, 
                   "StandardDeviation" -> {1.118033988749895}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{1.}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {2.5}, 
                    "StandardDeviation" -> {1.118033988749895}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 1, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0078922, "MaxTrainingMemory" -> 105400, 
                  "DataMemory" -> 176, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 2, 28, 21, 29, 57.6841699`9.513631481017658}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             1606623927450839390]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Mean" -> {2.5},
              "StandardDeviation" -> {1.118033988749895}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7146872191784791279]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 165603422009605739]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {5.050000000000001}, 
             "StandardDeviation" -> {3.4788647573597906`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4130492645139583438]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 440749166914930942]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (5.050000000000001 + 
       3.4788647573597906` #& ), 
      "ProcessorFunction" -> (-1.4516229724988188` + 0.2874500935641225 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.0779378508654596`, 1.4516229724988183`}], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["MeanFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> RawArray["Real32",{{0.9767991304397583}}], "Biases" -> 
           RawArray["Real32",{-1.8137717669881306`*^-16}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 1, 
           "$InputDimensions" -> {1}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.2.14", "Unstable" -> False]], 
      "DistributionData" -> {NormalDistribution, 0.302848758384709}, 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.0011099324182048398`}, 
             "StandardDeviation" -> {1.0035717962936384`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4087628807428712531]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Calibrator" -> None, "Method" -> 
      "LinearRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.00001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "NormalEquation", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[101537], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 1.246706021415856, "PreprocessingTime" -> 
      0.083776`6.374664614030616, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[2.643333330124382, 0.40083145440108714`],
          "StandardDeviation" -> 
         Around[3.2446799693351296`, 1.0180563185179932`], "EvaluationTime" -> 
         0.0003981071705534969, "TestSize" -> 2, "ModelMemory" -> 16136., 
         "ModelUtility" -> -1.9310277780620044`, "TrainingSize" -> 3, 
         "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
         63530.666666666664`, "ExperimentCount" -> 2, 
         "MeanCrossEntropyHistory" -> {
           Around[2.956906647538913, 0.33501333170496167`], 
           Around[2.3297600127098512`, 0.37445794309028485`]}, 
         "StandardDeviationHistory" -> {
           Around[3.3103283340533434`, 1.345079560470639], 
           Around[3.179031604616916, 1.5501498710507133`]}, 
         "Configuration" -> {
          "LinearRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.00001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 4], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.6412638418224157`, 0.118800603095334], 
              "StandardDeviation" -> 
              Around[3.397545599893248, 0.8842740425055672], "EvaluationTime" -> 
              0.0002945480583948779, "TestSize" -> 2, "ModelMemory" -> 20480.,
               "ModelUtility" -> -1.9669464174576685`, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.009314427449080937, "TrainingMemory" -> 
              61082.666666666664`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6501927052097867`, 0.16625006856862726`], 
                Around[2.632334978435045, 0.16884861123064518`]}, 
              "StandardDeviationHistory" -> {
                Around[3.525088651367509, 1.1207623721264137`], 
                Around[3.2700025484189865`, 1.4003758269650208`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002945480583948779, "ModelMemory" -> 
             20480., "StandardDeviation" -> 
             Around[3.397545599893248, 0.8842740425055672], "TrainingMemory" -> 
             61082.666666666664`, "TrainingTime" -> 0.009687004547044175], 
           "Index" -> 1], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.6750567109623837`, 0.11747432643006037`], 
              "StandardDeviation" -> 
              Around[3.4920988957715196`, 0.8689691895299263], 
              "EvaluationTime" -> 0.0027286835077291794`, "TestSize" -> 2, 
              "ModelMemory" -> 97224., "ModelUtility" -> -2.093112061708461, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.01104059686104205, 
              "TrainingMemory" -> 154704., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.681166839536286, 0.16625662987642612`], 
                Around[2.668946582388481, 0.1655633686424667]}, 
              "StandardDeviationHistory" -> {
                Around[3.8030786344715484`, 0.9532233808561937], 
                Around[3.181119157071491, 1.546196193336709]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0027286835077291794`, "ModelMemory" -> 
             97224., "StandardDeviation" -> 
             Around[3.4920988957715196`, 0.8689691895299263], 
             "TrainingMemory" -> 154704., "TrainingTime" -> 
             0.011482220735483733`], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.695681921030239, 0.11914452101128718`], 
              "StandardDeviation" -> 
              Around[3.8770200736617397`, 0.659214943867188], 
              "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 2, 
              "ModelMemory" -> 6256., "ModelUtility" -> -2.0816561858520854`, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.0030016148561847096`, 
              "TrainingMemory" -> 67477.33333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7012250402501126`, 0.16931124181960883`], 
                Around[2.6901388018103662`, 0.1673328831827681]}, 
              "StandardDeviationHistory" -> {
                Around[3.9266716103161103`, 0.9157541371532996], 
                Around[3.8273685370073696`, 0.9441408047854815]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00019952623149688788`, "ModelMemory" -> 
             6256., "StandardDeviation" -> 
             Around[3.8770200736617397`, 0.659214943867188], "TrainingMemory" -> 
             67477.33333333333, "TrainingTime" -> 0.003121679450432098], 
           "Index" -> 3], 
         Association[
          "Value" -> "GaussianProcess", "Options" -> 
           Association[
            AssumeDeterministic -> Association["Value" -> False], 
             "CovarianceType" -> 
             Association[
              "Value" -> None, "Options" -> 
               Association[
                "Numerical" -> Association["Value" -> "SquaredExponential"], 
                 "Nominal" -> Association["Value" -> "HammingDistance"]]], 
             "EstimationMethod" -> Association["Value" -> "MaximumPosterior"],
              "OptimizationMethod" -> Association["Value" -> Automatic], 
             "SearchMethod" -> Association["Value" -> "SimulatedAnnealing"], 
             "InputFeatures" -> Association["Value" -> {}]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.550940694686478, 0.14689898742084864`], 
              "StandardDeviation" -> 
              Around[3.3569711809519625`, 0.91641611964249], "EvaluationTime" -> 
              0.001995262314968879, "TestSize" -> 2, "ModelMemory" -> 20048., 
              "ModelUtility" -> -2.0268830077471787`, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.13675813386831492`, "TrainingMemory" -> 
              173808., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.58951418668365, 0.18219812998783932`], 
                Around[2.512367202689305, 0.2255975892245066]}, 
              "StandardDeviationHistory" -> {
                Around[3.4928052721143312`, 1.1483944750390183`], 
                Around[3.2211370897895937`, 1.4756675852144565`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.001995262314968879, "ModelMemory" -> 20048.,
              "StandardDeviation" -> 
             Around[3.3569711809519625`, 0.91641611964249], "TrainingMemory" -> 
             173808., "TrainingTime" -> 0.14222845922304753`], "Index" -> 4], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.6304348823955648`, 0.12841667438788962`], 
              "StandardDeviation" -> 
              Around[3.557987791343134, 0.8057221477063417], "EvaluationTime" -> 
              0.00018584726074662898`, "TestSize" -> 2, "ModelMemory" -> 
              5760., "ModelUtility" -> -2.006638850917967, "TrainingSize" -> 
              3, "TrainingTime" -> 0.0037081403570794393`, "TrainingMemory" -> 
              66525.33333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6695640975305803`, 0.165576835534095], 
                Around[2.5913056672605497`, 0.1814568704204407]}, 
              "StandardDeviationHistory" -> {
                Around[3.7745063449606424`, 0.9650053545472219], 
                Around[3.341469237725625, 1.3058369380982917`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00018584726074662898`, "ModelMemory" -> 
             5760., "StandardDeviation" -> 
             Around[3.557987791343134, 0.8057221477063417], "TrainingMemory" -> 
             66525.33333333333, "TrainingTime" -> 0.003856465971362617], 
           "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.643333330124382, 0.40083145440108714`], 
              "StandardDeviation" -> 
              Around[3.2446799693351296`, 1.0180563185179932`], 
              "EvaluationTime" -> 0.0003981071705534969, "TestSize" -> 2, 
              "ModelMemory" -> 16136., "ModelUtility" -> -1.9310277780620044`,
               "TrainingSize" -> 3, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 63530.666666666664`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[2.956906647538913, 0.33501333170496167`], 
                Around[2.3297600127098512`, 0.37445794309028485`]}, 
              "StandardDeviationHistory" -> {
                Around[3.3103283340533434`, 1.345079560470639], 
                Around[3.179031604616916, 1.5501498710507133`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[3.2446799693351296`, 1.0180563185179932`], 
             "TrainingMemory" -> 63530.666666666664`, "TrainingTime" -> 
             0.005212347229723628], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.962768566564927, 0.48100520604832564`], 
              "StandardDeviation" -> 
              Around[3.311365914238839, 1.900316101608451], "EvaluationTime" -> 
              0.0003981071705534969, "TestSize" -> 1, "ModelMemory" -> 16136, 
              "ModelUtility" -> -1.9991626468993942`, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.003981071705534969, "TrainingMemory" -> 
              62584, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.962768566564927, 0.3401220429828036]}, 
              "StandardDeviationHistory" -> {
                Around[3.311365914238839, 1.3437264018453199`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "ModelMemory" -> 16136,
              "StandardDeviation" -> 
             Around[3.311365914238839, 1.900316101608451], "TrainingMemory" -> 
             62584, "TrainingTime" -> 0.004140314573756368], "Index" -> 7], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.956966538353319, 0.4738540362914916], 
              "StandardDeviation" -> 
              Around[3.310337671410083, 1.902212514887956], "EvaluationTime" -> 
              0.0003981071705534969, "TestSize" -> 1, "ModelMemory" -> 16136, 
              "ModelUtility" -> -1.9989868295668405`, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
              62576, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.956966538353319, 0.3350654023543301]}, 
              "StandardDeviationHistory" -> {
                Around[3.310337671410083, 1.3450673685351902`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "ModelMemory" -> 16136,
              "StandardDeviation" -> 
             Around[3.310337671410083, 1.902212514887956], "TrainingMemory" -> 
             62576, "TrainingTime" -> 0.005212347229723628], "Index" -> 8], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.949139015929584, 0.4642616401163742], 
              "StandardDeviation" -> 
              Around[3.320570059696006, 1.8835408008831884`], 
              "EvaluationTime" -> 0.0003981071705534969, "TestSize" -> 1, 
              "ModelMemory" -> 16136, "ModelUtility" -> -2.0007458971902374`, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.003981071705534969, 
              "TrainingMemory" -> 62640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.949139015929584, 0.3282825539710767]}, 
              "StandardDeviationHistory" -> {
                Around[3.320570059696006, 1.3318644729460432`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "ModelMemory" -> 16136,
              "StandardDeviation" -> 
             Around[3.320570059696006, 1.8835408008831884`], "TrainingMemory" -> 
             62640, "TrainingTime" -> 0.004140314573756368], "Index" -> 9], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.5539076448201468`, 0.2824374715245833], 
              "StandardDeviation" -> 
              Around[3.3987040885709607`, 1.7541359251458861`], 
              "EvaluationTime" -> 0.0003981071705534969, "TestSize" -> 1, 
              "ModelMemory" -> 16136, "ModelUtility" -> -2.0147798029524164`, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 62640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5539076448201468`, 0.19971345137621527`]}, 
              "StandardDeviationHistory" -> {
                Around[3.3987040885709607`, 1.240361407793594]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "ModelMemory" -> 16136,
              "StandardDeviation" -> 
             Around[3.3987040885709607`, 1.7541359251458861`], 
             "TrainingMemory" -> 62640, "TrainingTime" -> 
             0.005212347229723628], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GaussianProcess", "GradientBoostedTrees", 
             "LinearRegression", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value", "Options"}, {TypeSystem`AnyType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[String]}], 2]}], TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 4, "PreprocessorEvaluationTime" -> 
      4.36015625*^-6, "PreprocessorMemory" -> 37264, "InputDimension" -> 1, 
      "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8235365977719359`17.33504024064432*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 3, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.4228745, "ExperimentCounts" -> 16]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           5450862126438409522]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.5926874, 
      "MaxTrainingMemory" -> 515120, "DataMemory" -> 424, "FunctionMemory" -> 
      176224, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 28, 21, 29, 58.2596287`9.517942543420101}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.82293367317759*^9, 3.823558065295368*^9, {3.8235581903812566`*^9, 
   3.8235581982855606`*^9}},
 CellLabel->"Out[28]=",ExpressionUUID->"1c04ca21-43be-4ec1-a457-6358030df6e7"]
}, Open  ]],

Cell[TextData[StyleBox["\:5728\:6d4b\:8bd5\:6837\:672c\:4e0a\:6d4b\:8bd5\:9884\
\:6d4b\:5668\:ff0c\:6839\:636e\:5206\:5e03\:548c\:5b9e\:7528\:529f\:80fd\:83b7\
\:5f97\:6700\:4f73\:9884\:6d4b\:ff1a", "Text"]], "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.8142861154194317`*^9, 3.8142861229650793`*^9}, {3.814286209190619*^9, 
   3.81428622610951*^9}, 
   3.822933641246617*^9},ExpressionUUID->"13adfda6-78c8-4b29-8767-\
11d1e191dac5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "[", "1.5", "]"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"635fb4c2-c821-4c0d-8da7-4e1dfdae3d16"],

Cell[BoxData["2.0176595726779016`"], "Output",
 CellChangeTimes->{
  3.8229336746537094`*^9, {3.823558164051839*^9, 3.82355819979427*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"22d2e1b8-28b6-42b0-9f1a-ffc3c40bf34b"]
}, Open  ]],

Cell["\:8be2\:95ee\:57fa\:4e8e\:8f93\:5165\:7279\:5f81\:503c\:7684\:9884\:6d4b\
\:76ee\:6807\:503c\:7684\:5206\:5e03", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, 3.814286249404306*^9, 
   3.8229336680628166`*^9, {3.8235582996572084`*^9, 
   3.823558302096612*^9}},ExpressionUUID->"d6154b44-c2f9-419e-a078-\
185d26383c59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dist", "=", 
  RowBox[{"p", "[", 
   RowBox[{"1.5", ",", "\"\<Distribution\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.705650519570907*^9, 3.7056505280532503`*^9}, {
  3.705657548478881*^9, 3.70565754917568*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"c1fc86e4-6f41-46d2-99ab-080e57af87bc"],

Cell[BoxData[
 RowBox[{"NormalDistribution", "[", 
  RowBox[{"2.0176595726779016`", ",", "1.0535698723547344`"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.822933676726276*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"c5d95d49-d2bd-4bf1-bc00-372531164258"]
}, Open  ]],

Cell["\:7ed8\:5236\:9884\:6d4b\:503c\:5206\:5e03\:7684\:6982\:7387\:5bc6\:5ea6\
\:51fd\:6570", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286257836487*^9, 
   3.814286297323403*^9}, 
   3.82293370566978*^9},ExpressionUUID->"d5cf3889-cefe-4c50-96a7-\
f103b47c91a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"PDF", "[", 
    RowBox[{"dist", ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.705657541820365*^9, 3.7056575796863747`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"a1ac2214-6005-4da6-8800-6305afb2eba3"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
qs5b8+K1LPgfP8G90w==
       "]]},
     Annotation[#, "Charting`Private`Tag$110553#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.060514738271460054`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 4}, {0.060514738271460054`, 0.37865762089477845`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8229336844487443`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"bd617360-c3cb-4500-b1dc-28d211ff89b4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:793a\:4f8b\:ff1a\:4eea\:8868\:677f\:8bfb\:6570\:9884\:6d4b", "Section",
 CellChangeTimes->{{3.705643802230044*^9, 3.705643805547908*^9}, {
   3.70565029504084*^9, 3.705650296423233*^9}, {3.705662015811219*^9, 
   3.705662017656415*^9}, {3.7057506318797817`*^9, 3.705750632811615*^9}, {
   3.814099223349203*^9, 3.8140992332948017`*^9}, {3.814214790629027*^9, 
   3.814214792279901*^9}, 
   3.822933784401845*^9},ExpressionUUID->"7c951d13-3c9f-4dfc-bdba-\
719a8a610d60"],

Cell["\:8bbe\:7f6e\:4eea\:8868\:8bfb\:6570\:56fe\:50cf\:57f9\:8bad\:6570\:636e\
\:96c6", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.8142863153458977`*^9, 
   3.814286330443421*^9}, 
   3.8229338108527346`*^9},ExpressionUUID->"84a3d715-fdf6-4a06-8982-\
2e25b10e885f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Image", "[", 
       RowBox[{"AngularGauge", "[", "#", "]"}], "]"}], "\[Rule]", "#"}], 
     "&"}], "/@", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", "100"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[31]:=",
 CellID->876830498,ExpressionUUID->"b92eb6c1-8c4e-4cad-b72d-77d117b77dc3"],

Cell["\:9009\:53d6\:4e09\:4e2a\:5143\:7d20", "Text",
 CellChangeTimes->{{3.822934205494626*^9, 
  3.82293421188358*^9}},ExpressionUUID->"0426829f-0ca3-475f-9627-\
07d673add5c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingset", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[35]:=",
 CellID->296396957,ExpressionUUID->"68e2a877-1f53-440f-b181-319d9c9c852a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
       "], {{0, 180.}, {180., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->72.],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{180., 180.},
     PlotRange->{{0, 180.}, {0, 180.}}], "\[Rule]", "0.4248387710529611`"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztnc+LJVcVxwd14dI/of0XBEERJs+FC0EUIrruBMfgZoREEBcyMDCuBgID
k8wg2DAwszEQGAwSCfRCCAQDA8EsAsKDgcGdA1m4fc73+b7Nmdvn/qiqW3Wr
Xn0/cDPp7ve6X9X91qnvPffcW998/dev/vIrV65ceevrL/7z6mu//f6bb772
u59+48UXP7v+1q/euH7tFz+8/ptrb1x78zuvf/XFN/9yaF+7IoQQQhwv7777
7smhbQ7t1LZ79+7dQAu+vzHtpPUxiHVx0OuFNu/fv3/+om1ftF2ltj00/N4z
o/uT1sculo3V7kFfrgbPzs727dGjR7v33ntv9/jx44v24YcfJhteg/eg4f1o
Ga1f6Lz1+RHzJtCvq1vqFVo8Pz/fffrpp6O0jz/+eN+s5vH3IxqXvsUeaNiL
v4y30NKYuu2jc3wefK5ILN8ePPqm9bkV02A0vA01PDf9lsbxiL6p7ZPW51zU
B/dk3Js9DdfyBWzWD7PRZzP202+z0VPjesLv7Pt58DsCbcuTHAkmFg/WMONg
4l6fbDdu3Oj0emqfWu9634hpWzF7eXg6hg5L416BT73w13zPF198sXv27Nm+
ffnll7sQ6NmC17DhPXg/Gv8uWmpcCq12vRadmL1p3VciDnRsPUWXWGx96Dvv
vLNvVrt8HbTXh1DPJVDvVudW23fu3Onk+3mMQa5Eup4ZfXUc6d/drVu3dg8f
Puyt3Vp69mA8/+CDD3Z37951Y3dO2xEvciYf0pbQV6A/c/fhmIapf7Ddbvc/
r0ktPZP3339/9+TJk5fitzdOyHksvM/oWv66EX10jNgV07Dl+fPnu7fffruq
/mrrGZ8Pn9Piabs0ZuP8mWt8r+vWfbwG4PWYOy7xFWEsphfOgfcgTteitp5z
vw/a5vGXXvfOvWsrbz0OobfoqmPEJ8SuUvBevKcWNf0LfAb8RinQdhizU+cv
zIfIg9TlEJMv+iJ17wxzAPielz/LMYaHrgW9c1cYs7voWh6kLjZvkTr30LiN
x311TMbw0LXwvHMXPF3HfIgXq1trYokccnDnuZiM882cMTU/RMeWmv65JkO0
bLG6xjWC8xzLh4SxWv6jnEOtxf7cYWye8xbQMnLGn332WZV+Xhs4b9BzzoME
sVr+o4D7pnYzFZMZKxCbMc5DLJ2rP5g7zOXg3DIXnbon2rGlNO0T+ovYfc96
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
tf58QgghhBCiP/8D7HPFpw==
       "], {{0, 180.}, {180., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->72.],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{180., 180.},
     PlotRange->{{0, 180.}, {0, 180.}}], "\[Rule]", "0.20227803347617357`"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztnc2LHNcVxUWSRZb5Eyb/QlZZhc4ykJVDsh6bKCYbBexAyEogUFYCg0C2
tMmAQF4ZDCYmOBhmETCIGAQmIhgCDQYluwi0yLaj0+kzXF3d91X1qt6rqvuD
Z3lmume6q06fOu++j/r+W79541ffunbt2rvfffmfN9783Y/feefN3//sey+/
+PmNd3/99o3rv/zJjd9ef/v6Oz9869svv/mnU/vONcdxHMdZLx988MHZqe1O
7Vy2+/fv30RT39+Jdtb6PTjb4qTXK20+ePDg8mXbv2yHSm1/avi9F0L3Z63f
u7NspHZP+jI1eHFxcWwffvjh4aOPPjp88sknV+2zzz6LNjwGz0HD89ESWr/S
eevj4/SN0q+pW+oVWry8vDx8+eWXk7Qvvvji2KTm8fcDGnd9O0egYct/6bfQ
0pS6HaJzvB68roCX708Zfdf62DrzIDS81xruTb+5Ph7QN7V91vqYO/XBNRnX
ZkvDtXIBm8zDbMzZ9H7mbTZmanye8DuHvh78DqVtzyQrQXjxaA3TByPX+mi7
efNm0eOpfWq99LoR0rZ79vKwdAwd5vpeRk69ytd8ztdff3149uzZsb148eKg
gZ4leAwbnoPno/HvosX6pdBq6WfR8Oxd63PlhIGOZaYo8WKZQ99///1jk9rl
46C9IWg950C9S51Lbd+9e7co9/M9qlqJ67ozhuo4cH4Pt2/fPjx69Giwdmvp
2YJ+/umnnx7u3btnendK24EscuE5pC06V+B8pq7DIQ1T/2C/3x9/XpNaeiYf
f/zx4cmTJ6/4t9VPSGUsPE/o2vN1I4boGN4V0rDk+fPnh/fee6+q/mrrGa8P
r1NiaTvXs3H8xGf8qOvW53gLIOuxdpyTK7QXMwunwHPg07WorefU74O2+f5z
P/fGtWvv2XoadLYo1TH8Cd6VC56L59SiZn5BzkDeyAXa1p4dO366HuIZpC4n
T746F7Frp64B4HtW/SzFFBm6FszOpdCzS3TtGaQusm4RO/bQuPTjoTomU2To
WljZuQRL16EcYnl1a00skVMN7jLlyTjerBlT82N0LKmZn2syRssSqWt8RnCc
Q/UQ7dWeP/I5zbU4Hjv0zVPZAlpGzfirr76qcp63Bo4b9JzKIMqrPX9k8EDM
3Yx5Mr0C3ox+Hry013zQO6zl4NiyFh27Jsq+pWvaRueL0HVPZjldf8DzhvST
tgyOl+z3ygyS8mrPHzYnLe/1XAkrJ/Mx1li0e3Q5OF5WPwG6ll5t+YvOH67p
V2txIS9A31s+JoZ7dD6pOnaOVxua3rXWVCuklkP1IjlGnTMe0nOdrTcwxphT
w5G1vZDnbL2fKLVs9Tty8kUIeE7J+NkWwTEvHWNM5Q9xHd2UpmU9LqTl3Hxh
QY+uVaddI/Dm0uOj80coU2+p9pHSsqwF4euhlPrPlsBxGTM3JSdTs/axZk0z
Y4Rqm1LLJXOHLOA9+Dvu0a9To3+B85PS9JqzRyovyxpGzXUhznQgf8T6iWvV
dK6WS/t9TntkPzGl6TXU8k5jJVEtY13nnTt3XMsLBZpG7sB5tDQtcuTix1w4
7hfz5YcPH/o4yIJBDRv1EvYBLU3LWt5SNc35GInP7NGXWWPrdY6mY0Mt41/m
6VAfUY65tNZmKZyHb83H0FomNTW92+1eaSXPWwIl72/osUghtUykpvU1WY6R
QR+tNZqLrMvlapkgc4wdC7HOWc55rH2+p6Lk/Q09FilwfkLj5VLTesxFanoJ
e+ql+n/MWLG+HzU9FNdz+vtjSc39kPVpS9NLydLMzJaW+bnMGfeb25/5c9dz
PeQ4Yqx/2FqzIbifgJWZOU9uyHyMUlzPr39/ivycQu6TYK2bE3Mnu8vSOZkZ
Op+DUj3Ln61Rz/pnc2ua12U9J1jO8+htrCVUZ5bzreYaL3E9D3vsVKT6h73l
DtbmrJojP5tj5xeVMMS/pqppTcHS9Axk/zBSl26eO2I5g69zjswsGXMOe9cy
WKKeAXOn9j2RO5rP8QjVM+bOzJqY3+Zmj54peX+9XHuYpa2xFjnHo5WWOTff
qmcwZ/gcI0cSyx2sd7QaZ2E/T2d81hbnzhnOMojljlYezVpz5DVV20fOWRex
ekervqFc46dzBvaTm7Oe4SwP6AM60eMsLfqGrM/p+jiuI3iNt27dqroXuLM+
4MOYAwK96L6hGAuf3KM538jK8+wDPn369Phzn8+8Xf7772eHZ39+vf/Edcpo
0IlVTxBz8Cb36JA3W31A7vXnXr0t/vnH+4e//OgHh7/+4qdHXQPoGDqAx0k9
MC+H9DS1R6e8Wdfn5Ptwr1438GPoWLa/3bh+NVfa8jXZN4x49NlEWo56c8yH
fR+M9QIPhm61lunR//rH0+j5p0fPnaNjNQ2vz20P6Pjvf7hp6pjenEPMo1nr
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

       "], {{0, 180.}, {180., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->72.],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{180., 180.},
     PlotRange->{{0, 180.}, {0, 180.}}], "\[Rule]", "0.6961937895975254`"}]}],
   "}"}]], "Output",
 CellChangeTimes->{
  3.822934430245892*^9, {3.823559592760003*^9, 3.823559621995348*^9}},
 CellLabel->"Out[35]=",ExpressionUUID->"121a8a2a-b534-4a9e-b565-8dc3a180e49b"]
}, Open  ]],

Cell["\:57fa\:4e8e\:56fe\:50cf\:8bad\:7ec3\:9884\:6d4b\:5668", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.8142863507618637`*^9, 
  3.814286363473371*^9}, {3.8229342297265387`*^9, 
  3.8229342382279153`*^9}},ExpressionUUID->"4d3074ce-89d6-4ac0-bd65-\
c097b5e14af6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"predictor", "=", 
  RowBox[{"Predict", "[", "trainingset", "]"}]}]], "Input",
 CellLabel->"In[36]:=",
 CellID->444256135,ExpressionUUID->"ed1fcd3c-411e-486f-83b6-32e770a5abb1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["PredictorFunction", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{}, {{}, {
                    PointSize[0.125], 
                    GrayLevel[0.55], 
                    
                    PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {
                    3, 1.3}, {4, 4.}}]}, {
                    GrayLevel[0.7], 
                    AbsoluteThickness[1.5], 
                    
                    BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 
                    2}, {5, 4}}]}}, {}}, Axes -> {False, False}, 
                  AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                  BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {All, All}, PlotRangeClipping -> True, 
                  PlotRangePadding -> {{1, 1}, {1, 1}}, Ticks -> {None, None},
                   Axes -> False, AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{}, {{}, {
                    PointSize[0.125], 
                    GrayLevel[0.55], 
                    PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {
                    3, 1.3}, {4, 4.}}]}, {
                    GrayLevel[0.7], 
                    AbsoluteThickness[1.5], 
                    
                    BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 
                    2}, {5, 4}}]}}, {}}, Axes -> {False, False}, 
                  AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                  BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {All, All}, PlotRangeClipping -> True, 
                  PlotRangePadding -> {{1, 1}, {1, 1}}, Ticks -> {None, None},
                   Axes -> False, AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["100", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[PredictorFunction, 82298712, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           PredictorFunction, 
            6600922282613669687424955733792796002218231022933154549920, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("PredictorFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 6600922282613669687424955733792796002218231022933154549920,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8229344374989204`*^9, 3.823559647900813*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"6e05b880-ff96-441a-8ff3-35cccb7718b3"]
}, Open  ]],

Cell["\:4ea7\:751f\:4e00\:5f20\:6d4b\:8bd5\:56fe\:7247", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286381226613*^9, 
  3.8142863893033333`*^9}, {3.822934254138232*^9, 
  3.8229342622264557`*^9}},ExpressionUUID->"0756a7b8-4ed1-46a7-873b-\
ee13ef1dd634"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{"AngularGauge", "[", 
   RowBox[{"RandomReal", "[", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.814099373636009*^9, 3.8140993779187737`*^9}, {
  3.8142864128980837`*^9, 3.814286416461904*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"c058c81d-ec84-45fb-87a8-f735c90ced44"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnc+LHMcVx0WSQ475Ezb/Qk45hckxkJNDcl6bKCYXBexAyEkgUE4CgUCy
dMmCQD4ZDCYmOBj2EDAYGwQmPhgCAwaRWww+5DrRdzzf5W3pvfrRXd1V3f0+
ULZ2d2Z3pvs7r7/13qvqH7/xh9d+970bN268/cOX/3nt9T/9/K23Xv/zr370
8otf33r792/euvnbX9z64803b7710ze+//KbfzuNH9xwHMdxnPXyzjvvnJ3G
7jTO5Xj8+PFtjOD7OzHOWr8HZ1uc9HqlzSdPnly+HPuX41Bp7E8Dv/dC6P6s
9Xt3lo3U7klfqgYvLi6O49133z289957hw8++OBqfPTRR9GBx+A5GHg+RkLr
VzpvfXycvgn0q+qWeoUWLy8vD59//vkk45NPPjkOqXn8fUPjrm/nCDSsxV/G
W2hpSt0O0TleD16XEcv3J4++a31snXkQGt6HGu5Nv7lx3NA3tX3W+pg79cE1
GddmTcO1fAGH9MMc9NmM/fTbHPTU+Dzhdw59Pfgdgbbdk6wEEYtHa5hxMHKt
j47bt28XPZ7ap9ZLrxuWtj1mLw9Nx9BhbtzL8KlX/prP+eqrrw4vXrw4jm+/
/fYQAj1L8BgOPAfPx+DfxYjNS6HV0s+iErN3rc+VYwMdS09REoulD3306NFx
SO3ycdDeEEI950C9S51LbT948KDI9/M9BrkS13VnDNWxcX4Pd+/ePTx79myw
dmvpWYPx/MMPPzw8fPhQjd0pbRte5MJ9SFtCX4HzmboOWxqm/sF+vz/+vCa1
9Ezef//9w/Pnz6/Fb22ekPJYeJ7QtfvrRgzRMWKXpWHJN998c7h//35V/dXW
M14fXqdE03ZuzMbxE5/xo65bn+MtAK/H3HGOrwhjMb1wCjwHcboWtfWc+n3Q
Nt9/7udeuXbt3VtPQ+gtSnWM+ITYlQuei+fUoqZ/gc+A38gF2g5jduz4hfkQ
9yB1OcXkq3MRu3aGOQB8T8ufpRjroT+7dfPwz9/88jjw75rQO5fCmF2ia/cg
dZF5i9ixh8ZlPB6qYzLWQ0PH//jZT46jtp4171yCpmvLh2ixurUmlsgpB3eZ
isk43swZU/NjdCwZ45+lnvHvmozRskTqGp8RHGcrHxLGavcf+Zx6LY7HDnPz
lLeAlpEz/uKLL6qc5xpMqefa4LhBzykPEsRq9x8ZPBG9m7GYzFiB2Ix5HmJp
7RzbGKSeMXqGuRwcW+aiY9dEObd0TeuE/sK67kkvF+Yf8Lwh86QpWIqecbzk
vFd6kFSsdv+hc9LyPuyV0HwyH6PVonuK0aGe//eferXzmuB4afME6FrGai2+
hP7DNX09F2fFAsy95WNi9BKjQz3/93m6hjM3qTx2TqxWNL1rralWSC1b+SJZ
o86ph0xRqx7CEvSMGmNODkfm9qyYs/V5otSyNu/I8RcWiDkl9bMp6F3POOal
NcaU/xDX0U1pWubjLC3n+gsNxuhaedohhHp+8ffy9zEliM2lxyf0H5an3lLu
I6VlmQvC10MpjT+1CfX8778+bvZaQnBcxvSm5Hhq5j7WrGl6DCu3KbVc0juk
gdiDv9MqRves5xrzC5yflKbX7D1SflnmMGquC2lFz3quBfxHbJ64Vk3narl0
3tczoZ7/9ZfbrV/SJMh5YkrTa8jlnWolUS1jXee9e/dWo2UQ6rl2j11PQNPw
HTiPmqaFj1x8zYV1v1hcfvr0aTd1kFpsSc/IYSNfwjmgpmmZy1uqptmPkfjM
HuMyc2w11zi1JNRz7z12Q6GW8X/6aWuOKGsurbVZCvvwtX6MUMukpqZ3u921
UfK8GiAeT6nnkvc39FikkFomUtPhNVnWyKCP1hrNReblcrVM4DnG1kK0c5Zz
Hmue7yn1XPL+hh6LFDg/Vr1cajqsuUhNL2FPvdT8jx4rNvejpofSo55r9oyO
1XMNUr0fMj+taXopXpqeWdMyP5c5db+54zN/PqWea/WM9qDnHGQdMTY/bK1Z
C+4noHlm9skN6ccoxfX86ven8M8p5D4J2ro50TvZnZfO8czQ+RyU6ln+bEo9
1+qxK9Vz+LO5Nc3rctgTLPs8equ1WHlm2W81V73E9TzssVORmh/25juYm9Ny
jvxsju0vKmFI/Kqd09L0XKtndGl6BnJ+GMlLN/cdMZ/B1zmHZ5aMOYdTxuda
PUlL1DOg7wzjnvAdzXs8rHzG3J45JBZvc73HGKbUMyh5f1PVU0qhl9ZqLbLH
o5WW2Zuv5TPoM9bUY1TC1HpeKjHfwXxHqzoL53mhx2ducW6f0ROantfaM1pK
zHe0itHMNUdeU7V95JaIpuc199iVEMt3tJobyjV+oc/AfnJz5jN6xPUcB/qA
TsI6S4u5IfNzYX4c1xG8xjt37lTdC3yJaHpea8/oEBCH0QMCvYRzQ1ELnzxG
s99I8/OcA3755ZfHn6+pn7kU17MO1yljQCdaPkH04E0eo63YrM0BudffFmO1
6/k60DF0gBgn9UC/bOlp6hidis1hfk6+jy3Fak3PPe8zOiXsldbimpwbRmL0
2URajsbmWBxuuVdRCyw997rP6JTg3MfOP2P03D46ltPYen4uxPWcTyxGM9dR
W8usBYb55pzYvEVQO9H03Nu+jL1gxWh+v3bNkP2gYf5763VtC9dzGYzRWq6j
ds2QsTnMfcu6pXMdS8+97TPaE1aMFutndzX0zHlg+HfYP7L1WqCG67kcXONj
cRO9nJX0rM4D+X3nVSw9e4+djTUvFDF6tOewvIbPA+O4nofBOBnmhMW8cDcy
Nl/G5oGeo9Ox9Ow9o3Ey5oWjPEfMa/g80MbSs/fYpUnMCwd7jpTX8Hmgjet5
OFzDEtY6xuaimddwr1GOpect9yTlMpXniHkNnwfGcT2Po7bncK8xDtfzOOQc
rUZthesDw7wJayjuNeJYet5qz2gpludgbaX0/kJWng7f43qqLfUzlxLTs/fY
xWHP/N27d9WeuyEeWvPOiNVcw4i/xzVVuD/jmu59UgPXcz7ULwb6/rmGhV5g
rIcu8c54LdAyNI3X4nxHTM/eY3cdaEdbl8d+jkjebpejZ/fO43E9j6eWh7by
ztyr10kT07P32OXD/e7GeGj27nveeTjoO3I9j4feQsbW0h5/LcbTO+PfTpqY
nr3HLh8ZR7U8dErL3M85nAvyc+J1lDxcz3Ww5oRiL9JdQs/nPhccT0zP3jOa
jzUnzM1xWLkNnwuWEdOz99iVoa1Zyc1xWLkNfkacPFzP9UjkOKJ7zcTq3J7b
yCemZ+9JKiOR44jm7LRcHWO76zkf13M9pP4UDxzN2WlexXN15bie62Hl7HL1
bOWePVeXT0zP3jNaBtdfhTmKVA6ae5V77nk8KT17j10+Vg5a9PafDdHzkD3q
Su5918t98mqwVj23OJ9DaypWbZDPK9XzUu9jWoOUnpfYY9fqfLKmYsXZlJ6t
z0FpbXDse1qynsP9nzEHXHqN0PW8TT0j9mq1E3gMqfOlxei16Jn3FPz666+v
7h0QG7Xe01L1jH5Qyyfj66X2JZWezxz/nKMn6E67V+GY+Iy1iVjXlRrICQ59
/0Me1yPSO2tsQc+5j+Ua1NSA/pbqN5asZSDjc+gp5M+W1tff2m+U9tj1oOel
axlIT4F5IOIwvie1vMScXWs9R+LzeY96XoOWSajdNfT0d6znQfG5dj1Ffh0+
bq01FcTrpfkMSe75TD22BOs+FKKecmbouXp9cOvQZ2AsLT/XCxn1waieLd/t
/RtOC6z9oFP9G8DXdju9MbS/7qTnvbVWy/XstCDR/5zS86W1Vsvvl+K0gPFU
WwOYsd7qlfWDrmenJZy/SS0LPUfXw3K/Ai22+/pupwX0yZoHztWz5b0dZ25i
OYrU/htT1FQcZyhWLSX33m2pHLTr2ZkTK1eXqqWEevacndMDib03kvuLAuY4
PGfntEbbGyk3V0esHAc8iOc4nDk56XZQbkN4DnPdVcxDy7VWjpOLpRt6Z+u+
VLn38bbmhGEfB++zBS+De1vJtVaOkwvubyXv+0d9j50LhnqO7FF6ta6L941z
nDGE9/2Dth4+fKh655K5IOGcMPTQT58+Pdy7d8/vDetMCvSteefcOrcSo881
D+15aGcOannn0HNY9zL0PLQzJdTZWO8sifWOet7OmRKtB0l4jSLvLPR8YeWh
3XM4U2H1bNBrlHpnYu036vefcKYkw2vsBuo5mrdzz+FMgeU1huTpQtxzOHOS
ymsM9RoiRkc9h/cnOTWx+unGeg2hZ9VzyP4kvweyU4tEDWWU1yDWGizfl8Op
idWvUctrEJ8XOnPAOVnYr5GzD1IpVj8HfY3vBeaMwZoHlvY652LNCz1GOzWw
1qHUmgcqej5j/du6HnjuzhmCFZvFPDB6T+MRmj4fGqNx3fD1K9slVktmbI7k
6M4n0jNi9L4kRqNPOrxPkLMtuI4JOgj75jNic5UcXUTTWTEa74HraLz33wGM
bdAFr9WMg2FsZsxO7X9UQc9mfYXXB7wWrJnxfiUnRMbqZ8+eNY3NQtOI0Xst
RuO+h3fu3HGv7ESBPnBPQeglktM4n0nPVz46vE6wluOx2Ykh+3803zpVTiOi
6XNtPRZeD/fW9fydo8F+fasnaM7YLLFqhvzseY3F0bDyc6IWOGtsJqwZxuaG
rXuV1nQ/Q43c+0f3cgw419PmgCI271roGbDfX/NBrX1HzXuU9kiOPns6BvQZ
Wj8oY3btPo1SZP7Omhu28h09ncva8H0sSc+Wz5D7brXUMrHmhvJz1yLf0dO5
nIql6Jk6SPiM89ZaJpwbar5Drm+ck17O5ZQsQc+xfIbwGVl7Oc9FzHfIWvic
XrqHczk1vetZeuZIPqNqr34t6Du0z6H00nOtN2x9LuegZz3jPFv9Gb3kM1Jw
raHmk3htyZkfYu/UsbiepzsGOeeH5zv0oD37jBD2/WvrGuE7mJeOzQ8R32v0
l7qepzkG7J3EsJA1tVDLresmpaS8dGx+iGNUs1e6p1rCFOTodYpjAE3z/IZQ
r5rvDDzzrrVWc5FeOuyfYq0l1DTvXeEsA03T7M/XtCzP+5K0TOilU+8NX8OP
oSfWWRbQNO87IvNysfnf1D36U8J6uDY/ZB7vwYMHx55pZ5lQ0xipXEbv878U
cn6ozXO5BoAx3Fke8Bg4h5aWmQNYupYJ+/9jmpZ9Ks5yoF+2tCzycovIZeSS
o2ltjujUp9ZaOPZ+Wn5Z7Du377H+N5Y5NU1P57xKjTX3jLsZWl5kLiMX5qZz
ND2mNo7fUaPGuEZwXIbmRXE+pJbD86fE5V1rzU1NTpyWtfFSTXOfB0eH167S
GC37MbS6X+iXt6BlktJ02O9R4j88NqcpjdFy3medL5HH2JSWidS0lp8OfViO
psdcS7cEa3upGB36C80rB/nlTWqZSE1rtXHNU8d6qHPOkfMdKV8m/UXs3Kyl
VlILaFrWxq3jlvIfHpvLsbwZc3ExfyHrBq7lV5Gajh1DGavlfQF878dywrwm
rn0yJlv+QvrAJfdjTA339EjFBTGPPh5zfB3rx3VspG5Txz6Y9606t1yLHE8d
xmrsZ/rpp5+2lsYi+fjjj497I6Zisjzea635TUXoqXNjdWlub8vIeBw7xkFe
ufmeL0vm5D+yYrXrOo8gvxbVcZC/2HQurha5sdp1HUfGY+rYig9KTPb8RWW4
j/oYXW/t3sx4v6U65ro3j8nTI2M1dWrNXzRda3m+NYL3J9eepj7/irfwPNyM
yHUvrJfHYg5+hpypPF/8LKxl33W8jzAW5+o4+Mx77qIRmgeJ6ToWs6HtJcVt
eAm8XkvDA47Dvqc9EbcKYkmoa8TrmA/h+cRj8FjhF7vVN/TLGBx+Hqnh1Hu2
dOzeoj9CXef4a+08S08S/h5qfGqPEtPuEA3z/cnanut4GQhdX5Zeg8PYbelb
6pyaoq6gdw5oUhv0CTKnYOmWr1/+rZz3YHkr1/FyOc0bL0INhnvr5WoDz8NA
nMPvCX3K2MG9+/D7ocOhr1P7HELDPs9bB1bMHqrtUD+M59Q7BjQVG3gM43ru
dSOl4cBPeCzeACKHfRnGxpx5ZC8j4of2Hou3SUzb1DfjaEvt0utE/Lxr2LmG
8CQXob41jVPnY71C6FuoW3p0w2tTv7vWx81ZBtR3TOOa3qFBDOjRGnxM5nwS
+ccL169Tm5PGQ51T6/sMbWpa5biEZqlb167TC0L36mj9+hzHcRzHcZzh/B+Z
6aQq
    "], {{0, 180.}, {180., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->72.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{180., 180.},
  PlotRange->{{0, 180.}, {0, 180.}}]], "Output",
 CellChangeTimes->{{3.822934443839347*^9, 3.822934472353362*^9}, {
  3.8235597415197277`*^9, 3.8235597435503035`*^9}},
 CellLabel->"Out[38]=",ExpressionUUID->"8b833452-53d9-4dca-b6d7-fcbb65a95e10"]
}, Open  ]],

Cell["\:9884\:6d4b\:4eea\:8868\:677f\:8bfb\:6570", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286427406495*^9, 
  3.814286433898102*^9}, {3.82293427489489*^9, 
  3.8229342804041147`*^9}},ExpressionUUID->"72b7e3ca-407a-4ead-abfd-\
ff52608ce73e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"predictor", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.81409938518642*^9, 3.814099403337531*^9}, {
  3.814286420423718*^9, 3.8142864218613777`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"314d48b9-e5b6-4905-995e-234a78da9c2e"],

Cell[BoxData["0.4978169138081375`"], "Output",
 CellChangeTimes->{{3.822934446235936*^9, 3.822934475294237*^9}, 
   3.823559749153424*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"8724455b-cf43-4458-8cb8-9ceb2b044754"]
}, Open  ]],

Cell["\<\
\:7528\:4ee5\:4e0a\:7ed3\:679c\:53ef\:89c6\:5316\:4eea\:8868\:677f\
\>", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286451538327*^9, 
  3.814286460897533*^9}, {3.8229342985514193`*^9, 
  3.822934313514958*^9}},ExpressionUUID->"a8d44fca-c34c-44be-a7dc-\
bb1f49674898"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AngularGauge", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.8140994129463263`*^9, 3.814099417885462*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"fe20cd3c-997c-4781-88f1-61b82e432197"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[1], EdgeForm[None], FilledCurveBox[{Line[CompressedData["
1:eJxd1V1I02EUx/EtrC56o4xCsWykhiCRWWImncywF1wTixokKYbIkmgrbxzJ
oiKvrLQWxAoiltnLCiU1QzxgTaMpvkS1icl05TZ1+yNlGMXK6Py66IHDuTs3
H/g+mpJTBaXzVCpV6dz82X+flx/m6QPmlkn+Oj8/zl8xzBtHbM2PHkxxpeZO
ytJeNye0hZP8lhBfTY1vTFr8jmPXJbsOZYQ5ZG4y/9g6wPnRdm3mYJhn9Lse
e2694XMq8+afeQpX1KzK8TR18tOs22fWNih8MubCzmB5MzfUJUZ2+xR+viKi
Dpus3K49vGxLROGpL9VdbcZ7FOeMGPtnFS4/kmUr7nxBXWWz1+PfKrw6Umt3
6J1kPF9/ZU/N3L3WWuVmZi/FHqiavrxB4SWF7gyLZZCmE1sthXfDXKb2adS6
92SctPSkR0LcH7tA833hEFktv5683B5ia1qvwV7/kZyOHlv30SmOrvxW7Ljm
pVd9ppGEokn2DNTF7MsZo2NNrmdDuRO8PrBXZ/L6qLo1WRu1MsjuRWM3Lho+
U2dHWsOHbj+fWL6mb2Z4nAyjLUX24+N8NjvQqN0WoHST9eBg4BOnlFzSpVQF
Kff1ph1evY87XPGn99+foKjs9tSS5lE4EFzEgeAiDgQXcSC4iAPBRRwILuJA
cBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4
iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzE
geAiDv9cxIHhIg4MF3FguIgDw0UcGC7iwHARB4aLODBcxIHhIg4MF3FguIgD
w0UcGC7iwHARB4YLOgUXdAou6BRc0Cm4oFNwQafggk7BBZ2CCzoFF3QKLugU
XNApuKBTcEGn4IJOwQWdggs6BRd0Ci7oFFzQKbigU3BBp+CCTsEFnYILOgWX
//+P34UFays=
       "]]}]}, GraphicsGroupBox[
    {GrayLevel[0.8], EdgeForm[{GrayLevel[0.6], Thickness[0.01]}], 
     FilledCurveBox[{{Line[CompressedData["
1:eJxd1V1I02EUx/EtrC56o4xCsWykhiCRWWImncywF1wTixokKYbIkmgrbxzJ
oiKvrLQWxAoiltnLCiU1QzxgTaMpvkS1icl05TZ1+yNlGMXK6Py66IHDuTs3
H/g+mpJTBaXzVCpV6dz82X+flx/m6QPmlkn+Oj8/zl8xzBtHbM2PHkxxpeZO
ytJeNye0hZP8lhBfTY1vTFr8jmPXJbsOZYQ5ZG4y/9g6wPnRdm3mYJhn9Lse
e2694XMq8+afeQpX1KzK8TR18tOs22fWNih8MubCzmB5MzfUJUZ2+xR+viKi
Dpus3K49vGxLROGpL9VdbcZ7FOeMGPtnFS4/kmUr7nxBXWWz1+PfKrw6Umt3
6J1kPF9/ZU/N3L3WWuVmZi/FHqiavrxB4SWF7gyLZZCmE1sthXfDXKb2adS6
92SctPSkR0LcH7tA833hEFktv5683B5ia1qvwV7/kZyOHlv30SmOrvxW7Ljm
pVd9ppGEokn2DNTF7MsZo2NNrmdDuRO8PrBXZ/L6qLo1WRu1MsjuRWM3Lho+
U2dHWsOHbj+fWL6mb2Z4nAyjLUX24+N8NjvQqN0WoHST9eBg4BOnlFzSpVQF
Kff1ph1evY87XPGn99+foKjs9tSS5lE4EFzEgeAiDgQXcSC4iAPBRRwILuJA
cBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4
iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzE
geAiDv9cxIHhIg4MF3FguIgDw0UcGC7iwHARB4aLODBcxIHhIg4MF3FguIgD
w0UcGC7iwHARB4YLOgUXdAou6BRc0Cm4oFNwQafggk7BBZ2CCzoFF3QKLugU
XNApuKBTcEGn4IJOwQWdggs6BRd0Ci7oFFzQKbigU3BBp+CCTsEFnYILOgWX
//+P34UFays=
         "]]}, {Line[CompressedData["
1:eJyF1V1I02EUx/EpoxfEAkOSwsqQhGFemCAGdgTT6EbQihQkwbfI3tAi8UIv
mk5XYpmVNyVpUmkvWIlMnR0MUckwNE1xS12r2drc/z+ziErK8Px24U0XD4dz
ca4+8H3Css+m5flrNJrjy+/f3F7hSjVts/Hi3a6lzffnefXefaOsdrJomm8/
sPWlPPSw9edWKjVOcWLTswTjVYX1xvjMtIp3PGJrcys6lc8fGX6SXzDKkVEN
9UmlKq/VR3/lktc8djGgaOGFynme8Pp5vz4eu/I0rF1RuSu5Wh10dfCgY0du
xkYvz8RmVcct3OSgMkPCy1Avm3JyehT1Hu30/oiY3eJla/CpY3ONZsq07NZ2
rPFyfnfl45iJfkoprIpJt6mcEd2zKzv5DRWnlpe4W1UeSHx/6NertxSeXjvc
kqPy5RDH4f7pCYr/Y4ieDFD5liey8tyUhXpHh3vuHFB4dp/d9Ltzhup0xdbv
Rz2s1yVtMpttFHS93958cJ4bNhhiay7ZKWR9ldId6uZG/5o9Tfs/kfZbs+bk
+Bfu3euXG+d00LhOO7RU6OShqEBL64XPtC64IN+yOMd6vSkwz+Ukbfsje3mW
g9syrp1QklzL9y0Ddc8/MoVHjLjK3VR5xnjatPABDgQXcSC4iAPBRRwILuJA
cBEH8rmsOBBcxIHgIg4EF3EguIgDwUUcCC7iQHARB4KLOBBcxIHgIg4EF3Eg
uIgDwUUcCC7iQHARB4KLOJDPZcWB4CIOBBdxILiIA8FFHAgu4kBwEQeCizgQ
XMSB4CIOBBdxILiIg89FHBgu4sBwEQeGizgwXMSB4SIODBdxYLiIA8NFHBgu
4sBwEQeGizgwXMSB4SIODBdxYLis6hYc0C04oFtwQLfggG7BgX0u0im4oFNw
Qafggk7BBZ2CCzoFF3QKLugUXNApuKBTcEGn4IJOwQWdggs6BRd0Ci7oFFzQ
KZ+LdAou6BRc/vef/AWs0Kog
         "]]}}]}], {}, 
   {GrayLevel[0.5], Thickness[0.008], 
    {GrayLevel[0.5], Thickness[0.004], CapForm["Butt"], 
     StyleBox[{{
        LineBox[{{{-0.5000000000000004, -0.8660254037844385}, 
           Scaled[{0.030000000000000072`, 
            0.055692193816530504`}, {-0.5000000000000004, \
-0.8660254037844385}]}, {{-1., 5.66553889764798*^-16}, 
           Scaled[{0.06, 0.}, {-1., 
            5.66553889764798*^-16}]}, {{-0.4999999999999994, 
           0.866025403784439}, 
           Scaled[{
            0.02999999999999996, -0.05569219381653056}, {-0.4999999999999994, 
            0.866025403784439}]}, {{0.5000000000000003, 0.8660254037844385}, 
           Scaled[{-0.03000000000000002, -0.055692193816530525`}, {
            0.5000000000000003, 0.8660254037844385}]}, {{
           1., -8.881784197001252*^-16}, 
           Scaled[{-0.06, 0.}, {1., -8.881784197001252*^-16}]}, {{
           0.4999999999999995, -0.8660254037844389}, 
           Scaled[{-0.029999999999999957`, 0.05569219381653056}, {
            0.4999999999999995, -0.8660254037844389}]}}], 
        LineBox[{{{-0.7071067811865479, -0.7071067811865471}, 
           Scaled[{0.028284271247461915`, 
            0.030314990557040934`}, {-0.7071067811865479, \
-0.7071067811865471}]}, {{-0.866025403784439, -0.49999999999999933`}, 
           Scaled[{0.034641016151377574`, 
            0.021435935394489767`}, {-0.866025403784439, \
-0.49999999999999933`}]}, {{-0.9659258262890684, -0.25881904510252035`}, 
           Scaled[{0.038637033051562734`, 
            0.01109605665936234}, {-0.9659258262890684, \
-0.25881904510252035`}]}, {{-0.9659258262890681, 0.25881904510252146`}, 
           Scaled[{0.03863703305156273, -0.01109605665936239}, \
{-0.9659258262890681, 0.25881904510252146`}]}, {{-0.8660254037844385, 
           0.5000000000000003}, 
           Scaled[{0.03464101615137754, -0.021435935394489826`}, \
{-0.8660254037844385, 0.5000000000000003}]}, {{-0.7071067811865475, 
           0.7071067811865476}, 
           Scaled[{0.028284271247461898`, -0.030314990557040955`}, \
{-0.7071067811865475, 0.7071067811865476}]}, {{-0.2588190451025204, 
           0.9659258262890684}, 
           Scaled[{0.010352761804100816`, -0.04141104721640332}, \
{-0.2588190451025204, 0.9659258262890684}]}, {{5.053215498074303*^-16, 1.}, 
           Scaled[{0., -0.042871870788979624`}, {5.053215498074303*^-16, 
            1.}]}, {{0.2588190451025214, 0.9659258262890681}, 
           Scaled[{-0.010352761804100847`, -0.04141104721640331}, {
            0.2588190451025214, 0.9659258262890681}]}, {{0.7071067811865478, 
           0.7071067811865472}, 
           Scaled[{-0.028284271247461912`, -0.03031499055704094}, {
            0.7071067811865478, 0.7071067811865472}]}, {{0.8660254037844387, 
           0.49999999999999983`}, 
           Scaled[{-0.034641016151377546`, -0.0214359353944898}, {
            0.8660254037844387, 0.49999999999999983`}]}, {{0.9659258262890683,
            0.25881904510252046`}, 
           Scaled[{-0.038637033051562734`, -0.011096056659362346`}, {
            0.9659258262890683, 0.25881904510252046`}]}, {{
           0.9659258262890681, -0.25881904510252135`}, 
           Scaled[{-0.03863703305156273, 0.011096056659362395`}, {
            0.9659258262890681, -0.25881904510252135`}]}, {{
           0.8660254037844385, -0.5000000000000002}, 
           Scaled[{-0.03464101615137754, 0.02143593539448983}, {
            0.8660254037844385, -0.5000000000000002}]}, {{
           0.7071067811865476, -0.7071067811865476}, 
           Scaled[{-0.028284271247461894`, 0.03031499055704096}, {
            0.7071067811865476, -0.7071067811865476}]}}]}, 
       {GrayLevel[0.25], 
        StyleBox[{{{
            InsetBox["0", Offset[{1.5000000000000036, 2.5980762113533142}, 
             Scaled[{0.030000000000000072, 0.055692193816530504}, \
{-0.5000000000000004, -0.8660254037844385}]], 
             ImageScaled[{0.21132486540518625, 0.}], Automatic, {1, 0}], 
            InsetBox[
             TagBox[
              InterpretationBox[
               StyleBox["\<\"0.2\"\>",
                ShowStringCharacters->False],
               0.2,
               AutoDelete->True],
              NumberForm[#, {
                DirectedInfinity[1], 1}]& ], Offset[{3., 0.}, 
             Scaled[{0.06, 0.}, {-1., 5.66553889764798*^-16}]], 
             ImageScaled[{0, 0.5}], Automatic, {1, 0}], InsetBox[
             TagBox[
              InterpretationBox[
               StyleBox["\<\"0.4\"\>",
                ShowStringCharacters->False],
               0.4,
               AutoDelete->True],
              NumberForm[#, {
                DirectedInfinity[1], 1}]& ], Offset[{1.4999999999999982, -2.598076211353317},
              Scaled[{0.02999999999999996, -0.05569219381653056}, \
{-0.4999999999999994, 0.866025403784439}]], 
             ImageScaled[{0.21132486540518758, 1.}], Automatic, {1, 0}], 
            InsetBox[
             TagBox[
              InterpretationBox[
               StyleBox["\<\"0.6\"\>",
                ShowStringCharacters->False],
               0.6,
               AutoDelete->True],
              NumberForm[#, {
                DirectedInfinity[1], 1}]& ], Offset[{-1.5000000000000009, -2.5980762113533156},
              Scaled[{-0.03000000000000002, -0.055692193816530525}, \
{0.5000000000000003, 0.8660254037844385}]], 
             ImageScaled[{0.7886751345948131, 1.}], Automatic, {1, 0}], 
            InsetBox[
             TagBox[
              InterpretationBox[
               StyleBox["\<\"0.8\"\>",
                ShowStringCharacters->False],
               0.8,
               AutoDelete->True],
              NumberForm[#, {
                DirectedInfinity[1], 1}]& ], Offset[{-3., 0.}, 
             Scaled[{-0.06, 0.}, {1., -8.881784197001252*^-16}]], 
             ImageScaled[{1, 0.5}], Automatic, {1, 0}], InsetBox[
             TagBox[
              InterpretationBox[
               StyleBox["\<\"1.0\"\>",
                ShowStringCharacters->False],
               1.,
               AutoDelete->True],
              NumberForm[#, {
                DirectedInfinity[1], 1}]& ], Offset[{-1.499999999999998, 2.598076211353317},
              Scaled[{-0.029999999999999957, 0.05569219381653056}, \
{0.4999999999999995, -0.8660254037844389}]], 
             ImageScaled[{0.7886751345948124, 0.}], Automatic, {1, 
             0}]}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}}, {}},
         StripOnInput->False,
         FontFamily->"Helvetica",
         FontSize->Scaled[0.07]]}},
      StripOnInput->False,
      Antialiasing->True]}}, {}, {}, 
   GeometricTransformationBox[GeometricTransformationBox[
     TagBox[
      TooltipBox[{
        {RGBColor[0.73, 0.24506099999999992`, 0.1971], 
         PolygonBox[{{0., -0.054700000000000006`}, {1, -0.025}, {1, 0.025}, {
           0., 0.054700000000000006`}}]}, 
        {RGBColor[0.73, 0.24506099999999992`, 0.1971], DiskBox[{0, 0}, 0.07]}, 
        {GrayLevel[1], DiskBox[{0, 0}, 0.035]}},
       "0.4978169138081375`"],
      Annotation[#, 0.4978169138081375, 
       "Tooltip"]& ], {{{-0.010287327288530239`, -0.8999412041335026}, {
      0.8999412041335026, -0.010287327288530239`}}, {0., 0.}}], {{{1, 0}, {0, 
     1}}, Center}], {}},
  AlignmentPoint->Center,
  AspectRatio->Automatic,
  Axes->False,
  AxesLabel->None,
  AxesOrigin->Automatic,
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ColorOutput->Automatic,
  ContentSelectable->Automatic,
  CoordinatesToolOptions:>Automatic,
  DisplayFunction->Identity,
  Epilog->{},
  FormatType->TraditionalForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->Automatic,
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->Small,
  ImageSizeRaw->Automatic,
  LabelStyle->Directive[
    GrayLevel[0.25], FontSize -> Scaled[0.07], FontFamily -> "Helvetica"],
  Method->Automatic,
  PlotLabel->None,
  PlotRange->All,
  PlotRangeClipping->False,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  PreserveImageOptions->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->Automatic,
  TicksStyle->{}]], "Output",
 CellChangeTimes->{{3.8229344503023214`*^9, 3.822934478133992*^9}, 
   3.8235597683601575`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"506967eb-9089-4a7d-96f7-4666e52e66f1"]
}, Open  ]],

Cell["\:8bbe\:7f6e\:4e00\:4e2a\:52a8\:6001\:7a97\:53e3\:ff0c\:6bd4\:8f83\:771f\
\:5b9e\:7ed3\:679c\:548c\:8bad\:7ec3\:8fc7\:7684\:9884\:6d4b\:5668\:51fd\:6570\
\:7684\:76f8\:5e94\:8f93\:51fa", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, 3.814286618728199*^9, {3.822934335858574*^9, 
   3.822934361866988*^9}, {3.822934401181878*^9, 
   3.8229344094888926`*^9}},ExpressionUUID->"8b6b1bd4-1c62-4015-9369-\
08e80e860504"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"AngularGauge", "[", 
      RowBox[{"Dynamic", "[", "t", "]"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<\[Rule]\>\"", ",", " ", "Large"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"Labeled", "[", 
       RowBox[{
        RowBox[{"AngularGauge", "[", 
         RowBox[{"predictor", "[", 
          RowBox[{"Image", "[", 
           RowBox[{"AngularGauge", "[", "t", "]"}], "]"}], "]"}], "]"}], ",", 
        "\"\<\!\(\*StyleBox[\"(\",FontFamily->\"Microsoft \
YaHei\"]\)\!\(\*StyleBox[\"\:9884\:6d4b\:7ed3\:679c\",FontFamily->\"Microsoft \
YaHei\"]\)\!\(\*StyleBox[\")\",FontFamily->\"Microsoft YaHei\"]\)\>\""}], 
       "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"FontFamily", "\[Rule]", "\"\<Sans Serif\>\""}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.705659217465704*^9, 3.7056592247895603`*^9}, {
  3.8229345197150264`*^9, 3.82293452053734*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"e62ce054-9c66-45ec-b238-5e6ee582480b"],

Cell[BoxData[
 TemplateBox[{
   DynamicModuleBox[{
    System`GaugesDump`anglea$$ = 0.08112239210089722, System`GaugesDump`a$$ = 
     0.08112239210089689}, 
    LocatorPaneBox[
     Dynamic[
      Charting`value2pts[$CellContext`t, {Identity, Identity}, {
       Rational[4, 3] Pi -> 0, Rational[-1, 3] Pi -> 1}], {
      None, (System`GaugesDump`a$$ = 
        Charting`resetAngle[$CellContext`t, 0, 1, #, {Identity, Identity}, {
          Rational[4, 3] Pi -> 0, Rational[-1, 3] Pi -> 
           1}]; $CellContext`t = (
         Part[{None, ($CellContext`t = #; Null)& , None}, 2][
           Charting`angleToValue[
           System`GaugesDump`a$$, {Identity, Identity}, {
            Rational[4, 3] Pi -> 0, Rational[-1, 3] Pi -> 
             1}], #2]; $CellContext`t); 
       System`GaugesDump`anglea$$ = 
        Charting`valueToAngle[$CellContext`t, {Identity, Identity}, {
          Rational[4, 3] Pi -> 0, Rational[-1, 3] Pi -> 1}]; Null)& , None}, 
      TrackedSymbols :> {$CellContext`t}, {}], 
     GraphicsBox[{{
        GrayLevel[1], 
        EdgeForm[None], 
        FilledCurveBox[{
          Line[CompressedData["
1:eJxd1V1I02EUx/EtrC56o4xCsWykhiCRWWImncywF1wTixokKYbIkmgrbxzJ
oiKvrLQWxAoiltnLCiU1QzxgTaMpvkS1icl05TZ1+yNlGMXK6Py66IHDuTs3
H/g+mpJTBaXzVCpV6dz82X+flx/m6QPmlkn+Oj8/zl8xzBtHbM2PHkxxpeZO
ytJeNye0hZP8lhBfTY1vTFr8jmPXJbsOZYQ5ZG4y/9g6wPnRdm3mYJhn9Lse
e2694XMq8+afeQpX1KzK8TR18tOs22fWNih8MubCzmB5MzfUJUZ2+xR+viKi
Dpus3K49vGxLROGpL9VdbcZ7FOeMGPtnFS4/kmUr7nxBXWWz1+PfKrw6Umt3
6J1kPF9/ZU/N3L3WWuVmZi/FHqiavrxB4SWF7gyLZZCmE1sthXfDXKb2adS6
92SctPSkR0LcH7tA833hEFktv5683B5ia1qvwV7/kZyOHlv30SmOrvxW7Ljm
pVd9ppGEokn2DNTF7MsZo2NNrmdDuRO8PrBXZ/L6qLo1WRu1MsjuRWM3Lho+
U2dHWsOHbj+fWL6mb2Z4nAyjLUX24+N8NjvQqN0WoHST9eBg4BOnlFzSpVQF
Kff1ph1evY87XPGn99+foKjs9tSS5lE4EFzEgeAiDgQXcSC4iAPBRRwILuJA
cBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4
iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzE
geAiDv9cxIHhIg4MF3FguIgDw0UcGC7iwHARB4aLODBcxIHhIg4MF3FguIgD
w0UcGC7iwHARB4YLOgUXdAou6BRc0Cm4oFNwQafggk7BBZ2CCzoFF3QKLugU
XNApuKBTcEGn4IJOwQWdggs6BRd0Ci7oFFzQKbigU3BBp+CCTsEFnYILOgWX
//+P34UFays=
           "]]}]}, 
       GraphicsGroupBox[{
         GrayLevel[0.8], 
         EdgeForm[{
           GrayLevel[0.6], 
           Thickness[0.01]}], 
         FilledCurveBox[{{
            Line[CompressedData["
1:eJxd1V1I02EUx/EtrC56o4xCsWykhiCRWWImncywF1wTixokKYbIkmgrbxzJ
oiKvrLQWxAoiltnLCiU1QzxgTaMpvkS1icl05TZ1+yNlGMXK6Py66IHDuTs3
H/g+mpJTBaXzVCpV6dz82X+flx/m6QPmlkn+Oj8/zl8xzBtHbM2PHkxxpeZO
ytJeNye0hZP8lhBfTY1vTFr8jmPXJbsOZYQ5ZG4y/9g6wPnRdm3mYJhn9Lse
e2694XMq8+afeQpX1KzK8TR18tOs22fWNih8MubCzmB5MzfUJUZ2+xR+viKi
Dpus3K49vGxLROGpL9VdbcZ7FOeMGPtnFS4/kmUr7nxBXWWz1+PfKrw6Umt3
6J1kPF9/ZU/N3L3WWuVmZi/FHqiavrxB4SWF7gyLZZCmE1sthXfDXKb2adS6
92SctPSkR0LcH7tA833hEFktv5683B5ia1qvwV7/kZyOHlv30SmOrvxW7Ljm
pVd9ppGEokn2DNTF7MsZo2NNrmdDuRO8PrBXZ/L6qLo1WRu1MsjuRWM3Lho+
U2dHWsOHbj+fWL6mb2Z4nAyjLUX24+N8NjvQqN0WoHST9eBg4BOnlFzSpVQF
Kff1ph1evY87XPGn99+foKjs9tSS5lE4EFzEgeAiDgQXcSC4iAPBRRwILuJA
cBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4
iAPBRRwILuJAcBEHgos4EFzEgeAiDgQXcSC4iAPBRRwILuJAcBEHgos4EFzE
geAiDv9cxIHhIg4MF3FguIgDw0UcGC7iwHARB4aLODBcxIHhIg4MF3FguIgD
w0UcGC7iwHARB4YLOgUXdAou6BRc0Cm4oFNwQafggk7BBZ2CCzoFF3QKLugU
XNApuKBTcEGn4IJOwQWdggs6BRd0Ci7oFFzQKbigU3BBp+CCTsEFnYILOgWX
//+P34UFays=
             "]]}, {
            Line[CompressedData["
1:eJyF1V1I02EUx/EpoxfEAkOSwsqQhGFemCAGdgTT6EbQihQkwbfI3tAi8UIv
mk5XYpmVNyVpUmkvWIlMnR0MUckwNE1xS12r2drc/z+ziErK8Px24U0XD4dz
ca4+8H3Css+m5flrNJrjy+/f3F7hSjVts/Hi3a6lzffnefXefaOsdrJomm8/
sPWlPPSw9edWKjVOcWLTswTjVYX1xvjMtIp3PGJrcys6lc8fGX6SXzDKkVEN
9UmlKq/VR3/lktc8djGgaOGFynme8Pp5vz4eu/I0rF1RuSu5Wh10dfCgY0du
xkYvz8RmVcct3OSgMkPCy1Avm3JyehT1Hu30/oiY3eJla/CpY3ONZsq07NZ2
rPFyfnfl45iJfkoprIpJt6mcEd2zKzv5DRWnlpe4W1UeSHx/6NertxSeXjvc
kqPy5RDH4f7pCYr/Y4ieDFD5liey8tyUhXpHh3vuHFB4dp/d9Ltzhup0xdbv
Rz2s1yVtMpttFHS93958cJ4bNhhiay7ZKWR9ldId6uZG/5o9Tfs/kfZbs+bk
+Bfu3euXG+d00LhOO7RU6OShqEBL64XPtC64IN+yOMd6vSkwz+Ukbfsje3mW
g9syrp1QklzL9y0Ddc8/MoVHjLjK3VR5xnjatPABDgQXcSC4iAPBRRwILuJA
cBEH8rmsOBBcxIHgIg4EF3EguIgDwUUcCC7iQHARB4KLOBBcxIHgIg4EF3Eg
uIgDwUUcCC7iQHARB4KLOJDPZcWB4CIOBBdxILiIA8FFHAgu4kBwEQeCizgQ
XMSB4CIOBBdxILiIg89FHBgu4sBwEQeGizgwXMSB4SIODBdxYLiIA8NFHBgu
4sBwEQeGizgwXMSB4SIODBdxYLis6hYc0C04oFtwQLfggG7BgX0u0im4oFNw
Qafggk7BBZ2CCzoFF3QKLugUXNApuKBTcEGn4IJOwQWdggs6BRd0Ci7oFFzQ
KZ+LdAou6BRc/vef/AWs0Kog
             "]]}}]}], {}, {
        GrayLevel[0.5], 
        Thickness[0.008], {
         GrayLevel[0.5], 
         Thickness[0.004], 
         CapForm["Butt"], 
         StyleBox[{{
            LineBox[{{{-0.5000000000000004, -0.8660254037844385}, 
               
               Scaled[{0.030000000000000072`, 
                0.055692193816530504`}, {-0.5000000000000004, \
-0.8660254037844385}]}, {{-1., 5.66553889764798*^-16}, 
               
               Scaled[{0.06, 0.}, {-1., 
                5.66553889764798*^-16}]}, {{-0.4999999999999994, 
               0.866025403784439}, 
               
               Scaled[{
                0.02999999999999996, -0.05569219381653056}, \
{-0.4999999999999994, 0.866025403784439}]}, {{0.5000000000000003, 
               0.8660254037844385}, 
               
               Scaled[{-0.03000000000000002, -0.055692193816530525`}, {
                0.5000000000000003, 0.8660254037844385}]}, {{
               1., -8.881784197001252*^-16}, 
               Scaled[{-0.06, 0.}, {1., -8.881784197001252*^-16}]}, {{
               0.4999999999999995, -0.8660254037844389}, 
               
               Scaled[{-0.029999999999999957`, 0.05569219381653056}, {
                0.4999999999999995, -0.8660254037844389}]}}], 
            LineBox[{{{-0.7071067811865479, -0.7071067811865471}, 
               
               Scaled[{0.028284271247461915`, 
                0.030314990557040934`}, {-0.7071067811865479, \
-0.7071067811865471}]}, {{-0.866025403784439, -0.49999999999999933`}, 
               Scaled[{0.034641016151377574`, 
                0.021435935394489767`}, {-0.866025403784439, \
-0.49999999999999933`}]}, {{-0.9659258262890684, -0.25881904510252035`}, 
               
               Scaled[{0.038637033051562734`, 
                0.01109605665936234}, {-0.9659258262890684, \
-0.25881904510252035`}]}, {{-0.9659258262890681, 0.25881904510252146`}, 
               
               Scaled[{
                0.03863703305156273, -0.01109605665936239}, \
{-0.9659258262890681, 0.25881904510252146`}]}, {{-0.8660254037844385, 
               0.5000000000000003}, 
               
               Scaled[{
                0.03464101615137754, -0.021435935394489826`}, \
{-0.8660254037844385, 0.5000000000000003}]}, {{-0.7071067811865475, 
               0.7071067811865476}, 
               
               Scaled[{
                0.028284271247461898`, -0.030314990557040955`}, \
{-0.7071067811865475, 0.7071067811865476}]}, {{-0.2588190451025204, 
               0.9659258262890684}, 
               
               Scaled[{
                0.010352761804100816`, -0.04141104721640332}, \
{-0.2588190451025204, 0.9659258262890684}]}, {{5.053215498074303*^-16, 1.}, 
               
               Scaled[{0., -0.042871870788979624`}, {5.053215498074303*^-16, 
                1.}]}, {{0.2588190451025214, 0.9659258262890681}, 
               
               Scaled[{-0.010352761804100847`, -0.04141104721640331}, {
                0.2588190451025214, 0.9659258262890681}]}, {{
               0.7071067811865478, 0.7071067811865472}, 
               
               Scaled[{-0.028284271247461912`, -0.03031499055704094}, {
                0.7071067811865478, 0.7071067811865472}]}, {{
               0.8660254037844387, 0.49999999999999983`}, 
               
               Scaled[{-0.034641016151377546`, -0.0214359353944898}, {
                0.8660254037844387, 0.49999999999999983`}]}, {{
               0.9659258262890683, 0.25881904510252046`}, 
               
               Scaled[{-0.038637033051562734`, -0.011096056659362346`}, {
                0.9659258262890683, 0.25881904510252046`}]}, {{
               0.9659258262890681, -0.25881904510252135`}, 
               
               Scaled[{-0.03863703305156273, 0.011096056659362395`}, {
                0.9659258262890681, -0.25881904510252135`}]}, {{
               0.8660254037844385, -0.5000000000000002}, 
               Scaled[{-0.03464101615137754, 0.02143593539448983}, {
                0.8660254037844385, -0.5000000000000002}]}, {{
               0.7071067811865476, -0.7071067811865476}, 
               
               Scaled[{-0.028284271247461894`, 0.03031499055704096}, {
                0.7071067811865476, -0.7071067811865476}]}}]}, {
            GrayLevel[0.25], 
            StyleBox[{{{
                InsetBox["0", 
                 Offset[{1.5000000000000036`, 2.5980762113533142`}, 
                  
                  Scaled[{0.030000000000000072`, 
                   0.055692193816530504`}, {-0.5000000000000004, \
-0.8660254037844385}]], 
                 ImageScaled[{0.21132486540518625`, 0.}], Automatic, {1, 0}], 
                InsetBox["0.2`", 
                 Offset[{3., 0.}, 
                  Scaled[{0.06, 0.}, {-1., 5.66553889764798*^-16}]], 
                 ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                InsetBox["0.4`", 
                 Offset[{1.4999999999999982`, -2.598076211353317}, 
                  
                  Scaled[{
                   0.02999999999999996, -0.05569219381653056}, \
{-0.4999999999999994, 0.866025403784439}]], 
                 ImageScaled[{0.21132486540518758`, 1.}], Automatic, {1, 0}], 
                InsetBox["0.6`", 
                 Offset[{-1.5000000000000009`, -2.5980762113533156`}, 
                  
                  Scaled[{-0.03000000000000002, -0.055692193816530525`}, {
                   0.5000000000000003, 0.8660254037844385}]], 
                 ImageScaled[{0.7886751345948131, 1.}], Automatic, {1, 0}], 
                InsetBox["0.8`", 
                 Offset[{-3., 0.}, 
                  Scaled[{-0.06, 0.}, {1., -8.881784197001252*^-16}]], 
                 ImageScaled[{1, 0.5}], Automatic, {1, 0}], 
                InsetBox["1.`", 
                 Offset[{-1.499999999999998, 2.598076211353317}, 
                  
                  Scaled[{-0.029999999999999957`, 0.05569219381653056}, {
                   0.4999999999999995, -0.8660254037844389}]], 
                 ImageScaled[{0.7886751345948124, 0.}], Automatic, {1, 
                 0}]}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {}}, StripOnInput -> False, FontFamily -> "Helvetica", FontSize -> 
             Scaled[0.07]]}}, StripOnInput -> False, Antialiasing -> 
          True]}}, {}, {}, 
       GeometricTransformationBox[
        GeometricTransformationBox[
         TagBox[
          TooltipBox[{{
             RGBColor[0.73, 0.24506099999999992`, 0.1971], 
             
             PolygonBox[{{0., -0.054700000000000006`}, {1, -0.025}, {
               1, 0.025}, {0., 0.054700000000000006`}}]}, {
             RGBColor[0.73, 0.24506099999999992`, 0.1971], 
             DiskBox[{0, 0}, 0.07]}, {
             GrayLevel[1], 
             DiskBox[{0, 0}, 0.035]}}, 
           DynamicBox[
            ToBoxes[$CellContext`t, StandardForm]]], Annotation[#, 
           Dynamic[$CellContext`t], 
           "Tooltip"]& ], {{{(-0.9) 
            Sin[0.5235987755982988 + 5.235987755982989 If[
                 Dynamic[
                  MatchQ[$CellContext`t, 
                   PatternTest[
                    Blank[], Charting`realNumericQ]]], 
                 Dynamic[
                  Clip[$CellContext`t, 
                   Sort[
                    N[{0., 1.}], Less]]], 0.]], 0.9 
            Cos[0.5235987755982988 + 5.235987755982989 If[
                 Dynamic[
                  MatchQ[$CellContext`t, 
                   PatternTest[
                    Blank[], Charting`realNumericQ]]], 
                 Dynamic[
                  Clip[$CellContext`t, 
                   Sort[
                    N[{0., 1.}], Less]]], 0.]]}, {(-0.9) 
            Cos[0.5235987755982988 + 5.235987755982989 If[
                 Dynamic[
                  MatchQ[$CellContext`t, 
                   PatternTest[
                    Blank[], Charting`realNumericQ]]], 
                 Dynamic[
                  Clip[$CellContext`t, 
                   Sort[
                    N[{0., 1.}], Less]]], 0.]], (-0.9) 
            Sin[0.5235987755982988 + 5.235987755982989 If[
                 Dynamic[
                  MatchQ[$CellContext`t, 
                   PatternTest[
                    Blank[], Charting`realNumericQ]]], 
                 Dynamic[
                  Clip[$CellContext`t, 
                   Sort[
                    N[{0., 1.}], Less]]], 0.]]}}, {0., 0.}}], {{{1, 0}, {0, 
         1}}, Center}], {}}, AlignmentPoint -> Center, AspectRatio -> 
      Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, 
      AxesStyle -> {}, Background -> None, BaseStyle -> {}, BaselinePosition -> 
      Automatic, ColorOutput -> Automatic, ContentSelectable -> Automatic, 
      CoordinatesToolOptions :> Automatic, DisplayFunction -> Identity, 
      Epilog -> {}, FormatType -> TraditionalForm, Frame -> False, FrameLabel -> 
      None, FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
      GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
      ImagePadding -> All, ImageSize -> Small, ImageSizeRaw -> Automatic, 
      LabelStyle -> Directive[
        GrayLevel[0.25], FontSize -> Scaled[0.07], FontFamily -> "Helvetica"],
       Method -> Automatic, PlotLabel -> None, PlotRange -> All, 
      PlotRangeClipping -> False, PlotRangePadding -> Automatic, PlotRegion -> 
      Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> 
      True, Ticks -> Automatic, TicksStyle -> {}], Appearance -> None, 
     Enabled -> Automatic], DynamicModuleValues :> {}], 
   StyleBox["\"\[Rule]\"", Large, StripOnInput -> False], 
   DynamicBox[
    ToBoxes[
     Labeled[
      AngularGauge[
       $CellContext`predictor[
        Image[
         AngularGauge[$CellContext`t]]]], 
      "\!\(\*StyleBox[\"(\",FontFamily->\"Microsoft YaHei\"]\)\!\(\*StyleBox[\
\"\:9884\:6d4b\:7ed3\:679c\",FontFamily->\"Microsoft \
YaHei\"]\)\!\(\*StyleBox[\")\",FontFamily->\"Microsoft YaHei\"]\)"], 
     StandardForm]]},
  "Row",
  BaseStyle->(FontFamily -> "Sans Serif"),
  DisplayFunction->(RowBox[{
     TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ),
  InterpretationFunction->(RowBox[{"Row", "[", 
     RowBox[{
       RowBox[{"{", 
         TemplateSlotSequence[1, ","], "}"}], ",", 
       RowBox[{"BaseStyle", "\[Rule]", 
         RowBox[{"FontFamily", "\[Rule]", "\"Sans Serif\""}]}]}], 
     "]"}]& )]], "Output",
 CellChangeTimes->{
  3.8229344850386353`*^9, {3.822934523617879*^9, 3.822934558341174*^9}, 
   3.82355979766023*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"5f76259b-d17e-46a0-aca6-209ff523429c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:793a\:4f8b\:ff1a\:9884\:6d4b\:6cb9\:8017 MPG = Miles per Gallon", \
"Section",
 CellChangeTimes->{{3.814102966033637*^9, 3.814102970597814*^9}, {
   3.814103101497258*^9, 3.81410310477948*^9}, {3.8141038381789923`*^9, 
   3.814103840036084*^9}, {3.814214796162533*^9, 3.814214797736557*^9}, 
   3.822934733335061*^9},ExpressionUUID->"5a339afd-a2c7-4b5a-9814-\
7d706d23f48b"],

Cell[TextData[{
 "\:6570\:636e\:6765\:6e90: ",
 StyleBox["UCI Machine Learning Repository ",
  FontFamily->"Arial"],
 StyleBox[ButtonBox["Auto MPG Data Set",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://archive.ics.uci.edu/ml/datasets/Auto+MPG"], None},
  ButtonNote->"https://archive.ics.uci.edu/ml/datasets/Auto+MPG"],
  FontFamily->"Arial"]
}], "Text",
 CellChangeTimes->{{3.814103843016943*^9, 3.8141038757426558`*^9}, {
  3.814286571262021*^9, 3.814286587764716*^9}, {3.8229346471365275`*^9, 
  3.8229346570436535`*^9}},ExpressionUUID->"20cc0607-f2ca-4cd8-937e-\
22e932cb94ab"],

Cell[TextData[StyleBox["\[OpenCurlyDoubleQuote]The data concerns city-cycle \
fuel consumption in miles per gallon, to be predicted in terms of 3 \
multivalued discrete and 5 continuous attributes.\[CloseCurlyDoubleQuote] \
-Quinlan, 1993",
 FontFamily->"Arial"]], "Text",
 CellChangeTimes->{{3.814286599869856*^9, 
  3.814286611771893*^9}},ExpressionUUID->"b5515d3b-c2a4-4b2c-9dab-\
5ece427f740d"],

Cell[CellGroupData[{

Cell["\:81ea\:52a8\:9884\:6d4b", "Subsection",
 CellChangeTimes->{{3.814108379320249*^9, 3.8141083832834187`*^9}, {
  3.822934718448338*^9, 
  3.8229347217271585`*^9}},ExpressionUUID->"73523be5-a13a-48cc-addc-\
5a68f57e697d"],

Cell["\:4ece\:7f51\:7ad9\:5bfc\:5165\:6570\:636e", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
  3.8142865243132267`*^9}, {3.814286628096397*^9, 3.814286631132739*^9}, {
  3.822938912625631*^9, 3.8229389156523423`*^9}, {3.8229390645641003`*^9, 
  3.822939074253126*^9}},ExpressionUUID->"2506fde3-f835-43b5-ba22-\
f4577da444f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"autoMPGData", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/\
auto-mpg.data\>\"", ",", "\"\<Data\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.814103910983446*^9, 3.8141039199563637`*^9}, {
  3.81410456261032*^9, 3.814104564212879*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"a94f7bae-c9d6-47fb-9090-fc5ea886d3f5"],

Cell["\:968f\:673a\:627e\:51fa\:82e5\:5e72\:884c\:6570\:636e", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
  3.8142865243132267`*^9}, {3.814286641528014*^9, 3.8142866452518682`*^9}, {
  3.8229391119519153`*^9, 
  3.822939124368677*^9}},ExpressionUUID->"fc091007-1534-4d86-a5b9-\
03ac3b5e8cc8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"autoMPGData", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.8141039234243517`*^9, 3.814103943503043*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"674932e5-e530-4013-a0d0-c7422c6d11bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"27.0   4   101.0      83.00      2202.      15.3   76  \
2\"\>", ",", "\<\"renault 12tl\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"34.5   4   100.0      ?          2320.      15.8   81  \
2\"\>", ",", "\<\"renault 18i\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"14.0   8   318.0      150.0      4237.      14.5   73  \
1\"\>", ",", "\<\"plymouth fury gran sedan\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"13.0   8   307.0      130.0      4098.      14.0   72  \
1\"\>", ",", "\<\"chevrolet chevelle concours (sw)\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"15.0   8   383.0      170.0      3563.      10.0   70  \
1\"\>", ",", "\<\"dodge challenger se\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8229389059812517`*^9, 3.8229435995553465`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"dc0f4519-6e31-4fe7-95b6-024f155914ea"]
}, Open  ]],

Cell["\:6bcf\:4e00\:884c\:7684\:51fd\:6570\:5934\:662f\:5217\:8868", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
  3.8142865243132267`*^9}, {3.814286683187264*^9, 3.8142866987207537`*^9}, {
  3.814286740910289*^9, 3.81428675041385*^9}, {3.82293914618751*^9, 
  3.822939152065397*^9}},ExpressionUUID->"4c5d51ee-640c-4235-ba64-\
6ebaffa1cb51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"autoMPGData", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "//", "Head"}]], "Input",
 CellChangeTimes->{{3.814104055126112*^9, 3.81410406204134*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"b0c82df9-468f-42af-981b-47d07f4798e5"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{3.8229391334538937`*^9, 3.8229436035328007`*^9, 
  3.8236021728785505`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"73c9b749-ee9e-45f7-ae34-0a4dd580785a"]
}, Open  ]],

Cell["\:6bcf\:4e00\:884c\:5f53\:4e2d\:7684\:5143\:7d20\:7684\:7c7b\:578b", \
"Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
  3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, {
  3.8229391654421377`*^9, 
  3.8229391838207994`*^9}},ExpressionUUID->"4173ed70-fae3-44da-814b-\
e9788821f6fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "/@", 
  RowBox[{"autoMPGData", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.814104055126112*^9, 3.814104079527597*^9}, {
  3.8236022365529985`*^9, 3.823602245318776*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"8ffb0bb9-897c-40b2-be28-2bc879a0097f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"String", ",", "String"}], "}"}]], "Output",
 CellChangeTimes->{
  3.8229391551599193`*^9, 3.8229436060057917`*^9, {3.823602237858902*^9, 
   3.823602246369505*^9}},
 CellLabel->"Out[10]=",ExpressionUUID->"bd95619a-a7b4-44c8-b9f2-c73cafc1695e"]
}, Open  ]],

Cell["\:9700\:8981\:628a\:7b2c\:4e00\:4e2a\:5b57\:7b26\:4e32\:7c7b\:578b\:8f6c\
\:5316\:6210\:4e00\:4e2a\:6570\:7ec4", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
  3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, {
  3.814286783885315*^9, 3.814286800940009*^9}, {3.822939200068968*^9, 
  3.822939224833681*^9}},ExpressionUUID->"cfa09f26-bcc0-46f7-b1dc-\
365ec9dcdb2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"autoMPGData", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.814104102859766*^9, 3.814104105803425*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"c9f5aa6a-cee0-4c2d-994e-1816b5290d44"],

Cell[BoxData["\<\"18.0   8   307.0      130.0      3504.      12.0   70  \
1\"\>"], "Output",
 CellChangeTimes->{3.823602297178561*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"6ebd08a0-7059-4a76-ae6d-214d651bb8b7"]
}, Open  ]],

Cell["\:7b80\:5355\:6570\:636e\:6e05\:6d17", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
  3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
  3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, {
  3.8142868143708687`*^9, 3.814286840833124*^9}, {3.822943477519902*^9, 
  3.822943479963928*^9}},ExpressionUUID->"679f6973-b240-407b-b450-\
1e124489344d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<1.2\>\"", "+", "1"}]], "Input",
 CellChangeTimes->{{3.8236023742090116`*^9, 3.8236023750487595`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"2ae4dfe2-d742-4190-8a0a-48dc068b6e15"],

Cell[BoxData[
 RowBox[{"1", "+", "\<\"1.2\"\>"}]], "Output",
 CellChangeTimes->{3.823602375418933*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"634d5a4c-3028-472c-8a0d-c449ce95da12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringSplit", "[", "\"\<1 2 3\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.823602572578494*^9, 3.8236025939290733`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"1f46fd18-904c-47c8-ba21-665dffc793ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"1\"\>", ",", "\<\"2\"\>", ",", "\<\"3\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.823602594498935*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"afa22813-7455-42a6-99e8-56c101c616e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "\"\<name\>\""}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.82360260278916*^9, 3.823602616958664*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"7355ee82-0f58-4b6f-9092-aa3d7c469c41"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "\<\"name\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8236026177488728`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"8b0d1e68-00d9-4405-97ba-b3402d044d7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToExpression", "[", "\"\<?\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.823602357078368*^9, 3.823602395928797*^9}, {
  3.8236025023389616`*^9, 3.823602505448784*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"bbd1af91-9ac3-410c-b616-bcd129ea81c7"],

Cell[BoxData[
 TemplateBox[{
  "Information", "basic", 
   "\"?Name gives information on Name, ?Ab* on all symbols starting with Ab. \
??Name gives more information.\"", 2, 14, 1, 19398822183520536520, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.823602506608508*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"298ce943-9141-4069-95c2-5d4cc6d4e6af"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cleanData", " ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#", "===", "\"\<?\>\""}], ",", "Null", ",", 
            RowBox[{"ToExpression", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", " ", 
    "autoMPGData"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.814104128804803*^9, 3.814104145197585*^9}, {
  3.8141047213588057`*^9, 3.814104802478694*^9}, {3.8141048969160023`*^9, 
  3.814104901681897*^9}, {3.8229439093474417`*^9, 3.8229439138757467`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"954122cf-574d-4ae8-9365-e629f44591c0"],

Cell["\:7528 Missing \:5904\:7406\:7f3a\:5931\:6570\:636e", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.8142868489756804`*^9, 3.814286872130486*^9}, {
   3.822943494240076*^9, 
   3.822943502845925*^9}},ExpressionUUID->"14e34c16-a6cd-4275-b8ed-\
1f64551b3394"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cleanData", " ", "=", " ", 
   RowBox[{"cleanData", " ", "/.", " ", 
    RowBox[{"Null", "\[Rule]", " ", 
     RowBox[{"Missing", "[", "]"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.814112766651458*^9, 3.814112777526607*^9}, {
  3.814113184475642*^9, 3.814113209677794*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"286ba33f-4873-4dda-bcd1-848173dec49a"],

Cell["\:68c0\:67e5\:6837\:672c\:6570\:91cf", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814286887329316*^9, 3.814286910673053*^9}, {
   3.8229435209001684`*^9, 
   3.822943522873295*^9}},ExpressionUUID->"d14e9442-17b6-4ba8-8062-\
be7a938d8b88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"autoMPGData", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.814103960020097*^9, 3.8141039747230263`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"44179179-4dc4-4bc3-bbdd-9cd790f7d328"],

Cell[BoxData["398"], "Output",
 CellChangeTimes->{3.823601438243775*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"754dbccc-2ed5-408c-89a3-d69b6b1e691f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanData", "//", "Length"}]], "Input",
 CellChangeTimes->{3.8236027605686316`*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"dd437b98-2c3d-4c9f-bcb3-c2760b41957b"],

Cell[BoxData["398"], "Output",
 CellChangeTimes->{3.8236027611094947`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"6f16ab06-d3de-44c0-9864-7355819c22dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanData", "//", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.823602769168713*^9, 3.8236027718491173`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"72bf033d-1bbe-4163-98b2-8292d9afc7d2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"398", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{3.823602772408884*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"0c21106a-09dc-4494-a55f-220fa61f98ec"]
}, Open  ]],

Cell["\:628a\:6570\:636e\:5206\:4e3a\:8bad\:7ec3\:96c6\:548c\:6d4b\:8bd5\:96c6\
", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.8142869156012907`*^9, 3.814286922530357*^9}, {
   3.8229435356152205`*^9, 
   3.822943543530469*^9}},ExpressionUUID->"aa55c64d-2296-4b9b-b2fe-\
0c5b71274c52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanData", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8236028655789957`*^9, 3.8236028670890913`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"ea67c367-731d-4d86-a216-2143e2309ca2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "18.`", ",", "8", ",", "307.`", ",", "130.`", ",", "3504.`", ",", "12.`", 
   ",", "70", ",", "1", ",", "\<\"chevrolet chevelle malibu\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.823602867393784*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"a6b4949e-d757-4af7-bfb6-040dcea7ccc1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"training", ",", "testing"}], "}"}], "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{"2", ";;"}], "]"}], "]"}], " ", "\[Rule]", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "&"}], "/@", " ", "cleanData"}], 
     ",", "300"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.814103986848877*^9, 3.8141040325477324`*^9}, {
  3.8141048483766613`*^9, 3.814104871408156*^9}, {3.8141049095832872`*^9, 
  3.814104915230495*^9}, {3.823602901718837*^9, 3.823602904568735*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"66f2deb1-871d-4b2b-a57a-faa187b2652b"],

Cell["\<\
\:5728\:8bad\:7ec3\:96c6\:4e0a\:8ba1\:7b97\:9884\:6d4b\:5668\
\>", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814286931912715*^9, 3.8142869378417463`*^9}, {
   3.82294355323993*^9, 
   3.822943567813921*^9}},ExpressionUUID->"57e70dd4-8e73-4f83-acae-\
bdfcb4909d47"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{"Predict", "[", "training", "]"}]}]], "Input",
 CellChangeTimes->{{3.814104919686697*^9, 3.814104927554586*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"0668a0a2-0e9b-4983-ac44-eb99956dfc82"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Nominal\"",
                     ",", "\"Text\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Nominal", "Text"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Nominal\"",
                     ",", "\"Text\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Nominal", "Text"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 300, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Nominal"], "f8" -> 
           Association["Type" -> "Text"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Text", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 8]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Nominal", "Text"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
           "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6], "f7" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                 "Version" -> {12.2, 0}, "ID" -> 2890808244938110393]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.2, 0}, "ID" -> 5629229317859041261]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
               "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Output" -> 
             Association[
              "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
               "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                 3108122425444935999]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {12.2, 0}, "ID" -> 
                 4678014907749892316]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f4f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 300, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {5.81, 214.705, 111.98993288590604`, 3133., 
                    15.262333333333336`, 74.43333333333334}, "Method" -> 
                    "Naive", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 6]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{0.4605590621517039, 
                    0.16532129222891656`, -0.17928480258893864`}, {
                    0.47481865987092087`, 
                    0.10973097855544875`, -0.15783158719594648`}, {
                    0.46711400079704124`, -0.05038165021487633, 
                    0.0910181514892921}, {0.45121493134376595`, 
                    0.21668223939483658`, -0.30890288627439744`}, \
{-0.35406462025884416`, 
                    0.25027290269167884`, -0.8433558144222124}, \
{-0.12361404119722114`, 0.9211416575705231, 0.35775944833773293`}}, 
                    "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 3, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0280176, "MaxTrainingMemory" -> 
                    246592, "DataMemory" -> 57808, "FunctionMemory" -> 22144, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 3, 1, 10, 1, 50.2685745`9.453871422603518}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 6, "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                 "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                 8312269817718464215]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Mean" -> {5.8100000000000005`, 214.705, 111.80060492339395`, 
              3133., 15.262333333333322`, 74.43333333333334}, 
             "StandardDeviation" -> {1.7494475318416, 108.9054198605377, 
              40.213575468437234`, 882.9886446985981, 2.7367281966286785`, 
              2.772283455124271}, "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Version" -> {12.2, 0}, "ID" -> 3893966427905481628]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4900972772377279668, "Output" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7285476586811196156, "Output" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {12.2, 0}, "ID" -> 2222775132089472284, "Output" -> 
             Association[
              "f8" -> 
               Association["Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association["KeyHashes" -> CompressedData["
1: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
                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.2, 0}]], 
             "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDgBxIx7ItmSbsKOuz4p2ex0YTF4cbUhKg1F8TgtMLyvX8q
nJkdREO37t6YLQQXh+mD8Wf5Nf56zCXi0G2Uemd2ggBcPUwc3Vx0eXQ+zHwY
H51GN6/13/JYeQE+DPegqyOWhvkDXRyXe9H9jx5OxLpnvfSa7Ze8+XHaT4iG
uIsJbh96uMTP7+8MkeHEsA/dfbj4uPwBEz/48dhW0WJ2h4mPi6udvrOT7H70
cEQPb/T0RWp8oqcvdHWzr3H/XGbKjdNduPTBwplQ+MDCG+Z+Yv1ByF5c+Qtd
H658S2w+Q0/3L1ObbZ88wyw3CKUjQukKnQ8LN3TzbRtaS5f948EZPrjM4yx4
ObevhQOnP2HmovsbF5+8fCqEQcP8gct8XOUCuv9RzWUimC5v7ln7XS8q2579
rupBo9L/9jD51+YbE//pMxKdPtHjCT194vIXrvhFT2/o8UJsPsFlPro9uOoR
QvkCl3uJTY/o7iO2XEavX2DlO7npFWYeoXQIs++xwMWThycwE13vwtwHALj8
4gE=
              "], "Version" -> {12.2, 0}, "ID" -> 8569996936033225891, 
             "Output" -> 
             Association[
              "f8" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
             "Version" -> {12.2, 0}, "ID" -> 5435731262383570496, "Output" -> 
             Association[
              "f7" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Spans" -> {
               Span[1, 271], 
               Span[272, 277]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association[
              "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 9135963464857814042]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 1916512723103570139]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {20.799}, "StandardDeviation" -> {6.274889029563264}, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2901205138368446714]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2965090389962885354]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (20.799 + 6.274889029563264 #& ), 
      "ProcessorFunction" -> (-3.314640291168245 + 0.15936536810270902` #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.8803519782438636`, 3.554007074058514}], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 280, 
            278, 277, 278, 279, 1, 3}], 
          "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
           0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
           0.24144437909126282`, -0.16238045692443848`, -0.16512740403413773`,
            1.5453717708587646`, -0.4086989164352417, -0.5082264244556427, \
-0.8244205117225647, -0.12709682434797287`, 0.2570083737373352}, "LeafValues" -> 
          RawArray["Real32",{0.27454280853271484`, -0.0012502095196396112`, 
            0.12858454883098602`, -0.21503737568855286`, 0.4201658070087433, 
            0.027646714821457863`, -0.11891729384660721`, -0.0986684262752533,
             0.1277281790971756, 
            0.2089415192604065, -0.2680649757385254, -0.06987715512514114, 
            0.07632865756750107, -0.23056769371032715`, \
-0.16891087591648102`, -0.030721331015229225`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
            10, -7}, {11, -8}, {-6, 12}, {-3, -10}, {13, -11}, {-2, 
            15}, {-9, -13}, {14, -14}, {-4, -15}, {-12, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 280, 
            277, 278, 277, 278}], 
          "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
           0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
           0.24144437909126282`, -0.16238045692443848`, -0.15244100242853165`,
            0.9478608965873718, 
           1.3836916089057922`, -0.47525152564048767`, \
-0.027853557374328375`}, "LeafValues" -> 
          RawArray["Real32",{0.2196408063173294, -0.008401170372962952, 
            0.10741382092237473`, -0.14866532385349274`, 0.3361392319202423, 
            0.022123942151665688`, -0.09512726962566376, -0.07892817258834839,
             0.10387792438268661`, 
            0.17289654910564423`, -0.17131538689136505`, \
-0.21261852979660034`, 0.056414198130369186`, -0.046495724469423294`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
            10, -7}, {13, -8}, {-6, 12}, {-3, -10}, {-4, 
            11}, {-11, -12}, {-9, -13}, {-2, -14}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 278, 278, 1, 280, 278, 280, 275, 278, 
            278, 280, 277}], 
          "NumericalThresholds" -> {-0.4167654514312744, -1.1651025414466858`,
            0.586245059967041, 
           0.05261777155101299, -0.3362342417240143, -1.0184027552604675`, 
           0.5593376457691193, -1.0345970392227173`, -0.054887235164642334`, 
           1.3984212279319763`, 0.924881786108017, -0.10787223652005196`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.15966451168060303`, -0.02654353529214859, 
            0.12575729191303253`, -0.13848808407783508`, 
            0.27097970247268677`, -0.11675766855478287`, 0.08756022155284882, 
            0.011100471019744873`, 
            0.03613927587866783, -0.08169486373662949, -0.18380668759346008`, \
-0.06947404146194458, -0.031377293169498444`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 6}, {7, 5}, {-1, -5}, {10, 
            11}, {-3, 8}, {9, 
            12}, {-7, -9}, {-2, -10}, {-4, -11}, {-6, -12}, {-8, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 278, 1, 277, 279, 280, 276, 275, 
            197, 280, 277, 280, 280, 278}], 
          "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.586245059967041, 
           0.052617864683270454`, -0.6694435179233551, 
           0.6047321557998657, -0.3362342417240143, 
           0.24144437909126282`, -1.0345970392227173`, 0.0010977291967719793`,
            0.924881786108017, -0.3825637698173523, 0.20349645614624023`, 
           0.5649594366550446, 1.243042528629303}, "LeafValues" -> 
          RawArray["Real32",{0.12985287606716156`, 0.008090557530522346, 
            0.12887440621852875`, -0.15231741964817047`, 0.2191261649131775, 
            0.05977506563067436, 
            0.050121717154979706`, -0.09340613335371017, -0.07111170887947083,
             0.019277423620224, -0.10256650298833847`, \
-0.055579233914613724`, -0.04150332510471344, -0.03231019526720047, \
-0.0146383848041296, -0.11903764307498932`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {8, 7}, {-1, -5}, {6, 
            9}, {-3, -7}, {10, 11}, {12, 13}, {-6, -10}, {-4, 
            15}, {-8, -12}, {-2, 14}, {-9, -14}, {-13, -15}, {-11, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 280, 277, 278, 280, 280, 279, 280, 277, 
            1, 275, 277, 279, 280, 3}], 
          "NumericalThresholds" -> {-0.4167654514312744, 1.2770469188690186`, 
           0.380217507481575, -1.0339843034744263`, 1.2892709970474243`, 
           0.9344088137149811, 
           0.9131649434566498, -0.16512740403413773`, -0.3009493798017502, 
           0.052617454901337624`, -1.0345970392227173`, 
           1.5696318745613098`, -0.8208113014698029, 0.19654250144958496`, 
           0.25700874626636505`}, "LeafValues" -> 
          RawArray["Real32",{0.06759034842252731, 0.006423882208764553, 
            0.17993171513080597`, -0.08690964430570602, 0.04945109784603119, 
            0.029071440920233727`, -0.038698162883520126`, \
-0.06785114109516144, 0.09037312120199203, -0.050930917263031006`, 
            0.13877150416374207`, 
            0.013525513000786304`, -0.11191584169864655`, \
-0.09626980870962143, -0.018161285668611526`, -0.0551946647465229}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {5, 6}, {8, 11}, {7, -6}, {
            12, -7}, {9, -8}, {-1, 10}, {-2, 14}, {-9, -11}, {-5, -12}, {
            13, -13}, {15, -14}, {-10, -15}, {-4, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 278, 280, 277, 280, 280, 277, 279, 
            279, 280, 280, 278, 279, 277, 278}], 
          "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.9138865172863007, 
           0.9177141487598419, -0.36269110441207886`, 
           0.5677475333213806, -0.8755308985710144, 0.9413321912288666, 
           0.8980397582054138, 0.45370906591415405`, -0.5140877664089203, 
           0.5649594366550446, -0.027853557374328375`, -1.0121296644210815`, \
-0.03924974054098129, 1.2327117323875427`}, "LeafValues" -> 
          RawArray["Real32",{0.0831213891506195, -0.005849028471857309, 
            0.06889548152685165, -0.07379031926393509, 
            0.15983928740024567`, -0.006925005931407213, 0.08034709841012955, 
            0.030868079513311386`, -0.06480934470891953, \
-0.050180356949567795`, -0.013437485322356224`, -0.06923433393239975, 
            0.015517066232860088`, -0.03778395429253578, \
-0.10363155603408813`, -0.007940034382045269, -0.05207176133990288}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {8, 11}, {-1, -5}, {6, -6}, {
            7, -7}, {-3, 10}, {9, -9}, {12, -10}, {-8, -11}, {14, 16}, {13, 
            15}, {-2, -14}, {-4, -15}, {-13, -16}, {-12, -17}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 280, 278, 278, 280, 275, 280, 197, 1, 
            277, 278, 279, 278}], 
          "NumericalThresholds" -> {-0.4167654514312744, 1.2770469188690186`, 
           0.5418395698070526, -1.0339843034744263`, 
           0.19775357842445374`, -1.03275465965271, 0.5593376457691193, 
           
           0.001291881431825459, -0.12709664553403854`, \
-0.16657021641731262`, -0.054887235164642334`, -0.12973511964082718`, 
           0.9138865172863007}, "LeafValues" -> 
          RawArray["Real32",{0.07553435117006302, -0.01064562052488327, 
            0.1218661218881607, -0.08053594082593918, \
-0.0015547958901152015`, -0.023235270753502846`, 0.04008512571454048, 
            0.011818408966064453`, -0.05061765015125275, 
            0.013763513416051865`, -0.014146422035992146`, \
-0.03436519578099251, 0.038516849279403687`, -0.045801322907209396`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {7, 5}, {6, 9}, {8, 
            13}, {-1, -7}, {11, 10}, {-4, -9}, {-5, 
            12}, {-8, -11}, {-2, -12}, {-10, -13}, {-6, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 278, 280, 277, 1, 275, 280, 279, 277, 
            278, 280, 278, 280, 197}], 
          "NumericalThresholds" -> {-0.9270240962505341, 0.5330736041069031, 
           0.9269111454486847, -0.598229706287384, 
           0.05261749587953091, -1.0334349274635315`, -0.3362342417240143, 
           0.0842905305325985, -0.019351182505488396`, 1.3836916089057922`, 
           0.5720357596874237, -0.027853557374328375`, 0.9260920882225037, 
           0.001291881431825459}, "LeafValues" -> 
          RawArray["Real32",{0.03084595873951912, 
            0.024458331987261772`, -0.04152609780430794, 0.12732428312301636`,
             0.00407254695892334, 0.08453011512756348, 
            0.018506154417991638`, -0.048386625945568085`, \
-0.013069669716060162`, -0.0190475732088089, -0.06932181864976883, \
-0.002829751931130886, -0.04793800786137581, -0.015241634100675583`, \
-0.023412737995386124`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {6, 7}, {4, -4}, {
            5, -5}, {-1, -6}, {-2, 8}, {10, 13}, {9, 
            11}, {-7, -10}, {-3, -11}, {12, -12}, {-9, -13}, {
            14, -14}, {-8, -15}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 1, 277, 279, 278, 3, 278, 280, 279, 
            2, 279, 278}], 
          "NumericalThresholds" -> {-1.02542382478714, -1.1940594911575317`, 
           0.05261777155101299, 0.9461058378219604, 
           0.8940755724906921, -0.6289621293544769, 0.2570086270570755, 
           0.9138865172863007, 1.2935548424720764`, 
           0.8980397582054138, -0.44058623909950256`, -0.7603926062583923, 
           1.2991141080856323`}, "LeafValues" -> 
          RawArray["Real32",{0.036025531589984894`, -0.0013633504277095199`, 
            0.05521760880947113, 
            0.10173875093460083`, -0.04637053981423378, \
-0.011864186264574528`, 0.0012381782289594412`, 
            0.01978525146842003, -0.033495426177978516`, 
            0.01734810508787632, -0.0370592325925827, -0.026802031323313713`, \
-0.057521916925907135`, -0.028821835294365883`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, 5}, {-1, -4}, {8, 12}, {6, -6}, {
            7, -7}, {-3, -8}, {9, -9}, {10, -10}, {11, -11}, {-2, -12}, {
            13, -13}, {-5, -14}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 280, 276, 277, 275, 280, 3, 3, 277, 279, 
            280, 3}], 
          "NumericalThresholds" -> {-0.9270240962505341, 0.9269111454486847, 
           0.15237538516521454`, -0.598229706287384, -1.0363672375679016`, 
           1.2774283289909363`, 0.2570081502199173, -0.37105588614940643`, 
           1.5696318745613098`, 0.2728509306907654, -1.2298340201377869`, 
           0.25700850784778595`}, "LeafValues" -> 
          RawArray["Real32",{0.05533215403556824, 0.007683958392590284, 
            0.0890626534819603, -0.010212189517915249`, \
-0.0014470198657363653`, 0.017112091183662415`, 0.0015963212354108691`, 
            0.023659704253077507`, -0.02317892201244831, \
-0.04384102672338486, -0.0006254467298276722, -0.020094098523259163`, \
-0.03277645632624626}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {7, 6}, {5, -5}, {-1, -6}, {
            9, -7}, {8, 10}, {-2, -9}, {11, -10}, {-8, -11}, {-4, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 276, 280, 279, 277, 278, 276, 276, 280, 
            278, 276, 278, 279, 2}], 
          "NumericalThresholds" -> {-0.3825637698173523, -0.931493729352951, 
           0.9269111454486847, 1.3020336031913757`, 
           0.9461058378219604, -1.1370901465415955`, -0.13077695667743683`, \
-0.6807116568088531, 1.285346806049347, 0.6710935235023499, 
           0.3197755366563797, -0.23888037353754044`, -1.0054724216461182`, \
-0.4405868500471115}, "LeafValues" -> 
          RawArray["Real32",{
            0.017762530595064163`, -0.00470725167542696, \
-0.0012899129651486874`, 
            0.07125011831521988, -0.004233403597027063, \
-0.011205143295228481`, 0.04664892703294754, -0.014482364989817142`, 
            0.03684321790933609, 0.005458053667098284, -0.02584812603890896, 
            0.007966993376612663, -0.024880370125174522`, \
-0.037946008145809174`, -0.029841206967830658`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 7}, {4, -4}, {6, -5}, {9, 
            13}, {-1, -7}, {8, -8}, {-3, -9}, {10, -10}, {11, -11}, {
            12, -12}, {-2, -13}, {14, -14}, {-6, -15}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 280, 276, 279, 277, 1, 1, 279, 280, 280, 
            276, 278, 1, 2}], 
          "NumericalThresholds" -> {-0.7113344073295593, 
           0.9308460652828217, -1.1521973013877869`, 0.9971522688865662, 
           0.380217507481575, -0.12709762901067734`, -0.1270967423915863, \
-0.4701126515865326, -0.8875118792057037, -0.16238045692443848`, 
           0.9391058683395386, -0.1269862912595272, -0.12709684669971466`, \
-0.4405869096517563}, "LeafValues" -> 
          RawArray["Real32",{0.046205468475818634`, 0.02296341024339199, 
            0.06733786314725876, 0.0213339701294899, -0.03191849961876869, 
            0.0055102212354540825`, -0.032790377736091614`, 
            0.02536340244114399, -0.03775624930858612, -0.028303446248173714`,
             0.005078345071524382, -0.018873075023293495`, \
-0.012253137305378914`, -0.025350240990519524`, -0.006078619975596666}], 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {6, 
            8}, {-2, 7}, {12, 9}, {11, -9}, {-8, 10}, {-10, -11}, {-6, 
            13}, {-7, -13}, {14, -14}, {-12, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 275, 280, 279, 277, 280, 1, 276, 278, 1, 
            279, 276, 280}], 
          "NumericalThresholds" -> {-0.3825637698173523, -1.03275465965271, 
           0.9234128594398499, 0.9131649434566498, -0.7773292362689972, 
           1.285346806049347, 0.052616871893405914`, -0.22175536304712296`, 
           1.6209778189659119`, -0.12709765881299973`, -0.8256375789642334, 
           1.23656564950943, -0.8793110847473145}, "LeafValues" -> 
          RawArray["Real32",{0.023614777252078056`, -0.00017385170212946832`, 
            0.03640464320778847, 
            0.06097736954689026, -0.0217460747808218, -0.0011418793583288789`,
             0.004901946987956762, -0.001124439644627273, 
            0.00935328472405672, -0.030489061027765274`, 
            0.009123153053224087, -0.033583398908376694`, \
-0.019654732197523117`, -0.01401979848742485}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 4}, {5, -4}, {7, -5}, {-1, -6}, {
            9, -7}, {8, -8}, {-3, -9}, {10, -10}, {-2, 11}, {12, 
            13}, {-11, -13}, {-12, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 278, 280, 280, 275, 277, 2, 279, 278, 
            280, 280, 197}], 
          "NumericalThresholds" -> {-0.3617333471775055, \
-1.3061254620552063`, -0.8839132487773895, -0.16512740403413773`, \
-1.0253826975822449`, 1.5696318745613098`, -0.44058606028556824`, 
           0.4596843272447586, 0.34896931052207947`, 0.19654250144958496`, 
           0.9314837753772736, 0.0010977291967719793`}, "LeafValues" -> 
          RawArray["Real32",{0.03158675879240036, -0.005314247217029333, 
            0.02368658222258091, -0.021364789456129074`, 
            0.02211746759712696, -0.007444169372320175, \
-0.022720253095030785`, -0.019818348810076714`, 
            0.004544123541563749, -0.020016908645629883`, 
            0.015196402557194233`, 
            0.0034496819134801626`, -0.005082189105451107}], "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {-3, 4}, {-4, 5}, {8, -6}, {
            7, -7}, {9, -8}, {-5, -9}, {10, 11}, {-2, -11}, {
            12, -12}, {-10, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 278, 277, 276, 279, 277, 279, 275, 
            280, 2, 276}], 
          "NumericalThresholds" -> {-1.03275465965271, -1.1940594911575317`, \
-1.0163600444793701`, -0.875508576631546, -0.873746246099472, 
           0.08541429787874222, 0.380217507481575, -0.4701126515865326, 
           0.10916632413864136`, 
           0.20349645614624023`, -0.44058646261692047`, -0.344004824757576}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.03789302334189415, -0.02284109778702259, -0.01655227318406105, \
-0.00163305236492306, 0.031529542058706284`, -0.01602962426841259, 
            0.02259840816259384, -0.0018217996694147587`, \
-0.025406818836927414`, -0.004803162533789873, 
            0.020373893901705742`, -0.019633686169981956`, \
-0.0024547360371798277`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-3, 6}, {-2, 5}, {-5, 
            7}, {-4, -7}, {9, 8}, {11, -9}, {12, 
            10}, {-10, -11}, {-8, -12}, {-6, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 280, 276, 279, 279, 279, 277, 1, 2, 277, 
            275}], "NumericalThresholds" -> {-0.7113344073295593, 
           0.9308460652828217, -1.1564356684684753`, 0.9971522688865662, 
           0.9131649434566498, 0.6255472302436829, 
           0.07909523695707321, -0.12709740549325943`, -0.3834409564733505, 
           0.5486193597316742, 1.2542936205863953`}, "LeafValues" -> 
          RawArray["Real32",{0.02263147383928299, 0.021486222743988037`, 
            0.04070892930030823, 
            0.008928202092647552, -0.024800129234790802`, \
-0.02102522738277912, 
            0.0189574733376503, -0.025408269837498665`, \
-0.011489054188132286`, 
            0.009642579592764378, -0.0014530683401972055`, \
-0.016546377912163734`}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {6, -6}, {
            7, -7}, {8, 10}, {-2, 9}, {-9, -10}, {-8, 11}, {-11, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 3, 279, 276, 276, 3, 2, 280}], 
          "NumericalThresholds" -> {0.5148690640926361, -0.37105588614940643`,
            0.6047321557998657, -1.082087218761444, -0.8943966925144196, \
-0.3710567206144333, -0.4405861049890518, 0.19654250144958496`}, "LeafValues" -> 
          RawArray["Real32",{-0.015839263796806335`, 
            0.02144799567759037, -0.027115005999803543`, 0.03594974800944328, 
            0.018988868221640587`, -0.007586704567074776, 
            0.014818785712122917`, -0.01960224285721779, 
            0.0020941258408129215`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, 4}, {6, -4}, {-3, 5}, {-5, 
            7}, {-1, -7}, {8, -8}, {-6, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 280, 280, 280, 277, 277, 1, 5, 280, 3}], 
          "NumericalThresholds" -> {-1.0317081809043884`, 
           0.9308460652828217, -0.8858247101306915, -0.16512740403413773`, \
-0.875508576631546, -0.53905189037323, 0.052617454901337624`, 
           0.45464739203453064`, 1.285346806049347, 0.2570093721151352}, 
          "LeafValues" -> 
          RawArray["Real32",{0.020513368770480156`, -0.021086253225803375`, 
            0.03611576929688454, -0.02450891211628914, -0.005534946918487549, 
            0.012154110707342625`, -0.00947175920009613, 
            0.013165337033569813`, 0.008932653814554214, 0.005621093325316906,
             0.004011832643300295}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, 7}, {-2, 
            6}, {-6, 8}, {-5, -8}, {9, -9}, {10, -10}, {-7, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 280, 279, 2, 279, 280, 2, 280, 3, 3, 2}],
           "NumericalThresholds" -> {-0.7113344073295593, 0.9308460652828217, 
           1.3694056868553162`, -0.38344143331050873`, 0.8980397582054138, 
           0.5698419213294983, -0.3834407776594162, 0.20124167948961258`, 
           0.25700829923152924`, 0.2570091634988785, -0.44058753550052643`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.022274954244494438`, 0.008372453972697258, 
            0.025647392496466637`, -0.014227290637791157`, 
            0.00004004621951025911, -0.01632661744952202, \
-0.023318691179156303`, 0.019000597298145294`, 0.01600717194378376, 
            0.009888960979878902, -0.011981712654232979`, \
-0.00832326989620924}], "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -3}, {4, -4}, {-1, -5}, {6, -6}, {
            7, 9}, {8, -8}, {11, -9}, {-7, 10}, {-10, -11}, {-2, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 276, 3, 3, 2, 277, 277}], 
          "NumericalThresholds" -> {-1.3061254620552063`, \
-1.0858586430549622`, 
           0.59518763422966, -0.37105588614940643`, -0.44058606028556824`, \
-0.5424853265285492, 1.5696318745613098`}, "LeafValues" -> 
          RawArray["Real32",{0.012916324660182, -0.018584640696644783`, 
            0.020423172041773796`, 0.022507648915052414`, 
            0.0004590301541611552, -0.020920809358358383`, \
-0.0006406601751223207, -0.011304865591228008`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, -4}, {6, 5}, {
            7, -6}, {-3, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 278, 275, 278, 279, 279, 3}], 
          "NumericalThresholds" -> {-0.03941817581653595, \
-1.3061254620552063`, -1.0414962768554688`, -0.6961868405342102, 
           0.37745968997478485`, 0.7867037355899811, 0.2570093721151352}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.022500300779938698`, -0.013165309093892574`, \
-0.02229275181889534, 
            0.024324186146259308`, -0.004944028798490763, \
-0.006066533271223307, 0.007356608752161264, 0.006494227796792984}], 
          "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, 4}, {5, 6}, {-4, -6}, {
            7, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 276, 279, 279, 279, 278, 280}], 
          "NumericalThresholds" -> {0.5951881110668182, -1.1498605012893677`, 
           0.8940755724906921, 0.6331052184104919, 
           0.45370906591415405`, -0.6961868405342102, 0.20174553990364075`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.02458576299250126, -0.012882021255791187`, 
            0.009532217867672443, -0.02087334357202053, 
            0.01604963280260563, -0.016651878133416176`, \
-0.001238840282894671, -0.0033910099882632494`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {4, 7}, {5, -5}, {
            6, -6}, {-3, -7}, {-4, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 1, 1, 275, 1, 279, 278, 280}], 
          "NumericalThresholds" -> {-1.2001294493675232`, 0.05261793173849583,
            0.052616942673921585`, -1.0341809391975403`, \
-0.12709639966487885`, 
           0.8940755724906921, -0.6216471195220947, -0.16512740403413773`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.01378866657614708, 0.012392794713377953`, 
            0.002211736747995019, -0.015021871775388718`, 
            0.023748934268951416`, 
            0.0010094274766743183`, -0.011082129552960396`, \
-0.0012057365383952856`, 0.014863813295960426`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {5, -4}, {-3, -5}, {6, 8}, {
            7, -7}, {-2, -8}, {-6, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{279, 276, 280, 280, 276, 1, 2, 278, 1, 1, 
            278}], "NumericalThresholds" -> {
           0.7867037355899811, -1.1447357535362244`, 0.5720357596874237, 
           0.5698419213294983, -0.9763782918453217, -0.1270970031619072, \
-0.3834410756826401, -0.2887365520000458, 
           0.05261660926043987, -0.12709776312112808`, 0.6929723620414734}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.033742018043994904`, -0.01556121464818716, 
            0.024874772876501083`, 0.02849755436182022, 0.0121489018201828, 
            0.010327716358006, 
            0.0052764867432415485`, -0.01928790658712387, \
-0.002957650227472186, 
            0.013895111158490181`, -0.003811625065281987, \
-0.013020086102187634`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {6, -4}, {5, 7}, {-3, 
            9}, {-2, -7}, {8, -8}, {-5, 11}, {
            10, -10}, {-6, -11}, {-9, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 278, 275, 2, 198, 1, 278}], 
          "NumericalThresholds" -> {0.5951874554157257, 
           0.05261777155101299, -0.9672086834907532, -1.040117859840393, \
-0.03941860422492027, 
           9.999999682655224*^-21, -0.1270972266793251, -0.9559248983860016}, 
          "LeafValues" -> 
          RawArray["Real32",{0.013799251988530159`, -0.025073682889342308`, 
            0.026925865560770035`, 0.008540469221770763, 
            0.014292307198047638`, -0.017645906656980515`, \
-0.018908953294157982`, 0.001802439452148974, 0.0005351220606826246}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {-1, 5}, {6, -6}, {
            8, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 276, 279, 3, 3, 1, 278}], 
          "NumericalThresholds" -> {-1.0425257086753845`, \
-1.1498605012893677`, 0.8940755724906921, 0.59518763422966, 
           0.25700806081295013`, 0.05261734314262867, -0.6289621293544769}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.013181459158658981`, 0.0163401011377573, 
            0.009366769343614578, -0.0008011343306861818, 
            0.01695621944963932, -0.01763117127120495, -0.009199836291372776, \
-0.00012868750491179526`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 5}, {6, -5}, {-4, -6}, {
            7, -7}, {-3, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{279, 276, 276, 279, 280, 276, 279, 3, 1, 2, 
            278, 3, 279}], 
          "NumericalThresholds" -> {
           0.7867037355899811, -1.1447357535362244`, -1.0858586430549622`, 
           1.0665029883384705`, 
           0.5698419213294983, -0.9763782918453217, -0.4628574103116989, 
           
           0.25700800120830536`, -0.12709730863571167`, -0.3834410756826401, \
-0.2887365520000458, 0.25700800120830536`, -0.5780138075351715}, "LeafValues" -> 
          RawArray["Real32",{-0.02742445282638073, 0.02625906839966774, 
            0.018534068018198013`, 
            0.013701935298740864`, -0.0015962340403348207`, 
            0.007553763221949339, 0.022154632955789566`, 
            0.010989449918270111`, 
            0.0008206230704672635, -0.008238731883466244, \
-0.015643753111362457`, -0.000854615936987102, -0.011601094156503677`, \
-0.010041582398116589`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 5}, {-2, 4}, {-4, 12}, {6, 
            10}, {-3, 7}, {8, 9}, {-7, -9}, {-8, -10}, {11, -11}, {-6, 
            13}, {-5, -13}, {-12, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{280, 279, 1, 197, 1, 280, 197, 276, 280, 2}], 
          "NumericalThresholds" -> {1.2793542742729187`, 
           0.5263235569000244, -0.12709765881299973`, 
           0.0010977291967719793`, -0.12709727138280869`, -0.8875118792057037,
            0.0010858933092094958`, -1.1447357535362244`, 
           0.5724431276321411, -0.44058652222156525`}, "LeafValues" -> 
          RawArray["Real32",{0.0197064857929945, 0.006253626197576523, 
            0.022478537634015083`, -0.012059061788022518`, \
-0.002602673601359129, 
            0.017951402813196182`, -0.017335733398795128`, \
-0.004076446872204542, 
            0.001164105604402721, -0.010085159912705421`, \
-0.00813294854015112}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {10, -3}, {4, 5}, {-1, -5}, {-4, 6}, {
            7, 8}, {-6, -8}, {-7, 9}, {-9, -10}, {-2, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{280, 280, 277, 2, 278, 1, 279, 277, 275, 277, 
            280}], "NumericalThresholds" -> {-0.3362342417240143, \
-0.5267054438591003, -1.115539014339447, -0.4405864030122757, 
           1.145968496799469, -0.1270962730050087, -0.4628574103116989, 
           0.380217507481575, 0.10925018042325974`, 1.1658669114112854`, 
           1.2885085344314575`}, "LeafValues" -> 
          RawArray["Real32",{0.013792232610285282`, 
            0.020517369732260704`, -0.00541142001748085, \
-0.0035971286706626415`, -0.02729988656938076, 0.014306243509054184`, 
            0.009536352939903736, -0.013390731997787952`, \
-0.011102993041276932`, 0.008394910022616386, -0.0023815517779439688`, 
            0.00599811552092433}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {6, 4}, {-2, 5}, {-3, -5}, {8, -6}, {
            7, -7}, {10, -8}, {9, -9}, {11, -10}, {-1, -11}, {-4, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 276, 275, 276, 278, 278}], 
          "NumericalThresholds" -> {-1.2001294493675232`, \
-1.0895200967788696`, -1.040117859840393, -1.073139488697052, 
           1.5453717708587646`, 1.1174638271331787`}, "LeafValues" -> 
          RawArray["Real32",{-0.011670920997858047`, 0.011535377241671085`, 
            0.0116624366492033, -0.01673712022602558, \
-0.00030795822385698557`, -0.009324053302407265, 0.007420254871249199}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {
            6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 279, 275, 279, 277, 277, 277}], 
          "NumericalThresholds" -> {-0.37105588614940643`, 
           0.13236498832702637`, -1.0416456460952759`, 
           1.3619749546051025`, -0.7157378792762756, -0.5911622941493988, \
-0.4196389615535736}, "LeafValues" -> 
          RawArray["Real32",{-0.004416929092258215, -0.013619698584079742`, 
            0.01778203621506691, 
            0.012486116960644722`, -0.014705738052725792`, \
-0.02203473635017872, 0.01149261835962534, -0.0005422203103080392}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {5, -5}, {-4, 
            6}, {-6, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 276, 276, 268, 277, 280}], 
          "NumericalThresholds" -> {
           0.5951875746250153, -1.1498605012893677`, -1.076346755027771, 
           0.634238600730896, 1.4503214955329895`, -1.0584542155265808`}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.01989314891397953, -0.007889064028859138, \
-0.014468868263065815`, 
            0.00798051431775093, -0.009724906645715237, -0.005889540538191795,
             0.0009092956315726042}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, 4}, {5, -5}, {
            6, -6}, {-4, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 280, 279, 280, 3, 280, 2, 2, 275}], 
          "NumericalThresholds" -> {-1.2001294493675232`, -1.591059386730194, 
           1.3719453811645508`, 0.5724431276321411, 0.25700829923152924`, 
           1.2880584597587585`, -0.4405872970819473, -0.44058753550052643`, 
           1.2436336874961853`}, "LeafValues" -> 
          RawArray["Real32",{-0.010818377137184143`, -0.006985007785260677, 
            0.005590427201241255, 
            0.011937102302908897`, -0.012511558830738068`, \
-0.005061277188360691, 0.011835938319563866`, 
            0.007737062871456146, -0.0159414354711771, \
-0.0019868481904268265`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, -4}, {7, 5}, {-5, 
            6}, {-6, -7}, {8, 9}, {-3, -9}, {-8, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 278, 276, 1, 276, 277, 2, 1}], 
          "NumericalThresholds" -> {0.5951874554157257, 
           0.05261777155101299, -0.9672086834907532, -1.076346755027771, \
-0.12709667533636093`, 1.655495285987854, 
           1.1658669114112854`, -0.44058744609355927`, -0.12709655612707138`},
           "LeafValues" -> 
          RawArray["Real32",{-0.011366545222699642`, -0.019215477630496025`, 
            0.018501484766602516`, 
            0.0078414436429739, -0.00033078587148338556`, 0.01223114226013422,
             0.010364403016865253`, -0.018605565652251244`, 
            0.008335559628903866, -0.0019510505953803658`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {-1, 5}, {6, 8}, {
            7, -7}, {-5, -8}, {-6, 9}, {-9, -10}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{279, 277, 1, 276, 276, 277}], 
          "NumericalThresholds" -> {1.5568374395370483`, -1.0759419202804565`,
            0.5148686468601227, -1.0835952162742615`, -0.931493729352951, \
-0.5897798538208008}, "LeafValues" -> 
          RawArray["Real32",{-0.010484411381185055`, 
            0.008961984887719154, -0.015354341827332973`, 0.01280071958899498,
             0.009377719834446907, -0.007344858255237341, 
            0.0005396028282120824}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, 3}, {4, -4}, {-3, 5}, {-5, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{277, 276, 3, 3, 3, 3, 3}], 
          "NumericalThresholds" -> {-1.115539014339447, -1.0858586430549622`, 
           0.59518763422966, 0.25700952112674713`, 0.2570084482431412, 
           0.25700829923152924`, 0.2570085972547531}, "LeafValues" -> 
          RawArray["Real32",{0.008126666769385338, -0.0095839723944664, 
            0.0002750778803601861, 
            0.009612934663891792, -0.012315982021391392`, \
-0.011749683879315853`, 0.01808997616171837, -0.00041864081867970526`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, -4}, {5, -5}, {6, 
            7}, {-3, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 277, 276, 278, 278, 5, 277, 280}], 
          "NumericalThresholds" -> {-0.7113344073295593, -0.5447868406772614, \
-1.1498605012893677`, -1.0963134765625, -0.8169848620891571, 
           0.45464739203453064`, -0.3651316314935684, 1.2774283289909363`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.013149566017091274`, -0.011642461642622948`, 
            0.009937590919435024, -0.008363166823983192, 
            0.006524340249598026, -0.013481352478265762`, 
            0.007425997871905565, -0.001643745112232864, 
            0.0072645749896764755`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 5}, {-1, 4}, {-4, -5}, {-3, 6}, {
            7, -7}, {-6, 8}, {-8, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 276, 280, 279, 277, 279, 279, 278, 279, 
            276, 280, 276}], 
          "NumericalThresholds" -> {-1.2001294493675232`, -1.078149437904358, 
           0.21034157276153564`, 0.45370906591415405`, -0.2872590571641922, 
           0.8004424571990967, 
           0.09210430085659027, -0.2551615461707115, -0.4628574103116989, 
           0.895233541727066, -0.16238045692443848`, -0.6777399182319641}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.009282435290515423, -0.0001821446348913014, 
            0.010468689724802971`, 
            0.016280481591820717`, -0.01749027706682682, 
            0.0057985675521194935`, -0.009801829233765602, 
            0.016635973006486893`, -0.0008351091528311372, \
-0.010438655503094196`, -0.0009639826603233814, 0.00020497389778029174`, 
            0.0033305359538644552`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {7, 5}, {
            6, -6}, {-5, 12}, {9, 8}, {-8, -9}, {10, 
            11}, {-3, -11}, {-10, -12}, {-7, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 2, 1, 3, 1, 3, 3, 279}],
           "NumericalThresholds" -> {
           0.5148681104183197, -0.38344042003154755`, 
           0.05261748284101486, -0.3710564225912094, -0.12709622830152512`, 
           0.25700922310352325`, 0.2570084482431412, -0.2693609446287155}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.009288119152188301, -0.020371371880173683`, 
            0.004497785586863756, 0.01802779734134674, 0.002055453835055232, 
            0.007264339830726385, 
            0.011801005341112614`, -0.004852613899856806, \
-0.00031614836188964546`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, 5}, {6, -6}, {
            7, 8}, {-5, -8}, {-7, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{279, 276, 280, 280, 276, 277, 279, 1, 1, 2, 
            278, 279}], 
          "NumericalThresholds" -> {0.7867037355899811, -1.1447357535362244`, 
           0.5720357596874237, 
           0.5698419213294983, -0.9848584532737732, -0.9881703853607178, \
-0.4628574103116989, -0.12709667533636093`, -0.12709730863571167`, \
-0.3834410756826401, 0.6929723620414734, 0.055151479318737984`}, "LeafValues" -> 
          RawArray["Real32",{-0.0180425476282835, 0.005052870139479637, 
            0.01457914523780346, 0.016704635694622993`, 
            0.011427092365920544`, -0.0003905616467818618, \
-0.007246605586260557, 0.00939659308642149, 
            0.013039865531027317`, -0.005306564271450043, \
-0.011382278986275196`, -0.009786046110093594, -0.005971821490675211}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {6, -4}, {5, 10}, {-3, 
            7}, {-2, -7}, {8, 9}, {-6, -9}, {-8, -10}, {11, -11}, {
            12, -12}, {-5, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{280, 280, 280, 277, 277, 278, 277, 2, 279}], 
          "NumericalThresholds" -> {-1.591059386730194, -0.8875118792057037, \
-0.3362342417240143, -0.5078847259283066, -1.115539014339447, 
           1.145968496799469, 
           0.380217507481575, -0.4405865967273712, -0.46746909618377686`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.006113220937550068, 
            0.002305335598066449, -0.015005293302237988`, 
            0.013426946476101875`, -0.006457822397351265, 
            0.00019105023238807917`, 
            0.011108875274658203`, -0.010704310610890388`, 
            0.016898831352591515`, 0.005720142740756273}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {8, 3}, {4, 5}, {-3, 9}, {-4, 6}, {
            7, -7}, {-6, -8}, {-2, -9}, {-5, -10}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 2, 1, 275, 2, 278, 278}], 
          "NumericalThresholds" -> {0.5148681104183197, -0.3834404945373535, 
           0.05261748284101486, -1.040117859840393, -0.03941860422492027, 
           1.6209778189659119`, 1.1174638271331787`}, "LeafValues" -> 
          RawArray["Real32",{0.009380080737173557, -0.017774194478988647`, 
            0.002838077489286661, 
            0.014733376912772655`, -0.00015560431347694248`, \
-0.01244171429425478, -0.007942883297801018, 0.006176110357046127}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, 5}, {6, -6}, {
            7, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 276, 277, 277, 277, 277, 280}], 
          
          "NumericalThresholds" -> {-1.2001294493675232`, -1.078149437904358, \
-0.875508576631546, -0.7113344073295593, -0.5956476330757141, \
-0.5327193140983582, 0.21034157276153564`}, "LeafValues" -> 
          RawArray["Real32",{-0.008025506511330605, 
            0.0006496154237538576, -0.007065760903060436, 
            0.008456258103251457, -0.00869842991232872, 
            0.015555921010673046`, -0.0006445737089961767, 
            0.012069824151694775`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {7, 3}, {-3, 4}, {-4, 5}, {-5, 
            6}, {-6, -7}, {-2, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 279, 2, 279, 277, 277, 277}], 
          "NumericalThresholds" -> {-0.37105588614940643`, 
           0.13236498832702637`, -0.38343997299671173`, 
           1.3619749546051025`, -0.7372037768363953, -0.5403354465961456, \
-0.4097961485385895}, "LeafValues" -> 
          RawArray["Real32",{-0.0026482599787414074`, 0.011423910036683083`, 
            0.012255924753844738`, -0.0094746770337224, \
-0.008353671990334988, -0.009848793037235737, 
            0.008993761613965034, -0.0004685443127527833}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {4, -4}, {5, -5}, {-2, 
            6}, {-6, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 278, 276, 1, 1, 200, 280}], 
          "NumericalThresholds" -> {
           0.5951873660087585, -0.9672086834907532, -1.1498605012893677`, 
           0.052616942673921585`, -0.1270979419350624, 
           0.5571524947881699, -1.591059386730194}, "LeafValues" -> 
          RawArray["Real32",{0.013123045675456524`, -0.01418428122997284, 
            0.006067157257348299, -0.006167818792164326, \
-0.006917756050825119, -0.005471943411976099, -0.008425688371062279, 
            0.0026890693698078394`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {5, -5}, {-4, 6}, {
            7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 276, 279, 279, 275, 275, 275, 275, 280}],
           "NumericalThresholds" -> {-1.2001294493675232`, -1.078149437904358,
            0.8940755724906921, 1.3565325736999512`, 1.2542936205863953`, 
           1.2471793293952942`, 1.2450059056282043`, 1.2495202422142029`, 
           0.21034157276153564`}, "LeafValues" -> 
          RawArray["Real32",{-0.007064792327582836, 0.0008496418013237417, 
            0.001397383282892406, -0.010383344255387783`, \
-0.000811989710200578, -0.004722866229712963, 
            0.01426104735583067, -0.013459884561598301`, 
            0.0015936767449602485`, 0.00981683935970068}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {9, 3}, {5, 4}, {-4, -5}, {6, -6}, {
            7, 8}, {-3, -8}, {-7, -9}, {-2, -10}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{279, 276, 276, 276, 1, 280, 276, 279, 277, 1, 
            2, 278, 1}], 
          "NumericalThresholds" -> {
           0.7867037355899811, -1.1293277144432068`, -1.0858586430549622`, \
-0.6931112706661224, -0.12709705531597137`, 
           0.5698419213294983, -0.9406689703464508, -0.4628574103116989, \
-0.1627279743552208, -0.12709667533636093`, -0.3834410756826401, 
           0.6929723620414734, -0.12709680944681168`}, "LeafValues" -> 
          RawArray["Real32",{-0.014701745472848415`, 0.01535436138510704, 
            0.013731682673096657`, -0.008658185601234436, \
-0.00267204106785357, 
            0.01170382834970951, -0.005209613125771284, \
-0.00028833778924308717`, 0.0016075060702860355`, -0.012515298090875149`, 
            0.011402054689824581`, -0.009778271429240704, \
-0.007538164034485817, 0.008825433440506458}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 6}, {-2, 4}, {-4, 5}, {-5, -6}, {
            7, 11}, {-3, 8}, {10, 9}, {-9, -10}, {-8, -11}, {12, -12}, {
            13, -13}, {-7, -14}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 275, 2, 276, 275, 278}], 
          "NumericalThresholds" -> {-1.0425257086753845`, -1.040117859840393, \
-0.03941809758543968, -1.0895200967788696`, -1.0359485745429993`, 
           1.5453717708587646`}, "LeafValues" -> 
          RawArray["Real32",{-0.006630962714552879, 0.007982947863638401, 
            0.013393749482929707`, -0.00787137821316719, \
-0.010482223704457283`, 0.0011712698033079505`, -0.006166198290884495}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, -4}, {-3, 5}, {-5, 
            6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 277, 1, 1, 268, 3}], 
          "NumericalThresholds" -> {-0.3710569739341736, -1.0759419202804565`,
            0.5148686468601227, 0.05261767841875553, 0.634238600730896, 
           0.25700926780700684`}, "LeafValues" -> 
          RawArray["Real32",{
            0.006759431213140488, -0.007768202107399702, \
-0.00022622145479544997`, 
            0.009714482352137566, -0.009053929708898067, \
-0.007056230679154396, 0.006743501406162977}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, -4}, {5, -5}, {
            6, -6}, {-3, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 3, 1, 280, 278, 280, 1, 3, 280, 279, 280, 
            280, 1, 1}], 
          "NumericalThresholds" -> {0.2570084482431412, 0.25700829923152924`, 
           0.05261744186282158, -0.8855294287204742, -1.1176645159721375`, \
-0.15903960913419724`, -0.12709689140319824`, 0.2570086568593979, 
           0.20799491554498672`, -0.1884828731417656, 
           0.207212895154953, -0.3362342417240143, -0.12709663063287735`, \
-0.12709682434797287`}, "LeafValues" -> 
          RawArray["Real32",{-0.010521023534238338`, 0.0013289108173921704`, 
            0.012655639089643955`, 0.011403640732169151`, 
            0.0029109944589436054`, -0.00014744489453732967`, \
-0.011016064323484898`, -0.014909600839018822`, 0.010394973680377007`, 
            0.00645956676453352, -0.005094211548566818, \
-0.012614872306585312`, 0.012185352854430676`, 0.0018482019659131765`, 
            0.009223193861544132}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {5, -4}, {14, 6}, {-1, 11}, {
            7, 8}, {-5, -8}, {-7, 9}, {-9, 10}, {-10, -11}, {12, 
            13}, {-6, -13}, {-12, -14}, {-2, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]]}, "ClassNumber" -> 1, "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f7" -> Association[
            "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}], 
           "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
              "], "Type" -> "NumericalVector"]], "Output" -> 
         Association[
          "(f7(f8(f1f2f3f4f5f6)))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 8.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "Output" -> 
             Association[
              "f7" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0., 
              0.}, {-0.12709715962409973`, -0.44058698415756226`, 
              0.2570085823535919}, {
              0.05261700972914696, -0.03941836208105087, \
-0.3710566759109497}, {0.5148689150810242, -0.38344046473503113`, 
              0.5951879024505615}}}, "Version" -> {12.2, 0}, "ID" -> 
             1796506164303170470]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f8(f1f2f3f4f5f6))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                  "], "Type" -> "NumericalVector"]], "Spans" -> {
               Span[1, 3], 
               Span[4, 280]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f7(f8(f1f2f3f4f5f6)))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 5679072299870231355]], 
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f7(f8(f1f2f3f4f5f6)))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 1379036072806559031, "Output" -> 
             Association[
              "(f7(f8(f1f2f3f4f5f6)))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 8.]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 8.], "Key" -> 
             "(f7(f8(f1f2f3f4f5f6)))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, {0.4569463968902649}}, 
      "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 110, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.2, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 15, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association[
         "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[36977], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 1.8365558003297235`, "PreprocessingTime" -> 
      3.0999993`7.942906589263736, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[3.3741106213351566`, 0.017536064743808], 
         "StandardDeviation" -> 
         Around[2.6375467407270414`, 0.6042220818253302], "EvaluationTime" -> 
         0.00006635119509224949, "TestSize" -> 60, "ModelMemory" -> 167072, 
         "ModelUtility" -> -1.707802179657307, "TrainingSize" -> 240, 
         "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 2241440, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[3.3741106213351566`, 0.01239987029567297]}, 
         "StandardDeviationHistory" -> {
           Around[2.6375467407270414`, 0.427249531401344]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
           0.2, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> "MeanSquaredError"}, 
         "FinalTrainingSize" -> 300], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.603049156737783, 0.014939033552083007`], 
              "StandardDeviation" -> 
              Around[6.341079117087336, 0.34459816403946864`], 
              "EvaluationTime" -> 0.000029269725696598026`, "TestSize" -> 290,
               "ModelMemory" -> 61696, "ModelUtility" -> -2.551010896728074, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 237664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.603049156737783, 0.01056349192905125]}, 
              "StandardDeviationHistory" -> {
                Around[6.341079117087336, 0.24366769857674256`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.667293123418721, 0.024684175402948483`], 
              "StandardDeviation" -> 
              Around[6.251707144295453, 0.37000431292225927`], 
              "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 250, 
              "ModelMemory" -> 61696, "ModelUtility" -> -2.537773781688717, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 534584, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.667293123418721, 0.01745434781542305]}, 
              "StandardDeviationHistory" -> {
                Around[6.251707144295453, 0.2616325587355988]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.17639486746727, 0.04127207249992144], 
              "StandardDeviation" -> 
              Around[2.7501758953649276`, 0.6633152969368007], 
              "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
              "ModelMemory" -> 161176, "ModelUtility" -> -1.751929988250888, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 2238256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.17639486746727, 0.029183762338317272`]}, 
              "StandardDeviationHistory" -> {
                Around[2.7501758953649276`, 0.4690347445287801]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
             161176, "StandardDeviation" -> 
             Around[2.7501758953649276`, 0.6633152969368007], 
             "TrainingMemory" -> 2238256, "TrainingTime" -> 
             0.06971601946887593], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.7766589057766007`, 0.18105750197704637`], 
              "StandardDeviation" -> 
              Around[5.749120396477743, 0.30987984937514557`], 
              "EvaluationTime" -> 0.00001414739315879119, "TestSize" -> 290, 
              "ModelMemory" -> 57152, "ModelUtility" -> -2.4529209445362494`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 1151224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.7766589057766007`, 0.12802698743266622`]}, 
              "StandardDeviationHistory" -> {
                Around[5.749120396477743, 0.21911814284623135`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.5313076656612896`, 0.07159246743754022], 
              "StandardDeviation" -> 
              Around[3.121019370008615, 0.25382771696363227`], 
              "EvaluationTime" -> 0.000015107104941529995`, "TestSize" -> 250,
               "ModelMemory" -> 57216, "ModelUtility" -> -1.8474461843516212`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              421296, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.5313076656612896`, 0.05062351920696178]}, 
              "StandardDeviationHistory" -> {
                Around[3.121019370008615, 0.17948329991808404`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.5566796432927523`, 0.08644921466303497], 
              "StandardDeviation" -> 
              Around[3.107056447870278, 0.23815122403862546`], 
              "EvaluationTime" -> 0.000022793022311385802`, "TestSize" -> 120,
               "ModelMemory" -> 57216., 
              "ModelUtility" -> -1.8420408844922465`, "TrainingSize" -> 240, 
              "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              1.7031413333333333`*^6, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5363331112459475`, 0.12238322330101609`], 
                Around[2.577026175339557, 0.11555694508743569`]}, 
              "StandardDeviationHistory" -> {
                Around[3.103287605308288, 0.3869852268880616], 
                Around[3.1108252904322673`, 0.30207944417914945`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022793022311385802`, "ModelMemory" -> 
             57216., "StandardDeviation" -> 
             Around[3.107056447870278, 0.23815122403862546`], 
             "TrainingMemory" -> 1.7031413333333333`*^6, "TrainingTime" -> 
             0.047359344249110875`], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.084048966604046, 0.608898303347392], 
              "StandardDeviation" -> 
              Around[4.536462450427245, 0.3587105581553748], "EvaluationTime" -> 
              0.000015562459098473143`, "TestSize" -> 290, "ModelMemory" -> 
              80368, "ModelUtility" -> -2.2209906053744217`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              222792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.084048966604046, 0.4305561193499243]}, 
              "StandardDeviationHistory" -> {
                Around[4.536462450427245, 0.2536466681548769]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.579382967605332, 0.12433353063822186`], 
              "StandardDeviation" -> 
              Around[3.3682777483207187`, 0.3105739459438946], 
              "EvaluationTime" -> 0.000017714847186865565`, "TestSize" -> 250,
               "ModelMemory" -> 170080, 
              "ModelUtility" -> -1.9258293102190198`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
              558376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.579382967605332, 0.08791708264315204]}, 
              "StandardDeviationHistory" -> {
                Around[3.3682777483207187`, 0.21960894323679211`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.5333150201009826`, 0.14309800708792617`], 
              "StandardDeviation" -> 
              Around[2.797445229540441, 0.31788210919742316`], 
              "EvaluationTime" -> 0.000026414886541018543`, "TestSize" -> 120,
               "ModelMemory" -> 597952., 
              "ModelUtility" -> -1.7443444727517183`, "TrainingSize" -> 240, 
              "TrainingTime" -> 0.010863084705980556`, "TrainingMemory" -> 
              3.137773333333333*^6, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5925199168729973`, 0.1787549571057685], 
                Around[2.474110123328968, 0.19025866096738292`]}, 
              "StandardDeviationHistory" -> {
                Around[2.9932105369193938`, 0.33502565735642], 
                Around[2.6016799221614884`, 0.3770684917620773]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000026414886541018543`, "ModelMemory" -> 
             597952., "StandardDeviation" -> 
             Around[2.797445229540441, 0.31788210919742316`], 
             "TrainingMemory" -> 3.137773333333333*^6, "TrainingTime" -> 
             0.021522138229718508`], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.3209301643583373`, 0.23383849562270026`], 
              "StandardDeviation" -> 
              Around[4.982078924495252, 0.47697494804648316`], 
              "EvaluationTime" -> 0.00004496472020903844, "TestSize" -> 200, 
              "ModelMemory" -> 148592, "ModelUtility" -> -2.317967961432484, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 251072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3209301643583373`, 0.16534878595727215`]}, 
              "StandardDeviationHistory" -> {
                Around[4.982078924495252, 0.33727222021976944`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.6014214634415307`, 0.1171900088587912], 
              "StandardDeviation" -> 
              Around[3.2366679053680363`, 0.346230746220203], 
              "EvaluationTime" -> 0.000039810717055349695`, "TestSize" -> 200,
               "ModelMemory" -> 148592, 
              "ModelUtility" -> -1.8888670816372395`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.01, "TrainingMemory" -> 454936, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.6014214634415307`, 0.08286584995136283]}, 
              "StandardDeviationHistory" -> {
                Around[3.2366679053680363`, 0.24482210850758412`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.448184036296442, 0.105991723932217], 
              "StandardDeviation" -> 
              Around[2.8466664883793933`, 0.2836890737334466], 
              "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 120, 
              "ModelMemory" -> 160005.3333333333, 
              "ModelUtility" -> -1.7590383473136522`, "TrainingSize" -> 240, 
              "TrainingTime" -> 0.013675813386831489`, "TrainingMemory" -> 
              1.5546213333333333`*^6, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.497248189495794, 0.18409208381888656`], 
                Around[2.3991198830970903`, 0.10925077852316703`]}, 
              "StandardDeviationHistory" -> {
                Around[2.945970148012384, 0.4293249139110472], 
                Around[2.7473628287464025`, 0.3383462261239299]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
             160005.3333333333, "StandardDeviation" -> 
             Around[2.8466664883793933`, 0.2836890737334466], 
             "TrainingMemory" -> 1.5546213333333333`*^6, "TrainingTime" -> 
             0.04221363104863515], "Index" -> 4], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[257.2628818891713, 38.796354991064206`], 
              "StandardDeviation" -> 
              Around[4.529676575609829, 0.3326032199964365], "EvaluationTime" -> 
              0.000019591975229075188`, "TestSize" -> 290, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.218381144472841, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              12061680, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[257.2628818891713, 27.43316569950206]}, 
              "StandardDeviationHistory" -> {
                Around[4.529676575609829, 0.23518599230396134`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.664795908009055, 0.3999069766660693], 
              "StandardDeviation" -> 
              Around[3.356845497512932, 0.2934572749760599], "EvaluationTime" -> 
              0.00002253574373239229, "TestSize" -> 200, "ModelMemory" -> 
              64136, "ModelUtility" -> -1.9214865914024444`, "TrainingSize" -> 
              50, "TrainingTime" -> 0.01, "TrainingMemory" -> 3550128, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.664795908009055, 0.282776935044388]}, 
              "StandardDeviationHistory" -> {
                Around[3.356845497512932, 0.20750562912409728`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.5167895330745536`, 0.020375650287547634`], 
              "StandardDeviation" -> 
              Around[3.7040101820153257`, 0.5284310609375128], 
              "EvaluationTime" -> 0.00004186477385849299, "TestSize" -> 60, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.0307013959402114`, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 4828624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.5167895330745536`, 0.014407760489410558`]}, 
              "StandardDeviationHistory" -> {
                Around[3.7040101820153257`, 0.373657186578517]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004186477385849299, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[3.7040101820153257`, 0.5284310609375128], 
             "TrainingMemory" -> 4828624, "TrainingTime" -> 
             0.03568919079711587], "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[283321.49530626915`, 38570.17211038969], 
              "StandardDeviation" -> 
              Around[3.4586873857007383`, 0.23854104097009932`], 
              "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 250,
               "ModelMemory" -> 64136, "ModelUtility" -> -1.9477404905068036`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3550064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[283321.49530626915`, 27273.2302507888]}, 
              "StandardDeviationHistory" -> {
                Around[3.4586873857007383`, 0.16867398766125527`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4575457667641184`*^8, 3.7123684385303214`*^7], 
              "StandardDeviation" -> 
              Around[4.5137664427301845`, 0.33262500333376244`], 
              "EvaluationTime" -> 0.000017810512758245186`, "TestSize" -> 290,
               "ModelMemory" -> 64136, "ModelUtility" -> -2.214914502514424, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3282584, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.4575457667641184`*^8, 2.625040897147705*^7]}, 
              "StandardDeviationHistory" -> {
                Around[4.5137664427301845`, 0.2352013954495014]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.508455386223371, 0.020557491632898488`], 
              "StandardDeviation" -> 
              Around[3.9510453189639936`, 0.5071979692104134], 
              "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.092482139613084, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 4828560, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.508455386223371, 0.01453634173780823]}, 
              "StandardDeviationHistory" -> {
                Around[3.9510453189639936`, 0.358643123432729]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[3.9510453189639936`, 0.5071979692104134], 
             "TrainingMemory" -> 4828560, "TrainingTime" -> 
             0.025736567647427086`], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.213503907808719, 0.03187638994232583], 
              "StandardDeviation" -> 
              Around[5.439138933091172, 0.32780125340871513`], 
              "EvaluationTime" -> 0.000024203569579269094`, "TestSize" -> 290,
               "ModelMemory" -> 64136, "ModelUtility" -> -2.3987540033751333`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3282648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.213503907808719, 0.022540011487965254`]}, 
              "StandardDeviationHistory" -> {
                Around[5.439138933091172, 0.23179048916675235`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.659328729428095, 0.010250773588439423`], 
              "StandardDeviation" -> 
              Around[3.823564368165172, 0.29022811581941804`], 
              "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 250, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.049401892403692, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3550064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.659328729428095, 0.007248391516793475]}, 
              "StandardDeviationHistory" -> {
                Around[3.823564368165172, 0.2052222687869052]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.8882091500854075`, 0.030322453842115602`], 
              "StandardDeviation" -> 
              Around[3.6805905917151027`, 0.5197573006801527], 
              "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.024076777232878, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              9678896, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.8882091500854075`, 0.021441212733976023`]}, 
              "StandardDeviationHistory" -> {
                Around[3.6805905917151027`, 0.3675239118821513]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[3.6805905917151027`, 0.5197573006801527], 
             "TrainingMemory" -> 9678896, "TrainingTime" -> 0.0225], "Index" -> 
           7], Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[24691.598137758825`, 3728.9365306402756`], 
              "StandardDeviation" -> 
              Around[4.515345175805561, 0.3326233522397513], "EvaluationTime" -> 
              0.00001922557869792714, "TestSize" -> 290, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.215259052081894, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3282712, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[24691.598137758825`, 2636.756307429977]}, 
              "StandardDeviationHistory" -> {
                Around[4.515345175805561, 0.23520022794972972`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[62.82262080734727, 13.740086785211583`], 
              "StandardDeviation" -> 
              Around[4.0041639691350674`, 0.43377635009001925`], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 100,
               "ModelMemory" -> 64136, "ModelUtility" -> -2.1019215774425066`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 3550192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[62.82262080734727, 9.715708539914779]}, 
              "StandardDeviationHistory" -> {
                Around[4.0041639691350674`, 0.30672619866700246`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.507109505196398, 0.02048520076258547], 
              "StandardDeviation" -> 
              Around[3.8599635029688715`, 0.5175074361004057], 
              "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.0702705281289586`, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              4828496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.507109505196398, 0.014485224373192019`]}, 
              "StandardDeviationHistory" -> {
                Around[3.8599635029688715`, 0.3659330173810608]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[3.8599635029688715`, 0.5175074361004057], 
             "TrainingMemory" -> 4828496, "TrainingTime" -> 0.0225], "Index" -> 
           8], Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.260627247781022, 0.5444139518003895], 
              "StandardDeviation" -> 
              Around[4.667953676769148, 0.3320768989908314], "EvaluationTime" -> 
              0.000020640644637609093`, "TestSize" -> 290, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.248000342083941, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3282712, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.260627247781022, 0.38495879709062164`]}, 
              "StandardDeviationHistory" -> {
                Around[4.667953676769148, 0.23481382715181706`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.7526917574149694`, 0.13809713655868588`], 
              "StandardDeviation" -> 
              Around[3.7355001780606867`, 0.5004403157931668], 
              "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.0374746852229766`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 3550256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7526917574149694`, 0.09764942172309146]}, 
              "StandardDeviationHistory" -> {
                Around[3.7355001780606867`, 0.35386474087648556`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.608392077792371, 0.017261217453049302`], 
              "StandardDeviation" -> 
              Around[3.4204358255063294`, 0.37303728382803647`], 
              "EvaluationTime" -> 0.00003612450589692965, "TestSize" -> 120, 
              "ModelMemory" -> 64136., "ModelUtility" -> -1.9444976504614233`,
               "TrainingSize" -> 240, "TrainingTime" -> 0.010863084705980556`,
               "TrainingMemory" -> 4.828661333333333*^6, "ExperimentCount" -> 
              2, "MeanCrossEntropyHistory" -> {
                Around[3.594956084417949, 0.015264582293966676`], 
                Around[3.621828071166793, 0.015385599014767323`]}, 
              "StandardDeviationHistory" -> {
                Around[3.675375197754035, 0.3754081384813128], 
                Around[3.165496453258624, 0.39564948627792673`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003612450589692965, "ModelMemory" -> 
             64136., "StandardDeviation" -> 
             Around[3.4204358255063294`, 0.37303728382803647`], 
             "TrainingMemory" -> 4.828661333333333*^6, "TrainingTime" -> 
             0.023578855882475692`], "Index" -> 9], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.594086891129028, 0.014646742536153312`], 
              "StandardDeviation" -> 
              Around[6.338492473987513, 0.3297529456411964], "EvaluationTime" -> 
              0.000020640644637609093`, "TestSize" -> 290, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.550143853425803, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3282712, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.594086891129028, 0.010356810969607458`]}, 
              "StandardDeviationHistory" -> {
                Around[6.338492473987513, 0.23317054397912895`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.645309116279372, 0.025802431802203842`], 
              "StandardDeviation" -> 
              Around[6.300211820395508, 0.4344136779109977], "EvaluationTime" -> 
              0.00002253574373239229, "TestSize" -> 200, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.547431356121561, "TrainingSize" -> 
              50, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              3550192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.645309116279372, 0.018245074498441767`]}, 
              "StandardDeviationHistory" -> {
                Around[6.300211820395508, 0.30717685749105517`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[5.275804168039567, 0.0864183360289255], 
              "StandardDeviation" -> 
              Around[5.564637819422181, 0.6112688455633074], "EvaluationTime" -> 
              0.00003325437191614798, "TestSize" -> 60, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.4313156930378583`, "TrainingSize" -> 
              240, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              4828560, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.275804168039567, 0.06110699142491096]}, 
              "StandardDeviationHistory" -> {
                Around[5.564637819422181, 0.4322323458258871]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[5.564637819422181, 0.6112688455633074], "TrainingMemory" -> 
             4828560, "TrainingTime" -> 0.025736567647427086`], "Index" -> 
           10], Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3399.2719666083303`, 524.9193439514262], 
              "StandardDeviation" -> 
              Around[3.578511538101957, 0.27321654597704026`], 
              "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 200, 
              "ModelMemory" -> 64136, "ModelUtility" -> -1.9832532493888113`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3549728, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3399.2719666083303`, 371.1740276840472]}, 
              "StandardDeviationHistory" -> {
                Around[3.578511538101957, 0.1931932723927313]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.508275450995558, 0.020557179337939525`], 
              "StandardDeviation" -> 
              Around[3.9433101776306136`, 0.5084923431796295], 
              "EvaluationTime" -> 0.00004186477385849299, "TestSize" -> 60, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.090635584565393, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 4863576, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.508275450995558, 0.01453612091192502]}, 
              "StandardDeviationHistory" -> {
                Around[3.9433101776306136`, 0.3595583840437531]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.5307913835124923`*^6, 382127.89197441255`], 
              "StandardDeviation" -> 
              Around[4.574583413070497, 0.3370254245149278], "EvaluationTime" -> 
              0.00001922557869792714, "TestSize" -> 290, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.228294703930662, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3282712, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.5307913835124923`*^6, 270205.2236956276]}, 
              "StandardDeviationHistory" -> {
                Around[4.574583413070497, 0.23831296310678032`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[4.574583413070497, 0.3370254245149278], "TrainingMemory" -> 
             3282712, "TrainingTime" -> 0.04], "Index" -> 11], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.667272415470441, 0.024683835812017708`], 
              "StandardDeviation" -> 
              Around[6.251707144295453, 0.37000431292225927`], 
              "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 250,
               "ModelMemory" -> 61696, "ModelUtility" -> -2.5377737784057643`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 536768, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.667272415470441, 0.01745410768837307]}, 
              "StandardDeviationHistory" -> {
                Around[6.251707144295453, 0.2616325587355988]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.589513022685155, 0.03077063074265645], 
              "StandardDeviation" -> 
              Around[2.9533092855997825`, 0.28429007077749774`], 
              "EvaluationTime" -> 0.00007207786526301476, "TestSize" -> 120, 
              "ModelMemory" -> 157344., 
              "ModelUtility" -> -1.7951499965786468`, "TrainingSize" -> 240, 
              "TrainingTime" -> 0.0343520900862391, "TrainingMemory" -> 
              2.24048*^6, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[4.579187670512632, 0.04069576281366839], 
                Around[4.599838374857677, 0.04129713578774519]}, 
              "StandardDeviationHistory" -> {
                Around[3.0346475699205073`, 0.34285776520584565`], 
                Around[2.8719710012790576`, 0.4485937811797421]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.603169785786111, 0.014935997170178466`], 
              "StandardDeviation" -> 
              Around[6.341079117087336, 0.34459816403946864`], 
              "EvaluationTime" -> 0.00001922557869792714, "TestSize" -> 290, 
              "ModelMemory" -> 61696, "ModelUtility" -> -2.551010886683927, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 181320, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.603169785786111, 0.010561344882816277`]}, 
              "StandardDeviationHistory" -> {
                Around[6.341079117087336, 0.24366769857674256`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
             61696, "StandardDeviation" -> 
             Around[6.341079117087336, 0.34459816403946864`], 
             "TrainingMemory" -> 181320, "TrainingTime" -> 
             0.05035701647176667], "Index" -> 12], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.1907175899630436`, 0.017796454486569486`], 
              "StandardDeviation" -> 
              Around[2.9642554129402505`, 0.4745537885258984], 
              "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 100, 
              "ModelMemory" -> 158304, "ModelUtility" -> -1.8112967265026554`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 635816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.1907175899630436`, 0.012583993648531041`]}, 
              "StandardDeviationHistory" -> {
                Around[2.9642554129402505`, 0.3355602019044296]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.3741106213351566`, 0.017536064743808], 
              "StandardDeviation" -> 
              Around[2.6375467407270414`, 0.6042220818253302], 
              "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
              "ModelMemory" -> 167072, "ModelUtility" -> -1.707802179657307, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 2241440, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3741106213351566`, 0.01239987029567297]}, 
              "StandardDeviationHistory" -> {
                Around[2.6375467407270414`, 0.427249531401344]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.603169785786111, 0.014935997170178466`], 
              "StandardDeviation" -> 
              Around[6.341079117087336, 0.34459816403946864`], 
              "EvaluationTime" -> 0.000016395446818563233`, "TestSize" -> 290,
               "ModelMemory" -> 61696, "ModelUtility" -> -2.551010883853795, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 181320, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.603169785786111, 0.010561344882816277`]}, 
              "StandardDeviationHistory" -> {
                Around[6.341079117087336, 0.24366769857674256`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000016395446818563233`, "ModelMemory" -> 
             61696, "StandardDeviation" -> 
             Around[6.341079117087336, 0.34459816403946864`], 
             "TrainingMemory" -> 181320, "TrainingTime" -> 
             0.11720058582625315`], "Index" -> 13], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.02], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.6673624032468375`, 0.024685311531796622`], 
              "StandardDeviation" -> 
              Around[6.251707144295453, 0.37000431292225927`], 
              "EvaluationTime" -> 0.00001901871830953335, "TestSize" -> 250, 
              "ModelMemory" -> 61696, "ModelUtility" -> -2.5377737767642876`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 536736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.6673624032468375`, 0.01745515117983587]}, 
              "StandardDeviationHistory" -> {
                Around[6.251707144295453, 0.2616325587355988]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.745955324201775, 0.06441639796357308], 
              "StandardDeviation" -> 
              Around[3.3598356784707377`, 0.49169357305533595`], 
              "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
              "ModelMemory" -> 160920, "ModelUtility" -> -1.9338952425986793`,
               "TrainingSize" -> 240, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              2241440, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.745955324201775, 0.04554927181965383]}, 
              "StandardDeviationHistory" -> {
                Around[3.3598356784707377`, 0.34767985977327115`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
             160920, "StandardDeviation" -> 
             Around[3.3598356784707377`, 0.49169357305533595`], 
             "TrainingMemory" -> 2241440, "TrainingTime" -> 
             0.14084893192461112`], "Index" -> 14], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.8253015394879825`*^7, 3.848162242244534*^6], 
              "StandardDeviation" -> 
              Around[3.457477909439602, 0.2386369550171826], "EvaluationTime" -> 
              0.000020660194799564414`, "TestSize" -> 250, "ModelMemory" -> 
              64136, "ModelUtility" -> -1.9474009676971686`, "TrainingSize" -> 
              50, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              3549600, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.8253015394879825`*^7, 2.7210616165971397`*^6]}, 
              "StandardDeviationHistory" -> {
                Around[3.457477909439602, 0.1687418091343589]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.508481459279994, 0.02055848384487906], 
              "StandardDeviation" -> 
              Around[3.9521138650125422`, 0.5070837528369644], 
              "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.0927401462196586`, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              4828560, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.508481459279994, 0.014537043337628069`]}, 
              "StandardDeviationHistory" -> {
                Around[3.9521138650125422`, 0.35856236026054067`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.5296003039852913`*^10, 3.8196186396167507`*^9], 
              "StandardDeviation" -> 
              Around[4.574433775681111, 0.337026671479801], "EvaluationTime" -> 
              0.00002242210710843909, "TestSize" -> 290, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.228262524712192, "TrainingSize" -> 
              10, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              3282648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.5296003039852913`*^10, 2.7008782416195397`*^9]}, 
              "StandardDeviationHistory" -> {
                Around[4.574433775681111, 0.23831384484409804`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002242210710843909, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[4.574433775681111, 0.337026671479801], "TrainingMemory" -> 
             3282648, "TrainingTime" -> 0.05035701647176667], "Index" -> 15], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.442478056419734, 0.021009581845193952`], 
              "StandardDeviation" -> 
              Around[5.370107767392176, 0.344508279703631], "EvaluationTime" -> 
              0.00002394314777962655, "TestSize" -> 250, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.3867488316041747`, "TrainingSize" -> 
              50, "TrainingTime" -> 0.01, "TrainingMemory" -> 3549664, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.442478056419734, 0.01485601779263042]}, 
              "StandardDeviationHistory" -> {
                Around[5.370107767392176, 0.24360414075334932`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.735606186454569, 0.06399014217832148], 
              "StandardDeviation" -> 
              Around[3.8832733321774042`, 0.462190822257793], 
              "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
              "ModelMemory" -> 64136, "ModelUtility" -> -2.073355612878896, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              4828496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.735606186454569, 0.04524786346338243]}, 
              "StandardDeviationHistory" -> {
                Around[3.8832733321774042`, 0.3268182646206717]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.5433772154417835`, 0.015600021462633928`], 
              "StandardDeviation" -> 
              Around[6.20244204993668, 0.3289863101148145], "EvaluationTime" -> 
              0.000020640644637609093`, "TestSize" -> 290, "ModelMemory" -> 
              64136, "ModelUtility" -> -2.528647379033763, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3282712, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.5433772154417835`, 0.011030880962884133`]}, 
              "StandardDeviationHistory" -> {
                Around[6.20244204993668, 0.23262845079972577`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020640644637609093`, "ModelMemory" -> 
             64136, "StandardDeviation" -> 
             Around[6.20244204993668, 0.3289863101148145], "TrainingMemory" -> 
             3282712, "TrainingTime" -> 0.04], "Index" -> 16]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LinearRegression", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 16], 
        Association[]], "MaxTrainingSize" -> 300, 
      "PreprocessorEvaluationTime" -> 6.32421875*^-6, "PreprocessorMemory" -> 
      116296, "InputDimension" -> 278, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8235817152342816`17.33504536525836*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.3037999314000001, 
          "ElapsedTimes" -> 0.5610629999999999, "ExperimentCounts" -> 15], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.43399990200000016`, 
          "ElapsedTimes" -> 0.4448859, "ExperimentCounts" -> 16], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 0.6199998600000001, 
          "ElapsedTimes" -> 0.6755883, "ExperimentCounts" -> 21]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           8718539460336612740], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {140.}, "ID" -> 
           5330523246654450449], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {72.}, "ID" -> 
           5227176333101167944], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2408.}, "ID" -> 
           5596007189629378955], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
           2638574294534422359], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {71}, "ID" -> 
           5604019906672533564], "f7" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7446114396074216018], "f8" -> 
         Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"chevrolet vega (sw)"}, "ID" -> 3206511614197282240]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 5.2705717, 
      "MaxTrainingMemory" -> 100864648, "DataMemory" -> 102576, 
      "FunctionMemory" -> 547144, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 1, 10, 1, 55.4487066`9.496466259368896}, "Instant",
         "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8229439473607388`*^9, 3.8236033154888363`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"aa5d709c-9a54-4fae-b749-e18297bb3b1e"]
}, Open  ]],

Cell["\:68c0\:67e5\:9884\:6d4b\:5668\:7684\:5404\:9879\:53c2\:6570", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814286949449347*^9, 3.814286966034257*^9}, {
   3.822943582801603*^9, 
   3.8229435887994843`*^9}},ExpressionUUID->"a3cea788-02ef-4362-a112-\
95e467cf36eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "p", "]"}]], "Input",
 CellChangeTimes->{{3.8141139743966923`*^9, 3.814113977694372*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"ed059bcf-db20-4964-9985-53f5b8cff819"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Nominal\"",
                     ",", "\"Text\""}], "}"}], Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                   "Numerical", "Numerical", "Nominal", "Text"}, 10], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Standard deviation"], 
                   TextCell["Standard deviation"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"2.5963205253036125697`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.592516905655493753`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.4112867139926250637`3.", "\", \"", 
                   "3.7813543366146000757`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.4112867139926250637`3., 
                   ", ", 3.7813543366146000757`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "GradientBoostedTrees",ExpressionUUID->
                   "b13c04c6-4dcc-4c83-b0a3-226e5d4e819b"],
                  TextCell["GradientBoostedTrees"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"BoostingMethod\"", "\"Gradient\""}, {
                    "MaxTrainingRounds", "50"}, {"\"LeavesNumber\"", "110"}, {
                    "\"LearningRate\"", "0.2`"}, {"\"MaxDepth\"", "6"}, {
                    "\"LeafSize\"", "15"}, {"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "0"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                   Alignment -> Left, Frame -> All, FrameStyle -> 
                   GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.77`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"13.2`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"3.375078995555231387`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0172218394399231735`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "3.3406353166753848249`3.", "\", \"", 
                   "3.4095226744350779491`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 3.3406353166753848249`3., 
                   ", ", 3.4095226744350779491`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"540.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"300", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.21`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 3}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.4741126939804727`}, {
                    3.912023005428146, 1.0680356888742728`}, {
                    5.480638923341991, 0.9540952601352894}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    1.4741126939804727`}}, {{3.912023005428146, 
                    1.0680356888742728`}}, {{5.480638923341991, 
                    0.9540952601352894}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 1.3977345013428433`}, {
                    2.302585092994046, 1.5450689295575133`}, {
                    2.302585092994046, 1.5450689295575133`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.9618425810320129}, {
                    3.912023005428146, 1.164026565232269}, {3.912023005428146,
                     1.164026565232269}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.480638923341991, 0.6950471842333089}, {
                    5.480638923341991, 1.1596564086661263`}, {
                    5.480638923341991, 
                    1.1596564086661263`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0.9252054026994458}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0.9252054026994458, 1.4741126939804727`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 23.744061648711448`}, {
                    3.912023005428146, 0.018460908227302487`}, {
                    5.480638923341991, 0.18644305732212121`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    23.744061648711448`}}, {{3.912023005428146, 
                    0.018460908227302487`}}, {{5.480638923341991, 
                    0.18644305732212121`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 23.580732062298537`}, {
                    2.302585092994046, 23.884422350193155`}, {
                    2.302585092994046, 23.884422350193155`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.007633318626063497}, {
                    3.912023005428146, 0.029172515816626506`}, {
                    3.912023005428146, 0.029172515816626506`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.480638923341991, 0.17204743097750216`}, {
                    5.480638923341991, 0.20063438710781656`}, {
                    5.480638923341991, 
                    0.20063438710781656`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, -1.2996280217995946`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }], {}}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }][#, #2, {6, 6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {-1.2996280217995946`, 23.744061648711448`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& }]}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603049156737783}, {
                    3.912023005428146, 4.672293595231984}, {5.480638923341991,
                     4.167627968410739}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.7766589057766007`}, {
                    3.912023005428146, 2.5313076656612896`}, {
                    5.480638923341991, 2.5566796432927523`}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.084048966604046}, {
                    3.912023005428146, 2.5585011352763605`}, {
                    5.480638923341991, 2.5196301288894043`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.3209300489480875`}, {
                    3.912023005428146, 2.531845888030266}, {5.480638923341991,
                     2.4623123347918625`}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.391853325085897}, {
                    5.480638923341991, 3.5167895330745536`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.52814333850048}, {
                    5.480638923341991, 3.52814333850048}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.2174258263234403`}, {
                    3.912023005428146, 3.659328729428095}, {5.480638923341991,
                     3.915239451875844}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.288964877192595, 7.696595821345574}, {
                    5.480638923341991, 3.527412121768714}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.425547559429526}, {
                    3.912023005428146, 2.64787345784768}, {5.480638923341991, 
                    3.608173148019115}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.593914022241319}, {
                    3.912023005428146, 4.640129574846416}, {5.480638923341991,
                     5.2652345937342835`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5083086424958627`}, {
                    5.480638923341991, 3.5083086424958627`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.667272415470441}, {
                    5.480638923341991, 4.588919783512541}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603447386144963}, {
                    3.912023005428146, 3.188755353091236}, {5.480638923341991,
                     3.3750789955552314`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.6673624032468375`}, {
                    5.480638923341991, 4.746518876500792}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5084828462149558`}, {
                    5.480638923341991, 3.5084828462149558`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603049156737783}}, {{
                    3.912023005428146, 4.672293595231984}}, {{
                    5.480638923341991, 4.167627968410739}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.7766589057766007`}}, {{
                    3.912023005428146, 2.5313076656612896`}}, {{
                    5.480638923341991, 2.5566796432927523`}}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.084048966604046}}, {{
                    3.912023005428146, 2.5585011352763605`}}, {{
                    5.480638923341991, 2.5196301288894043`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.3209300489480875`}}, {{
                    3.912023005428146, 2.531845888030266}}, {{
                    5.480638923341991, 2.4623123347918625`}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.391853325085897}}, {{
                    5.480638923341991, 3.5167895330745536`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.52814333850048}}, {{
                    5.480638923341991, 3.52814333850048}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.2174258263234403`}}, {{
                    3.912023005428146, 3.659328729428095}}, {{
                    5.480638923341991, 3.915239451875844}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 37.647044107655006`}}, {{
                    5.480638923341991, 3.527412121768714}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.425547559429526}}, {{
                    3.912023005428146, 2.64787345784768}}, {{
                    5.480638923341991, 3.608173148019115}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.593914022241319}}, {{
                    3.912023005428146, 4.640129574846416}}, {{
                    5.480638923341991, 5.2652345937342835`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5083086424958627`}}, {{
                    5.480638923341991, 3.5083086424958627`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.667272415470441}}, {{
                    5.480638923341991, 4.588919783512541}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603447386144963}}, {{
                    3.912023005428146, 3.188755353091236}}, {{
                    5.480638923341991, 3.3750789955552314`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.6673624032468375`}}, {{
                    5.480638923341991, 4.746518876500792}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5084828462149558`}}, {{
                    5.480638923341991, 3.5084828462149558`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0, 7.696595821345574}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.4741126939804727`}, {
                    3.912023005428146, 1.0680356888742728`}, {
                    5.480638923341991, 0.9540952601352894}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    1.4741126939804727`}}, {{3.912023005428146, 
                    1.0680356888742728`}}, {{5.480638923341991, 
                    0.9540952601352894}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 1.3977345013428433`}, {
                    2.302585092994046, 1.5450689295575133`}, {
                    2.302585092994046, 1.5450689295575133`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.9618425810320129}, {
                    3.912023005428146, 1.164026565232269}, {3.912023005428146,
                     1.164026565232269}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.480638923341991, 0.6950471842333089}, {
                    5.480638923341991, 1.1596564086661263`}, {
                    5.480638923341991, 
                    1.1596564086661263`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0.9252054026994458}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0.9252054026994458, 1.4741126939804727`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 23.744061648711448`}, {
                    3.912023005428146, 0.018460908227302487`}, {
                    5.480638923341991, 0.18644305732212121`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    23.744061648711448`}}, {{3.912023005428146, 
                    0.018460908227302487`}}, {{5.480638923341991, 
                    0.18644305732212121`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 23.580732062298537`}, {
                    2.302585092994046, 23.884422350193155`}, {
                    2.302585092994046, 23.884422350193155`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.007633318626063497}, {
                    3.912023005428146, 0.029172515816626506`}, {
                    3.912023005428146, 0.029172515816626506`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{5.480638923341991, 0.17204743097750216`}, {
                    5.480638923341991, 0.20063438710781656`}, {
                    5.480638923341991, 
                    0.20063438710781656`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, -1.2996280217995946`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }], {}}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }][#, #2, {6, 6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {-1.2996280217995946`, 23.744061648711448`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& }]}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603049156737783}, {
                    3.912023005428146, 4.672293595231984}, {5.480638923341991,
                     4.167627968410739}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.7766589057766007`}, {
                    3.912023005428146, 2.5313076656612896`}, {
                    5.480638923341991, 2.5566796432927523`}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.084048966604046}, {
                    3.912023005428146, 2.5585011352763605`}, {
                    5.480638923341991, 2.5196301288894043`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.3209300489480875`}, {
                    3.912023005428146, 2.531845888030266}, {5.480638923341991,
                     2.4623123347918625`}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.391853325085897}, {
                    5.480638923341991, 3.5167895330745536`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.52814333850048}, {
                    5.480638923341991, 3.52814333850048}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.2174258263234403`}, {
                    3.912023005428146, 3.659328729428095}, {5.480638923341991,
                     3.915239451875844}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.288964877192595, 7.696595821345574}, {
                    5.480638923341991, 3.527412121768714}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.425547559429526}, {
                    3.912023005428146, 2.64787345784768}, {5.480638923341991, 
                    3.608173148019115}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.593914022241319}, {
                    3.912023005428146, 4.640129574846416}, {5.480638923341991,
                     5.2652345937342835`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5083086424958627`}, {
                    5.480638923341991, 3.5083086424958627`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.667272415470441}, {
                    5.480638923341991, 4.588919783512541}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603447386144963}, {
                    3.912023005428146, 3.188755353091236}, {5.480638923341991,
                     3.3750789955552314`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.6673624032468375`}, {
                    5.480638923341991, 4.746518876500792}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5084828462149558`}, {
                    5.480638923341991, 3.5084828462149558`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603049156737783}}, {{
                    3.912023005428146, 4.672293595231984}}, {{
                    5.480638923341991, 4.167627968410739}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.7766589057766007`}}, {{
                    3.912023005428146, 2.5313076656612896`}}, {{
                    5.480638923341991, 2.5566796432927523`}}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.084048966604046}}, {{
                    3.912023005428146, 2.5585011352763605`}}, {{
                    5.480638923341991, 2.5196301288894043`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.3209300489480875`}}, {{
                    3.912023005428146, 2.531845888030266}}, {{
                    5.480638923341991, 2.4623123347918625`}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.391853325085897}}, {{
                    5.480638923341991, 3.5167895330745536`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.52814333850048}}, {{
                    5.480638923341991, 3.52814333850048}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.2174258263234403`}}, {{
                    3.912023005428146, 3.659328729428095}}, {{
                    5.480638923341991, 3.915239451875844}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 37.647044107655006`}}, {{
                    5.480638923341991, 3.527412121768714}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.425547559429526}}, {{
                    3.912023005428146, 2.64787345784768}}, {{
                    5.480638923341991, 3.608173148019115}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.593914022241319}}, {{
                    3.912023005428146, 4.640129574846416}}, {{
                    5.480638923341991, 5.2652345937342835`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5083086424958627`}}, {{
                    5.480638923341991, 3.5083086424958627`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.667272415470441}}, {{
                    5.480638923341991, 4.588919783512541}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603447386144963}}, {{
                    3.912023005428146, 3.188755353091236}}, {{
                    5.480638923341991, 3.3750789955552314`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.6673624032468375`}}, {{
                    5.480638923341991, 4.746518876500792}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5084828462149558`}}, {{
                    5.480638923341991, 3.5084828462149558`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0, 7.696595821345574}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{363., {138., 143.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   PredictorFunction[
    Association[
    "ExampleNumber" -> 300, "Input" -> 
     Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Numerical"], "f2" -> 
            Association["Type" -> "Numerical"], "f3" -> 
            Association["Type" -> "Numerical"], "f4" -> 
            Association["Type" -> "Numerical"], "f5" -> 
            Association["Type" -> "Numerical"], "f6" -> 
            Association["Type" -> "Numerical"], "f7" -> 
            Association["Type" -> "Nominal"], "f8" -> 
            Association["Type" -> "Text"]], "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
            Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
            Association["Type" -> "Text", "Weight" -> 1]], "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["Transpose", 
                Association["FeatureNumber" -> 8]], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                   "Numerical", "Numerical", "Nominal", "Text"}, 
                 "FeatureKeys" -> {
                  "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False]]}]], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"]], "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
            Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
            Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
          Association[
           "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
            "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
               "], "Type" -> "NumericalVector"]], "Processors" -> {
            MachineLearning`MLProcessor["Threads", 
             Association[
             "Input" -> Association[
               "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6], "f7" -> 
                Association["Type" -> "NominalVector", "Weight" -> 1]], 
              "Processors" -> {
                MachineLearning`MLProcessor["ToVector", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                    "f2" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                  "Output" -> 
                  Association[
                   "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                  "Version" -> {12.2, 0}, "ID" -> 2890808244938110393]], 
                MachineLearning`MLProcessor["ToVector", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                  "Output" -> 
                  Association[
                   "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                  "Version" -> {12.2, 0}, "ID" -> 5629229317859041261]]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"]], 
            MachineLearning`MLProcessor["Threads", 
             Association[
             "Input" -> Association[
               "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
                "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
                "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Output" -> 
              Association[
               "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
                "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
                "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Processors" -> {
                MachineLearning`MLProcessor["ImputeMissing", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                  "VectorLength" -> 1, "Output" -> 
                  Association[
                   "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                  "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                  3108122425444935999]], 
                MachineLearning`MLProcessor["ImputeMissing", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                  "Fill" -> "", "Output" -> 
                  Association[
                   "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                  "Type" -> "Text", "Version" -> {12.2, 0}, "ID" -> 
                  4678014907749892316]], 
                MachineLearning`MLProcessor["ImputeMissing", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                  "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 300, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {5.81, 214.705, 111.98993288590604`, 3133., 
                    15.262333333333336`, 74.43333333333334}, "Method" -> 
                    "Naive", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 6]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{0.4605590621517039, 
                    0.16532129222891656`, -0.17928480258893864`}, {
                    0.47481865987092087`, 
                    0.10973097855544875`, -0.15783158719594648`}, {
                    0.46711400079704124`, -0.05038165021487633, 
                    0.0910181514892921}, {0.45121493134376595`, 
                    0.21668223939483658`, -0.30890288627439744`}, \
{-0.35406462025884416`, 
                    0.25027290269167884`, -0.8433558144222124}, \
{-0.12361404119722114`, 0.9211416575705231, 0.35775944833773293`}}, 
                    "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 3, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0274908, "MaxTrainingMemory" -> 
                    246608, "DataMemory" -> 57808, "FunctionMemory" -> 22144, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 2, 21, 18, 52, 22.1901436`9.09873504186336}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                  "DimensionReduction", "VectorLength" -> 6, "Output" -> 
                  Association[
                   "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                  "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                  8312269817718464215]]}, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
            MachineLearning`MLProcessor["Standardize", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Mean" -> {5.8100000000000005`, 214.705, 111.80060492339395`, 
               3133., 15.262333333333322`, 74.43333333333334}, 
              "StandardDeviation" -> {1.7494475318416, 108.9054198605377, 
               40.213575468437234`, 882.9886446985981, 2.7367281966286785`, 
               2.772283455124271}, "Output" -> 
              Association[
               "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Version" -> {12.2, 0}, "ID" -> 3893966427905481628]], 
            MachineLearning`MLProcessor["ToLowerCase", 
             Association[
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 4900972772377279668, "Output" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["RemoveDiacritics", 
             Association[
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 7285476586811196156, "Output" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["TextToNominalSequence", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
              "Tokens" -> {{
                " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(",
                  ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                 "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                 ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
              "Version" -> {12.2, 0}, "ID" -> 4740781770089804510, "Output" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NominalSequence", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
             Association[
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
              MachineLearning`SortedHashAssociation[
                Association["KeyHashes" -> CompressedData["
1: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
                  "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                 Function[{
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                   Switch[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.2, 0}]], 
              "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDgBxIx7ItmSbsKOuz4p2ex0YTF4cbUhKg1F8TgtMLyvX8q
nJkdREO37t6YLQQXh+mD8Wf5Nf56zCXi0G2Uemd2ggBcPUwc3Vx0eXQ+zHwY
H51GN6/13/JYeQE+DPegqyOWhvkDXRyXe9H9jx5OxLpnvfSa7Ze8+XHaT4iG
uIsJbh96uMTP7+8MkeHEsA/dfbj4uPwBEz/48dhW0WJ2h4mPi6udvrOT7H70
cEQPb/T0RWp8oqcvdHWzr3H/XGbKjdNduPTBwplQ+MDCG+Z+Yv1ByF5c+Qtd
H658S2w+Q0/3L1ObbZ88wyw3CKUjQukKnQ8LN3TzbRtaS5f948EZPrjM4yx4
ObevhQOnP2HmovsbF5+8fCqEQcP8gct8XOUCuv9RzWUimC5v7ln7XS8q2579
rupBo9L/9jD51+YbE//pMxKdPtHjCT194vIXrvhFT2/o8UJsPsFlPro9uOoR
QvkCl3uJTY/o7iO2XEavX2DlO7npFWYeoXQIs++xwMWThycwE13vwtwHALj8
4gE=
               "], "Version" -> {12.2, 0}, "ID" -> 2064344366300366075, 
              "Output" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Index" -> {
                Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
              "Version" -> {12.2, 0}, "ID" -> 958951729582329572, "Output" -> 
              Association[
               "f7" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["MergeVectors", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1], 
                "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Spans" -> {
                Span[1, 271], 
                Span[272, 277]}, "Wrappers" -> {SparseArray, Identity}, 
              "Output" -> 
              Association[
               "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                   "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
              "ID" -> 7107213858894378356]]}, "Invertibility" -> "Impossible",
           "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
     Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False]]}]], "ScalarFeature" -> True,
           "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"]], "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
          "Processors" -> {
            MachineLearning`MLProcessor["ToVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 1916512723103570139]], 
            MachineLearning`MLProcessor["Standardize", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Mean" -> {20.799}, "StandardDeviation" -> {6.274889029563264}, 
              "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 2901205138368446714]], 
            MachineLearning`MLProcessor["FromVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
              Association[
               "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 2965090389962885354]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
              "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
       "InverseProcessorFunction" -> (20.799 + 6.274889029563264 #& ), 
       "ProcessorFunction" -> (-3.314640291168245 + 0.15936536810270902` #& ),
        "Name" -> "value", 
       "Quantiles" -> {-1.8803519782438636`, 3.554007074058514}], 
     "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
       Association[
       "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
     Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
     "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
     Association["Trees" -> {
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 280, 
             278, 1, 277, 279, 276, 280}], 
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
            0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
            0.24144437909126282`, -0.16238045692443848`, \
-0.16512740403413773`, 1.5453717708587646`, 
            0.7698086202144623, -0.4086989164352417, -0.8244205117225647, 
            1.2433704137802124`, 0.5593376457691193}, "LeafValues" -> 
           RawArray["Real32",{0.27456700801849365`, -0.001228633802384138, 
             0.1286134570837021, -0.17389293015003204`, 0.42019957304000854`, 
             0.027671096846461296`, -0.11889686435461044`, \
-0.09863805770874023, 0.12792828679084778`, 
             0.20898635685443878`, -0.2680215537548065, 
             0.0727115347981453, -0.06480830907821655, -0.23054561018943787`, \
-0.21314755082130432`, -0.03119794651865959}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
             10, -7}, {12, -8}, {-6, 11}, {-3, -10}, {
             13, -11}, {-9, -12}, {-2, 15}, {
             14, -14}, {-4, -15}, {-13, -16}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 280, 
             277, 278, 278, 278, 2}], 
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
            0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
            0.24144437909126282`, -0.16238045692443848`, \
-0.15244100242853165`, 0.9478608965873718, 1.3836916089057922`, 
            0.15441440045833588`, -0.5082264244556427, 0.16060373932123184`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.21963994204998016`, -0.030857663601636887`, 
             0.10741038620471954`, -0.14869855344295502`, 0.3361459970474243, 
             0.022123223170638084`, -0.09513114392757416, \
-0.07892409712076187, 0.10560908913612366`, 
             0.1729222685098648, -0.1715865582227707, -0.21236197650432587`, \
-0.056691572070121765`, 0.05763629078865051, 0.002475572982802987}], 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
             10, -7}, {12, -8}, {-6, 13}, {-3, -10}, {-4, 11}, {-11, -12}, {
             14, -13}, {-9, -14}, {-2, -15}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 278, 278, 3, 280, 278, 280, 278, 275, 
             278, 280, 277}], 
           "NumericalThresholds" -> {-0.4167654514312744, \
-1.1651025414466858`, 0.586245059967041, 
            0.03975731506943703, -0.3362342417240143, -1.0184027552604675`, 
            0.5593376457691193, -0.054887235164642334`, -1.0345970392227173`, 
            1.3984212279319763`, 0.924881786108017, -0.10787223652005196`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.1705792099237442, -0.023322811350226402`, 
             0.12576191127300262`, -0.13860741257667542`, 
             0.27001214027404785`, -0.11652486771345139`, 0.08647242933511734,
              0.011211839504539967`, -0.08198753744363785, 
             0.03568991273641586, -0.18351492285728455`, \
-0.06946929544210434, -0.032580744475126266`}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 6}, {7, 5}, {-1, -5}, {10, 
             11}, {-3, 9}, {8, 
             12}, {-2, -9}, {-7, -10}, {-4, -11}, {-6, -12}, {-8, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 278, 280, 277, 279, 280, 276, 280, 
             280, 280, 197, 280, 2, 278}], 
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.586245059967041, 
            0.5658965408802032, -0.6694435179233551, 
            0.6047321557998657, -0.3362342417240143, 0.15237538516521454`, 
            0.5593376457691193, -0.8736674189567566, 0.5677475333213806, 
            0.0010977291967719793`, 0.924881786108017, 0.1606035903096199, 
            1.243042528629303}, "LeafValues" -> 
           RawArray["Real32",{0.13381440937519073`, -0.03298359364271164, 
             0.12889614701271057`, -0.15273821353912354`, 
             0.22427277266979218`, 0.06887724250555038, 
             0.05144066363573074, -0.09321989864110947, -0.06632155925035477, \
-0.01655604876577854, 0.0054458389058709145`, 
             0.05525364726781845, -0.10163259506225586`, -0.05557543411850929,
              0.004180360585451126, -0.11925958096981049`}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {8, 7}, {-1, -5}, {6, 
             10}, {-3, -7}, {12, 13}, {14, 9}, {-9, -10}, {-6, 
             11}, {-11, -12}, {-4, 15}, {-8, -14}, {-2, -15}, {-13, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 277, 3, 280, 280, 279, 276, 280, 
             277, 280, 278, 3, 277}], 
           
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 0.03975731506943703, 
            0.5677475333213806, 0.9344088137149811, 
            0.9131649434566498, -0.9028680622577667, -0.5227583944797516, 
            1.5696318745613098`, 
            0.5649594366550446, -0.027853557374328375`, -0.13868915289640427`,
             0.9461058378219604}, "LeafValues" -> 
           RawArray["Real32",{0.10312169045209885`, -0.007154310122132301, 
             0.07404609769582748, -0.05556468293070793, 0.1802009791135788, 
             0.08056026697158813, -0.03878110274672508, \
-0.060475047677755356`, 0.0126131447032094, 
             0.030627330765128136`, -0.11132784932851791`, 
             0.007184752728790045, -0.04255010932683945, \
-0.09660004824399948, -0.08421824127435684}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {8, -6}, {
             10, -7}, {11, -8}, {9, -9}, {-3, -10}, {13, -11}, {
             12, -12}, {-2, -13}, {14, -14}, {-4, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 280, 278, 278, 280, 278, 280, 275, 280, 
             3, 278, 279, 1, 278}], 
           "NumericalThresholds" -> {-0.4167654514312744, 1.2770469188690186`,
             0.9138865172863007, -1.0339843034744263`, 
            1.2920055389404297`, -0.054887235164642334`, \
-0.16512740403413773`, -1.0345970392227173`, -0.5140877664089203, \
-0.13868915289640427`, 0.49990423023700714`, -1.0121296644210815`, 
            0.76980921626091, 1.2327117323875427`}, "LeafValues" -> 
           RawArray["Real32",{0.04942077025771141, -0.003346428507938981, 
             0.15019510686397552`, -0.07314929366111755, 0.04268650338053703, 
             0.019521579146385193`, -0.017482789233326912`, 
             0.11001615226268768`, 
             0.0048992447555065155`, -0.06911906599998474, \
-0.059525005519390106`, -0.05285973846912384, -0.10529101639986038`, 
             0.07859601080417633, -0.05287855863571167}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {5, 9}, {7, 8}, {
             6, -6}, {-2, 10}, {-1, 13}, {-5, -9}, {12, 14}, {
             11, -11}, {-7, -12}, {-4, -13}, {-8, -14}, {-10, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 280, 277, 276, 280, 280, 276, 279, 280, 
             276, 1, 280, 275, 3}], 
           "NumericalThresholds" -> {-0.47015997767448425`, 
            1.2770469188690186`, -0.03924974054098129, -0.931493729352951, 
            1.2774283289909363`, -0.16512740403413773`, \
-0.13077695667743683`, -0.6464331150054932, 0.5593376457691193, 
            1.053425371646881, -0.03583664447069168, -0.3362342417240143, \
-1.0335904359817505`, -0.13868936151266098`}, "LeafValues" -> 
           RawArray["Real32",{0.03354673087596893, 0.01676269993185997, 
             0.12869229912757874`, -0.029443709179759026`, \
-0.0035599498078227043`, -0.014107538387179375`, 
             0.08748812973499298, -0.033891696482896805`, \
-0.09269203990697861, -0.0024030229542404413`, -0.04877068102359772, 
             0.02865503914654255, -0.05954791605472565, 
             0.058491434901952744`, -0.06651772558689117}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {7, 5}, {6, 11}, {
             8, -6}, {-1, 13}, {-2, 9}, {10, 12}, {-8, -10}, {-4, 
             14}, {-5, -12}, {-9, -13}, {-7, -14}, {-11, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 280, 1, 277, 275, 276, 278, 280, 
             279, 277, 197, 279, 280}], 
           "NumericalThresholds" -> {-0.3617333471775055, -0.9406689703464508,
             0.9269111454486847, -0.03583710826933384, 
            0.9461058378219604, -1.0363672375679016`, -0.7376145124435425, 
            0.9138865172863007, 
            1.2880584597587585`, -0.6358448565006256, -0.05150502175092697, 
            0.0010977291967719793`, 0.6437021195888519, -0.523695707321167}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.06690282374620438, -0.0049407766200602055`, \
-0.0032952765468508005`, 0.12548133730888367`, 
             0.012824958190321922`, -0.06486864387989044, 0.02668704092502594,
              0.05335512012243271, -0.041362714022397995`, 
             0.006022348999977112, -0.01652158424258232, \
-0.048652052879333496`, -0.03697754815220833, -0.029033459722995758`, \
-0.051383502781391144`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, 4}, {6, -4}, {13, 7}, {8, 
             12}, {-1, -7}, {-5, -8}, {9, -9}, {10, -10}, {-2, 
             11}, {-11, -12}, {-6, 14}, {-3, -14}, {-13, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 280, 277, 276, 279, 1, 276, 278, 
             279, 278, 279, 280, 275, 1}], 
           "NumericalThresholds" -> {-0.3825637698173523, -0.931493729352951, 
            0.9269111454486847, 0.9461058378219604, -1.1564356684684753`, 
            0.37745968997478485`, -0.03583710826933384, -0.7376145124435425, 
            0.6433023512363434, 0.08657680824398994, 
            0.08500208333134651, -0.8317069709300995, 0.5732026696205139, 
            0.10741028934717178`, -0.03583761118352413}, "LeafValues" -> 
           RawArray["Real32",{
             0.06573162227869034, -0.013297252357006073`, \
-0.009375303983688354, 0.10038506239652634`, -0.042604438960552216`, 
             0.04912140965461731, 0.008077098987996578, 0.004631709307432175, 
             0.0428459458053112, -0.03751879930496216, -0.010267259553074837`,
              0.021171391010284424`, -0.05526578426361084, \
-0.014283590950071812`, -0.030312836170196533`, -0.02845325879752636}], 
           "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, 7}, {5, -4}, {9, 12}, {-1, 
             6}, {-6, -7}, {-3, 8}, {-8, -9}, {10, 13}, {11, 14}, {-2, -12}, {
             15, -13}, {-10, -14}, {-11, -15}, {-5, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 280, 277, 278, 279, 279, 280, 279, 277, 
             279, 276, 276, 280, 2, 1}], 
           "NumericalThresholds" -> {-0.4773160368204117, 1.2770469188690186`,
             0.380217507481575, -1.3414121866226196`, 
            0.9971522688865662, -0.43372008204460144`, 1.2897033095359802`, 
            0.9131649434566498, -0.4097961485385895, -0.4701126515865326, \
-0.931493729352951, 0.9391058683395386, -0.15047303587198257`, 
            0.16060330718755722`, -0.03583761118352413}, "LeafValues" -> 
           RawArray["Real32",{0.052189454436302185`, 0.020580926910042763`, 
             0.07584480196237564, -0.0035503122489899397`, \
-0.005193439777940512, -0.01612800918519497, 0.0405082181096077, 
             0.020034361630678177`, -0.03581859916448593, \
-0.027981268242001534`, -0.04666673392057419, 
             0.013623467646539211`, -0.015534654259681702`, \
-0.0017225807532668114`, -0.04727216809988022, -0.025074400007724762`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {7, 10}, {-1, 5}, {
             6, -6}, {-5, 11}, {8, -8}, {9, -9}, {-2, 13}, {
             12, -11}, {-7, -12}, {-4, 14}, {-10, -14}, {-13, 
             15}, {-15, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 276, 280, 279, 277, 280, 280, 279, 
             200, 275, 280, 2}], 
           "NumericalThresholds" -> {-1.03275465965271, -1.1940594911575317`, 
            0.24144437909126282`, -0.5120998322963715, 
            1.0665029883384705`, -0.3825637698173523, 1.2774283289909363`, 
            0.921964555978775, 0.41610319912433624`, 0.2693440392613411, 
            1.2532107830047607`, 0.5684428811073303, 0.1606035903096199}, 
           "LeafValues" -> 
           RawArray["Real32",{0.07159765064716339, 
             0.029207633808255196`, -0.010062930174171925`, \
-0.020028261467814445`, 
             0.03905925527215004, -0.02082948386669159, -0.01902349293231964, 
             0.004178453236818314, 
             0.0007192401681095362, -0.044570889323949814`, \
-0.0019167581340298057`, -0.04009895399212837, 0.013857665471732616`, 
             0.002481470350176096}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 12}, {6, -6}, {
             8, 13}, {9, -8}, {-2, -9}, {10, -10}, {
             11, -11}, {-4, -12}, {-5, -13}, {-7, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 276, 279, 277, 280, 280, 279, 279, 
             280, 280, 275, 197}], 
           "NumericalThresholds" -> {-0.7113344073295593, 
            0.9308460652828217, -1.1564356684684753`, 0.9971522688865662, 
            0.380217507481575, -0.8875118792057037, -0.5195336639881134, 
            0.8980397582054138, -0.4701126515865326, 
            0.207212895154953, -0.5258615911006927, -1.0299208760261536`, 
            0.001291881431825459}, "LeafValues" -> 
           RawArray["Real32",{0.05029553920030594, 0.018988464027643204`, 
             0.06901617348194122, 
             0.019669968634843826`, -0.03003685176372528, \
-0.021615799516439438`, -0.032053399831056595`, 
             0.016315938904881477`, -0.01846752129495144, \
-0.03358190506696701, -0.0020708353258669376`, -0.032541535794734955`, \
-0.0009356975788250566, -0.004678369965404272}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {6, 
             9}, {-2, 7}, {-7, 8}, {12, -9}, {10, -10}, {11, -11}, {
             13, -12}, {-8, -13}, {-6, -14}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 277, 280, 277, 277, 279, 268, 1, 277, 2,
              1, 197, 275, 277}], 
           "NumericalThresholds" -> {-1.03275465965271, -0.7773292362689972, 
            0.5713980197906494, 0.380217507481575, -0.5424853265285492, 
            0.8980397582054138, 
            9.999999682655224*^-21, -0.035837357863783836`, \
-0.3617333471775055, 0.1606033369898796, -0.03583812527358532, 
            0.0012387987226247787`, 1.2499743103981018`, -0.5444541573524475},
            "LeafValues" -> 
           RawArray["Real32",{0.02309465780854225, 
             0.021741081029176712`, -0.020575467497110367`, 
             0.06989883631467819, -0.00419276999309659, 
             0.012797858566045761`, -0.0231586005538702, -0.01307919342070818,
              0.007976751774549484, -0.01500753778964281, \
-0.0379931665956974, -0.023586075752973557`, -0.019202252849936485`, 
             0.0012359312968328595`, -0.007906495593488216}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, 5}, {-1, -4}, {6, 
             10}, {-3, -6}, {7, 14}, {8, -8}, {-2, 9}, {-9, -10}, {-5, 
             11}, {-11, 12}, {-12, 13}, {-13, -14}, {-7, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 276, 279, 277, 280, 275, 3, 3, 3}],
            "NumericalThresholds" -> {-0.7113344073295593, 
            0.9308460652828217, -1.1564356684684753`, 0.9971522688865662, 
            1.5696318745613098`, -1.2298340201377869`, 0.10891465097665787`, 
            0.10532283037900925`, 0.03975666128098965, -0.13868919014930725`},
            "LeafValues" -> 
           RawArray["Real32",{0.03457096219062805, 0.03255116567015648, 
             0.0469890832901001, 
             0.01262342743575573, -0.0234586950391531, -0.023149782791733742`,
              0.0009229590650647879, -0.009969980455935001, \
-0.02970903553068638, 0.01354038342833519, -0.01354801282286644}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {
             6, -6}, {7, 8}, {-2, -8}, {9, -9}, {10, -10}, {-7, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 279, 3, 1, 278, 277, 276, 280, 3, 280}],
            "NumericalThresholds" -> {-1.03275465965271, \
-0.34000593423843384`, 0.03975666128098965, 0.7698083817958832, 
            1.6209778189659119`, -0.875508576631546, -0.873746246099472, \
-0.523048460483551, -0.13868913799524307`, -1.2398365139961243`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.01762579195201397, -0.019095176830887794`, 
             0.00452686520293355, 0.0164779219776392, 
             0.05550764501094818, -0.02406701259315014, 
             0.024531755596399307`, -0.0038933276664465666`, 
             0.0052881701849401, -0.006628889124840498, \
-0.01781727373600006}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {-3, 4}, {-4, -5}, {
             6, -6}, {-2, 7}, {-7, 8}, {10, 9}, {-9, -10}, {-8, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 279, 279, 279, 278, 3, 2, 280, 280,
              280, 275, 197, 280}], 
           "NumericalThresholds" -> {-0.7113344073295593, 0.9308460652828217, 
            1.3694056868553162`, 0.636465311050415, 
            1.0671756267547607`, -0.23888037353754044`, 
            0.10532283037900925`, -0.190930537879467, 0.20124167948961258`, 
            0.570195347070694, 1.2880584597587585`, 1.2471793293952942`, 
            0.001291881431825459, -0.8875118792057037}, "LeafValues" -> 
           RawArray["Real32",{0.002230970421805978, 0.027003979310393333`, 
             0.03526477888226509, -0.013756439089775085`, 
             0.02672821283340454, -0.02068674936890602, \
-0.004306606017053127, -0.013435732573270798`, 0.001321291085332632, 
             0.012448814697563648`, -0.013986721634864807`, 
             0.00500012282282114, -0.017463039606809616`, 
             0.0041885473765432835`, -0.023877384141087532`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, -4}, {-1, -5}, {
             6, -6}, {7, 9}, {8, -8}, {-2, -9}, {12, 10}, {-10, 
             11}, {-11, -12}, {14, 13}, {-13, -14}, {-7, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 3, 2, 279, 280, 278, 3, 1, 279, 1}], 
           "NumericalThresholds" -> {-1.3061254620552063`, 
            0.1053234227001667, -0.1909310594201088, -0.11623026803135872`, \
-0.3362342417240143, 
            1.3984212279319763`, -0.13868922740221024`, \
-0.035837702453136444`, -0.15096715837717056`, -0.035838160663843155`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.020192226395010948`, 
             0.028502000495791435`, -0.02450515329837799, \
-0.014779331162571907`, 0.004360830411314964, 
             0.016588646918535233`, -0.01915837451815605, \
-0.017317945137619972`, 0.002569944364950061, 
             0.000717483286280185, -0.002037324709817767}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {6, 7}, {
             10, -7}, {9, 8}, {-8, -9}, {-6, -10}, {-4, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 276, 3, 3, 1, 280}], 
           "NumericalThresholds" -> {-1.02145117521286, -1.0807608366012573`, \
-0.9406689703464508, 0.039756910875439644`, 0.039757510647177696`, 
            1.3843857645988464`, 0.5593376457691193}, "LeafValues" -> 
           RawArray["Real32",{-0.004461807198822498, -0.035477086901664734`, 
             0.02552429959177971, -0.005415341351181269, 
             0.027535155415534973`, 
             0.013421596959233284`, -0.01717778854072094, 
             0.004261428955942392}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 5}, {-1, -5}, {
             6, -6}, {7, -7}, {-4, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 280, 280, 280, 275, 275, 1, 1, 280, 275,
              279, 276}], 
           "NumericalThresholds" -> {-1.0317081809043884`, 
            0.9308460652828217, -0.8858247101306915, -0.16512740403413773`, \
-1.0290305614471436`, -1.025515377521515, -0.03583679907023907, \
-0.035837702453136444`, 0.19654250144958496`, 1.2474907636642456`, 
            9.999999682655224*^-21, -1.1293277144432068`}, "LeafValues" -> 
           RawArray["Real32",{0.021286191418766975`, -0.023461082950234413`, 
             0.03237009420990944, -0.02185959927737713, -0.004225605167448521,
              0.016068467870354652`, -0.009800917468965054, \
-0.017017658799886703`, -0.0015378218377009034`, 0.01493488997220993, 
             0.0028298303950577974`, -0.002203255193307996, 
             0.00898117944598198}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, 12}, {-2, 
             6}, {-6, 7}, {8, 11}, {10, 
             9}, {-9, -10}, {-7, -11}, {-8, -12}, {-5, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 276, 276, 279, 278, 3, 276, 2, 275, 2, 
             1, 1}], "NumericalThresholds" -> {
            0.6255472302436829, -1.1447357535362244`, -1.0895200967788696`, 
            0.8745190799236298, -0.6289621293544769, 
            0.03975699655711651, -0.6931112706661224, 0.16060422360897064`, 
            1.2447961568832397`, 0.1606033369898796, 
            0.7698091566562653, -0.03583761118352413}, "LeafValues" -> 
           RawArray["Real32",{-0.03979016840457916, 0.0394180491566658, 
             0.021844662725925446`, 
             0.016512973234057426`, -0.022523291409015656`, 
             0.005783454515039921, -0.001532122609205544, \
-0.002473314292728901, 
             0.016115864738821983`, -0.0051437439396977425`, \
-0.020793011412024498`, -0.013449542224407196`, -0.004771602340042591}], 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 5}, {-2, 4}, {-4, 7}, {6, 
             8}, {-3, -7}, {-5, -8}, {10, 9}, {-9, -10}, {11, 
             12}, {-6, -12}, {-11, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 275, 3, 1, 275, 275, 280, 277, 276}], 
           "NumericalThresholds" -> {-1.0425257086753845`, \
-1.0317081809043884`, 0.03975666128098965, 
            0.7698088586330414, -1.0290305614471436`, -1.025515377521515, \
-0.14740513265132904`, 1.5696318745613098`, -0.344004824757576}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.017429132014513016`, -0.008972707204520702, \
-0.017614416778087616`, 0.006659054663032293, 0.0325125977396965, 
             0.012404737062752247`, -0.010508392006158829`, 
             0.008126724511384964, -0.010886883363127708`, 
             0.0005449877353385091}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 5}, {7, 4}, {-4, -5}, {-3, 
             6}, {-6, 8}, {-2, -8}, {9, -9}, {-7, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 277, 277, 276, 278, 276, 277, 277, 1}], 
           "NumericalThresholds" -> {-0.7113344073295593, \
-0.5447868406772614, -0.4196389615535736, -1.1498605012893677`, \
-1.1176645159721375`, 1.7023435831069946`, 
            1.1105183362960815`, -0.8993055820465088, -0.03583677113056183}, 
           "LeafValues" -> 
           RawArray["Real32",{0.015638357028365135`, -0.01212505716830492, 
             0.01741628535091877, 
             0.0008515134686604142, -0.011276689358055592`, 
             0.0032723769545555115`, 
             0.007796016056090593, -0.013675971888005733`, 
             0.017337389290332794`, -0.0060083214193582535`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 6}, {-1, 5}, {-5, 8}, {
             7, -7}, {9, -8}, {-6, -9}, {-4, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> RawArray["Integer16",{275, 3, 1, 2, 3, 1, 1}], 
           "NumericalThresholds" -> {-1.0425257086753845`, 
            0.03975731506943703, 0.7698083817958832, -0.1909310594201088, 
            0.03975571505725384, -0.03583662211894989, -0.03583680838346481}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.014494395814836025`, 
             0.008627481758594513, -0.0010229599429294467`, 
             0.021357590332627296`, -0.00015842291759327054`, \
-0.020618319511413574`, 0.019793830811977386`, -0.011323072016239166`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {
             6, -6}, {7, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 279, 275, 278, 1, 278}], 
           "NumericalThresholds" -> {-1.1961490511894226`, -1.082087218761444,
             0.42247603833675385`, -1.040117859840393, -0.9371588230133057, 
            1.384385883808136, 1.6209778189659119`}, "LeafValues" -> 
           RawArray["Real32",{0.013236629776656628`, -0.028801022097468376`, 
             0.018070276826620102`, 0.007195407524704933, 
             0.008764585480093956, 
             0.00010181204561376944`, -0.01395548228174448, \
-0.011738305911421776`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, 5}, {-5, 
             6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 279, 275, 279, 279, 197, 279}], 
           "NumericalThresholds" -> {1.3843860030174255`, 
            0.21878673136234283`, -1.0416456460952759`, 1.1287112832069397`, 
            0.7867037355899811, 0.0010088002309203148`, 0.37745968997478485`},
            "LeafValues" -> 
           RawArray["Real32",{-0.018062666058540344`, -0.003816725919023156, 
             0.027109477669000626`, 
             0.013590388931334019`, -0.011326807551085949`, 
             0.018079008907079697`, 
             0.0008819478680379689, -0.011354874819517136`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {5, -5}, {
             6, -6}, {-4, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 3, 1, 275, 3, 2, 1, 3}], 
           "NumericalThresholds" -> {0.1053234227001667, 0.03975718095898628, 
            0.7698086202144623, -1.040117859840393, 
            0.03975571505725384, -0.19093096256256104`, \
-0.035836661234498024`, -0.13868863135576248`}, "LeafValues" -> 
           RawArray["Real32",{0.012577795423567295`, -0.010172308422625065`, 
             0.00016212947957683355`, 
             0.023683341220021248`, -0.0029307387303560972`, 
             0.005361876916140318, -0.0251762792468071, 0.012895986437797546`,
              0.008711091242730618}], "Children" -> 
           RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {-1, 5}, {7, 
             6}, {-6, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 1, 275, 1, 1, 279, 278, 2}], 
           "NumericalThresholds" -> {1.3843860030174255`, 
            1.3843865990638733`, -1.0416456460952759`, 0.76980921626091, 
            0.7698079645633698, 0.8745190799236298, -0.6216471195220947, 
            0.16060348600149155`}, "LeafValues" -> 
           RawArray["Real32",{-0.014930673874914646`, 
             0.022271176800131798`, -0.004030933603644371, 
             0.0131318848580122, -0.01089363731443882, 
             0.01983598619699478, -0.018672045320272446`, \
-0.0008112947107292712, -0.0028238047380000353`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {5, -5}, {
             6, -6}, {7, 8}, {-4, -8}, {-7, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 280, 276, 280, 278, 280, 1, 278, 279, 1,
              5}], "NumericalThresholds" -> {0.7867037355899811, 
            0.5720357596874237, -1.1447357535362244`, 
            0.5698419213294983, -0.8614740073680878, 0.20124167948961258`, 
            0.7698089778423309, 0.6929723620414734, 
            0.055151479318737984`, -0.035837167873978615`, 
            9.999999682655224*^-21}, "LeafValues" -> 
           RawArray["Real32",{-0.021822664886713028`, -0.014838575385510921`, 
             0.028978388756513596`, 0.016955701634287834`, 
             0.013177195563912392`, -0.0035204521846026182`, 
             0.013688896782696247`, -0.02026699110865593, \
-0.012779772281646729`, -0.005214362870901823, 0.0014279604656621814`, 
             0.00805634818971157}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {10, -3}, {-1, 4}, {5, 7}, {-4, 6}, {
             11, -7}, {8, -8}, {9, -9}, {-5, -10}, {-2, -11}, {-6, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 278, 277, 277, 280, 279, 280, 198, 
             276, 280, 279}], 
           "NumericalThresholds" -> {-0.7113344073295593, \
-1.1498605012893677`, -1.1176645159721375`, -0.5447868406772614, \
-0.4156266450881958, -0.51617032289505, -1.0054724216461182`, \
-1.2357004284858704`, 9.999999682655224*^-21, 
            0.9525408148765564, -0.886361688375473, 0.6256912350654602}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.01413520984351635, -0.010246384888887405`, \
-0.010340387932956219`, 0.013475905172526836`, 0.009914765134453773, 
             0.010951909236609936`, -0.00022718582476954907`, \
-0.018966084346175194`, -0.007929431274533272, -0.010407610796391964`, 
             0.012470852583646774`, -0.004756684880703688, 
             0.0009635017486289144}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {-1, 3}, {-3, 12}, {-2, 5}, {-5, 
             6}, {7, 9}, {8, 11}, {-6, -9}, {
             10, -10}, {-7, -11}, {-8, -12}, {-4, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 3, 279, 275, 275, 3, 276, 1}], 
           "NumericalThresholds" -> {0.10532283037900925`, 
            0.03975731506943703, 
            0.44301658868789673`, -1.040117859840393, -1.0303456783294678`, 
            0.03975571505725384, -0.8611071407794952, -0.035836778581142426`},
            "LeafValues" -> 
           RawArray["Real32",{0.009712575934827328, -0.015217911452054977`, 
             0.017612246796488762`, 0.0010065584210678935`, 
             0.0037388892378658056`, 
             0.01369846984744072, -0.016572261229157448`, 
             0.0004800058959517628, -0.006997625343501568}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {-1, 5}, {6, 
             7}, {-5, -7}, {-6, 8}, {-8, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 3, 279, 2, 278}], 
           "NumericalThresholds" -> {-1.2001294493675232`, \
-1.0895200967788696`, -1.040117859840393, 
            0.03975699655711651, -0.09426458552479744, -0.1909307837486267, 
            1.6209778189659119`}, "LeafValues" -> 
           RawArray["Real32",{-0.01018956582993269, 0.011424422264099121`, 
             0.012103348970413208`, 
             0.011025477200746536`, -0.0002932068891823292, \
-0.016917621716856956`, 0.00004789864760823548, -0.009159047156572342}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {6, 
             5}, {-5, -6}, {-4, 7}, {-7, -8}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 276, 279, 278, 277, 279, 1, 276}], 
           "NumericalThresholds" -> {-1.0416456460952759`, \
-1.1447357535362244`, 
            0.8940755724906921, -0.946847140789032, -0.7921875417232513, 
            0.6268712878227234, 0.76980921626091, -0.6931112706661224}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.008741379715502262, 
             0.013814592733979225`, -0.0016264194855466485`, \
-0.014929144643247128`, -0.00011955903755733743`, 0.01965932734310627, 
             0.01174067985266447, -0.011873900890350342`, \
-0.0014149337075650692`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 8}, {5, 6}, {-3, -6}, {
             7, -7}, {-5, -8}, {-4, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 277, 280, 276, 279, 276, 279, 268}], 
           "NumericalThresholds" -> {
            1.5568374395370483`, -1.0759419202804565`, -1.0584542155265808`, \
-0.1426393911242485, -0.8317069709300995, -1.082087218761444, \
-1.1676327586174011`, 0.30660974979400635`}, "LeafValues" -> 
           RawArray["Real32",{-0.011639402247965336`, 0.01000222284346819, 
             0.021819913759827614`, -0.011970380321145058`, 
             0.008855203166604042, -0.01278601586818695, -0.00979348924010992,
              0.002263125032186508, -0.00861585233360529}], "Children" -> 
           RawArray["Integer16",{{2, -2}, {-1, 3}, {4, 6}, {-3, 
             5}, {-5, -6}, {-4, 7}, {-7, 8}, {-8, -9}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 280, 276, 280, 276, 279, 2, 278, 280, 
             2}], "NumericalThresholds" -> {0.7867037355899811, 
            0.9234128594398499, -1.1447357535362244`, 
            0.5698419213294983, -0.9848584532737732, 1.185479462146759, 
            0.16060304641723633`, 0.515142410993576, 0.20124167948961258`, 
            0.1606038138270378}, "LeafValues" -> 
           RawArray["Real32",{-0.01868119090795517, 0.006496012210845947, 
             0.024718178436160088`, 
             0.015333658084273338`, -0.012857310473918915`, 
             0.0036496352404356003`, -0.008696704171597958, 
             0.0039308262057602406`, -0.009266807697713375, 
             0.009449830278754234, -0.0053864638321101665`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {6, -3}, {-1, 4}, {5, 7}, {-4, 
             9}, {-2, -7}, {-5, 8}, {-8, -9}, {10, -10}, {-6, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 2, 1, 2, 1, 275, 275, 280, 280}], 
           "NumericalThresholds" -> {-1.3061254620552063`, \
-0.19093182682991028`, 
            0.7698082029819489, -0.1909308210015297, -0.035837702453136444`, 
            1.2474907636642456`, 1.2435283064842224`, 
            0.924881786108017, -0.1533832624554634}, "LeafValues" -> 
           RawArray["Real32",{0.007527391891926527, -0.018514422699809074`, 
             0.012855833396315575`, 
             0.0008239721064455807, -0.0026979732792824507`, \
-0.00022616265050601214`, 
             0.003992266487330198, -0.01944119483232498, \
-0.005449267104268074, 0.009973322041332722}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, 5}, {6, 8}, {
             7, -7}, {-5, -8}, {9, -9}, {-6, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 278, 2, 1, 198, 280, 279}], 
           "NumericalThresholds" -> {-1.115539014339447, \
-1.0584542155265808`, -1.1370901465415955`, 
            0.16060296446084976`, -0.035837605595588684`, 0.2464868351817131, 
            1.2951242923736572`, 0.44301658868789673`}, "LeafValues" -> 
           RawArray["Real32",{0.007012093439698219, 
             0.017290238291025162`, -0.017127107828855515`, 
             0.0025718698743730783`, -0.010046174749732018`, 
             0.00580659881234169, -0.007857033051550388, 
             0.008351999334990978, -0.005967315286397934}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, 6}, {-2, 
             5}, {-5, -6}, {7, -7}, {8, -8}, {-4, -9}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 276, 279, 1, 1, 278, 278, 1, 277, 3, 2, 
             277, 276, 3, 197}], 
           "NumericalThresholds" -> {0.0946783609688282, -1.1447357535362244`,
             0.2728509306907654, -0.0358369592577219, -0.035837702453136444`, 
            0.4685831815004349, -1.1041871905326843`, -0.035837192088365555`, \
-0.2908952236175537, -0.1386895254254341, 
            0.16060345619916916`, -0.598229706287384, -1.0746153593063354`, 
            0.03975666128098965, 0.0012387987226247787`}, "LeafValues" -> 
           RawArray["Real32",{0.005093687679618597, 0.01926800049841404, 
             0.014097552746534348`, -0.015199854969978333`, \
-0.016055546700954437`, 0.019000833854079247`, 
             0.0016533646266907454`, -0.013992773368954659`, 
             0.012911097146570683`, 0.0035210498608648777`, 
             0.002137698233127594, -0.015428628772497177`, \
-0.001477011595852673, -0.017581263557076454`, 
             0.004346128087490797, -0.0015758539084345102`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 7}, {5, 13}, {10, 
             6}, {-6, -7}, {-4, 8}, {9, 12}, {-8, -10}, {-1, 
             11}, {-11, -12}, {-9, -13}, {-5, 14}, {15, -15}, {-14, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 275, 1, 280, 276}], 
           "NumericalThresholds" -> {-1.2001294493675232`, \
-1.0895200967788696`, -1.0411556959152222`, -1.0365572571754456`, 
            0.76980921626091, 0.20209703594446182`, 0.15237538516521454`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.00873740203678608, 0.012282812036573887`, 
             0.009646444581449032, -0.010920053347945213`, 
             0.005360695533454418, 
             0.0005790966097265482, -0.01672438532114029, \
-0.0011858321959152818`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {7, 
             6}, {-6, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 276, 279, 1, 280, 277, 268, 276, 279}], 
           "NumericalThresholds" -> {-1.0418539643287659`, \
-1.1498605012893677`, 0.8745190799236298, 0.76980921626091, 
            0.3837786391377449, 0.380217507481575, 9.999999682655224*^-21, 
            1.7023435831069946`, 1.3565325736999512`}, "LeafValues" -> 
           RawArray["Real32",{-0.006644937209784985, 0.013492836616933346`, 
             0.0064139338210225105`, -0.010157876648008823`, 
             0.0011881821556016803`, -0.01114583294838667, \
-0.0026554560754448175`, -0.007329984102398157, 
             0.00758633716031909, -0.001075503882020712}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 9}, {6, 5}, {-5, -6}, {
             7, 8}, {-3, -8}, {-7, -9}, {-4, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 279, 277, 278, 278, 3, 275}], 
           "NumericalThresholds" -> {1.3843860030174255`, 
            0.21878673136234283`, -1.130354642868042, -1.1651025414466858`, \
-0.9794070720672607, -0.13869009166955948`, -1.0350556373596191`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.011841820552945137`, -0.0022841361351311207`,
              0.016118304803967476`, 
             0.010369709692895412`, -0.010748103260993958`, \
-0.004964270628988743, 0.009964226745069027, 0.0002292875142302364}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {-4, 5}, {-5, 
             6}, {-6, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 275, 278, 276}], 
           "NumericalThresholds" -> {-1.189745008945465, \
-1.0895200967788696`, -1.0411556959152222`, -1.0359485745429993`, 
            1.6209778189659119`, 1.2497752904891968`}, "LeafValues" -> 
           RawArray["Real32",{-0.007774415425956249, 0.010953055694699287`, 
             0.00850010383874178, -0.008439823053777218, \
-0.00017733912682160735`, -0.006710558198392391, 0.007845803163945675}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {
             6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 280, 276, 276, 280, 280, 2, 2, 1, 279}],
            "NumericalThresholds" -> {0.7867037355899811, 
            0.5720357596874237, -1.1447357535362244`, -1.0734038949012756`, 
            0.5698419213294983, 0.20124167948961258`, 0.1606038138270378, 
            0.16060304641723633`, -0.03583712875843048, 1.5466718673706055`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.015445376746356487`, 0.0005572688532993197, 
             0.017544522881507874`, 0.009691284038126469, 
             0.0024810589384287596`, -0.011617674492299557`, 
             0.008562182076275349, -0.003978077322244644, \
-0.006006881594657898, 0.004249026533216238, -0.008412128314375877}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {10, -3}, {-1, 4}, {-4, 5}, {6, 8}, {
             7, -7}, {-5, -8}, {-6, 9}, {-9, -10}, {-2, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 2, 275, 275, 280, 1, 279, 1, 279, 279, 
             3}], "NumericalThresholds" -> {0.1606040820479393, 
            0.16060390323400497`, 1.2474907636642456`, 
            1.2560738921165466`, -0.8875118792057037, 0.7698083817958832, 
            0.6255472302436829, 0.7698076665401459, 
            0.2757168859243393, -0.34000593423843384`, -0.13868939131498337`},
            "LeafValues" -> 
           RawArray["Real32",{0.007263779640197754, 
             0.005117371212691069, -0.014978645369410515`, 
             0.012763487175107002`, -0.004007771145552397, \
-0.0032278739381581545`, -0.003457588842138648, 
             0.020148990675807, -0.02201157435774803, -0.003058837493881583, 
             0.01840560883283615, -0.005041437689214945}], "Children" -> 
           RawArray["Integer16",{{2, 9}, {3, -3}, {5, 4}, {-4, -5}, {-1, 6}, {
             8, 7}, {-7, -8}, {-6, -9}, {10, -10}, {11, -11}, {-2, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{280, 280, 277, 278, 1, 198, 2, 2}], 
           "NumericalThresholds" -> {-1.591059386730194, -0.8875118792057037, \
-1.115539014339447, -1.1370901465415955`, -0.03583694063127041, 
            9.999999682655224*^-21, 
            0.16060379892587662`, -0.39369185268878937`}, "LeafValues" -> 
           RawArray["Real32",{-0.005133630707859993, -0.0005674721323885024, 
             0.010022378526628017`, -0.013149682432413101`, 
             0.00799503643065691, 0.01342150941491127, 
             0.0015236923936754465`, -0.01412906963378191, 
             0.0004005177761428058}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {-3, 4}, {-4, 
             6}, {-2, -6}, {8, 7}, {-7, -8}, {-5, -9}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 197, 280, 280, 276, 277, 200, 280, 3}], 
           "NumericalThresholds" -> {0.1606043055653572, 
            0.0010088002309203148`, 1.2770469188690186`, 1.290135383605957, 
            1.585935115814209, 0.9830326735973358, 0.2693440392613411, 
            0.5679879188537598, -0.1386890485882759}, "LeafValues" -> 
           RawArray["Real32",{0.0070451609790325165`, 
             0.018066372722387314`, -0.003525697160512209, 
             0.013110853731632233`, -0.0008554381201975048, 
             0.006644480861723423, -0.017681432887911797`, 
             0.0069886003620922565`, -0.002761300653219223, \
-0.001756808953359723}], "Children" -> 
           RawArray["Integer16",{{2, 8}, {-1, 3}, {5, 4}, {-4, -5}, {6, -6}, {
             7, -7}, {-3, -8}, {9, -9}, {-2, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 276, 197, 277, 279, 276, 277, 277, 2}], 
           "NumericalThresholds" -> {-0.19093182682991028`, \
-1.0858586430549622`, 0.0010977291967719793`, -0.5447868406772614, 
            0.8745190799236298, -0.9270240962505341, -0.5937579572200775, \
-0.4097961485385895, 0.16060306876897812`}, "LeafValues" -> 
           RawArray["Real32",{-0.003855551825836301, 0.010771424509584904`, 
             0.008079497143626213, -0.010287119075655937`, 
             0.0059857722371816635`, -0.008995741605758667, \
-0.00785841140896082, 
             0.010185006074607372`, -0.00007453561556758359, \
-0.00030132351093925536`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, 5}, {4, -4}, {-1, -5}, {6, 
             9}, {-3, 7}, {-7, 8}, {-8, -9}, {-6, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 1, 3, 278, 3, 1, 1, 1, 2}], 
           "NumericalThresholds" -> {-1.0389081835746765`, 0.7698088586330414,
             0.03975718095898628, -1.082496464252472, 
            0.03975571505725384, -0.035836661234498024`, \
-0.03583684004843235, -0.03583714924752712, -0.1909310594201088}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.010072899982333183`, -0.0008427618886344135, 
             0.005085209384560585, 
             0.017127908766269684`, -0.0004014023288618773, 
             0.00035144403227604926`, 
             0.00935518741607666, -0.010563033632934093`, 
             0.009086883626878262, -0.01250296737998724}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -3}, {5, 4}, {-4, -5}, {6, 9}, {
             7, -7}, {8, -8}, {-2, -9}, {-6, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 3, 277, 140, 278}], 
           "NumericalThresholds" -> {-1.189745008945465, \
-1.0895200967788696`, -1.040117859840393, 
            0.03975699655711651, -0.42157675325870514`, 0.4703100025653839, 
            1.6209778189659119`}, "LeafValues" -> 
           RawArray["Real32",{-0.005795991513878107, 0.008259627036750317, 
             0.006542353890836239, 
             0.0012416276149451733`, -0.010884137824177742`, 
             0.00033351575257256627`, -0.006815627217292786, \
-0.005909495986998081}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {6, 
             5}, {-5, -6}, {7, -7}, {-4, -8}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 277, 277, 278, 276, 275}], 
           "NumericalThresholds" -> {
            1.5568374395370483`, -1.0759419202804565`, -0.9103866219520569, \
-0.9832614362239838, -0.8611071407794952, 0.1051686629652977}, "LeafValues" -> 
           RawArray["Real32",{-0.009610779583454132, 0.006076374556869268, 
             0.008236336521804333, -0.005496431607753038, 
             0.004773454274982214, -0.004803651012480259, 
             0.0007947777630761266}], "Children" -> 
           RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, 4}, {-4, 5}, {-5, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 276, 3, 3, 1, 275, 2}], 
           "NumericalThresholds" -> {-1.3494816422462463`, \
-1.1564356684684753`, 0.03975731506943703, 
            0.03975633159279823, -0.035836584866046906`, \
-1.0312357544898987`, -0.39369235932826996`}, "LeafValues" -> 
           RawArray["Real32",{
             0.005770768504589796, -0.00997285358607769, \
-0.0075362492352724075`, 0.0007214112556539476, -0.006093882955610752, 
             0.006281726527959108, 0.00006203418161021546, 
             0.010134507901966572`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 7}, {5, -5}, {
             6, -6}, {-3, -7}, {-4, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]]}, 
       "ClassNumber" -> 1, "IterationsNumber" -> 50, "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f7" -> Association[
             "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}], 
            "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
               "], "Type" -> "NumericalVector"]], "Output" -> 
          Association[
           "(f7(f8(f1f2f3f4f5f6)))" -> 
            Association["Type" -> "NumericalVector", "Weight" -> 8.]], 
          "Processors" -> {
            MachineLearning`MLProcessor["EmbedNominalVector", 
             Association[
             "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f7" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}]],
               "Index" -> {
                Association[1 -> 1, 2 -> 2, 3 -> 3]}, "Output" -> 
              Association[
               "f7" -> Association[
                 "Weight" -> 1, "Type" -> "NumericalVector"]], 
              "EmbeddingVectors" -> {{{0., 0., 0.}, {-0.035837482661008835`, 
               0.160603865981102, -0.13868938386440277`}, {
               1.3843863010406494`, -0.19093137979507446`, 
               0.03975660353899002}, {
               0.7698085308074951, -0.39369234442710876`, 
               0.10532329231500626`}}}, "Version" -> {12.2, 0}, "ID" -> 
              2900860608003839972]], 
            MachineLearning`MLProcessor["MergeVectors", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f7" -> Association[
                 "Weight" -> 1, "Type" -> "NumericalVector"], 
                "(f8(f1f2f3f4f5f6))" -> 
                Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                   "], "Type" -> "NumericalVector"]], "Spans" -> {
                Span[1, 3], 
                Span[4, 280]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
              Association[
               "(f7(f8(f1f2f3f4f5f6)))" -> 
                Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                   "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
              "ID" -> 8596584706593563824]], 
            MachineLearning`MLProcessor["DensifyNumericalVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "(f7(f8(f1f2f3f4f5f6)))" -> 
                Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                   "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
              "ID" -> 6600348544166215312, "Output" -> 
              Association[
               "(f7(f8(f1f2f3f4f5f6)))" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 8.]]]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association[
               "Type" -> "NumericalVector", "Weight" -> 8.], "Key" -> 
              "(f7(f8(f1f2f3f4f5f6)))", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"]], 
       "DistributionData" -> {NormalDistribution, {0.45748147300198405`}}, 
       "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
       "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
       Association[
        "BoostingMethod" -> 
         Association["Value" -> "Gradient", "Options" -> Association[]], 
         MaxTrainingRounds -> 
         Association["Value" -> 50, "Options" -> Association[]], 
         "LeavesNumber" -> 
         Association["Value" -> 110, "Options" -> Association[]], 
         "LearningRate" -> 
         Association["Value" -> 0.2, "Options" -> Association[]], 
         ValidationSet -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "MaxBinNumber" -> 
         Association["Value" -> 255, "Options" -> Association[]], 
         "ThreadNumber" -> 
         Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
         Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
         Association["Value" -> 15, "Options" -> Association[]], 
         "FeatureFraction" -> 
         Association["Value" -> 1, "Options" -> Association[]], 
         "BaggingFraction" -> 
         Association["Value" -> 1, "Options" -> Association[]], 
         "BaggingFrequency" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "MinGainToSplit" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "L1Regularization" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "L2Regularization" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "LossFunction" -> 
         Association[
          "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
     "TrainingInformation" -> 
     Association[
      "PanelCell" -> CellObject[20081], "TrainingFunction" -> Predict, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 1.8365558003297235`, "PreprocessingTime" -> 
       3.0653784`7.938029086343358, "LossName" -> "StandardDeviation", 
       "BestModelInformation" -> Dataset[
         Association[
         "MeanCrossEntropy" -> 
          Around[3.3750789955552314`, 0.017221839439923173`], 
          "StandardDeviation" -> 
          Around[2.5963205253036126`, 0.5925169056554938], "EvaluationTime" -> 
          0.00006635119509224949, "TestSize" -> 60, "ModelMemory" -> 166928, 
          "ModelUtility" -> -1.6918816692064054`, "TrainingSize" -> 240, 
          "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 2241440, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[3.3750789955552314`, 0.012177679452475608`]}, 
          "StandardDeviationHistory" -> {
            Around[2.5963205253036126`, 0.4189727219566694]}, 
          "Configuration" -> {
           "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
            MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
            0.2, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
            "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
            "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
            "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
            "L1Regularization" -> 0, "L2Regularization" -> 0, "LossFunction" -> 
            "MeanSquaredError"}, "FinalTrainingSize" -> 300], 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
           "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
           "TrainingTime", "TrainingMemory", "ExperimentCount", 
           "MeanCrossEntropyHistory", "StandardDeviationHistory", 
           "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 17], 
           TypeSystem`Atom[Integer]}], 
         Association[]], "Configurations" -> Dataset[
         Association[
         Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 13], "LearningRate" -> 
              Association["Value" -> 0.1], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 35], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.603049156737783, 0.014939033552083007`], 
               "StandardDeviation" -> 
               Around[6.341079117087336, 0.34459816403946864`], 
               "EvaluationTime" -> 0.000030470488799470136`, "TestSize" -> 
               290, "ModelMemory" -> 61696, 
               "ModelUtility" -> -2.5510108951007116`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               237592, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.603049156737783, 0.01056349192905125]}, 
               "StandardDeviationHistory" -> {
                 Around[6.341079117087336, 0.24366769857674256`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.672293595231984, 0.037164925118015404`], 
               "StandardDeviation" -> 
               Around[6.334717971060417, 0.6771054726798769], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 61696, "ModelUtility" -> -2.5603494108660483`,
                "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 534360, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[4.672293595231984, 0.02627957057323894]}, 
               "StandardDeviationHistory" -> {
                 Around[6.334717971060417, 0.4787858713104635]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.167627968410739, 0.02225031185502816], 
               "StandardDeviation" -> 
               Around[2.6764781776815196`, 0.2946986893736171], 
               "EvaluationTime" -> 0.00007207786526301476, "TestSize" -> 120, 
               "ModelMemory" -> 161357.3333333333, 
               "ModelUtility" -> -1.6994386660090806`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.039810717055349706`, "TrainingMemory" -> 
               2.238528*^6, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                 Around[4.17639486746727, 0.029183762338317272`], 
                 Around[4.158861069354208, 0.028665596095754493`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.7501758953649276`, 0.4690347445287801], 
                 Around[2.602780459998112, 0.35951187360974785`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00007207786526301476, "ModelMemory" -> 
              161357.3333333333, "StandardDeviation" -> 
              Around[2.6764781776815196`, 0.2946986893736171], 
              "TrainingMemory" -> 2.238528*^6, "TrainingTime" -> 
              0.06561232824379827], "Index" -> 1], 
          Association[
           "Value" -> "DecisionTree", "Options" -> 
            Association[
             "DistributionSmoothing" -> Association["Value" -> 1], 
              "FeatureFraction" -> Association["Value" -> 1]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.7766589057766007`, 0.18105750197704637`], 
               "StandardDeviation" -> 
               Around[5.749120396477743, 0.30987984937514557`], 
               "EvaluationTime" -> 0.00001414739315879119, "TestSize" -> 290, 
               "ModelMemory" -> 57152, "ModelUtility" -> -2.4529209417081246`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
               "TrainingMemory" -> 1151288, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.7766589057766007`, 0.12802698743266622`]}, 
               "StandardDeviationHistory" -> {
                 Around[5.749120396477743, 0.21911814284623135`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5313076656612896`, 0.07159246743754022], 
               "StandardDeviation" -> 
               Around[3.121019370008615, 0.25382771696363227`], 
               "EvaluationTime" -> 0.000015107104941529995`, "TestSize" -> 
               250, "ModelMemory" -> 57216, 
               "ModelUtility" -> -1.8474461815234962`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 421360, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.5313076656612896`, 0.05062351920696178]}, 
               "StandardDeviationHistory" -> {
                 Around[3.121019370008615, 0.17948329991808404`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5566796432927523`, 0.08644921466303497], 
               "StandardDeviation" -> 
               Around[3.107056447870278, 0.23815122403862546`], 
               "EvaluationTime" -> 0.000020982090196569435`, "TestSize" -> 
               120, "ModelMemory" -> 57216., 
               "ModelUtility" -> -1.8420408798531893`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               1.703248*^6, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                 Around[2.5363331112459475`, 0.12238322330101609`], 
                 Around[2.577026175339557, 0.11555694508743569`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.103287605308288, 0.3869852268880616], 
                 Around[3.1108252904322673`, 0.30207944417914945`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000020982090196569435`, "ModelMemory" -> 
              57216., "StandardDeviation" -> 
              Around[3.107056447870278, 0.23815122403862546`], 
              "TrainingMemory" -> 1.703248*^6, "TrainingTime" -> 
              0.047359344249110875`], "Index" -> 2], 
          Association[
           "Value" -> "NearestNeighbors", "Options" -> 
            Association[
             "NeighborsNumber" -> Association["Value" -> Automatic], 
              "DistributionSmoothing" -> Association["Value" -> 0.5], 
              "NearestMethod" -> Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[5.084048966604046, 0.608898303347392], 
               "StandardDeviation" -> 
               Around[4.536462450427245, 0.3587105581553748], 
               "EvaluationTime" -> 0.000015562459098473143`, "TestSize" -> 
               290, "ModelMemory" -> 80368, 
               "ModelUtility" -> -2.220990602546297, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               222744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[5.084048966604046, 0.4305561193499243]}, 
               "StandardDeviationHistory" -> {
                 Around[4.536462450427245, 0.2536466681548769]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5585011352763605`, 0.1382396817509295], 
               "StandardDeviation" -> 
               Around[3.3327192643914736`, 0.36300563643362316`], 
               "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 
               200, "ModelMemory" -> 170080, 
               "ModelUtility" -> -1.918493638119745, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
               558328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.5585011352763605`, 0.09775021639515247]}, 
               "StandardDeviationHistory" -> {
                 Around[3.3327192643914736`, 0.2566837471311534]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5196301288894043`, 0.1472128191703286], 
               "StandardDeviation" -> 
               Around[2.755591167802839, 0.3399368676534227], 
               "EvaluationTime" -> 0.000026414886541018543`, "TestSize" -> 
               120, "ModelMemory" -> 597952., 
               "ModelUtility" -> -1.731170754873685, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.008628854898161877, "TrainingMemory" -> 
               3.137725333333333*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.5925199168729973`, 0.1787549571057685], 
                 Around[2.4467403409058113`, 0.18308159747685096`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.9932105369193938`, 0.33502565735642], 
                 Around[2.517971798686285, 0.3532696817454866]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000026414886541018543`, "ModelMemory" -> 
              597952., "StandardDeviation" -> 
              Around[2.755591167802839, 0.3399368676534227], "TrainingMemory" -> 
              3.137725333333333*^6, "TrainingTime" -> 0.018729350969945158`], 
            "Index" -> 3], 
          Association[
           "Value" -> "RandomForest", "Options" -> 
            Association[
             "FeatureFraction" -> Association["Value" -> Automatic], 
              "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
              Association["Value" -> Automatic], "DistributionSmoothing" -> 
              Association["Value" -> 0.5], "Implementation" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.3209300489480875`, 0.23383845777763082`], 
               "StandardDeviation" -> 
               Around[4.982078924495252, 0.47697494804648316`], 
               "EvaluationTime" -> 0.00004496472020903844, "TestSize" -> 200, 
               "ModelMemory" -> 148592, "ModelUtility" -> -2.317967958604359, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.025118864315095794`, 
               "TrainingMemory" -> 251192, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.3209300489480875`, 0.16534875919676692`]}, 
               "StandardDeviationHistory" -> {
                 Around[4.982078924495252, 0.33727222021976944`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.531845888030266, 0.0834161505833649], 
               "StandardDeviation" -> 
               Around[3.1249311512157543`, 0.28894590300983947`], 
               "EvaluationTime" -> 0.00004777286046641963, "TestSize" -> 250, 
               "ModelMemory" -> 148592, "ModelUtility" -> -1.850890365860601, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
               "TrainingMemory" -> 454888, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.531845888030266, 0.058984125737975505`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.1249311512157543`, 0.20431560741432792`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.4623123347918625`, 0.10595927737700336`], 
               "StandardDeviation" -> 
               Around[2.8759147406510612`, 0.2769487921783146], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 120, 
               "ModelMemory" -> 159898.66666666666`, 
               "ModelUtility" -> -1.768601941061596, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.02727219573731649, "TrainingMemory" -> 
               1.5580213333333333`*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.4972482026165106`, 0.1840921013867683], 
                 Around[2.427376466967214, 0.11916234764834543`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.945970148012384, 0.4293249139110472], 
                 Around[2.8058593332897384`, 0.34292438855049173`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
              159898.66666666666`, "StandardDeviation" -> 
              Around[2.8759147406510612`, 0.2769487921783146], 
              "TrainingMemory" -> 1.5580213333333333`*^6, "TrainingTime" -> 
              0.05920910898674141], "Index" -> 4], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 1.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[257.2628818891713, 38.796354991064206`], 
               "StandardDeviation" -> 
               Around[4.529676575609829, 0.3326032199964365], 
               "EvaluationTime" -> 0.00002324976954344266, "TestSize" -> 290, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.2183811453025104`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.025118864315095794`,
                "TrainingMemory" -> 12061744, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[257.2628818891713, 27.43316569950206]}, 
               "StandardDeviationHistory" -> {
                 Around[4.529676575609829, 0.23518599230396134`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.391853325085897, 0.7594002690643396], 
               "StandardDeviation" -> 
               Around[3.7416916447089803`, 0.46634032272725134`], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.03731080050001, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               3550256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.391853325085897, 0.5369770798902832]}, 
               "StandardDeviationHistory" -> {
                 Around[3.7416916447089803`, 0.32975240454116245`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.5167895330745536`, 0.020375650287547634`], 
               "StandardDeviation" -> 
               Around[3.7040101820153257`, 0.5284310609375128], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.0307013845016844`,
                "TrainingSize" -> 240, "TrainingTime" -> 
               0.012589254117941668`, "TrainingMemory" -> 4828560, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.5167895330745536`, 0.014407760489410558`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.7040101820153257`, 0.373657186578517]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[3.7040101820153257`, 0.5284310609375128], 
              "TrainingMemory" -> 4828560, "TrainingTime" -> 
              0.04085543196252288], "Index" -> 5], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.001], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[485394.79478777153`, 101834.8325970013], 
               "StandardDeviation" -> 
               Around[4.148344679415135, 0.43108739649747885`], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.136431808184696, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               3550192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[485394.79478777153`, 72008.10069033649]}, 
               "StandardDeviationHistory" -> {
                 Around[4.148344679415135, 0.3048248213474212]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5882367441420376`*^8, 7.223337426932076*^7], 
               "StandardDeviation" -> 
               Around[4.623017308578716, 0.6287693007431978], 
               "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 
               100, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.2510377667245938`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               3282712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.5882367441420376`*^8, 5.1076708773822576`*^7]}, 
               "StandardDeviationHistory" -> {
                 Around[4.623017308578716, 0.44460703635743887`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.52814333850048, 0.02206950906312532], 
               "StandardDeviation" -> 
               Around[3.631122828504231, 0.39879893512429776`], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 120, 
               "ModelMemory" -> 64136., "ModelUtility" -> -2.004421635184225, 
               "TrainingSize" -> 240, "TrainingTime" -> 0.009999999999999998, 
               "TrainingMemory" -> 4.828725333333333*^6, "ExperimentCount" -> 
               2, "MeanCrossEntropyHistory" -> {
                 Around[3.508466172981872, 0.014536236279795646`], 
                 Around[3.5478205040190884`, 0.01376176246280559]}, 
               "StandardDeviationHistory" -> {
                 Around[3.9514602199883333`, 0.3585856392585578], 
                 Around[3.3107854370201286`, 0.3170891145624073]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.631122828504231, 0.39879893512429776`], 
              "TrainingMemory" -> 4.828725333333333*^6, "TrainingTime" -> 
              0.0225], "Index" -> 6], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 100.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.2174258263234403`, 0.0634883747234744], 
               "StandardDeviation" -> 
               Around[5.481347554919375, 0.6468724687711669], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.4178312904783708`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282712, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.2174258263234403`, 0.04489306029348135]}, 
               "StandardDeviationHistory" -> {
                 Around[5.481347554919375, 0.4574079092309753]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.659328729428095, 0.010250773588439423`], 
               "StandardDeviation" -> 
               Around[3.823564368165172, 0.29022811581941804`], 
               "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.0494018879340907`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550256, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.659328729428095, 0.007248391516793475]}, 
               "StandardDeviationHistory" -> {
                 Around[3.823564368165172, 0.2052222687869052]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.915239451875844, 0.031141556448652293`], 
               "StandardDeviation" -> 
               Around[3.5140527310120526`, 0.331984288045451], 
               "EvaluationTime" -> 0.00003899463987771132, "TestSize" -> 120, 
               "ModelMemory" -> 64136., "ModelUtility" -> -1.968640266780822, 
               "TrainingSize" -> 240, "TrainingTime" -> 0.011726169411961113`,
                "TrainingMemory" -> 4.828746666666666*^6, "ExperimentCount" -> 
               2, "MeanCrossEntropyHistory" -> {
                 Around[3.8883075185300906`, 0.021448434696545327`], 
                 Around[3.942171385221598, 0.02284095092466365]}, 
               "StandardDeviationHistory" -> {
                 Around[3.6965039698254323`, 0.36872896575344], 
                 Around[3.331601492198673, 0.4209040411312939]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003899463987771132, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.5140527310120526`, 0.331984288045451], 
              "TrainingMemory" -> 4.828746666666666*^6, "TrainingTime" -> 
              0.024657711764951393`], "Index" -> 7], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.1], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[26002.29171875621, 7256.363374277151], 
               "StandardDeviation" -> 
               Around[4.624433270451427, 0.6288627927188927], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.2513398213251774`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282648, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[26002.29171875621, 5131.023748705071]}, 
               "StandardDeviationHistory" -> {
                 Around[4.624433270451427, 0.4446731451674392]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[37.647044107655006`, 5.342783107852846], 
               "StandardDeviation" -> 
               Around[3.370793521014749, 0.24225483854627688`], 
               "EvaluationTime" -> 0.000024368167755758284`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -1.9225714931534927`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550128, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[37.647044107655006`, 3.777918165971684]}, 
               "StandardDeviationHistory" -> {
                 Around[3.370793521014749, 0.1713000391113246]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.527412121768714, 0.022426830007490618`], 
               "StandardDeviation" -> 
               Around[3.5727753558312605`, 0.38721907863315186`], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 120, 
               "ModelMemory" -> 64136., 
               "ModelUtility" -> -1.9879390978929679`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.009999999999999998, "TrainingMemory" -> 
               8.062261333333333*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.5073248885934025`, 0.014506723656960119`], 
                 Around[3.5474993549440264`, 0.013733626675062284`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.876493307827907, 0.3654559956204864], 
                 Around[3.269057403834614, 0.3187002769138467]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.5727753558312605`, 0.38721907863315186`], 
              "TrainingMemory" -> 8.062261333333333*^6, "TrainingTime" -> 
              0.0225], "Index" -> 8], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 10.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[5.425547559429526, 1.0698531111818443`], 
               "StandardDeviation" -> 
               Around[4.763041756105327, 0.6358314429873951], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.2803867193081757`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282584, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[5.425547559429526, 0.7565003897902074]}, 
               "StandardDeviationHistory" -> {
                 Around[4.763041756105327, 0.44960072502801474`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.64787345784768, 0.0615241618325005], 
               "StandardDeviation" -> 
               Around[3.3980409049719666`, 0.2658376430050166], 
               "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -1.931876312818681, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550128, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.64787345784768, 0.043504152038579665`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.3980409049719666`, 0.18797560006349578`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.608173148019115, 0.017810454033276794`], 
               "StandardDeviation" -> 
               Around[3.4256858191688466`, 0.379725767585207], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 120, 
               "ModelMemory" -> 64136., 
               "ModelUtility" -> -1.9463807372498456`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.013675813386831489`, "TrainingMemory" -> 
               4.828661333333333*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.594034147326451, 0.01527717829174122], 
                 Around[3.6223121487117793`, 0.015356567250146766`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.691974497137692, 0.3765154603893469], 
                 Around[3.1593971412000013`, 0.3894875560859703]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.4256858191688466`, 0.379725767585207], 
              "TrainingMemory" -> 4.828661333333333*^6, "TrainingTime" -> 
              0.02709476673353936], "Index" -> 9], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 10000.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.593914022241319, 0.027787721380235553`], 
               "StandardDeviation" -> 
               Around[6.329755394805718, 0.6496334753369907], 
               "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
               100, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.558731981453258, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               3282648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.593914022241319, 0.019648886221686968`]}, 
               "StandardDeviationHistory" -> {
                 Around[6.329755394805718, 0.45936023569656986`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.640129574846416, 0.024236630930106924`], 
               "StandardDeviation" -> 
               Around[6.128642719518877, 0.3650588828396368], 
               "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.5179679831643216`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550000, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.640129574846416, 0.017137886083794227`]}, 
               "StandardDeviationHistory" -> {
                 Around[6.128642719518877, 0.2581356115882925]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[5.2652345937342835`, 0.08597750391980621], 
               "StandardDeviation" -> 
               Around[5.514630920399861, 0.6021897814631463], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.4221612555317202`,
                "TrainingSize" -> 240, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 4828560, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[5.2652345937342835`, 0.060795276051187945`]}, 
               "StandardDeviationHistory" -> {
                 Around[5.514630920399861, 0.4258124780338358]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[5.514630920399861, 0.6021897814631463], "TrainingMemory" -> 
              4828560, "TrainingTime" -> 0.02508925411794167], "Index" -> 10],
           Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.01], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[2907.3235717163566`, 397.7594669108454], 
               "StandardDeviation" -> 
               Around[3.4489573303635646`, 0.23881992253401998`], 
               "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -1.944977636421346, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3549664, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2907.3235717163566`, 281.2584163338049]}, 
               "StandardDeviationHistory" -> {
                 Around[3.4489573303635646`, 0.16887118670625148`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.5083086424958627`, 0.020546336004268972`], 
               "StandardDeviation" -> 
               Around[3.9447295801878193`, 0.5075073229121089], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.0909377267052243`,
                "TrainingSize" -> 240, "TrainingTime" -> 
               0.012589254117941668`, "TrainingMemory" -> 4828432, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.5083086424958627`, 0.014528453517155903`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.9447295801878193`, 0.35886186953298305`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.051840030733022*^6, 309178.46958212415`], 
               "StandardDeviation" -> 
               Around[4.367344485110485, 0.32113783987144195`], 
               "EvaluationTime" -> 0.00001922557869792714, "TestSize" -> 290, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.1819062574337797`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 3282776, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.051840030733022*^6, 218622.1924383987]}, 
               "StandardDeviationHistory" -> {
                 Around[4.367344485110485, 0.22707874426869623`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[4.367344485110485, 0.32113783987144195`], 
              "TrainingMemory" -> 3282776, "TrainingTime" -> 
              0.04776776235382501], "Index" -> 11], 
          Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 60], "LearningRate" -> 
              Association["Value" -> 0.1], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 90], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[4.667272415470441, 0.024683835812017708`], 
               "StandardDeviation" -> 
               Around[6.251707144295453, 0.37000431292225927`], 
               "EvaluationTime" -> 0.00001901871830953335, "TestSize" -> 250, 
               "ModelMemory" -> 61696, "ModelUtility" -> -2.5377737739361628`,
                "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 536864, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[4.667272415470441, 0.01745410768837307]}, 
               "StandardDeviationHistory" -> {
                 Around[6.251707144295453, 0.2616325587355988]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.588919783512541, 0.057951756375120574`], 
               "StandardDeviation" -> 
               Around[3.0387891228194377`, 0.48341433250052035`], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
               "ModelMemory" -> 157344, 
               "ModelUtility" -> -1.8359340470531218`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
               2241280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.588919783512541, 0.04097807991451849]}, 
               "StandardDeviationHistory" -> {
                 Around[3.0387891228194377`, 0.34182555263388636`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
              157344, "StandardDeviation" -> 
              Around[3.0387891228194377`, 0.48341433250052035`], 
              "TrainingMemory" -> 2241280, "TrainingTime" -> 
              0.0521177248700464], "Index" -> 12], 
          Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 110], "LearningRate" -> 
              Association["Value" -> 0.2], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 15], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.188755353091236, 0.010969837572900105`], 
               "StandardDeviation" -> 
               Around[2.90965840843094, 0.2931452364085463], "EvaluationTime" -> 
               0.00010430402130441927`, "TestSize" -> 200, "ModelMemory" -> 
               158304, "ModelUtility" -> -1.7811395645522192`, "TrainingSize" -> 
               50, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
               573128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.188755353091236, 0.007756846536312642]}, 
               "StandardDeviationHistory" -> {
                 Around[2.90965840843094, 0.2072849845370167]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.3750789955552314`, 0.017221839439923173`], 
               "StandardDeviation" -> 
               Around[2.5963205253036126`, 0.5925169056554938], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
               "ModelMemory" -> 166928, 
               "ModelUtility" -> -1.6918816692064054`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
               2241440, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.3750789955552314`, 0.012177679452475608`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.5963205253036126`, 0.4189727219566694]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.603447386144963, 0.014929018870274535`], 
               "StandardDeviation" -> 
               Around[6.341079117087336, 0.34459816403946864`], 
               "EvaluationTime" -> 0.000016395446818563233`, "TestSize" -> 
               290, "ModelMemory" -> 61696, 
               "ModelUtility" -> -2.55101088102567, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               181320, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.603447386144963, 0.010556410479633054`]}, 
               "StandardDeviationHistory" -> {
                 Around[6.341079117087336, 0.24366769857674256`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000016395446818563233`, "ModelMemory" -> 
              61696, "StandardDeviation" -> 
              Around[6.341079117087336, 0.34459816403946864`], 
              "TrainingMemory" -> 181320, "TrainingTime" -> 
              0.08735751282918311], "Index" -> 13], 
          Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 60], "LearningRate" -> 
              Association["Value" -> 0.02], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 35], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[4.6673624032468375`, 0.024685311531796622`], 
               "StandardDeviation" -> 
               Around[6.251707144295453, 0.37000431292225927`], 
               "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 250, 
               "ModelMemory" -> 61696, "ModelUtility" -> -2.537773778860592, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`, 
               "TrainingMemory" -> 537024, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[4.6673624032468375`, 0.01745515117983587]}, 
               "StandardDeviationHistory" -> {
                 Around[6.251707144295453, 0.2616325587355988]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.746518876500792, 0.06443967651644998], 
               "StandardDeviation" -> 
               Around[3.3597067317315656`, 0.4930925971746341], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
               "ModelMemory" -> 160920, 
               "ModelUtility" -> -1.9339388624388025`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
               2241376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.746518876500792, 0.0455657322422493]}, 
               "StandardDeviationHistory" -> {
                 Around[3.3597067317315656`, 0.3486691192150704]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
              160920, "StandardDeviation" -> 
              Around[3.3597067317315656`, 0.4930925971746341], 
              "TrainingMemory" -> 2241376, "TrainingTime" -> 
              0.07849733612802016], "Index" -> 14], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.0001], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[4.8437402720050275`*^7, 1.0188818542009313`*^7], 
               "StandardDeviation" -> 
               Around[4.148172715159739, 0.43211748957594637`], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.136439850155056, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               3549664, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.8437402720050275`*^7, 7.204582683334017*^6]}, 
               "StandardDeviationHistory" -> {
                 Around[4.148172715159739, 0.3055532071484589]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.5084828462149558`, 0.02055849306032157], 
               "StandardDeviation" -> 
               Around[3.9521461691064794`, 0.5070785466376446], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.0927478558615955`,
                "TrainingSize" -> 240, "TrainingTime" -> 
               0.012589254117941668`, "TrainingMemory" -> 4828560, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.5084828462149558`, 0.01453704985392996]}, 
               "StandardDeviationHistory" -> {
                 Around[3.9521461691064794`, 0.3585586789216975]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.050760538782293*^10, 3.0902660190252595`*^9], 
               "StandardDeviation" -> 
               Around[4.367159046752454, 0.3211357312166417], 
               "EvaluationTime" -> 0.00001922557869792714, "TestSize" -> 290, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.1818643165639573`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282712, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.050760538782293*^10, 2.1851480577231174`*^9]}, 
               "StandardDeviationHistory" -> {
                 Around[4.367159046752454, 0.22707725322458777`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[4.367159046752454, 0.3211357312166417], "TrainingMemory" -> 
              3282712, "TrainingTime" -> 0.04], "Index" -> 15]], 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "DecisionTree", "GradientBoostedTrees", "LinearRegression", 
              "NearestNeighbors", "RandomForest"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`AnyLength]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "ModelMemory", "StandardDeviation", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 15], 
         Association[]], "MaxTrainingSize" -> 300, 
       "PreprocessorEvaluationTime" -> 3.49609375*^-6, "PreprocessorMemory" -> 
       116296, "InputDimension" -> 278, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
       True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
       "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.8229223471597467`17.334970465692574*^9, 
       "RoundPartitioning" -> Dataset[{
          Association[
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.30040708320000026`, 
           "ElapsedTimes" -> 0.4999646, "ExperimentCounts" -> 13], 
          Association[
          "TrainingSizes" -> 50, "TimeBudgets" -> 0.42915297600000024`, 
           "ElapsedTimes" -> 0.5049406, "ExperimentCounts" -> 15], 
          Association[
          "TrainingSizes" -> 240, "TimeBudgets" -> 0.6130756800000001, 
           "ElapsedTimes" -> 0.6694668, "ExperimentCounts" -> 23]}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], 
         Association[]]], "AnomalyDetector" -> None, "Log" -> 
     Association["Example" -> MachineLearning`MLDataset[
         Association[
         "f1" -> Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
            8718539460336612740], "f2" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {140.}, "ID" -> 
            5330523246654450449], "f3" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {72.}, "ID" -> 
            5227176333101167944], "f4" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2408.}, "ID" -> 
            5596007189629378955], "f5" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
            2638574294534422359], "f6" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {71}, "ID" -> 
            5604019906672533564], "f7" -> 
          Association[
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {1}, "ID" -> 
            7446114396074216018], "f8" -> 
          Association[
           "Type" -> "Text", "Weight" -> 1, 
            "Values" -> {"chevrolet vega (sw)"}, "ID" -> 
            3206511614197282240]], 
         Association[
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False]], "TrainingTime" -> 5.2114544, 
       "MaxTrainingMemory" -> 106365280, "DataMemory" -> 102576, 
       "FunctionMemory" -> 534440, "LanguageVersion" -> {12.2, 0}, "Date" -> 
       DateObject[{2021, 2, 21, 18, 52, 27.3205709`9.189064685787097}, 
         "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}]]]]]], "Output",
 CellChangeTimes->{3.8229439500473614`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"a3ba3a13-3924-4c9d-9303-fc25ebb4679b"]
}, Open  ]],

Cell["\<\
\:770b\:4e00\:4e0b\:9884\:6d4b\:5668\:5728\:6d4b\:8bd5\:96c6\:7684\:6570\:636e\
\:4e0a\:7684\:8868\:73b0\
\>", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814286976687262*^9, 3.814286984537664*^9}, {
   3.822943977703968*^9, 
   3.822943990604533*^9}},ExpressionUUID->"787d3f09-cd4c-466b-b897-\
78188cf78454"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pm", " ", "=", " ", 
  RowBox[{"PredictorMeasurements", "[", 
   RowBox[{"p", ",", "testing"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.814104933993738*^9, 3.814104955088408*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"81a9d9f9-2afe-4f35-a76a-eefe2429bb85"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Predictor method"], 
                   TextCell["Predictor method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "GradientBoostedTrees",ExpressionUUID->
                 "a3851501-46f8-4996-8eb3-9e6ec620aabf"],
                TextCell["GradientBoostedTrees"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "98"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Standard deviation"], 
                   TextCell["Standard deviation"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"5.5141890570556144624`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.4829678139623716504`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "4.5482534291308711616`3.", "\", \"", 
                   "6.4801246849803577632`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 4.5482534291308711616`3., 
                   ", ", 6.4801246849803577632`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"5.9381640228005352355`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3958581497837001528`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "5.1464477232331349299`3.", "\", \"", 
                   "6.7298803223679355412`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 5.1464477232331349299`3., 
                   ", ", 6.7298803223679355412`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["R-squared"], 
                   TextCell["R-squared"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.1376989294817180243`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1901380197751741941`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.2425771100686303638`3."}], "\", \"", 
                   "0.5179749690320664124`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.2425771100686303638`3.,
                    ", ", 0.5179749690320664124`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"3.8183812044816995979`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3219352118384772865`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "3.1745107808047450249`3.", "\", \"", 
                   "4.4622516281586541709`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 3.1745107808047450249`3., 
                   ", ", 4.4622516281586541709`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"6.06`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"641.`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                 FractionBox["\"Examples\"", "\"Seconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.011000000000000001`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxFU2tQVGUYXkCJkHBCKGBABlQuBhjsyln2dp5zdrk5KAM6KYgoEDukS2sX
GBQsSUcNIUFMhFFYUHAk4rJAjjogQU7gIhTY2DaZCEkIFGIaZoIts985vDPf
j2ee9/q87+eZoo1LsxIIBCmmZ2F6lqZnE3Ff4HNNCPWCjVFIsuk5fTGVRnmZ
yVwY+DlEXbSlaQgWDAzGJ0p1++ZZ3OpbMBpeF7wexM3LzfG1LAJ/7ah1uyMx
Y7UMFrajx/02UcRfBr9xOiYymcMS7Bo48Wz6jtScvxModNjj2tGmIFiFkUKv
iCPLlGZ/OyWe/1gRHfZcQTBwKi+j7yd71txvGQuNLsFw7ROJOV4gg8PQZPGw
O0X6kSBsqTrOolRsjo8WQxPXXTPoJCLzCqFa+7q8q1Nh9vdm8L5L4YwqR0L6
lSORmdZ8u11O4mlo8sYrDv1C6h1ksWz2m6bHWgXJBxRVB/hOVNLEPwLRad1H
PvcQE72leBlrbKkKBOlPha7t5+buLleS+uGw/dMp21hFQ7hgLWHwD+3y9Q8Q
m7GQxdarVqmHirl5FbCIELdF9TKkXjg8++zbmMuM2f8jFXZGWE/tribzjQE7
gg9kblAw/HzGp6u2HgsKNvcfD3g1enk47qdIfQp19is/TI8MJfMyiMs/u3pv
DUX0p9A/+fGVo1LSrxBI3vTgn+ibUoKlyE+7PKt+S0r8JcjeoqnRX+L0DYXV
kyd3M95ZT/JTcFxT+qn87OJ88wU3PGlXcn8FShScn15pYBnir8T8YYvCBmeO
Z3BKn1/VFMUSPYGAR82t6aZ74vY1WLPZSaMm92NkkRtiObeinOhhx6BoRtvQ
GUP+QzyDe1frr1f5ET2FDLR2ZUM37Mj9j8mxJmmfpP8/cr8HAao5IDYpRs7/
n0a3RMPQFySfEdBXXEo/3S7n9Upx1C5RO0jIvoDYkfcqc2xlRC8a9U0H3nVI
kpD7ksH9/FyCzjqE7EeBwsxtx/v9yX9Wh2LjZ8t1zYPBJL8Y5yqzbr0YERE+
BK0XHlbU3g7m9+F80jv890ci4i/C6PXd0qni9YQPwrHvN+bOp0n5/5VbEu9j
WM1hKUYDx+oMZzhs0i9tclQfJCOYRoh2xpeq4ng5Mo8OGGefhvLxU4LuFyuy
xASLsWev1eMMa46ncPLVP3zcgsi+BSwG0v96eCWV5fepKrHbH9DA8vUMLVvW
Jv5L9iFQ4jt1kUvXhJyPt1Fvc8uul/I4OKb3lSU3FTzWDbW/PZFA8/N4l/4W
uWopy+erSIrtzh7j+gGMOyy/ek3P8HzyxImu4XYRwaEo9XaeuXdYxPP1uxp/
1n3J3bcE7veNQVQOx4eAftaa5/qBhM//RsfX1eJODrPoN6zr6emgeP3Ku/17
67IW8bS78Id1ydw84dh8RswU3Zbx+cQewy8TNizuc/LvN0t26jm9afwPmXox
aw==
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.731063895224935`, 23.9}}]},
                    RowBox[{"{", 
                    RowBox[{"19.731063895224935`", ",", "23.9`"}], "}"}]],
                    Annotation[#, {19.731063895224935`, 23.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.389275955043892`, 34.2}}]},
                    RowBox[{"{", 
                    RowBox[{"31.389275955043892`", ",", "34.2`"}], "}"}]],
                    Annotation[#, {31.389275955043892`, 34.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.246256308879456`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"31.246256308879456`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {31.246256308879456`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{37.9880867711816, 31.8}}]},
                    RowBox[{"{", 
                    RowBox[{"37.9880867711816`", ",", "31.8`"}], "}"}]],
                    Annotation[#, {37.9880867711816, 31.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.9934523782323, 37.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.9934523782323`", ",", "37.3`"}], "}"}]],
                    Annotation[#, {29.9934523782323, 37.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.840280934902857`, 28.4}}]},
                    RowBox[{"{", 
                    RowBox[{"26.840280934902857`", ",", "28.4`"}], "}"}]],
                    Annotation[#, {26.840280934902857`, 28.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.30532144825884, 28.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.30532144825884`", ",", "28.8`"}], "}"}]],
                    Annotation[#, {23.30532144825884, 28.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.380009606458916`, 26.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.380009606458916`", ",", "26.8`"}], "}"}]],
                    Annotation[#, {23.380009606458916`, 26.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.84350541602123, 33.5}}]},
                    RowBox[{"{", 
                    RowBox[{"27.84350541602123`", ",", "33.5`"}], "}"}]],
                    Annotation[#, {27.84350541602123, 33.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.70993199457239, 41.5}}]},
                    RowBox[{"{", 
                    RowBox[{"30.70993199457239`", ",", "41.5`"}], "}"}]],
                    Annotation[#, {30.70993199457239, 41.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{38.090035335418875`, 38.1}}]},
                    RowBox[{"{", 
                    RowBox[{"38.090035335418875`", ",", "38.1`"}], "}"}]],
                    Annotation[#, {38.090035335418875`, 38.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.97761992337653, 32.1}}]},
                    RowBox[{"{", 
                    RowBox[{"30.97761992337653`", ",", "32.1`"}], "}"}]],
                    Annotation[#, {30.97761992337653, 32.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.115899613828475`, 37.2}}]},
                    RowBox[{"{", 
                    RowBox[{"36.115899613828475`", ",", "37.2`"}], "}"}]],
                    Annotation[#, {36.115899613828475`, 37.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.495053014398238`, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.495053014398238`", ",", "28.`"}], "}"}]],
                    Annotation[#, {26.495053014398238`, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.11670791633066, 26.4}}]},
                    RowBox[{"{", 
                    RowBox[{"23.11670791633066`", ",", "26.4`"}], "}"}]],
                    Annotation[#, {23.11670791633066, 26.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.589863920123452`, 24.3}}]},
                    RowBox[{"{", 
                    RowBox[{"24.589863920123452`", ",", "24.3`"}], "}"}]],
                    Annotation[#, {24.589863920123452`, 24.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.08524547594645, 19.1}}]},
                    RowBox[{"{", 
                    RowBox[{"20.08524547594645`", ",", "19.1`"}], "}"}]],
                    Annotation[#, {20.08524547594645, 19.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.752963844958018`, 34.3}}]},
                    RowBox[{"{", 
                    RowBox[{"30.752963844958018`", ",", "34.3`"}], "}"}]],
                    Annotation[#, {30.752963844958018`, 34.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.48152074522789, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.48152074522789`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {26.48152074522789, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.358420189296666`, 31.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.358420189296666`", ",", "31.3`"}], "}"}]],
                    Annotation[#, {29.358420189296666`, 31.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.85357087303548, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.85357087303548`", ",", "37.`"}], "}"}]],
                    Annotation[#, {26.85357087303548, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.437296909970467`, 32.2}}]},
                    RowBox[{"{", 
                    RowBox[{"30.437296909970467`", ",", "32.2`"}], "}"}]],
                    Annotation[#, {30.437296909970467`, 32.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.624666701451645`, 46.6}}]},
                    RowBox[{"{", 
                    RowBox[{"31.624666701451645`", ",", "46.6`"}], "}"}]],
                    Annotation[#, {31.624666701451645`, 46.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.123192236618067`, 27.9}}]},
                    RowBox[{"{", 
                    RowBox[{"24.123192236618067`", ",", "27.9`"}], "}"}]],
                    Annotation[#, {24.123192236618067`, 27.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{32.364309769738604`, 40.8}}]},
                    RowBox[{"{", 
                    RowBox[{"32.364309769738604`", ",", "40.8`"}], "}"}]],
                    Annotation[#, {32.364309769738604`, 40.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{38.12396211799161, 44.3}}]},
                    RowBox[{"{", 
                    RowBox[{"38.12396211799161`", ",", "44.3`"}], "}"}]],
                    Annotation[#, {38.12396211799161, 44.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.632224564888965`, 43.4}}]},
                    RowBox[{"{", 
                    RowBox[{"31.632224564888965`", ",", "43.4`"}], "}"}]],
                    Annotation[#, {31.632224564888965`, 43.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.176455066125683`, 36.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.176455066125683`", ",", "36.4`"}], "}"}]],
                    Annotation[#, {24.176455066125683`, 36.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.568411053094987`, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.568411053094987`", ",", "30.`"}], "}"}]],
                    Annotation[#, {26.568411053094987`, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.57256188629072, 44.6}}]},
                    RowBox[{"{", 
                    RowBox[{"35.57256188629072`", ",", "44.6`"}], "}"}]],
                    Annotation[#, {35.57256188629072, 44.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.4316927263501, 40.9}}]},
                    RowBox[{"{", 
                    RowBox[{"35.4316927263501`", ",", "40.9`"}], "}"}]],
                    Annotation[#, {35.4316927263501, 40.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.634443999798687`, 33.8}}]},
                    RowBox[{"{", 
                    RowBox[{"30.634443999798687`", ",", "33.8`"}], "}"}]],
                    Annotation[#, {30.634443999798687`, 33.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.4866473065674, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"34.4866473065674`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {34.4866473065674, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.193486639289265`, 32.7}}]},
                    RowBox[{"{", 
                    RowBox[{"18.193486639289265`", ",", "32.7`"}], "}"}]],
                    Annotation[#, {18.193486639289265`, 32.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.476869531600762`, 23.7}}]},
                    RowBox[{"{", 
                    RowBox[{"23.476869531600762`", ",", "23.7`"}], "}"}]],
                    Annotation[#, {23.476869531600762`, 23.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.28284371599026, 35.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.28284371599026`", ",", "35.`"}], "}"}]],
                    Annotation[#, {25.28284371599026, 35.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.646242416589594`, 23.6}}]},
                    RowBox[{"{", 
                    RowBox[{"23.646242416589594`", ",", "23.6`"}], "}"}]],
                    Annotation[#, {23.646242416589594`, 23.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.23253974060554, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"31.23253974060554`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {31.23253974060554, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.790236884100867`, 27.2}}]},
                    RowBox[{"{", 
                    RowBox[{"27.790236884100867`", ",", "27.2`"}], "}"}]],
                    Annotation[#, {27.790236884100867`, 27.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.16953991153199, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"27.16953991153199`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {27.16953991153199, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.662882174442046`, 25.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.662882174442046`", ",", "25.8`"}], "}"}]],
                    Annotation[#, {26.662882174442046`, 25.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.337613937666912`, 23.5}}]},
                    RowBox[{"{", 
                    RowBox[{"21.337613937666912`", ",", "23.5`"}], "}"}]],
                    Annotation[#, {21.337613937666912`, 23.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.61031339111385, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.61031339111385`", ",", "30.`"}], "}"}]],
                    Annotation[#, {26.61031339111385, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.20505163332017, 39.1}}]},
                    RowBox[{"{", 
                    RowBox[{"36.20505163332017`", ",", "39.1`"}], "}"}]],
                    Annotation[#, {36.20505163332017, 39.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.5218237562286, 39.}}]},
                    RowBox[{"{", 
                    RowBox[{"34.5218237562286`", ",", "39.`"}], "}"}]],
                    Annotation[#, {34.5218237562286, 39.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.19282686781115, 35.1}}]},
                    RowBox[{"{", 
                    RowBox[{"36.19282686781115`", ",", "35.1`"}], "}"}]],
                    Annotation[#, {36.19282686781115, 35.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.57570285103171, 32.3}}]},
                    RowBox[{"{", 
                    RowBox[{"36.57570285103171`", ",", "32.3`"}], "}"}]],
                    Annotation[#, {36.57570285103171, 32.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{38.089132868656044`, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"38.089132868656044`", ",", "37.`"}], "}"}]],
                    Annotation[#, {38.089132868656044`, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.80017344078409, 37.7}}]},
                    RowBox[{"{", 
                    RowBox[{"36.80017344078409`", ",", "37.7`"}], "}"}]],
                    Annotation[#, {36.80017344078409, 37.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.20373499496506, 34.1}}]},
                    RowBox[{"{", 
                    RowBox[{"35.20373499496506`", ",", "34.1`"}], "}"}]],
                    Annotation[#, {35.20373499496506, 34.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.311533834772092`, 34.7}}]},
                    RowBox[{"{", 
                    RowBox[{"31.311533834772092`", ",", "34.7`"}], "}"}]],
                    Annotation[#, {31.311533834772092`, 34.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.32524867948609, 34.4}}]},
                    RowBox[{"{", 
                    RowBox[{"34.32524867948609`", ",", "34.4`"}], "}"}]],
                    Annotation[#, {34.32524867948609, 34.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.049893593659757`, 29.9}}]},
                    RowBox[{"{", 
                    RowBox[{"29.049893593659757`", ",", "29.9`"}], "}"}]],
                    Annotation[#, {29.049893593659757`, 29.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.983615545874404`, 33.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.983615545874404`", ",", "33.`"}], "}"}]],
                    Annotation[#, {30.983615545874404`, 33.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.310032914786657`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"29.310032914786657`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {29.310032914786657`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.557919225681584`, 33.7}}]},
                    RowBox[{"{", 
                    RowBox[{"31.557919225681584`", ",", "33.7`"}], "}"}]],
                    Annotation[#, {31.557919225681584`, 33.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.740576306735143`, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"29.740576306735143`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {29.740576306735143`, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.071869160765694`, 32.9}}]},
                    RowBox[{"{", 
                    RowBox[{"26.071869160765694`", ",", "32.9`"}], "}"}]],
                    Annotation[#, {26.071869160765694`, 32.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.040948832846258`, 31.6}}]},
                    RowBox[{"{", 
                    RowBox[{"28.040948832846258`", ",", "31.6`"}], "}"}]],
                    Annotation[#, {28.040948832846258`, 31.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.367468147932115`, 28.1}}]},
                    RowBox[{"{", 
                    RowBox[{"26.367468147932115`", ",", "28.1`"}], "}"}]],
                    Annotation[#, {26.367468147932115`, 28.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.025884329722533`, 30.7}}]},
                    RowBox[{"{", 
                    RowBox[{"22.025884329722533`", ",", "30.7`"}], "}"}]],
                    Annotation[#, {22.025884329722533`, 30.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.175026616188507`, 25.4}}]},
                    RowBox[{"{", 
                    RowBox[{"19.175026616188507`", ",", "25.4`"}], "}"}]],
                    Annotation[#, {19.175026616188507`, 25.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.823022846018194`, 24.2}}]},
                    RowBox[{"{", 
                    RowBox[{"18.823022846018194`", ",", "24.2`"}], "}"}]],
                    Annotation[#, {18.823022846018194`, 24.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.886669961415112`, 22.4}}]},
                    RowBox[{"{", 
                    RowBox[{"20.886669961415112`", ",", "22.4`"}], "}"}]],
                    Annotation[#, {20.886669961415112`, 22.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.830667430917586`, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"18.830667430917586`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {18.830667430917586`, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.94098318521182, 20.2}}]},
                    RowBox[{"{", 
                    RowBox[{"20.94098318521182`", ",", "20.2`"}], "}"}]],
                    Annotation[#, {20.94098318521182, 20.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.57001086574736, 17.6}}]},
                    RowBox[{"{", 
                    RowBox[{"21.57001086574736`", ",", "17.6`"}], "}"}]],
                    Annotation[#, {21.57001086574736, 17.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.39841439150726, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.39841439150726`", ",", "28.`"}], "}"}]],
                    Annotation[#, {27.39841439150726, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.143724879616897`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.143724879616897`", ",", "27.`"}], "}"}]],
                    Annotation[#, {27.143724879616897`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.59685772056299, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.59685772056299`", ",", "34.`"}], "}"}]],
                    Annotation[#, {27.59685772056299, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.19413589951506, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"28.19413589951506`", ",", "31.`"}], "}"}]],
                    Annotation[#, {28.19413589951506, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.62974792379756, 29.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.62974792379756`", ",", "29.`"}], "}"}]],
                    Annotation[#, {27.62974792379756, 29.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.960813153425494`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.960813153425494`", ",", "27.`"}], "}"}]],
                    Annotation[#, {25.960813153425494`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.461242482765485`, 24.}}]},
                    RowBox[{"{", 
                    RowBox[{"24.461242482765485`", ",", "24.`"}], "}"}]],
                    Annotation[#, {24.461242482765485`, 24.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.025115133132584`, 23.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.025115133132584`", ",", "23.`"}], "}"}]],
                    Annotation[#, {25.025115133132584`, 23.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.38367174893496, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"34.38367174893496`", ",", "36.`"}], "}"}]],
                    Annotation[#, {34.38367174893496, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.77911113873562, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"36.77911113873562`", ",", "37.`"}], "}"}]],
                    Annotation[#, {36.77911113873562, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{37.36076284040476, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"37.36076284040476`", ",", "31.`"}], "}"}]],
                    Annotation[#, {37.36076284040476, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.974062581710125`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.974062581710125`", ",", "38.`"}], "}"}]],
                    Annotation[#, {30.974062581710125`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.917024228815322`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.917024228815322`", ",", "36.`"}], "}"}]],
                    Annotation[#, {29.917024228815322`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.673707744199447`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.673707744199447`", ",", "36.`"}], "}"}]],
                    Annotation[#, {27.673707744199447`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.78912399925975, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.78912399925975`", ",", "36.`"}], "}"}]],
                    Annotation[#, {30.78912399925975, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.355135961861038`, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"31.355135961861038`", ",", "34.`"}], "}"}]],
                    Annotation[#, {31.355135961861038`, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.040139301954966`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"36.040139301954966`", ",", "38.`"}], "}"}]],
                    Annotation[#, {36.040139301954966`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.800560393077134`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"35.800560393077134`", ",", "32.`"}], "}"}]],
                    Annotation[#, {35.800560393077134`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.39104211440617, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"35.39104211440617`", ",", "38.`"}], "}"}]],
                    Annotation[#, {35.39104211440617, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.741710815559035`, 25.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.741710815559035`", ",", "25.`"}], "}"}]],
                    Annotation[#, {20.741710815559035`, 25.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.51904208030336, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.51904208030336`", ",", "38.`"}], "}"}]],
                    Annotation[#, {20.51904208030336, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.584485571686557`, 26.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.584485571686557`", ",", "26.`"}], "}"}]],
                    Annotation[#, {26.584485571686557`, 26.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.48131095475502, 22.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.48131095475502`", ",", "22.`"}], "}"}]],
                    Annotation[#, {20.48131095475502, 22.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.441810709650095`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.441810709650095`", ",", "32.`"}], "}"}]],
                    Annotation[#, {26.441810709650095`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.750864188592537`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.750864188592537`", ",", "36.`"}], "}"}]],
                    Annotation[#, {26.750864188592537`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.745251189869855`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.745251189869855`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.745251189869855`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.46354348509667, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.46354348509667`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.46354348509667, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.379635822753638`, 44.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.379635822753638`", ",", "44.`"}], "}"}]],
                    Annotation[#, {30.379635822753638`, 44.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.830326153103965`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"28.830326153103965`", ",", "32.`"}], "}"}]],
                    Annotation[#, {28.830326153103965`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.2904510423825, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.2904510423825`", ",", "28.`"}], "}"}]],
                    Annotation[#, {27.2904510423825, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.696770852420666`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.696770852420666`", ",", "31.`"}], "}"}]],
                    
                    Annotation[#, {25.696770852420666`, 31.}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxWlM0mEcAGDEkKYI02rYShtmLjsYpKIc6l8gUCowU1GblRU6zal44AJR
mlc1c642j5Wu1szakNak4bHMXKGQtZEz1wwzytJ5YPOYHdrxoff34dlDO5sX
r8DjcLhjf/37iT1ZmRHIwP7vKLFtndkLu3lLui7sh+NE3N/5DNhh8L2m4cBu
Osf9eiks9c+Z7FHBkxnlMsogTFpKNnGLmeiOrI/xduoh9PKb55FSEyyIOmnk
nw9GExtup+kJIegRZ1N9sxEW8ea2JJ0JRdMLF6w1OBbar+OuR4QBrrARdZlx
Yei6abMw3QnfwbNvTNwMRwcRU7fZeGx0D5lOE8/C3zanaWsbOOiWeY6nmMVF
Hx99GVj1CVa3exSFV/HQ+tINSV5IBLpSeLSgeBK2rca8WtRFogP1a4+c9Cj0
4hG59ZwNZuZdbj4RjqEXuvu8TXXw1MXhPYkf4PTeznUjKxrNUA1pS2th9j1j
Y9l72CxXq/jBfHRdGdWJVcIP/ByU9hE4BqteeR0kQNPGXIqZarjcmdSdaIOp
2opGo78Qja+0+2oKYCXJK8vVAu9w3yk1bz+Mjr2CW5MoYeslb0nYIFzt/Bl6
iipCmyf6vohyYUyQwsx+CnvSaAErZDH6tG5gPFoBzyZwD1oew/TcgX6GCc6v
iU1o6oJXu+WazF4Yv6vIQngG+8zoFfxhWKj1a+11wDUNbczdn2HrwwMvrk7B
MgdnLmUaThXLOWvzcL5X/duQ73DnPmr2rR/wqqB13fUXrFHpA0Y24OrxoQLl
phi0ZVnm9o4Ak8hjzRgRvo5N9VPc4dGUnIQSD9incOnrBAlOrVVrRGS4pc2F
YqDAfwBq/As9
                    "]]},
                    Annotation[#, "Charting`Private`Tag$59741#1"]& ]}, {}}},
                 Axes->{False, False},
                 AxesLabel->{None, None},
                 AxesOrigin->{16.150000000000002`, 16.150000000000002`},
                 DisplayFunction->Identity,
                 Frame->{{True, False}, {True, False}},
                 FrameLabel->{{
                    FormBox["\"actual value\"", TraditionalForm], None}, {
                    FormBox["\"predicted value\"", TraditionalForm], None}},
                 FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
                 GridLines->{Automatic, Automatic},
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.5], 
                   AbsoluteThickness[1], 
                   AbsoluteDashing[{1, 2}]],
                 ImageSize->250,
                 
                 Method->{
                  "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                   True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                 
                 PlotRange->{{16.150000000000002`, 48.1225}, {
                  16.150000000000002`, 48.1225}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{{0, 0}, {0, 0}},
                 Ticks->{Automatic, Automatic}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  PredictorMeasurementsObject[
   Association["Model" -> PredictorFunction[
      Association[
      "ExampleNumber" -> 300, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Numerical"], "f3" -> 
              Association["Type" -> "Numerical"], "f4" -> 
              Association["Type" -> "Numerical"], "f5" -> 
              Association["Type" -> "Numerical"], "f6" -> 
              Association["Type" -> "Numerical"], "f7" -> 
              Association["Type" -> "Nominal"], "f8" -> 
              Association["Type" -> "Text"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Text", "Weight" -> 1]], "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 8]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Nominal", "Text"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
            Association[
             "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
              "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                 "], "Type" -> "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 6], 
                  "f7" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                    "Version" -> {12.2, 0}, "ID" -> 2890808244938110393]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "Version" -> {12.2, 0}, "ID" -> 5629229317859041261]]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f7" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1], "f8" -> 
                  Association["Type" -> "Text", "Weight" -> 1], 
                  "(f1f2f3f4f5f6)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                "Output" -> 
                Association[
                 "f7" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1], "f8" -> 
                  Association["Type" -> "Text", "Weight" -> 1], 
                  "(f1f2f3f4f5f6)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                    "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                    3108122425444935999]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {12.2, 0}, "ID" -> 
                    4678014907749892316]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 300, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {5.81, 214.705, 111.98993288590604`, 3133., 
                    15.262333333333336`, 74.43333333333334}, "Method" -> 
                    "Naive", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 6]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{0.4605590621517039, 
                    0.16532129222891656`, -0.17928480258893864`}, {
                    0.47481865987092087`, 
                    0.10973097855544875`, -0.15783158719594648`}, {
                    0.46711400079704124`, -0.05038165021487633, 
                    0.0910181514892921}, {0.45121493134376595`, 
                    0.21668223939483658`, -0.30890288627439744`}, \
{-0.35406462025884416`, 
                    0.25027290269167884`, -0.8433558144222124}, \
{-0.12361404119722114`, 0.9211416575705231, 0.35775944833773293`}}, 
                    "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Output" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 
                    1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 3, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0274908, "MaxTrainingMemory" -> 
                    246608, "DataMemory" -> 57808, "FunctionMemory" -> 22144, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 2, 21, 18, 52, 22.1901436`9.09873504186336}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                    "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                    8312269817718464215]]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f2f3f4f5f6)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                "Mean" -> {5.8100000000000005`, 214.705, 111.80060492339395`, 
                 3133., 15.262333333333322`, 74.43333333333334}, 
                "StandardDeviation" -> {1.7494475318416, 108.9054198605377, 
                 40.213575468437234`, 882.9886446985981, 2.7367281966286785`, 
                 2.772283455124271}, "Output" -> 
                Association[
                 "(f1f2f3f4f5f6)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                "Version" -> {12.2, 0}, "ID" -> 3893966427905481628]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 4900972772377279668, "Output" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 7285476586811196156, "Output" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["TextToNominalSequence", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Tokens" -> {{
                  " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                   "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{",
                    "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                  ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                   ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                  "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                "Version" -> {12.2, 0}, "ID" -> 4740781770089804510, "Output" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                MachineLearning`SortedHashAssociation[
                  Association["KeyHashes" -> CompressedData["
1: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
                    "], "Values" -> None, "DefaultValue" -> -1, 
                   "HashFunction" -> 
                   Function[{
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.2, 0}]], 
                "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDgBxIx7ItmSbsKOuz4p2ex0YTF4cbUhKg1F8TgtMLyvX8q
nJkdREO37t6YLQQXh+mD8Wf5Nf56zCXi0G2Uemd2ggBcPUwc3Vx0eXQ+zHwY
H51GN6/13/JYeQE+DPegqyOWhvkDXRyXe9H9jx5OxLpnvfSa7Ze8+XHaT4iG
uIsJbh96uMTP7+8MkeHEsA/dfbj4uPwBEz/48dhW0WJ2h4mPi6udvrOT7H70
cEQPb/T0RWp8oqcvdHWzr3H/XGbKjdNduPTBwplQ+MDCG+Z+Yv1ByF5c+Qtd
H658S2w+Q0/3L1ObbZ88wyw3CKUjQukKnQ8LN3TzbRtaS5f948EZPrjM4yx4
ObevhQOnP2HmovsbF5+8fCqEQcP8gct8XOUCuv9RzWUimC5v7ln7XS8q2579
rupBo9L/9jD51+YbE//pMxKdPtHjCT194vIXrvhFT2/o8UJsPsFlPro9uOoR
QvkCl3uJTY/o7iO2XEavX2DlO7npFWYeoXQIs++xwMWThycwE13vwtwHALj8
4gE=
                 "], "Version" -> {12.2, 0}, "ID" -> 2064344366300366075, 
                "Output" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f7" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
                "Version" -> {12.2, 0}, "ID" -> 958951729582329572, "Output" -> 
                Association[
                 "f7" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], 
                  "(f1f2f3f4f5f6)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                "Spans" -> {
                  Span[1, 271], 
                  Span[272, 277]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f8(f1f2f3f4f5f6))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0},
                 "ID" -> 7107213858894378356]]}, "Invertibility" -> 
            "Impossible", "StructurePreserving" -> True, "Missing" -> 
            "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Numerical"]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 1916512723103570139]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {20.799}, 
                "StandardDeviation" -> {6.274889029563264}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 2901205138368446714]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 2965090389962885354]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "Key" -> "f1", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (20.799 + 6.274889029563264 #& ), 
         "ProcessorFunction" -> (-3.314640291168245 + 
          0.15936536810270902` #& ), "Name" -> "value", 
         "Quantiles" -> {-1.8803519782438636`, 3.554007074058514}], 
       "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
       Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
       "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 
               280, 278, 1, 277, 279, 276, 280}], 
             "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
              0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
              0.24144437909126282`, -0.16238045692443848`, \
-0.16512740403413773`, 1.5453717708587646`, 
              0.7698086202144623, -0.4086989164352417, -0.8244205117225647, 
              1.2433704137802124`, 0.5593376457691193}, "LeafValues" -> 
             RawArray["Real32",{0.27456700801849365`, -0.001228633802384138, 
               0.1286134570837021, -0.17389293015003204`, 
               0.42019957304000854`, 
               0.027671096846461296`, -0.11889686435461044`, \
-0.09863805770874023, 0.12792828679084778`, 
               0.20898635685443878`, -0.2680215537548065, 
               0.0727115347981453, -0.06480830907821655, \
-0.23054561018943787`, -0.21314755082130432`, -0.03119794651865959}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
               10, -7}, {12, -8}, {-6, 11}, {-3, -10}, {
               13, -11}, {-9, -12}, {-2, 15}, {
               14, -14}, {-4, -15}, {-13, -16}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 
               280, 277, 278, 278, 278, 2}], 
             "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
              0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
              0.24144437909126282`, -0.16238045692443848`, \
-0.15244100242853165`, 0.9478608965873718, 1.3836916089057922`, 
              0.15441440045833588`, -0.5082264244556427, 
              0.16060373932123184`}, "LeafValues" -> 
             RawArray["Real32",{0.21963994204998016`, -0.030857663601636887`, 
               0.10741038620471954`, -0.14869855344295502`, 
               0.3361459970474243, 
               0.022123223170638084`, -0.09513114392757416, \
-0.07892409712076187, 0.10560908913612366`, 
               
               0.1729222685098648, -0.1715865582227707, \
-0.21236197650432587`, -0.056691572070121765`, 0.05763629078865051, 
               0.002475572982802987}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
               10, -7}, {12, -8}, {-6, 13}, {-3, -10}, {-4, 11}, {-11, -12}, {
               14, -13}, {-9, -14}, {-2, -15}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{278, 278, 278, 3, 280, 278, 280, 278, 275, 
               278, 280, 277}], 
             "NumericalThresholds" -> {-0.4167654514312744, \
-1.1651025414466858`, 0.586245059967041, 
              0.03975731506943703, -0.3362342417240143, -1.0184027552604675`, 
              0.5593376457691193, -0.054887235164642334`, \
-1.0345970392227173`, 1.3984212279319763`, 
              0.924881786108017, -0.10787223652005196`}, "LeafValues" -> 
             RawArray["Real32",{0.1705792099237442, -0.023322811350226402`, 
               0.12576191127300262`, -0.13860741257667542`, 
               0.27001214027404785`, -0.11652486771345139`, 
               0.08647242933511734, 
               0.011211839504539967`, -0.08198753744363785, 
               0.03568991273641586, -0.18351492285728455`, \
-0.06946929544210434, -0.032580744475126266`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 6}, {7, 5}, {-1, -5}, {10, 
               11}, {-3, 9}, {8, 
               12}, {-2, -9}, {-7, -10}, {-4, -11}, {-6, -12}, {-8, -13}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 278, 278, 280, 277, 279, 280, 276, 
               280, 280, 280, 197, 280, 2, 278}], 
             "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.586245059967041, 
              0.5658965408802032, -0.6694435179233551, 
              0.6047321557998657, -0.3362342417240143, 0.15237538516521454`, 
              0.5593376457691193, -0.8736674189567566, 0.5677475333213806, 
              0.0010977291967719793`, 0.924881786108017, 0.1606035903096199, 
              1.243042528629303}, "LeafValues" -> 
             RawArray["Real32",{0.13381440937519073`, -0.03298359364271164, 
               0.12889614701271057`, -0.15273821353912354`, 
               0.22427277266979218`, 0.06887724250555038, 
               0.05144066363573074, -0.09321989864110947, \
-0.06632155925035477, -0.01655604876577854, 0.0054458389058709145`, 
               0.05525364726781845, -0.10163259506225586`, \
-0.05557543411850929, 0.004180360585451126, -0.11925958096981049`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 5}, {8, 7}, {-1, -5}, {6, 
               10}, {-3, -7}, {12, 13}, {14, 9}, {-9, -10}, {-6, 
               11}, {-11, -12}, {-4, 15}, {-8, -14}, {-2, -15}, {-13, -16}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 278, 277, 3, 280, 280, 279, 276, 280, 
               277, 280, 278, 3, 277}], 
             "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 0.03975731506943703, 
              0.5677475333213806, 0.9344088137149811, 
              0.9131649434566498, -0.9028680622577667, -0.5227583944797516, 
              1.5696318745613098`, 
              0.5649594366550446, -0.027853557374328375`, \
-0.13868915289640427`, 0.9461058378219604}, "LeafValues" -> 
             RawArray["Real32",{0.10312169045209885`, -0.007154310122132301, 
               0.07404609769582748, -0.05556468293070793, 0.1802009791135788, 
               0.08056026697158813, -0.03878110274672508, \
-0.060475047677755356`, 0.0126131447032094, 
               0.030627330765128136`, -0.11132784932851791`, 
               0.007184752728790045, -0.04255010932683945, \
-0.09660004824399948, -0.08421824127435684}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {
               8, -6}, {10, -7}, {11, -8}, {9, -9}, {-3, -10}, {13, -11}, {
               12, -12}, {-2, -13}, {14, -14}, {-4, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{278, 280, 278, 278, 280, 278, 280, 275, 
               280, 3, 278, 279, 1, 278}], 
             "NumericalThresholds" -> {-0.4167654514312744, 
              1.2770469188690186`, 0.9138865172863007, -1.0339843034744263`, 
              1.2920055389404297`, -0.054887235164642334`, \
-0.16512740403413773`, -1.0345970392227173`, -0.5140877664089203, \
-0.13868915289640427`, 0.49990423023700714`, -1.0121296644210815`, 
              0.76980921626091, 1.2327117323875427`}, "LeafValues" -> 
             RawArray["Real32",{0.04942077025771141, -0.003346428507938981, 
               0.15019510686397552`, -0.07314929366111755, 
               0.04268650338053703, 
               0.019521579146385193`, -0.017482789233326912`, 
               0.11001615226268768`, 
               0.0048992447555065155`, -0.06911906599998474, \
-0.059525005519390106`, -0.05285973846912384, -0.10529101639986038`, 
               0.07859601080417633, -0.05287855863571167}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {5, 9}, {7, 8}, {
               6, -6}, {-2, 10}, {-1, 13}, {-5, -9}, {12, 14}, {
               11, -11}, {-7, -12}, {-4, -13}, {-8, -14}, {-10, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{278, 280, 277, 276, 280, 280, 276, 279, 
               280, 276, 1, 280, 275, 3}], 
             "NumericalThresholds" -> {-0.47015997767448425`, 
              1.2770469188690186`, -0.03924974054098129, -0.931493729352951, 
              1.2774283289909363`, -0.16512740403413773`, \
-0.13077695667743683`, -0.6464331150054932, 0.5593376457691193, 
              1.053425371646881, -0.03583664447069168, -0.3362342417240143, \
-1.0335904359817505`, -0.13868936151266098`}, "LeafValues" -> 
             RawArray["Real32",{0.03354673087596893, 0.01676269993185997, 
               0.12869229912757874`, -0.029443709179759026`, \
-0.0035599498078227043`, -0.014107538387179375`, 
               
               0.08748812973499298, -0.033891696482896805`, \
-0.09269203990697861, -0.0024030229542404413`, -0.04877068102359772, 
               0.02865503914654255, -0.05954791605472565, 
               0.058491434901952744`, -0.06651772558689117}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {7, 5}, {6, 11}, {
               8, -6}, {-1, 13}, {-2, 9}, {10, 12}, {-8, -10}, {-4, 
               14}, {-5, -12}, {-9, -13}, {-7, -14}, {-11, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 276, 280, 1, 277, 275, 276, 278, 280, 
               279, 277, 197, 279, 280}], 
             "NumericalThresholds" -> {-0.3617333471775055, \
-0.9406689703464508, 0.9269111454486847, -0.03583710826933384, 
              0.9461058378219604, -1.0363672375679016`, -0.7376145124435425, 
              0.9138865172863007, 
              1.2880584597587585`, -0.6358448565006256, -0.05150502175092697, 
              0.0010977291967719793`, 0.6437021195888519, -0.523695707321167},
              "LeafValues" -> 
             RawArray["Real32",{
               0.06690282374620438, -0.0049407766200602055`, \
-0.0032952765468508005`, 0.12548133730888367`, 
               0.012824958190321922`, -0.06486864387989044, 
               0.02668704092502594, 
               0.05335512012243271, -0.041362714022397995`, 
               0.006022348999977112, -0.01652158424258232, \
-0.048652052879333496`, -0.03697754815220833, -0.029033459722995758`, \
-0.051383502781391144`}], "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, 4}, {6, -4}, {13, 7}, {8, 
               12}, {-1, -7}, {-5, -8}, {9, -9}, {10, -10}, {-2, 
               11}, {-11, -12}, {-6, 14}, {-3, -14}, {-13, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 276, 280, 277, 276, 279, 1, 276, 278, 
               279, 278, 279, 280, 275, 1}], 
             "NumericalThresholds" -> {-0.3825637698173523, \
-0.931493729352951, 0.9269111454486847, 
              0.9461058378219604, -1.1564356684684753`, 
              0.37745968997478485`, -0.03583710826933384, -0.7376145124435425,
               0.6433023512363434, 0.08657680824398994, 
              0.08500208333134651, -0.8317069709300995, 0.5732026696205139, 
              0.10741028934717178`, -0.03583761118352413}, "LeafValues" -> 
             RawArray["Real32",{
               0.06573162227869034, -0.013297252357006073`, \
-0.009375303983688354, 0.10038506239652634`, -0.042604438960552216`, 
               0.04912140965461731, 0.008077098987996578, 
               0.004631709307432175, 
               0.0428459458053112, -0.03751879930496216, \
-0.010267259553074837`, 
               0.021171391010284424`, -0.05526578426361084, \
-0.014283590950071812`, -0.030312836170196533`, -0.02845325879752636}], 
             "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, 7}, {5, -4}, {9, 12}, {-1, 
               6}, {-6, -7}, {-3, 8}, {-8, -9}, {10, 13}, {11, 
               14}, {-2, -12}, {15, -13}, {-10, -14}, {-11, -15}, {-5, -16}}],
              "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{278, 280, 277, 278, 279, 279, 280, 279, 
               277, 279, 276, 276, 280, 2, 1}], 
             "NumericalThresholds" -> {-0.4773160368204117, 
              1.2770469188690186`, 0.380217507481575, -1.3414121866226196`, 
              0.9971522688865662, -0.43372008204460144`, 1.2897033095359802`, 
              0.9131649434566498, -0.4097961485385895, -0.4701126515865326, \
-0.931493729352951, 0.9391058683395386, -0.15047303587198257`, 
              0.16060330718755722`, -0.03583761118352413}, "LeafValues" -> 
             RawArray["Real32",{0.052189454436302185`, 0.020580926910042763`, 
               0.07584480196237564, -0.0035503122489899397`, \
-0.005193439777940512, -0.01612800918519497, 0.0405082181096077, 
               0.020034361630678177`, -0.03581859916448593, \
-0.027981268242001534`, -0.04666673392057419, 
               0.013623467646539211`, -0.015534654259681702`, \
-0.0017225807532668114`, -0.04727216809988022, -0.025074400007724762`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {7, 10}, {-1, 5}, {
               6, -6}, {-5, 11}, {8, -8}, {9, -9}, {-2, 13}, {
               12, -11}, {-7, -12}, {-4, 14}, {-10, -14}, {-13, 
               15}, {-15, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 278, 276, 280, 279, 277, 280, 280, 
               279, 200, 275, 280, 2}], 
             "NumericalThresholds" -> {-1.03275465965271, \
-1.1940594911575317`, 0.24144437909126282`, -0.5120998322963715, 
              1.0665029883384705`, -0.3825637698173523, 1.2774283289909363`, 
              0.921964555978775, 0.41610319912433624`, 0.2693440392613411, 
              1.2532107830047607`, 0.5684428811073303, 0.1606035903096199}, 
             "LeafValues" -> 
             RawArray["Real32",{0.07159765064716339, 
               0.029207633808255196`, -0.010062930174171925`, \
-0.020028261467814445`, 
               0.03905925527215004, -0.02082948386669159, \
-0.01902349293231964, 0.004178453236818314, 
               0.0007192401681095362, -0.044570889323949814`, \
-0.0019167581340298057`, -0.04009895399212837, 0.013857665471732616`, 
               0.002481470350176096}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 12}, {
               6, -6}, {8, 13}, {9, -8}, {-2, -9}, {10, -10}, {
               11, -11}, {-4, -12}, {-5, -13}, {-7, -14}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 280, 276, 279, 277, 280, 280, 279, 
               279, 280, 280, 275, 197}], 
             "NumericalThresholds" -> {-0.7113344073295593, 
              0.9308460652828217, -1.1564356684684753`, 0.9971522688865662, 
              0.380217507481575, -0.8875118792057037, -0.5195336639881134, 
              0.8980397582054138, -0.4701126515865326, 
              0.207212895154953, -0.5258615911006927, -1.0299208760261536`, 
              0.001291881431825459}, "LeafValues" -> 
             RawArray["Real32",{0.05029553920030594, 0.018988464027643204`, 
               0.06901617348194122, 
               0.019669968634843826`, -0.03003685176372528, \
-0.021615799516439438`, -0.032053399831056595`, 
               0.016315938904881477`, -0.01846752129495144, \
-0.03358190506696701, -0.0020708353258669376`, -0.032541535794734955`, \
-0.0009356975788250566, -0.004678369965404272}], "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {6, 
               9}, {-2, 7}, {-7, 8}, {12, -9}, {10, -10}, {11, -11}, {
               13, -12}, {-8, -13}, {-6, -14}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 277, 280, 277, 277, 279, 268, 1, 277, 
               2, 1, 197, 275, 277}], 
             "NumericalThresholds" -> {-1.03275465965271, -0.7773292362689972,
               0.5713980197906494, 0.380217507481575, -0.5424853265285492, 
              0.8980397582054138, 
              9.999999682655224*^-21, -0.035837357863783836`, \
-0.3617333471775055, 0.1606033369898796, -0.03583812527358532, 
              0.0012387987226247787`, 
              1.2499743103981018`, -0.5444541573524475}, "LeafValues" -> 
             RawArray["Real32",{0.02309465780854225, 
               0.021741081029176712`, -0.020575467497110367`, 
               0.06989883631467819, -0.00419276999309659, 
               0.012797858566045761`, -0.0231586005538702, \
-0.01307919342070818, 
               0.007976751774549484, -0.01500753778964281, \
-0.0379931665956974, -0.023586075752973557`, -0.019202252849936485`, 
               0.0012359312968328595`, -0.007906495593488216}], "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, 5}, {-1, -4}, {6, 
               10}, {-3, -6}, {7, 14}, {8, -8}, {-2, 9}, {-9, -10}, {-5, 
               11}, {-11, 12}, {-12, 13}, {-13, -14}, {-7, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 280, 276, 279, 277, 280, 275, 3, 3, 
               3}], 
             "NumericalThresholds" -> {-0.7113344073295593, 
              0.9308460652828217, -1.1564356684684753`, 0.9971522688865662, 
              1.5696318745613098`, -1.2298340201377869`, 0.10891465097665787`,
               0.10532283037900925`, 
              0.03975666128098965, -0.13868919014930725`}, "LeafValues" -> 
             RawArray["Real32",{0.03457096219062805, 0.03255116567015648, 
               0.0469890832901001, 
               0.01262342743575573, -0.0234586950391531, \
-0.023149782791733742`, 
               0.0009229590650647879, -0.009969980455935001, \
-0.02970903553068638, 0.01354038342833519, -0.01354801282286644}], "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {
               6, -6}, {7, 8}, {-2, -8}, {9, -9}, {10, -10}, {-7, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 279, 3, 1, 278, 277, 276, 280, 3, 
               280}], "NumericalThresholds" -> {-1.03275465965271, \
-0.34000593423843384`, 0.03975666128098965, 0.7698083817958832, 
              1.6209778189659119`, -0.875508576631546, -0.873746246099472, \
-0.523048460483551, -0.13868913799524307`, -1.2398365139961243`}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.01762579195201397, -0.019095176830887794`, 
               0.00452686520293355, 0.0164779219776392, 
               0.05550764501094818, -0.02406701259315014, 
               0.024531755596399307`, -0.0038933276664465666`, 
               0.0052881701849401, -0.006628889124840498, \
-0.01781727373600006}], "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {-3, 4}, {-4, -5}, {
               6, -6}, {-2, 7}, {-7, 8}, {10, 9}, {-9, -10}, {-8, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 280, 279, 279, 279, 278, 3, 2, 280, 
               280, 280, 275, 197, 280}], 
             "NumericalThresholds" -> {-0.7113344073295593, 
              0.9308460652828217, 1.3694056868553162`, 0.636465311050415, 
              1.0671756267547607`, -0.23888037353754044`, 
              0.10532283037900925`, -0.190930537879467, 0.20124167948961258`, 
              0.570195347070694, 1.2880584597587585`, 1.2471793293952942`, 
              0.001291881431825459, -0.8875118792057037}, "LeafValues" -> 
             RawArray["Real32",{0.002230970421805978, 0.027003979310393333`, 
               0.03526477888226509, -0.013756439089775085`, 
               0.02672821283340454, -0.02068674936890602, \
-0.004306606017053127, -0.013435732573270798`, 0.001321291085332632, 
               0.012448814697563648`, -0.013986721634864807`, 
               0.00500012282282114, -0.017463039606809616`, 
               0.0041885473765432835`, -0.023877384141087532`}], "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -3}, {4, -4}, {-1, -5}, {
               6, -6}, {7, 9}, {8, -8}, {-2, -9}, {12, 10}, {-10, 
               11}, {-11, -12}, {14, 13}, {-13, -14}, {-7, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{278, 3, 2, 279, 280, 278, 3, 1, 279, 1}], 
             "NumericalThresholds" -> {-1.3061254620552063`, 
              0.1053234227001667, -0.1909310594201088, -0.11623026803135872`, \
-0.3362342417240143, 
              1.3984212279319763`, -0.13868922740221024`, \
-0.035837702453136444`, -0.15096715837717056`, -0.035838160663843155`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.020192226395010948`, 
               0.028502000495791435`, -0.02450515329837799, \
-0.014779331162571907`, 0.004360830411314964, 
               0.016588646918535233`, -0.01915837451815605, \
-0.017317945137619972`, 0.002569944364950061, 
               0.000717483286280185, -0.002037324709817767}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {6, 
               7}, {10, -7}, {9, 8}, {-8, -9}, {-6, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 276, 276, 3, 3, 1, 280}], 
             "NumericalThresholds" -> {-1.02145117521286, \
-1.0807608366012573`, -0.9406689703464508, 0.039756910875439644`, 
              0.039757510647177696`, 1.3843857645988464`, 0.5593376457691193},
              "LeafValues" -> 
             RawArray["Real32",{-0.004461807198822498, -0.035477086901664734`,
                0.02552429959177971, -0.005415341351181269, 
               0.027535155415534973`, 
               0.013421596959233284`, -0.01717778854072094, 
               0.004261428955942392}], "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 5}, {-1, -5}, {
               6, -6}, {7, -7}, {-4, -8}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 280, 280, 280, 275, 275, 1, 1, 280, 
               275, 279, 276}], 
             "NumericalThresholds" -> {-1.0317081809043884`, 
              0.9308460652828217, -0.8858247101306915, -0.16512740403413773`, \
-1.0290305614471436`, -1.025515377521515, -0.03583679907023907, \
-0.035837702453136444`, 0.19654250144958496`, 1.2474907636642456`, 
              9.999999682655224*^-21, -1.1293277144432068`}, "LeafValues" -> 
             RawArray["Real32",{0.021286191418766975`, -0.023461082950234413`,
                0.03237009420990944, -0.02185959927737713, \
-0.004225605167448521, 
               0.016068467870354652`, -0.009800917468965054, \
-0.017017658799886703`, -0.0015378218377009034`, 0.01493488997220993, 
               0.0028298303950577974`, -0.002203255193307996, 
               0.00898117944598198}], "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, 12}, {-2, 
               6}, {-6, 7}, {8, 11}, {10, 
               9}, {-9, -10}, {-7, -11}, {-8, -12}, {-5, -13}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{279, 276, 276, 279, 278, 3, 276, 2, 275, 2,
                1, 1}], 
             "NumericalThresholds" -> {
              0.6255472302436829, -1.1447357535362244`, -1.0895200967788696`, 
              0.8745190799236298, -0.6289621293544769, 
              0.03975699655711651, -0.6931112706661224, 0.16060422360897064`, 
              1.2447961568832397`, 0.1606033369898796, 
              0.7698091566562653, -0.03583761118352413}, "LeafValues" -> 
             RawArray["Real32",{-0.03979016840457916, 0.0394180491566658, 
               0.021844662725925446`, 
               0.016512973234057426`, -0.022523291409015656`, 
               0.005783454515039921, -0.001532122609205544, \
-0.002473314292728901, 
               0.016115864738821983`, -0.0051437439396977425`, \
-0.020793011412024498`, -0.013449542224407196`, -0.004771602340042591}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 5}, {-2, 4}, {-4, 7}, {6, 
               8}, {-3, -7}, {-5, -8}, {10, 9}, {-9, -10}, {11, 
               12}, {-6, -12}, {-11, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 275, 3, 1, 275, 275, 280, 277, 276}], 
             "NumericalThresholds" -> {-1.0425257086753845`, \
-1.0317081809043884`, 0.03975666128098965, 
              0.7698088586330414, -1.0290305614471436`, -1.025515377521515, \
-0.14740513265132904`, 1.5696318745613098`, -0.344004824757576}, "LeafValues" -> 
             RawArray[
               "Real32",{-0.017429132014513016`, -0.008972707204520702, \
-0.017614416778087616`, 0.006659054663032293, 0.0325125977396965, 
               0.012404737062752247`, -0.010508392006158829`, 
               0.008126724511384964, -0.010886883363127708`, 
               0.0005449877353385091}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 5}, {7, 4}, {-4, -5}, {-3, 
               6}, {-6, 8}, {-2, -8}, {9, -9}, {-7, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 277, 277, 276, 278, 276, 277, 277, 
               1}], 
             "NumericalThresholds" -> {-0.7113344073295593, \
-0.5447868406772614, -0.4196389615535736, -1.1498605012893677`, \
-1.1176645159721375`, 1.7023435831069946`, 
              1.1105183362960815`, -0.8993055820465088, -0.03583677113056183},
              "LeafValues" -> 
             RawArray["Real32",{0.015638357028365135`, -0.01212505716830492, 
               0.01741628535091877, 
               0.0008515134686604142, -0.011276689358055592`, 
               0.0032723769545555115`, 
               0.007796016056090593, -0.013675971888005733`, 
               0.017337389290332794`, -0.0060083214193582535`}], "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 6}, {-1, 5}, {-5, 
               8}, {7, -7}, {9, -8}, {-6, -9}, {-4, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{275, 3, 1, 2, 3, 1, 1}],
              "NumericalThresholds" -> {-1.0425257086753845`, 
              0.03975731506943703, 0.7698083817958832, -0.1909310594201088, 
              0.03975571505725384, -0.03583662211894989, \
-0.03583680838346481}, "LeafValues" -> 
             RawArray["Real32",{-0.014494395814836025`, 
               0.008627481758594513, -0.0010229599429294467`, 
               0.021357590332627296`, -0.00015842291759327054`, \
-0.020618319511413574`, 0.019793830811977386`, -0.011323072016239166`}], 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {
               6, -6}, {7, -7}, {-5, -8}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 276, 279, 275, 278, 1, 278}], 
             "NumericalThresholds" -> {-1.1961490511894226`, \
-1.082087218761444, 
              0.42247603833675385`, -1.040117859840393, -0.9371588230133057, 
              1.384385883808136, 1.6209778189659119`}, "LeafValues" -> 
             RawArray["Real32",{0.013236629776656628`, -0.028801022097468376`,
                0.018070276826620102`, 0.007195407524704933, 
               0.008764585480093956, 
               0.00010181204561376944`, -0.01395548228174448, \
-0.011738305911421776`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, 5}, {-5, 
               6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 279, 275, 279, 279, 197, 279}], 
             "NumericalThresholds" -> {1.3843860030174255`, 
              0.21878673136234283`, -1.0416456460952759`, 1.1287112832069397`,
               0.7867037355899811, 0.0010088002309203148`, 
              0.37745968997478485`}, "LeafValues" -> 
             RawArray["Real32",{-0.018062666058540344`, -0.003816725919023156,
                0.027109477669000626`, 
               0.013590388931334019`, -0.011326807551085949`, 
               0.018079008907079697`, 
               0.0008819478680379689, -0.011354874819517136`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {5, -5}, {
               6, -6}, {-4, 7}, {-7, -8}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 3, 1, 275, 3, 2, 1, 3}], 
             "NumericalThresholds" -> {0.1053234227001667, 
              0.03975718095898628, 0.7698086202144623, -1.040117859840393, 
              0.03975571505725384, -0.19093096256256104`, \
-0.035836661234498024`, -0.13868863135576248`}, "LeafValues" -> 
             RawArray["Real32",{0.012577795423567295`, -0.010172308422625065`,
                0.00016212947957683355`, 
               0.023683341220021248`, -0.0029307387303560972`, 
               0.005361876916140318, -0.0251762792468071, 
               0.012895986437797546`, 0.008711091242730618}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {-1, 5}, {7, 
               6}, {-6, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 1, 275, 1, 1, 279, 278, 2}], 
             "NumericalThresholds" -> {1.3843860030174255`, 
              1.3843865990638733`, -1.0416456460952759`, 0.76980921626091, 
              0.7698079645633698, 0.8745190799236298, -0.6216471195220947, 
              0.16060348600149155`}, "LeafValues" -> 
             RawArray["Real32",{-0.014930673874914646`, 
               0.022271176800131798`, -0.004030933603644371, 
               0.0131318848580122, -0.01089363731443882, 
               0.01983598619699478, -0.018672045320272446`, \
-0.0008112947107292712, -0.0028238047380000353`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {5, -5}, {
               6, -6}, {7, 8}, {-4, -8}, {-7, -9}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{279, 280, 276, 280, 278, 280, 1, 278, 279, 
               1, 5}], 
             "NumericalThresholds" -> {0.7867037355899811, 
              0.5720357596874237, -1.1447357535362244`, 
              0.5698419213294983, -0.8614740073680878, 0.20124167948961258`, 
              0.7698089778423309, 0.6929723620414734, 
              0.055151479318737984`, -0.035837167873978615`, 
              9.999999682655224*^-21}, "LeafValues" -> 
             RawArray[
               "Real32",{-0.021822664886713028`, -0.014838575385510921`, 
               0.028978388756513596`, 0.016955701634287834`, 
               0.013177195563912392`, -0.0035204521846026182`, 
               0.013688896782696247`, -0.02026699110865593, \
-0.012779772281646729`, -0.005214362870901823, 0.0014279604656621814`, 
               0.00805634818971157}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {10, -3}, {-1, 4}, {5, 7}, {-4, 
               6}, {11, -7}, {8, -8}, {
               9, -9}, {-5, -10}, {-2, -11}, {-6, -12}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 276, 278, 277, 277, 280, 279, 280, 
               198, 276, 280, 279}], 
             "NumericalThresholds" -> {-0.7113344073295593, \
-1.1498605012893677`, -1.1176645159721375`, -0.5447868406772614, \
-0.4156266450881958, -0.51617032289505, -1.0054724216461182`, \
-1.2357004284858704`, 9.999999682655224*^-21, 
              0.9525408148765564, -0.886361688375473, 0.6256912350654602}, 
             "LeafValues" -> 
             RawArray["Real32",{
               0.01413520984351635, -0.010246384888887405`, \
-0.010340387932956219`, 0.013475905172526836`, 0.009914765134453773, 
               0.010951909236609936`, -0.00022718582476954907`, \
-0.018966084346175194`, -0.007929431274533272, -0.010407610796391964`, 
               0.012470852583646774`, -0.004756684880703688, 
               0.0009635017486289144}], "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-3, 12}, {-2, 5}, {-5, 
               6}, {7, 9}, {8, 11}, {-6, -9}, {
               10, -10}, {-7, -11}, {-8, -12}, {-4, -13}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 3, 279, 275, 275, 3, 276, 1}], 
             "NumericalThresholds" -> {0.10532283037900925`, 
              0.03975731506943703, 
              0.44301658868789673`, -1.040117859840393, -1.0303456783294678`, 
              0.03975571505725384, -0.8611071407794952, \
-0.035836778581142426`}, "LeafValues" -> 
             RawArray["Real32",{0.009712575934827328, -0.015217911452054977`, 
               0.017612246796488762`, 0.0010065584210678935`, 
               0.0037388892378658056`, 
               0.01369846984744072, -0.016572261229157448`, 
               0.0004800058959517628, -0.006997625343501568}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {-1, 5}, {6, 
               7}, {-5, -7}, {-6, 8}, {-8, -9}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{276, 276, 275, 3, 279, 2, 278}], 
             "NumericalThresholds" -> {-1.2001294493675232`, \
-1.0895200967788696`, -1.040117859840393, 
              0.03975699655711651, -0.09426458552479744, -0.1909307837486267, 
              1.6209778189659119`}, "LeafValues" -> 
             RawArray["Real32",{-0.01018956582993269, 0.011424422264099121`, 
               0.012103348970413208`, 
               0.011025477200746536`, -0.0002932068891823292, \
-0.016917621716856956`, 0.00004789864760823548, -0.009159047156572342}], 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {6, 
               5}, {-5, -6}, {-4, 7}, {-7, -8}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 276, 279, 278, 277, 279, 1, 276}], 
             "NumericalThresholds" -> {-1.0416456460952759`, \
-1.1447357535362244`, 
              0.8940755724906921, -0.946847140789032, -0.7921875417232513, 
              0.6268712878227234, 0.76980921626091, -0.6931112706661224}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.008741379715502262, 
               0.013814592733979225`, -0.0016264194855466485`, \
-0.014929144643247128`, -0.00011955903755733743`, 0.01965932734310627, 
               0.01174067985266447, -0.011873900890350342`, \
-0.0014149337075650692`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 8}, {5, 
               6}, {-3, -6}, {7, -7}, {-5, -8}, {-4, -9}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{279, 277, 280, 276, 279, 276, 279, 268}], 
             "NumericalThresholds" -> {
              1.5568374395370483`, -1.0759419202804565`, \
-1.0584542155265808`, -0.1426393911242485, -0.8317069709300995, \
-1.082087218761444, -1.1676327586174011`, 0.30660974979400635`}, "LeafValues" -> 
             RawArray["Real32",{-0.011639402247965336`, 0.01000222284346819, 
               0.021819913759827614`, -0.011970380321145058`, 
               0.008855203166604042, -0.01278601586818695, \
-0.00979348924010992, 0.002263125032186508, -0.00861585233360529}], 
             "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {4, 6}, {-3, 
               5}, {-5, -6}, {-4, 7}, {-7, 8}, {-8, -9}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{279, 280, 276, 280, 276, 279, 2, 278, 280, 
               2}], "NumericalThresholds" -> {0.7867037355899811, 
              0.9234128594398499, -1.1447357535362244`, 
              0.5698419213294983, -0.9848584532737732, 1.185479462146759, 
              0.16060304641723633`, 0.515142410993576, 0.20124167948961258`, 
              0.1606038138270378}, "LeafValues" -> 
             RawArray["Real32",{-0.01868119090795517, 0.006496012210845947, 
               0.024718178436160088`, 
               0.015333658084273338`, -0.012857310473918915`, 
               0.0036496352404356003`, -0.008696704171597958, 
               0.0039308262057602406`, -0.009266807697713375, 
               0.009449830278754234, -0.0053864638321101665`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {6, -3}, {-1, 4}, {5, 7}, {-4, 
               9}, {-2, -7}, {-5, 8}, {-8, -9}, {10, -10}, {-6, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{278, 2, 1, 2, 1, 275, 275, 280, 280}], 
             "NumericalThresholds" -> {-1.3061254620552063`, \
-0.19093182682991028`, 
              0.7698082029819489, -0.1909308210015297, -0.035837702453136444`,
               1.2474907636642456`, 1.2435283064842224`, 
              0.924881786108017, -0.1533832624554634}, "LeafValues" -> 
             RawArray["Real32",{0.007527391891926527, -0.018514422699809074`, 
               0.012855833396315575`, 
               0.0008239721064455807, -0.0026979732792824507`, \
-0.00022616265050601214`, 
               0.003992266487330198, -0.01944119483232498, \
-0.005449267104268074, 0.009973322041332722}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, 5}, {6, 
               8}, {7, -7}, {-5, -8}, {9, -9}, {-6, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{277, 280, 278, 2, 1, 198, 280, 279}], 
             "NumericalThresholds" -> {-1.115539014339447, \
-1.0584542155265808`, -1.1370901465415955`, 
              0.16060296446084976`, -0.035837605595588684`, 
              0.2464868351817131, 1.2951242923736572`, 0.44301658868789673`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.007012093439698219, 
               0.017290238291025162`, -0.017127107828855515`, 
               0.0025718698743730783`, -0.010046174749732018`, 
               0.00580659881234169, -0.007857033051550388, 
               0.008351999334990978, -0.005967315286397934}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, 6}, {-2, 
               5}, {-5, -6}, {7, -7}, {8, -8}, {-4, -9}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{279, 276, 279, 1, 1, 278, 278, 1, 277, 3, 
               2, 277, 276, 3, 197}], 
             "NumericalThresholds" -> {
              0.0946783609688282, -1.1447357535362244`, 
              0.2728509306907654, -0.0358369592577219, -0.035837702453136444`,
               0.4685831815004349, -1.1041871905326843`, \
-0.035837192088365555`, -0.2908952236175537, -0.1386895254254341, 
              0.16060345619916916`, -0.598229706287384, -1.0746153593063354`, 
              0.03975666128098965, 0.0012387987226247787`}, "LeafValues" -> 
             RawArray["Real32",{0.005093687679618597, 0.01926800049841404, 
               0.014097552746534348`, -0.015199854969978333`, \
-0.016055546700954437`, 0.019000833854079247`, 
               0.0016533646266907454`, -0.013992773368954659`, 
               0.012911097146570683`, 0.0035210498608648777`, 
               0.002137698233127594, -0.015428628772497177`, \
-0.001477011595852673, -0.017581263557076454`, 
               0.004346128087490797, -0.0015758539084345102`}], "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 7}, {5, 13}, {10, 
               6}, {-6, -7}, {-4, 8}, {9, 12}, {-8, -10}, {-1, 
               11}, {-11, -12}, {-9, -13}, {-5, 14}, {15, -15}, {-14, -16}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{276, 276, 275, 275, 1, 280, 276}], 
             "NumericalThresholds" -> {-1.2001294493675232`, \
-1.0895200967788696`, -1.0411556959152222`, -1.0365572571754456`, 
              0.76980921626091, 0.20209703594446182`, 0.15237538516521454`}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.00873740203678608, 0.012282812036573887`, 
               0.009646444581449032, -0.010920053347945213`, 
               0.005360695533454418, 
               0.0005790966097265482, -0.01672438532114029, \
-0.0011858321959152818`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {7, 
               6}, {-6, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 276, 279, 1, 280, 277, 268, 276, 
               279}], "NumericalThresholds" -> {-1.0418539643287659`, \
-1.1498605012893677`, 0.8745190799236298, 0.76980921626091, 
              0.3837786391377449, 0.380217507481575, 9.999999682655224*^-21, 
              1.7023435831069946`, 1.3565325736999512`}, "LeafValues" -> 
             RawArray["Real32",{-0.006644937209784985, 0.013492836616933346`, 
               0.0064139338210225105`, -0.010157876648008823`, 
               0.0011881821556016803`, -0.01114583294838667, \
-0.0026554560754448175`, -0.007329984102398157, 
               0.00758633716031909, -0.001075503882020712}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 9}, {6, 
               5}, {-5, -6}, {7, 8}, {-3, -8}, {-7, -9}, {-4, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 279, 277, 278, 278, 3, 275}], 
             "NumericalThresholds" -> {1.3843860030174255`, 
              0.21878673136234283`, -1.130354642868042, -1.1651025414466858`, \
-0.9794070720672607, -0.13869009166955948`, -1.0350556373596191`}, 
             "LeafValues" -> 
             RawArray[
               "Real32",{-0.011841820552945137`, -0.0022841361351311207`, 
               0.016118304803967476`, 
               0.010369709692895412`, -0.010748103260993958`, \
-0.004964270628988743, 0.009964226745069027, 0.0002292875142302364}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {-4, 5}, {-5, 
               6}, {-6, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{276, 276, 275, 275, 278, 276}], 
             "NumericalThresholds" -> {-1.189745008945465, \
-1.0895200967788696`, -1.0411556959152222`, -1.0359485745429993`, 
              1.6209778189659119`, 1.2497752904891968`}, "LeafValues" -> 
             RawArray["Real32",{-0.007774415425956249, 0.010953055694699287`, 
               0.00850010383874178, -0.008439823053777218, \
-0.00017733912682160735`, -0.006710558198392391, 0.007845803163945675}], 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {
               6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{279, 280, 276, 276, 280, 280, 2, 2, 1, 
               279}], "NumericalThresholds" -> {0.7867037355899811, 
              0.5720357596874237, -1.1447357535362244`, -1.0734038949012756`, 
              0.5698419213294983, 0.20124167948961258`, 0.1606038138270378, 
              0.16060304641723633`, -0.03583712875843048, 
              1.5466718673706055`}, "LeafValues" -> 
             RawArray["Real32",{-0.015445376746356487`, 0.0005572688532993197,
                0.017544522881507874`, 0.009691284038126469, 
               0.0024810589384287596`, -0.011617674492299557`, 
               0.008562182076275349, -0.003978077322244644, \
-0.006006881594657898, 0.004249026533216238, -0.008412128314375877}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {10, -3}, {-1, 4}, {-4, 5}, {6, 
               8}, {7, -7}, {-5, -8}, {-6, 9}, {-9, -10}, {-2, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 2, 275, 275, 280, 1, 279, 1, 279, 279, 
               3}], "NumericalThresholds" -> {0.1606040820479393, 
              0.16060390323400497`, 1.2474907636642456`, 
              1.2560738921165466`, -0.8875118792057037, 0.7698083817958832, 
              0.6255472302436829, 0.7698076665401459, 
              0.2757168859243393, -0.34000593423843384`, \
-0.13868939131498337`}, "LeafValues" -> 
             RawArray["Real32",{0.007263779640197754, 
               0.005117371212691069, -0.014978645369410515`, 
               0.012763487175107002`, -0.004007771145552397, \
-0.0032278739381581545`, -0.003457588842138648, 
               0.020148990675807, -0.02201157435774803, -0.003058837493881583,
                0.01840560883283615, -0.005041437689214945}], "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, -3}, {5, 4}, {-4, -5}, {-1, 
               6}, {8, 7}, {-7, -8}, {-6, -9}, {10, -10}, {
               11, -11}, {-2, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1,
              "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{280, 280, 277, 278, 1, 198, 2, 2}], 
             "NumericalThresholds" -> {-1.591059386730194, \
-0.8875118792057037, -1.115539014339447, -1.1370901465415955`, \
-0.03583694063127041, 9.999999682655224*^-21, 
              0.16060379892587662`, -0.39369185268878937`}, "LeafValues" -> 
             RawArray["Real32",{-0.005133630707859993, -0.0005674721323885024,
                0.010022378526628017`, -0.013149682432413101`, 
               0.00799503643065691, 0.01342150941491127, 
               0.0015236923936754465`, -0.01412906963378191, 
               0.0004005177761428058}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {5, 3}, {-3, 4}, {-4, 
               6}, {-2, -6}, {8, 7}, {-7, -8}, {-5, -9}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 197, 280, 280, 276, 277, 200, 280, 3}], 
             "NumericalThresholds" -> {0.1606043055653572, 
              0.0010088002309203148`, 1.2770469188690186`, 1.290135383605957, 
              1.585935115814209, 0.9830326735973358, 0.2693440392613411, 
              0.5679879188537598, -0.1386890485882759}, "LeafValues" -> 
             RawArray["Real32",{0.0070451609790325165`, 
               0.018066372722387314`, -0.003525697160512209, 
               0.013110853731632233`, -0.0008554381201975048, 
               0.006644480861723423, -0.017681432887911797`, 
               0.0069886003620922565`, -0.002761300653219223, \
-0.001756808953359723}], "Children" -> 
             RawArray["Integer16",{{2, 8}, {-1, 3}, {5, 4}, {-4, -5}, {
               6, -6}, {7, -7}, {-3, -8}, {9, -9}, {-2, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 276, 197, 277, 279, 276, 277, 277, 2}], 
             "NumericalThresholds" -> {-0.19093182682991028`, \
-1.0858586430549622`, 0.0010977291967719793`, -0.5447868406772614, 
              0.8745190799236298, -0.9270240962505341, -0.5937579572200775, \
-0.4097961485385895, 0.16060306876897812`}, "LeafValues" -> 
             RawArray["Real32",{-0.003855551825836301, 0.010771424509584904`, 
               0.008079497143626213, -0.010287119075655937`, 
               0.0059857722371816635`, -0.008995741605758667, \
-0.00785841140896082, 
               0.010185006074607372`, -0.00007453561556758359, \
-0.00030132351093925536`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {-2, 5}, {4, -4}, {-1, -5}, {6, 
               9}, {-3, 7}, {-7, 8}, {-8, -9}, {-6, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{275, 1, 3, 278, 3, 1, 1, 1, 2}], 
             "NumericalThresholds" -> {-1.0389081835746765`, 
              0.7698088586330414, 0.03975718095898628, -1.082496464252472, 
              0.03975571505725384, -0.035836661234498024`, \
-0.03583684004843235, -0.03583714924752712, -0.1909310594201088}, 
             "LeafValues" -> 
             RawArray[
               "Real32",{-0.010072899982333183`, -0.0008427618886344135, 
               0.005085209384560585, 
               0.017127908766269684`, -0.0004014023288618773, 
               0.00035144403227604926`, 
               0.00935518741607666, -0.010563033632934093`, 
               0.009086883626878262, -0.01250296737998724}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -3}, {5, 4}, {-4, -5}, {6, 
               9}, {7, -7}, {8, -8}, {-2, -9}, {-6, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{276, 276, 275, 3, 277, 140, 278}], 
             "NumericalThresholds" -> {-1.189745008945465, \
-1.0895200967788696`, -1.040117859840393, 
              0.03975699655711651, -0.42157675325870514`, 0.4703100025653839, 
              1.6209778189659119`}, "LeafValues" -> 
             RawArray["Real32",{-0.005795991513878107, 0.008259627036750317, 
               0.006542353890836239, 
               0.0012416276149451733`, -0.010884137824177742`, 
               0.00033351575257256627`, -0.006815627217292786, \
-0.005909495986998081}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {6, 
               5}, {-5, -6}, {7, -7}, {-4, -8}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{279, 277, 277, 278, 276, 275}], 
             "NumericalThresholds" -> {
              1.5568374395370483`, -1.0759419202804565`, -0.9103866219520569, \
-0.9832614362239838, -0.8611071407794952, 0.1051686629652977}, "LeafValues" -> 
             RawArray["Real32",{-0.009610779583454132, 0.006076374556869268, 
               0.008236336521804333, -0.005496431607753038, 
               0.004773454274982214, -0.004803651012480259, 
               0.0007947777630761266}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, 4}, {-4, 5}, {-5, 
               6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{278, 276, 3, 3, 1, 275, 2}], 
             "NumericalThresholds" -> {-1.3494816422462463`, \
-1.1564356684684753`, 0.03975731506943703, 
              0.03975633159279823, -0.035836584866046906`, \
-1.0312357544898987`, -0.39369235932826996`}, "LeafValues" -> 
             RawArray["Real32",{
               0.005770768504589796, -0.00997285358607769, \
-0.0075362492352724075`, 0.0007214112556539476, -0.006093882955610752, 
               0.006281726527959108, 0.00006203418161021546, 
               0.010134507901966572`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 7}, {5, -5}, {
               6, -6}, {-3, -7}, {-4, -8}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]]}, "ClassNumber" -> 1, "IterationsNumber" -> 50, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f7" -> Association[
               "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}], 
              "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                 "], "Type" -> "NumericalVector"]], "Output" -> 
            Association[
             "(f7(f8(f1f2f3f4f5f6)))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 8.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["EmbedNominalVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f7" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Index" -> {
                  Association[1 -> 1, 2 -> 2, 3 -> 3]}, "Output" -> 
                Association[
                 "f7" -> Association[
                   "Weight" -> 1, "Type" -> "NumericalVector"]], 
                "EmbeddingVectors" -> {{{0., 0., 0.}, {-0.035837482661008835`,
                  0.160603865981102, -0.13868938386440277`}, {
                 1.3843863010406494`, -0.19093137979507446`, 
                 0.03975660353899002}, {
                 0.7698085308074951, -0.39369234442710876`, 
                 0.10532329231500626`}}}, "Version" -> {12.2, 0}, "ID" -> 
                2900860608003839972]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f7" -> Association[
                   "Weight" -> 1, "Type" -> "NumericalVector"], 
                  "(f8(f1f2f3f4f5f6))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                    "], "Type" -> "NumericalVector"]], "Spans" -> {
                  Span[1, 3], 
                  Span[4, 280]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "(f7(f8(f1f2f3f4f5f6)))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0},
                 "ID" -> 8596584706593563824]], 
              MachineLearning`MLProcessor["DensifyNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f7(f8(f1f2f3f4f5f6)))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0},
                 "ID" -> 6600348544166215312, "Output" -> 
                Association[
                 "(f7(f8(f1f2f3f4f5f6)))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 8.]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 8.], "Key" -> 
                "(f7(f8(f1f2f3f4f5f6)))", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], 
         "DistributionData" -> {NormalDistribution, {0.45748147300198405`}}, 
         "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "BoostingMethod" -> 
           Association["Value" -> "Gradient", "Options" -> Association[]], 
           MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "LeavesNumber" -> 
           Association["Value" -> 110, "Options" -> Association[]], 
           "LearningRate" -> 
           Association["Value" -> 0.2, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "MaxBinNumber" -> 
           Association["Value" -> 255, "Options" -> Association[]], 
           "ThreadNumber" -> 
           Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
           Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
           Association["Value" -> 15, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFrequency" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "MinGainToSplit" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "LossFunction" -> 
           Association[
            "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[20081], "TrainingFunction" -> Predict, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 1.8365558003297235`, "PreprocessingTime" -> 
         3.0653784`7.938029086343358, "LossName" -> "StandardDeviation", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[3.3750789955552314`, 0.017221839439923173`], 
            "StandardDeviation" -> 
            Around[2.5963205253036126`, 0.5925169056554938], "EvaluationTime" -> 
            0.00006635119509224949, "TestSize" -> 60, "ModelMemory" -> 166928,
             "ModelUtility" -> -1.6918816692064054`, "TrainingSize" -> 240, 
            "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
            2241440, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[3.3750789955552314`, 0.012177679452475608`]}, 
            "StandardDeviationHistory" -> {
              Around[2.5963205253036126`, 0.4189727219566694]}, 
            "Configuration" -> {
             "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
              MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
              0.2, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
              "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
              "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
              "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
              "L1Regularization" -> 0, "L2Regularization" -> 0, 
              "LossFunction" -> "MeanSquaredError"}, "FinalTrainingSize" -> 
            300], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
             "TrainingTime", "TrainingMemory", "ExperimentCount", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 17], 
             TypeSystem`Atom[Integer]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 13], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.603049156737783, 0.014939033552083007`], 
                 "StandardDeviation" -> 
                 Around[6.341079117087336, 0.34459816403946864`], 
                 "EvaluationTime" -> 0.000030470488799470136`, "TestSize" -> 
                 290, "ModelMemory" -> 61696, 
                 "ModelUtility" -> -2.5510108951007116`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 237592, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.603049156737783, 0.01056349192905125]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.341079117087336, 0.24366769857674256`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.672293595231984, 0.037164925118015404`], 
                 "StandardDeviation" -> 
                 Around[6.334717971060417, 0.6771054726798769], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 61696, 
                 "ModelUtility" -> -2.5603494108660483`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 534360, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.672293595231984, 0.02627957057323894]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.334717971060417, 0.4787858713104635]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.167627968410739, 0.02225031185502816], 
                 "StandardDeviation" -> 
                 Around[2.6764781776815196`, 0.2946986893736171], 
                 "EvaluationTime" -> 0.00007207786526301476, "TestSize" -> 
                 120, "ModelMemory" -> 161357.3333333333, 
                 "ModelUtility" -> -1.6994386660090806`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.039810717055349706`, 
                 "TrainingMemory" -> 2.238528*^6, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[4.17639486746727, 0.029183762338317272`], 
                   Around[4.158861069354208, 0.028665596095754493`]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.7501758953649276`, 0.4690347445287801], 
                   Around[2.602780459998112, 0.35951187360974785`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007207786526301476, "ModelMemory" -> 
                161357.3333333333, "StandardDeviation" -> 
                Around[2.6764781776815196`, 0.2946986893736171], 
                "TrainingMemory" -> 2.238528*^6, "TrainingTime" -> 
                0.06561232824379827], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.7766589057766007`, 0.18105750197704637`], 
                 "StandardDeviation" -> 
                 Around[5.749120396477743, 0.30987984937514557`], 
                 "EvaluationTime" -> 0.00001414739315879119, "TestSize" -> 
                 290, "ModelMemory" -> 57152, 
                 "ModelUtility" -> -2.4529209417081246`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 1151288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.7766589057766007`, 0.12802698743266622`]}, 
                 "StandardDeviationHistory" -> {
                   Around[5.749120396477743, 0.21911814284623135`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.5313076656612896`, 0.07159246743754022], 
                 "StandardDeviation" -> 
                 Around[3.121019370008615, 0.25382771696363227`], 
                 "EvaluationTime" -> 0.000015107104941529995`, "TestSize" -> 
                 250, "ModelMemory" -> 57216, 
                 "ModelUtility" -> -1.8474461815234962`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 421360, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.5313076656612896`, 0.05062351920696178]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.121019370008615, 0.17948329991808404`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.5566796432927523`, 0.08644921466303497], 
                 "StandardDeviation" -> 
                 Around[3.107056447870278, 0.23815122403862546`], 
                 "EvaluationTime" -> 0.000020982090196569435`, "TestSize" -> 
                 120, "ModelMemory" -> 57216., 
                 "ModelUtility" -> -1.8420408798531893`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 1.703248*^6, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5363331112459475`, 0.12238322330101609`], 
                   Around[2.577026175339557, 0.11555694508743569`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.103287605308288, 0.3869852268880616], 
                   Around[3.1108252904322673`, 0.30207944417914945`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020982090196569435`, "ModelMemory" -> 
                57216., "StandardDeviation" -> 
                Around[3.107056447870278, 0.23815122403862546`], 
                "TrainingMemory" -> 1.703248*^6, "TrainingTime" -> 
                0.047359344249110875`], "Index" -> 2], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[5.084048966604046, 0.608898303347392], 
                 "StandardDeviation" -> 
                 Around[4.536462450427245, 0.3587105581553748], 
                 "EvaluationTime" -> 0.000015562459098473143`, "TestSize" -> 
                 290, "ModelMemory" -> 80368, 
                 "ModelUtility" -> -2.220990602546297, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 222744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.084048966604046, 0.4305561193499243]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.536462450427245, 0.2536466681548769]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.5585011352763605`, 0.1382396817509295], 
                 "StandardDeviation" -> 
                 Around[3.3327192643914736`, 0.36300563643362316`], 
                 "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 
                 200, "ModelMemory" -> 170080, 
                 "ModelUtility" -> -1.918493638119745, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 558328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.5585011352763605`, 0.09775021639515247]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.3327192643914736`, 0.2566837471311534]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.5196301288894043`, 0.1472128191703286], 
                 "StandardDeviation" -> 
                 Around[2.755591167802839, 0.3399368676534227], 
                 "EvaluationTime" -> 0.000026414886541018543`, "TestSize" -> 
                 120, "ModelMemory" -> 597952., 
                 "ModelUtility" -> -1.731170754873685, "TrainingSize" -> 240, 
                 "TrainingTime" -> 0.008628854898161877, "TrainingMemory" -> 
                 3.137725333333333*^6, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5925199168729973`, 0.1787549571057685], 
                   Around[2.4467403409058113`, 0.18308159747685096`]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.9932105369193938`, 0.33502565735642], 
                   Around[2.517971798686285, 0.3532696817454866]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000026414886541018543`, "ModelMemory" -> 
                597952., "StandardDeviation" -> 
                Around[2.755591167802839, 0.3399368676534227], 
                "TrainingMemory" -> 3.137725333333333*^6, "TrainingTime" -> 
                0.018729350969945158`], "Index" -> 3], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.3209300489480875`, 0.23383845777763082`], 
                 "StandardDeviation" -> 
                 Around[4.982078924495252, 0.47697494804648316`], 
                 "EvaluationTime" -> 0.00004496472020903844, "TestSize" -> 
                 200, "ModelMemory" -> 148592, 
                 "ModelUtility" -> -2.317967958604359, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 251192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.3209300489480875`, 0.16534875919676692`]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.982078924495252, 0.33727222021976944`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.531845888030266, 0.0834161505833649], 
                 "StandardDeviation" -> 
                 Around[3.1249311512157543`, 0.28894590300983947`], 
                 "EvaluationTime" -> 0.00004777286046641963, "TestSize" -> 
                 250, "ModelMemory" -> 148592, 
                 "ModelUtility" -> -1.850890365860601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 454888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.531845888030266, 0.058984125737975505`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.1249311512157543`, 0.20431560741432792`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.4623123347918625`, 0.10595927737700336`], 
                 "StandardDeviation" -> 
                 Around[2.8759147406510612`, 0.2769487921783146], 
                 "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 
                 120, "ModelMemory" -> 159898.66666666666`, 
                 "ModelUtility" -> -1.768601941061596, "TrainingSize" -> 240, 
                 "TrainingTime" -> 0.02727219573731649, "TrainingMemory" -> 
                 1.5580213333333333`*^6, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.4972482026165106`, 0.1840921013867683], 
                   Around[2.427376466967214, 0.11916234764834543`]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.945970148012384, 0.4293249139110472], 
                   Around[2.8058593332897384`, 0.34292438855049173`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
                159898.66666666666`, "StandardDeviation" -> 
                Around[2.8759147406510612`, 0.2769487921783146], 
                "TrainingMemory" -> 1.5580213333333333`*^6, "TrainingTime" -> 
                0.05920910898674141], "Index" -> 4], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[257.2628818891713, 38.796354991064206`], 
                 "StandardDeviation" -> 
                 Around[4.529676575609829, 0.3326032199964365], 
                 "EvaluationTime" -> 0.00002324976954344266, "TestSize" -> 
                 290, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.2183811453025104`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 12061744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[257.2628818891713, 27.43316569950206]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.529676575609829, 0.23518599230396134`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.391853325085897, 0.7594002690643396], 
                 "StandardDeviation" -> 
                 Around[3.7416916447089803`, 0.46634032272725134`], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.03731080050001, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3550256, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.391853325085897, 0.5369770798902832]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.7416916447089803`, 0.32975240454116245`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.5167895330745536`, 0.020375650287547634`], 
                 "StandardDeviation" -> 
                 Around[3.7040101820153257`, 0.5284310609375128], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.0307013845016844`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 4828560, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.5167895330745536`, 0.014407760489410558`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.7040101820153257`, 0.373657186578517]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                64136, "StandardDeviation" -> 
                Around[3.7040101820153257`, 0.5284310609375128], 
                "TrainingMemory" -> 4828560, "TrainingTime" -> 
                0.04085543196252288], "Index" -> 5], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[485394.79478777153`, 101834.8325970013], 
                 "StandardDeviation" -> 
                 Around[4.148344679415135, 0.43108739649747885`], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.136431808184696, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3550192, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[485394.79478777153`, 72008.10069033649]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.148344679415135, 0.3048248213474212]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.5882367441420376`*^8, 7.223337426932076*^7], 
                 "StandardDeviation" -> 
                 Around[4.623017308578716, 0.6287693007431978], 
                 "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.2510377667245938`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 3282712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.5882367441420376`*^8, 5.1076708773822576`*^7]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.623017308578716, 0.44460703635743887`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.52814333850048, 0.02206950906312532], 
                 "StandardDeviation" -> 
                 Around[3.631122828504231, 0.39879893512429776`], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 
                 120, "ModelMemory" -> 64136., 
                 "ModelUtility" -> -2.004421635184225, "TrainingSize" -> 240, 
                 "TrainingTime" -> 0.009999999999999998, "TrainingMemory" -> 
                 4.828725333333333*^6, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.508466172981872, 0.014536236279795646`], 
                   Around[3.5478205040190884`, 0.01376176246280559]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.9514602199883333`, 0.3585856392585578], 
                   Around[3.3107854370201286`, 0.3170891145624073]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                64136., "StandardDeviation" -> 
                Around[3.631122828504231, 0.39879893512429776`], 
                "TrainingMemory" -> 4.828725333333333*^6, "TrainingTime" -> 
                0.0225], "Index" -> 6], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.2174258263234403`, 0.0634883747234744], 
                 "StandardDeviation" -> 
                 Around[5.481347554919375, 0.6468724687711669], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.4178312904783708`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3282712, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.2174258263234403`, 0.04489306029348135]}, 
                 "StandardDeviationHistory" -> {
                   Around[5.481347554919375, 0.4574079092309753]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.659328729428095, 0.010250773588439423`], 
                 "StandardDeviation" -> 
                 Around[3.823564368165172, 0.29022811581941804`], 
                 "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 
                 250, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.0494018879340907`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3550256, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.659328729428095, 0.007248391516793475]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.823564368165172, 0.2052222687869052]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.915239451875844, 0.031141556448652293`], 
                 "StandardDeviation" -> 
                 Around[3.5140527310120526`, 0.331984288045451], 
                 "EvaluationTime" -> 0.00003899463987771132, "TestSize" -> 
                 120, "ModelMemory" -> 64136., 
                 "ModelUtility" -> -1.968640266780822, "TrainingSize" -> 240, 
                 "TrainingTime" -> 0.011726169411961113`, "TrainingMemory" -> 
                 4.828746666666666*^6, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.8883075185300906`, 0.021448434696545327`], 
                   Around[3.942171385221598, 0.02284095092466365]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.6965039698254323`, 0.36872896575344], 
                   Around[3.331601492198673, 0.4209040411312939]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003899463987771132, "ModelMemory" -> 
                64136., "StandardDeviation" -> 
                Around[3.5140527310120526`, 0.331984288045451], 
                "TrainingMemory" -> 4.828746666666666*^6, "TrainingTime" -> 
                0.024657711764951393`], "Index" -> 7], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[26002.29171875621, 7256.363374277151], 
                 "StandardDeviation" -> 
                 Around[4.624433270451427, 0.6288627927188927], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.2513398213251774`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3282648, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[26002.29171875621, 5131.023748705071]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.624433270451427, 0.4446731451674392]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[37.647044107655006`, 5.342783107852846], 
                 "StandardDeviation" -> 
                 Around[3.370793521014749, 0.24225483854627688`], 
                 "EvaluationTime" -> 0.000024368167755758284`, "TestSize" -> 
                 250, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -1.9225714931534927`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3550128, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[37.647044107655006`, 3.777918165971684]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.370793521014749, 0.1713000391113246]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.527412121768714, 0.022426830007490618`], 
                 "StandardDeviation" -> 
                 Around[3.5727753558312605`, 0.38721907863315186`], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 
                 120, "ModelMemory" -> 64136., 
                 "ModelUtility" -> -1.9879390978929679`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.009999999999999998, 
                 "TrainingMemory" -> 8.062261333333333*^6, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[3.5073248885934025`, 0.014506723656960119`], 
                   Around[3.5474993549440264`, 0.013733626675062284`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.876493307827907, 0.3654559956204864], 
                   Around[3.269057403834614, 0.3187002769138467]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                64136., "StandardDeviation" -> 
                Around[3.5727753558312605`, 0.38721907863315186`], 
                "TrainingMemory" -> 8.062261333333333*^6, "TrainingTime" -> 
                0.0225], "Index" -> 8], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[5.425547559429526, 1.0698531111818443`], 
                 "StandardDeviation" -> 
                 Around[4.763041756105327, 0.6358314429873951], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.2803867193081757`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3282584, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.425547559429526, 0.7565003897902074]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.763041756105327, 0.44960072502801474`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.64787345784768, 0.0615241618325005], 
                 "StandardDeviation" -> 
                 Around[3.3980409049719666`, 0.2658376430050166], 
                 "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 
                 250, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -1.931876312818681, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3550128, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.64787345784768, 0.043504152038579665`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.3980409049719666`, 0.18797560006349578`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.608173148019115, 0.017810454033276794`], 
                 "StandardDeviation" -> 
                 Around[3.4256858191688466`, 0.379725767585207], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 
                 120, "ModelMemory" -> 64136., 
                 "ModelUtility" -> -1.9463807372498456`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.013675813386831489`, 
                 "TrainingMemory" -> 4.828661333333333*^6, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[3.594034147326451, 0.01527717829174122], 
                   Around[3.6223121487117793`, 0.015356567250146766`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.691974497137692, 0.3765154603893469], 
                   Around[3.1593971412000013`, 0.3894875560859703]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                64136., "StandardDeviation" -> 
                Around[3.4256858191688466`, 0.379725767585207], 
                "TrainingMemory" -> 4.828661333333333*^6, "TrainingTime" -> 
                0.02709476673353936], "Index" -> 9], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.593914022241319, 0.027787721380235553`], 
                 "StandardDeviation" -> 
                 Around[6.329755394805718, 0.6496334753369907], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.558731981453258, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 3282648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.593914022241319, 0.019648886221686968`]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.329755394805718, 0.45936023569656986`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.640129574846416, 0.024236630930106924`], 
                 "StandardDeviation" -> 
                 Around[6.128642719518877, 0.3650588828396368], 
                 "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 
                 250, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.5179679831643216`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3550000, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.640129574846416, 0.017137886083794227`]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.128642719518877, 0.2581356115882925]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[5.2652345937342835`, 0.08597750391980621], 
                 "StandardDeviation" -> 
                 Around[5.514630920399861, 0.6021897814631463], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.4221612555317202`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 4828560, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.2652345937342835`, 0.060795276051187945`]}, 
                 "StandardDeviationHistory" -> {
                   Around[5.514630920399861, 0.4258124780338358]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                64136, "StandardDeviation" -> 
                Around[5.514630920399861, 0.6021897814631463], 
                "TrainingMemory" -> 4828560, "TrainingTime" -> 
                0.02508925411794167], "Index" -> 10], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2907.3235717163566`, 397.7594669108454], 
                 "StandardDeviation" -> 
                 Around[3.4489573303635646`, 0.23881992253401998`], 
                 "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 
                 250, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -1.944977636421346, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3549664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2907.3235717163566`, 281.2584163338049]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.4489573303635646`, 0.16887118670625148`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.5083086424958627`, 0.020546336004268972`], 
                 "StandardDeviation" -> 
                 Around[3.9447295801878193`, 0.5075073229121089], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.0909377267052243`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 4828432, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.5083086424958627`, 0.014528453517155903`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.9447295801878193`, 0.35886186953298305`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.051840030733022*^6, 309178.46958212415`], 
                 "StandardDeviation" -> 
                 Around[4.367344485110485, 0.32113783987144195`], 
                 "EvaluationTime" -> 0.00001922557869792714, "TestSize" -> 
                 290, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.1819062574337797`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 3282776, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.051840030733022*^6, 218622.1924383987]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.367344485110485, 0.22707874426869623`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
                64136, "StandardDeviation" -> 
                Around[4.367344485110485, 0.32113783987144195`], 
                "TrainingMemory" -> 3282776, "TrainingTime" -> 
                0.04776776235382501], "Index" -> 11], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 90], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.667272415470441, 0.024683835812017708`], 
                 "StandardDeviation" -> 
                 Around[6.251707144295453, 0.37000431292225927`], 
                 "EvaluationTime" -> 0.00001901871830953335, "TestSize" -> 
                 250, "ModelMemory" -> 61696, 
                 "ModelUtility" -> -2.5377737739361628`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 536864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.667272415470441, 0.01745410768837307]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.251707144295453, 0.2616325587355988]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.588919783512541, 0.057951756375120574`], 
                 "StandardDeviation" -> 
                 Around[3.0387891228194377`, 0.48341433250052035`], 
                 "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60,
                  "ModelMemory" -> 157344, 
                 "ModelUtility" -> -1.8359340470531218`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 2241280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.588919783512541, 0.04097807991451849]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.0387891228194377`, 0.34182555263388636`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
                157344, "StandardDeviation" -> 
                Around[3.0387891228194377`, 0.48341433250052035`], 
                "TrainingMemory" -> 2241280, "TrainingTime" -> 
                0.0521177248700464], "Index" -> 12], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.2], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.188755353091236, 0.010969837572900105`], 
                 "StandardDeviation" -> 
                 Around[2.90965840843094, 0.2931452364085463], 
                 "EvaluationTime" -> 0.00010430402130441927`, "TestSize" -> 
                 200, "ModelMemory" -> 158304, 
                 "ModelUtility" -> -1.7811395645522192`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 573128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.188755353091236, 0.007756846536312642]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.90965840843094, 0.2072849845370167]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.3750789955552314`, 0.017221839439923173`], 
                 "StandardDeviation" -> 
                 Around[2.5963205253036126`, 0.5925169056554938], 
                 "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60,
                  "ModelMemory" -> 166928, 
                 "ModelUtility" -> -1.6918816692064054`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                 2241440, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.3750789955552314`, 0.012177679452475608`]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.5963205253036126`, 0.4189727219566694]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.603447386144963, 0.014929018870274535`], 
                 "StandardDeviation" -> 
                 Around[6.341079117087336, 0.34459816403946864`], 
                 "EvaluationTime" -> 0.000016395446818563233`, "TestSize" -> 
                 290, "ModelMemory" -> 61696, 
                 "ModelUtility" -> -2.55101088102567, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 181320, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.603447386144963, 0.010556410479633054`]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.341079117087336, 0.24366769857674256`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000016395446818563233`, "ModelMemory" -> 
                61696, "StandardDeviation" -> 
                Around[6.341079117087336, 0.34459816403946864`], 
                "TrainingMemory" -> 181320, "TrainingTime" -> 
                0.08735751282918311], "Index" -> 13], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.02], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.6673624032468375`, 0.024685311531796622`], 
                 "StandardDeviation" -> 
                 Around[6.251707144295453, 0.37000431292225927`], 
                 "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 
                 250, "ModelMemory" -> 61696, 
                 "ModelUtility" -> -2.537773778860592, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 537024, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.6673624032468375`, 0.01745515117983587]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.251707144295453, 0.2616325587355988]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.746518876500792, 0.06443967651644998], 
                 "StandardDeviation" -> 
                 Around[3.3597067317315656`, 0.4930925971746341], 
                 "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60,
                  "ModelMemory" -> 160920, 
                 "ModelUtility" -> -1.9339388624388025`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                 2241376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.746518876500792, 0.0455657322422493]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.3597067317315656`, 0.3486691192150704]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
                160920, "StandardDeviation" -> 
                Around[3.3597067317315656`, 0.4930925971746341], 
                "TrainingMemory" -> 2241376, "TrainingTime" -> 
                0.07849733612802016], "Index" -> 14], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.8437402720050275`*^7, 1.0188818542009313`*^7], 
                 "StandardDeviation" -> 
                 Around[4.148172715159739, 0.43211748957594637`], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.136439850155056, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3549664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.8437402720050275`*^7, 7.204582683334017*^6]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.148172715159739, 0.3055532071484589]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.5084828462149558`, 0.02055849306032157], 
                 "StandardDeviation" -> 
                 Around[3.9521461691064794`, 0.5070785466376446], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.0927478558615955`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 4828560, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.5084828462149558`, 0.01453704985392996]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.9521461691064794`, 0.3585586789216975]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.050760538782293*^10, 3.0902660190252595`*^9], 
                 "StandardDeviation" -> 
                 Around[4.367159046752454, 0.3211357312166417], 
                 "EvaluationTime" -> 0.00001922557869792714, "TestSize" -> 
                 290, "ModelMemory" -> 64136, 
                 "ModelUtility" -> -2.1818643165639573`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3282712, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.050760538782293*^10, 2.1851480577231174`*^9]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.367159046752454, 0.22707725322458777`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
                64136, "StandardDeviation" -> 
                Around[4.367159046752454, 0.3211357312166417], 
                "TrainingMemory" -> 3282712, "TrainingTime" -> 0.04], "Index" -> 
              15]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LinearRegression", 
                "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 15], 
           Association[]], "MaxTrainingSize" -> 300, 
         "PreprocessorEvaluationTime" -> 3.49609375*^-6, "PreprocessorMemory" -> 
         116296, "InputDimension" -> 278, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8229223471597467`17.334970465692574*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.30040708320000026`, 
             "ElapsedTimes" -> 0.4999646, "ExperimentCounts" -> 13], 
            Association[
            "TrainingSizes" -> 50, "TimeBudgets" -> 0.42915297600000024`, 
             "ElapsedTimes" -> 0.5049406, "ExperimentCounts" -> 15], 
            Association[
            "TrainingSizes" -> 240, "TimeBudgets" -> 0.6130756800000001, 
             "ElapsedTimes" -> 0.6694668, "ExperimentCounts" -> 23]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
              8718539460336612740], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {140.}, "ID" -> 
              5330523246654450449], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {72.}, "ID" -> 
              5227176333101167944], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2408.}, "ID" -> 
              5596007189629378955], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
              2638574294534422359], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {71}, "ID" -> 
              5604019906672533564], "f7" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7446114396074216018], "f8" -> 
            Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {"chevrolet vega (sw)"}, "ID" -> 
              3206511614197282240]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 5.2114544, 
         "MaxTrainingMemory" -> 106365280, "DataMemory" -> 102576, 
         "FunctionMemory" -> 534440, "LanguageVersion" -> {12.2, 0}, "Date" -> 
         DateObject[{2021, 2, 21, 18, 52, 27.3205709`9.189064685787097}, 
           "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        8, 260., 90., 3420., 22.2, 79, 1, 
         "oldsmobile cutlass salon brougham"}, {
        4, 105., 70., 2200., 13.2, 79, 1, "plymouth horizon"}, {
        4, 105., 70., 2150., 14.9, 79, 1, "plymouth horizon tc3"}, {
        4, 85., 65., 2020., 19.2, 79, 3, "datsun 210"}, {
        4, 91., 69., 2130., 14.7, 79, 2, "fiat strada custom"}, {
        4, 151., 90., 2670., 16., 79, 1, "buick skylark limited"}, {
        6, 173., 115., 2595., 11.3, 79, 1, "chevrolet citation"}, {
        6, 173., 115., 2700., 12.9, 79, 1, "oldsmobile omega brougham"}, {
        4, 151., 90., 2556., 13.2, 79, 1, "pontiac phoenix"}, {
        4, 98., 76., 2144., 14.7, 80, 2, "vw rabbit"}, {
        4, 89., 60., 1968., 18.8, 80, 3, "toyota corolla tercel"}, {
        4, 98., 70., 2120., 15.5, 80, 1, "chevrolet chevette"}, {
        4, 86., 65., 2019., 16.4, 80, 3, "datsun 310"}, {
        4, 151., 90., 2678., 16.5, 80, 1, "chevrolet citation"}, {
        4, 140., 88., 2870., 18.1, 80, 1, "ford fairmont"}, {
        4, 151., 90., 3003., 20.1, 80, 1, "amc concord"}, {
        6, 225., 90., 3381., 18.7, 80, 1, "dodge aspen"}, {
        4, 97., 78., 2188., 15.8, 80, 2, "audi 4000"}, {
        4, 134., 90., 2711., 15.5, 80, 3, "toyota corona liftback"}, {
        4, 120., 75., 2542., 17.5, 80, 3, "mazda 626"}, {
        4, 119., 92., 2434., 15., 80, 3, "datsun 510 hatchback"}, {
        4, 108., 75., 2265., 15.2, 80, 3, "toyota corolla"}, {
        4, 86., 65., 2110., 17.9, 80, 3, "mazda glc"}, {
        4, 156., 105., 2800., 14.4, 80, 1, "dodge colt"}, {
        4, 85., 65., 2110., 19.2, 80, 3, "datsun 210"}, {
        4, 90., 48., 2085., 21.7, 80, 2, "vw rabbit c (diesel)"}, {
        4, 90., 48., 2335., 23.7, 80, 2, "vw dasher (diesel)"}, {
        5, 121., 67., 2950., 19.9, 80, 2, "audi 5000s (diesel)"}, {
        4, 146., 67., 3250., 21.8, 80, 2, "mercedes-benz 240d"}, {
        4, 91., 67., 1850., 13.8, 80, 3, "honda civic 1500 gl"}, {4, 85., 
         Missing[], 1835., 17.3, 80, 2, "renault lecar deluxe"}, {
        4, 97., 67., 2145., 18., 80, 3, "subaru dl"}, {
        4, 89., 62., 1845., 15.3, 80, 2, "vokswagen rabbit"}, {
        6, 168., 132., 2910., 11.4, 80, 3, "datsun 280-zx"}, {
        3, 70., 100., 2420., 12.5, 80, 3, "mazda rx-7 gs"}, {
        4, 122., 88., 2500., 15.1, 80, 2, "triumph tr7 coupe"}, {4, 140., 
         Missing[], 2905., 14.3, 80, 1, "ford mustang cobra"}, {
        4, 107., 72., 2290., 17., 80, 3, "honda accord"}, {
        4, 135., 84., 2490., 15.7, 81, 1, "plymouth reliant"}, {
        4, 151., 84., 2635., 16.4, 81, 1, "buick skylark"}, {
        4, 156., 92., 2620., 14.4, 81, 1, "dodge aries wagon (sw)"}, {
        6, 173., 110., 2725., 12.6, 81, 1, "chevrolet citation"}, {
        4, 135., 84., 2385., 12.9, 81, 1, "plymouth reliant"}, {
        4, 79., 58., 1755., 16.9, 81, 3, "toyota starlet"}, {
        4, 86., 64., 1875., 16.4, 81, 1, "plymouth champ"}, {
        4, 81., 60., 1760., 16.1, 81, 3, "honda civic 1300"}, {
        4, 97., 67., 2065., 17.8, 81, 3, "subaru"}, {
        4, 85., 65., 1975., 19.4, 81, 3, "datsun 210 mpg"}, {
        4, 89., 62., 2050., 17.3, 81, 3, "toyota tercel"}, {
        4, 91., 68., 1985., 16., 81, 3, "mazda glc 4"}, {
        4, 105., 63., 2215., 14.9, 81, 1, "plymouth horizon 4"}, {
        4, 98., 65., 2045., 16.2, 81, 1, "ford escort 4w"}, {
        4, 98., 65., 2380., 20.7, 81, 1, "ford escort 2h"}, {
        4, 105., 74., 2190., 14.2, 81, 2, "volkswagen jetta"}, {4, 100., 
         Missing[], 2320., 15.8, 81, 2, "renault 18i"}, {
        4, 107., 75., 2210., 14.4, 81, 3, "honda prelude"}, {
        4, 108., 75., 2350., 16.8, 81, 3, "toyota corolla"}, {
        4, 119., 100., 2615., 14.8, 81, 3, "datsun 200sx"}, {
        4, 120., 74., 2635., 18.3, 81, 3, "mazda 626"}, {
        4, 141., 80., 3230., 20.4, 81, 2, "peugeot 505s turbo diesel"}, {
        6, 145., 76., 3160., 19.6, 81, 2, "volvo diesel"}, {
        6, 168., 116., 2900., 12.6, 81, 3, "toyota cressida"}, {
        6, 146., 120., 2930., 13.8, 81, 3, "datsun 810 maxima"}, {
        6, 231., 110., 3415., 15.8, 81, 1, "buick century"}, {
        8, 350., 105., 3725., 19., 81, 1, "oldsmobile cutlass ls"}, {
        6, 200., 88., 3060., 17.1, 81, 1, "ford granada gl"}, {
        6, 225., 85., 3465., 16.6, 81, 1, "chrysler lebaron salon"}, {
        4, 112., 88., 2605., 19.6, 82, 1, "chevrolet cavalier"}, {
        4, 112., 88., 2640., 18.6, 82, 1, "chevrolet cavalier wagon"}, {
        4, 112., 88., 2395., 18., 82, 1, "chevrolet cavalier 2-door"}, {
        4, 112., 85., 2575., 16.2, 82, 1, "pontiac j2000 se hatchback"}, {
        4, 135., 84., 2525., 16., 82, 1, "dodge aries se"}, {
        4, 151., 90., 2735., 18., 82, 1, "pontiac phoenix"}, {
        4, 140., 92., 2865., 16.4, 82, 1, "ford fairmont futura"}, {4, 151., 
         Missing[], 3035., 20.5, 82, 1, "amc concord dl"}, {
        4, 105., 74., 1980., 15.3, 82, 2, "volkswagen rabbit l"}, {
        4, 91., 68., 2025., 18.2, 82, 3, "mazda glc custom l"}, {
        4, 91., 68., 1970., 17.6, 82, 3, "mazda glc custom"}, {
        4, 105., 63., 2125., 14.7, 82, 1, "plymouth horizon miser"}, {
        4, 98., 70., 2125., 17.3, 82, 1, "mercury lynx l"}, {
        4, 120., 88., 2160., 14.5, 82, 3, "nissan stanza xe"}, {
        4, 107., 75., 2205., 14.5, 82, 3, "honda accord"}, {
        4, 108., 70., 2245, 16.9, 82, 3, "toyota corolla"}, {
        4, 91., 67., 1965., 15., 82, 3, "honda civic"}, {
        4, 91., 67., 1965., 15.7, 82, 3, "honda civic (auto)"}, {
        4, 91., 67., 1995., 16.2, 82, 3, "datsun 310 gx"}, {
        6, 181., 110., 2945., 16.4, 82, 1, "buick century limited"}, {
        6, 262., 85., 3015., 17., 82, 1, 
         "oldsmobile cutlass ciera (diesel)"}, {
        4, 156., 92., 2585., 14.5, 82, 1, "chrysler lebaron medallion"}, {
        6, 232., 112., 2835, 14.7, 82, 1, "ford granada l"}, {
        4, 144., 96., 2665., 13.9, 82, 3, "toyota celica gt"}, {
        4, 135., 84., 2370., 13., 82, 1, "dodge charger 2.2"}, {
        4, 151., 90., 2950., 17.3, 82, 1, "chevrolet camaro"}, {
        4, 140., 86., 2790., 15.6, 82, 1, "ford mustang gl"}, {
        4, 97., 52., 2130., 24.6, 82, 2, "vw pickup"}, {
        4, 135., 84., 2295., 11.6, 82, 1, "dodge rampage"}, {
        4, 120., 79., 2625., 18.6, 82, 1, "ford ranger"}, {
        4, 119., 82., 2720., 19.4, 82, 1, "chevy s-10"}}, 
      "Output" -> CompressedData["
1:eJxlkrFtwzAQRZneC7hMk96QYUmWZB0px2lSpXNrwG5deIEMoAWUAbJAFsgA
zgBZQHPE8j0SIHOA8MH7/+7zjno8nN+OD8aYw+07TTHm8jHcYm7FTCFWfq5T
tHLnP53iqSbvca36bwG3mp91oGjfwSlvavqslX8t8M00/+R9G/hW694dOiH/
ovqxot+W+p1kU3w9K2bed0Md/AX9KMHv3n8v1Of4Wu6f0w8+q8gzx7VEn8d+
fUeeffSWe0o8169jX/jtLT7oxwa9hPfROonvdfH7btlXzTwb9lSiLzivwhya
X3JehPdSrED+D8O7mCbhC9DvwYU547ou5v+hTXSSnMvkzH9oVone96sS3CU6
P2crf4wl3CI=
       "]], "Predictions" -> CompressedData["
1:eJwBHQPi/CFib1JlAQAAAGIAAAAIR+EAJ7szQF4IyJanYz9AKRJJpwo/P0Do
6pegef5CQCKkIuVS/j1ALty+phzXOkABCuOLKU43QCnoP09IYTdAYM+P+O/X
O0CNEmsavrU+QOKNIkeGC0NA+tGeTEX6PkCUgW3M1Q5CQGygWsu7fjpAEtPr
keAdN0BFBWZSAZc4QGxSw6XSFTRARCoRPcLAPkBuGY3xRHs6QFxB72zBWz1A
bIHonoPaOkAL97aw8m8+QJCiLSjqnz9ATGXDhokfOED/UdmzoS5AQMJbnf3d
D0NACu0VeNmhP0AsOcIoLC04QFe6A2ODkTpAAUc4tUnJQUAhzA61QbdBQF9H
Buxqoj5AXTJ9dUo+QUDZ9SNXiDEyQCKvIh8UejdAqg4ecmhIOUBSipwkcKU3
QM7rdLmHOz9AYU7l9kzKO0CKZbf3Zis7QHhUbKWyqTpAA/T03W1WNUAUJZd/
PZw6QP6MxSE/GkJAjKPvHstCQUD+hAGNrhhCQJSyiqGwSUJALfCxtGgLQ0DS
pVMVbGZCQHw2Av0TmkFAkPFvrsBPP0Dfuqy/oSlBQG8MmdPFDD1AJV55Os77
PkA3sS1RXk89QK8cXMvTjj9Asp6paJa9PUBiFG8EZhI6QFHiaZ97CjxArLB9
ZBJeOkAdo/1aoAY2QI11WIvOLDNATYIPoLHSMkCdn3bN/OI0QLSk6Z6m1DJA
GJImRuTwNEDjv2o77JE1QIjHTXz+ZTtAfJNZJ8skO0DjLuaqy5g7QJBl6+Oy
MTxANm/xKDehO0B1h8/Z9/U5QOwAw/wTdjhAa3AD8m0GOUCSCecnHDFBQM9o
7um5Y0JARJMMei2uQkDLs1QqXPk+QMRmkBnC6j1ACGZYHHisO0AyT8kHBMo+
QKDTvTDqWj9AJpfeSCMFQkCeXlHDeOZBQNldAqsNskFAYeqPwuC9NECXJhjx
34Q0QKxgr9iglTpAHeHZMTd7NEA/+LSBGnE6QBa+raI4wDpAzssvyMi+N0Ca
wyzJqnY3QO8dM9AvYT5AU5g4QZDUPEA4H+D/Wko7QOvzF5NfsjlAdPJXQg==

     "], "Distributions" -> {
      NormalDistribution[19.731063895224935`, 2.8706454761685922`], 
      NormalDistribution[31.389275955043892`, 2.8706454761685922`], 
      NormalDistribution[31.246256308879456`, 2.8706454761685922`], 
      NormalDistribution[37.9880867711816, 2.8706454761685922`], 
      NormalDistribution[29.9934523782323, 2.8706454761685922`], 
      NormalDistribution[26.840280934902857`, 2.8706454761685922`], 
      NormalDistribution[23.30532144825884, 2.8706454761685922`], 
      NormalDistribution[23.380009606458916`, 2.8706454761685922`], 
      NormalDistribution[27.84350541602123, 2.8706454761685922`], 
      NormalDistribution[30.70993199457239, 2.8706454761685922`], 
      NormalDistribution[38.090035335418875`, 2.8706454761685922`], 
      NormalDistribution[30.97761992337653, 2.8706454761685922`], 
      NormalDistribution[36.115899613828475`, 2.8706454761685922`], 
      NormalDistribution[26.495053014398238`, 2.8706454761685922`], 
      NormalDistribution[23.11670791633066, 2.8706454761685922`], 
      NormalDistribution[24.589863920123452`, 2.8706454761685922`], 
      NormalDistribution[20.08524547594645, 2.8706454761685922`], 
      NormalDistribution[30.752963844958018`, 2.8706454761685922`], 
      NormalDistribution[26.48152074522789, 2.8706454761685922`], 
      NormalDistribution[29.358420189296666`, 2.8706454761685922`], 
      NormalDistribution[26.85357087303548, 2.8706454761685922`], 
      NormalDistribution[30.437296909970467`, 2.8706454761685922`], 
      NormalDistribution[31.624666701451645`, 2.8706454761685922`], 
      NormalDistribution[24.123192236618067`, 2.8706454761685922`], 
      NormalDistribution[32.364309769738604`, 2.8706454761685922`], 
      NormalDistribution[38.12396211799161, 2.8706454761685922`], 
      NormalDistribution[31.632224564888965`, 2.8706454761685922`], 
      NormalDistribution[24.176455066125683`, 2.8706454761685922`], 
      NormalDistribution[26.568411053094987`, 2.8706454761685922`], 
      NormalDistribution[35.57256188629072, 2.8706454761685922`], 
      NormalDistribution[35.4316927263501, 2.8706454761685922`], 
      NormalDistribution[30.634443999798687`, 2.8706454761685922`], 
      NormalDistribution[34.4866473065674, 2.8706454761685922`], 
      NormalDistribution[18.193486639289265`, 2.8706454761685922`], 
      NormalDistribution[23.476869531600762`, 2.8706454761685922`], 
      NormalDistribution[25.28284371599026, 2.8706454761685922`], 
      NormalDistribution[23.646242416589594`, 2.8706454761685922`], 
      NormalDistribution[31.23253974060554, 2.8706454761685922`], 
      NormalDistribution[27.790236884100867`, 2.8706454761685922`], 
      NormalDistribution[27.16953991153199, 2.8706454761685922`], 
      NormalDistribution[26.662882174442046`, 2.8706454761685922`], 
      NormalDistribution[21.337613937666912`, 2.8706454761685922`], 
      NormalDistribution[26.61031339111385, 2.8706454761685922`], 
      NormalDistribution[36.20505163332017, 2.8706454761685922`], 
      NormalDistribution[34.5218237562286, 2.8706454761685922`], 
      NormalDistribution[36.19282686781115, 2.8706454761685922`], 
      NormalDistribution[36.57570285103171, 2.8706454761685922`], 
      NormalDistribution[38.089132868656044`, 2.8706454761685922`], 
      NormalDistribution[36.80017344078409, 2.8706454761685922`], 
      NormalDistribution[35.20373499496506, 2.8706454761685922`], 
      NormalDistribution[31.311533834772092`, 2.8706454761685922`], 
      NormalDistribution[34.32524867948609, 2.8706454761685922`], 
      NormalDistribution[29.049893593659757`, 2.8706454761685922`], 
      NormalDistribution[30.983615545874404`, 2.8706454761685922`], 
      NormalDistribution[29.310032914786657`, 2.8706454761685922`], 
      NormalDistribution[31.557919225681584`, 2.8706454761685922`], 
      NormalDistribution[29.740576306735143`, 2.8706454761685922`], 
      NormalDistribution[26.071869160765694`, 2.8706454761685922`], 
      NormalDistribution[28.040948832846258`, 2.8706454761685922`], 
      NormalDistribution[26.367468147932115`, 2.8706454761685922`], 
      NormalDistribution[22.025884329722533`, 2.8706454761685922`], 
      NormalDistribution[19.175026616188507`, 2.8706454761685922`], 
      NormalDistribution[18.823022846018194`, 2.8706454761685922`], 
      NormalDistribution[20.886669961415112`, 2.8706454761685922`], 
      NormalDistribution[18.830667430917586`, 2.8706454761685922`], 
      NormalDistribution[20.94098318521182, 2.8706454761685922`], 
      NormalDistribution[21.57001086574736, 2.8706454761685922`], 
      NormalDistribution[27.39841439150726, 2.8706454761685922`], 
      NormalDistribution[27.143724879616897`, 2.8706454761685922`], 
      NormalDistribution[27.59685772056299, 2.8706454761685922`], 
      NormalDistribution[28.19413589951506, 2.8706454761685922`], 
      NormalDistribution[27.62974792379756, 2.8706454761685922`], 
      NormalDistribution[25.960813153425494`, 2.8706454761685922`], 
      NormalDistribution[24.461242482765485`, 2.8706454761685922`], 
      NormalDistribution[25.025115133132584`, 2.8706454761685922`], 
      NormalDistribution[34.38367174893496, 2.8706454761685922`], 
      NormalDistribution[36.77911113873562, 2.8706454761685922`], 
      NormalDistribution[37.36076284040476, 2.8706454761685922`], 
      NormalDistribution[30.974062581710125`, 2.8706454761685922`], 
      NormalDistribution[29.917024228815322`, 2.8706454761685922`], 
      NormalDistribution[27.673707744199447`, 2.8706454761685922`], 
      NormalDistribution[30.78912399925975, 2.8706454761685922`], 
      NormalDistribution[31.355135961861038`, 2.8706454761685922`], 
      NormalDistribution[36.040139301954966`, 2.8706454761685922`], 
      NormalDistribution[35.800560393077134`, 2.8706454761685922`], 
      NormalDistribution[35.39104211440617, 2.8706454761685922`], 
      NormalDistribution[20.741710815559035`, 2.8706454761685922`], 
      NormalDistribution[20.51904208030336, 2.8706454761685922`], 
      NormalDistribution[26.584485571686557`, 2.8706454761685922`], 
      NormalDistribution[20.48131095475502, 2.8706454761685922`], 
      NormalDistribution[26.441810709650095`, 2.8706454761685922`], 
      NormalDistribution[26.750864188592537`, 2.8706454761685922`], 
      NormalDistribution[23.745251189869855`, 2.8706454761685922`], 
      NormalDistribution[23.46354348509667, 2.8706454761685922`], 
      NormalDistribution[30.379635822753638`, 2.8706454761685922`], 
      NormalDistribution[28.830326153103965`, 2.8706454761685922`], 
      NormalDistribution[27.2904510423825, 2.8706454761685922`], 
      NormalDistribution[25.696770852420666`, 2.8706454761685922`]}, 
    "Modes" -> CompressedData["
1:eJwBHQPi/CFib1JlAQAAAGIAAAAIR+EAJ7szQF4IyJanYz9AKRJJpwo/P0Do
6pegef5CQCKkIuVS/j1ALty+phzXOkABCuOLKU43QCnoP09IYTdAYM+P+O/X
O0CNEmsavrU+QOKNIkeGC0NA+tGeTEX6PkCUgW3M1Q5CQGygWsu7fjpAEtPr
keAdN0BFBWZSAZc4QGxSw6XSFTRARCoRPcLAPkBuGY3xRHs6QFxB72zBWz1A
bIHonoPaOkAL97aw8m8+QJCiLSjqnz9ATGXDhokfOED/UdmzoS5AQMJbnf3d
D0NACu0VeNmhP0AsOcIoLC04QFe6A2ODkTpAAUc4tUnJQUAhzA61QbdBQF9H
Buxqoj5AXTJ9dUo+QUDZ9SNXiDEyQCKvIh8UejdAqg4ecmhIOUBSipwkcKU3
QM7rdLmHOz9AYU7l9kzKO0CKZbf3Zis7QHhUbKWyqTpAA/T03W1WNUAUJZd/
PZw6QP6MxSE/GkJAjKPvHstCQUD+hAGNrhhCQJSyiqGwSUJALfCxtGgLQ0DS
pVMVbGZCQHw2Av0TmkFAkPFvrsBPP0Dfuqy/oSlBQG8MmdPFDD1AJV55Os77
PkA3sS1RXk89QK8cXMvTjj9Asp6paJa9PUBiFG8EZhI6QFHiaZ97CjxArLB9
ZBJeOkAdo/1aoAY2QI11WIvOLDNATYIPoLHSMkCdn3bN/OI0QLSk6Z6m1DJA
GJImRuTwNEDjv2o77JE1QIjHTXz+ZTtAfJNZJ8skO0DjLuaqy5g7QJBl6+Oy
MTxANm/xKDehO0B1h8/Z9/U5QOwAw/wTdjhAa3AD8m0GOUCSCecnHDFBQM9o
7um5Y0JARJMMei2uQkDLs1QqXPk+QMRmkBnC6j1ACGZYHHisO0AyT8kHBMo+
QKDTvTDqWj9AJpfeSCMFQkCeXlHDeOZBQNldAqsNskFAYeqPwuC9NECXJhjx
34Q0QKxgr9iglTpAHeHZMTd7NEA/+LSBGnE6QBa+raI4wDpAzssvyMi+N0Ca
wyzJqnY3QO8dM9AvYT5AU5g4QZDUPEA4H+D/Wko7QOvzF5NfsjlAdPJXQg==

     "], "Weights" -> SparseArray[Automatic, {98}, 1., {1, {{0, 0}, {}}, {}}],
     "BatchEvaluationTime" -> 0.0015606306122448977`, "SingleEvaluationTime" -> 
    0.00606024375, "Version" -> {12.2, 0}]]]], "Output",
 CellChangeTimes->{3.822943956171809*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"a9b0d7ce-da4c-4ed8-a7ff-ef694737a5d0"]
}, Open  ]],

Cell["\:9884\:6d4b\:5668\:7684\:8bc4\:4f30\:77e9\:9635", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814286997589587*^9, 3.814286998670597*^9}, {
   3.814287154720131*^9, 3.814287172393012*^9}, {3.8229440141206007`*^9, 
   3.8229440184767356`*^9}},ExpressionUUID->"4dfbf04c-3aab-4ef3-b0ab-\
e20cab1a0e17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pm", "[", "\"\<Report\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8141049599657297`*^9, 3.8141049656686573`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"fd73488a-95e2-4875-9294-cfa30a2f6d6d"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Predictor method"], 
                  TextCell["Predictor method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "GradientBoostedTrees",ExpressionUUID->
                "6e3e1709-46ad-4565-89e2-fc6913299919"],
               TextCell["GradientBoostedTrees"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of test examples"], 
                  TextCell["Number of test examples"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "98"},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Standard deviation"], 
                  TextCell["Standard deviation"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"5.5141890570556144624`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.4829678139623716504`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "4.5482534291308711616`3.",
                   "\", \"", "6.4801246849803577632`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 4.5482534291308711616`3., 
                  ", ", 6.4801246849803577632`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                   "\"Standard deviation of testset values\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Standard deviation of testset values", 
                   "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"5.9381640228005352355`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3958581497837001528`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "5.1464477232331349299`3.",
                   "\", \"", "6.7298803223679355412`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                Row[{
                 "95% confidence interval: [", 5.1464477232331349299`3., ", ",
                   6.7298803223679355412`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["R-squared"], 
                  TextCell["R-squared"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.1376989294817180243`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1901380197751741941`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                TemplateBox[{"\"95% confidence interval: [\"", 
                  RowBox[{"-", "0.2425771100686303638`3."}], "\", \"", 
                  "0.5179749690320664124`3.", "\"]\""}, "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", -0.2425771100686303638`3., 
                  ", ", 0.5179749690320664124`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Mean cross entropy"], 
                  TextCell["Mean cross entropy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"3.8183812044816995979`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3219352118384772865`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                TemplateBox[{
                 "\"95% confidence interval: [\"", "3.1745107808047450249`3.",
                   "\", \"", "4.4622516281586541709`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 3.1745107808047450249`3., 
                  ", ", 4.4622516281586541709`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"6.06`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"641.`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              ItemBox[
               GraphicsBox[{{{}, {
                   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.011000000000000001`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxFU2tQVGUYXkCJkHBCKGBABlQuBhjsyln2dp5zdrk5KAM6KYgoEDukS2sX
GBQsSUcNIUFMhFFYUHAk4rJAjjogQU7gIhTY2DaZCEkIFGIaZoIts985vDPf
j2ee9/q87+eZoo1LsxIIBCmmZ2F6lqZnE3Ff4HNNCPWCjVFIsuk5fTGVRnmZ
yVwY+DlEXbSlaQgWDAzGJ0p1++ZZ3OpbMBpeF7wexM3LzfG1LAJ/7ah1uyMx
Y7UMFrajx/02UcRfBr9xOiYymcMS7Bo48Wz6jtScvxModNjj2tGmIFiFkUKv
iCPLlGZ/OyWe/1gRHfZcQTBwKi+j7yd71txvGQuNLsFw7ROJOV4gg8PQZPGw
O0X6kSBsqTrOolRsjo8WQxPXXTPoJCLzCqFa+7q8q1Nh9vdm8L5L4YwqR0L6
lSORmdZ8u11O4mlo8sYrDv1C6h1ksWz2m6bHWgXJBxRVB/hOVNLEPwLRad1H
PvcQE72leBlrbKkKBOlPha7t5+buLleS+uGw/dMp21hFQ7hgLWHwD+3y9Q8Q
m7GQxdarVqmHirl5FbCIELdF9TKkXjg8++zbmMuM2f8jFXZGWE/tribzjQE7
gg9kblAw/HzGp6u2HgsKNvcfD3g1enk47qdIfQp19is/TI8MJfMyiMs/u3pv
DUX0p9A/+fGVo1LSrxBI3vTgn+ibUoKlyE+7PKt+S0r8JcjeoqnRX+L0DYXV
kyd3M95ZT/JTcFxT+qn87OJ88wU3PGlXcn8FShScn15pYBnir8T8YYvCBmeO
Z3BKn1/VFMUSPYGAR82t6aZ74vY1WLPZSaMm92NkkRtiObeinOhhx6BoRtvQ
GUP+QzyDe1frr1f5ET2FDLR2ZUM37Mj9j8mxJmmfpP8/cr8HAao5IDYpRs7/
n0a3RMPQFySfEdBXXEo/3S7n9Upx1C5RO0jIvoDYkfcqc2xlRC8a9U0H3nVI
kpD7ksH9/FyCzjqE7EeBwsxtx/v9yX9Wh2LjZ8t1zYPBJL8Y5yqzbr0YERE+
BK0XHlbU3g7m9+F80jv890ci4i/C6PXd0qni9YQPwrHvN+bOp0n5/5VbEu9j
WM1hKUYDx+oMZzhs0i9tclQfJCOYRoh2xpeq4ng5Mo8OGGefhvLxU4LuFyuy
xASLsWev1eMMa46ncPLVP3zcgsi+BSwG0v96eCWV5fepKrHbH9DA8vUMLVvW
Jv5L9iFQ4jt1kUvXhJyPt1Fvc8uul/I4OKb3lSU3FTzWDbW/PZFA8/N4l/4W
uWopy+erSIrtzh7j+gGMOyy/ek3P8HzyxImu4XYRwaEo9XaeuXdYxPP1uxp/
1n3J3bcE7veNQVQOx4eAftaa5/qBhM//RsfX1eJODrPoN6zr6emgeP3Ku/17
67IW8bS78Id1ydw84dh8RswU3Zbx+cQewy8TNizuc/LvN0t26jm9afwPmXox
aw==
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.731063895224935`, 23.9}}]},
                    RowBox[{"{", 
                    RowBox[{"19.731063895224935`", ",", "23.9`"}], "}"}]],
                    Annotation[#, {19.731063895224935`, 23.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.389275955043892`, 34.2}}]},
                    RowBox[{"{", 
                    RowBox[{"31.389275955043892`", ",", "34.2`"}], "}"}]],
                    Annotation[#, {31.389275955043892`, 34.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.246256308879456`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"31.246256308879456`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {31.246256308879456`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{37.9880867711816, 31.8}}]},
                    RowBox[{"{", 
                    RowBox[{"37.9880867711816`", ",", "31.8`"}], "}"}]],
                    Annotation[#, {37.9880867711816, 31.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.9934523782323, 37.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.9934523782323`", ",", "37.3`"}], "}"}]],
                    Annotation[#, {29.9934523782323, 37.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.840280934902857`, 28.4}}]},
                    RowBox[{"{", 
                    RowBox[{"26.840280934902857`", ",", "28.4`"}], "}"}]],
                    Annotation[#, {26.840280934902857`, 28.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.30532144825884, 28.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.30532144825884`", ",", "28.8`"}], "}"}]],
                    Annotation[#, {23.30532144825884, 28.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.380009606458916`, 26.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.380009606458916`", ",", "26.8`"}], "}"}]],
                    Annotation[#, {23.380009606458916`, 26.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.84350541602123, 33.5}}]},
                    RowBox[{"{", 
                    RowBox[{"27.84350541602123`", ",", "33.5`"}], "}"}]],
                    Annotation[#, {27.84350541602123, 33.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.70993199457239, 41.5}}]},
                    RowBox[{"{", 
                    RowBox[{"30.70993199457239`", ",", "41.5`"}], "}"}]],
                    Annotation[#, {30.70993199457239, 41.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{38.090035335418875`, 38.1}}]},
                    RowBox[{"{", 
                    RowBox[{"38.090035335418875`", ",", "38.1`"}], "}"}]],
                    Annotation[#, {38.090035335418875`, 38.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.97761992337653, 32.1}}]},
                    RowBox[{"{", 
                    RowBox[{"30.97761992337653`", ",", "32.1`"}], "}"}]],
                    Annotation[#, {30.97761992337653, 32.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.115899613828475`, 37.2}}]},
                    RowBox[{"{", 
                    RowBox[{"36.115899613828475`", ",", "37.2`"}], "}"}]],
                    Annotation[#, {36.115899613828475`, 37.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.495053014398238`, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.495053014398238`", ",", "28.`"}], "}"}]],
                    Annotation[#, {26.495053014398238`, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.11670791633066, 26.4}}]},
                    RowBox[{"{", 
                    RowBox[{"23.11670791633066`", ",", "26.4`"}], "}"}]],
                    Annotation[#, {23.11670791633066, 26.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.589863920123452`, 24.3}}]},
                    RowBox[{"{", 
                    RowBox[{"24.589863920123452`", ",", "24.3`"}], "}"}]],
                    Annotation[#, {24.589863920123452`, 24.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.08524547594645, 19.1}}]},
                    RowBox[{"{", 
                    RowBox[{"20.08524547594645`", ",", "19.1`"}], "}"}]],
                    Annotation[#, {20.08524547594645, 19.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.752963844958018`, 34.3}}]},
                    RowBox[{"{", 
                    RowBox[{"30.752963844958018`", ",", "34.3`"}], "}"}]],
                    Annotation[#, {30.752963844958018`, 34.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.48152074522789, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.48152074522789`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {26.48152074522789, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.358420189296666`, 31.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.358420189296666`", ",", "31.3`"}], "}"}]],
                    Annotation[#, {29.358420189296666`, 31.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.85357087303548, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.85357087303548`", ",", "37.`"}], "}"}]],
                    Annotation[#, {26.85357087303548, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.437296909970467`, 32.2}}]},
                    RowBox[{"{", 
                    RowBox[{"30.437296909970467`", ",", "32.2`"}], "}"}]],
                    Annotation[#, {30.437296909970467`, 32.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.624666701451645`, 46.6}}]},
                    RowBox[{"{", 
                    RowBox[{"31.624666701451645`", ",", "46.6`"}], "}"}]],
                    Annotation[#, {31.624666701451645`, 46.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.123192236618067`, 27.9}}]},
                    RowBox[{"{", 
                    RowBox[{"24.123192236618067`", ",", "27.9`"}], "}"}]],
                    Annotation[#, {24.123192236618067`, 27.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{32.364309769738604`, 40.8}}]},
                    RowBox[{"{", 
                    RowBox[{"32.364309769738604`", ",", "40.8`"}], "}"}]],
                    Annotation[#, {32.364309769738604`, 40.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{38.12396211799161, 44.3}}]},
                    RowBox[{"{", 
                    RowBox[{"38.12396211799161`", ",", "44.3`"}], "}"}]],
                    Annotation[#, {38.12396211799161, 44.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.632224564888965`, 43.4}}]},
                    RowBox[{"{", 
                    RowBox[{"31.632224564888965`", ",", "43.4`"}], "}"}]],
                    Annotation[#, {31.632224564888965`, 43.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.176455066125683`, 36.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.176455066125683`", ",", "36.4`"}], "}"}]],
                    Annotation[#, {24.176455066125683`, 36.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.568411053094987`, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.568411053094987`", ",", "30.`"}], "}"}]],
                    Annotation[#, {26.568411053094987`, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.57256188629072, 44.6}}]},
                    RowBox[{"{", 
                    RowBox[{"35.57256188629072`", ",", "44.6`"}], "}"}]],
                    Annotation[#, {35.57256188629072, 44.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.4316927263501, 40.9}}]},
                    RowBox[{"{", 
                    RowBox[{"35.4316927263501`", ",", "40.9`"}], "}"}]],
                    Annotation[#, {35.4316927263501, 40.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.634443999798687`, 33.8}}]},
                    RowBox[{"{", 
                    RowBox[{"30.634443999798687`", ",", "33.8`"}], "}"}]],
                    Annotation[#, {30.634443999798687`, 33.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.4866473065674, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"34.4866473065674`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {34.4866473065674, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.193486639289265`, 32.7}}]},
                    RowBox[{"{", 
                    RowBox[{"18.193486639289265`", ",", "32.7`"}], "}"}]],
                    Annotation[#, {18.193486639289265`, 32.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.476869531600762`, 23.7}}]},
                    RowBox[{"{", 
                    RowBox[{"23.476869531600762`", ",", "23.7`"}], "}"}]],
                    Annotation[#, {23.476869531600762`, 23.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.28284371599026, 35.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.28284371599026`", ",", "35.`"}], "}"}]],
                    Annotation[#, {25.28284371599026, 35.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.646242416589594`, 23.6}}]},
                    RowBox[{"{", 
                    RowBox[{"23.646242416589594`", ",", "23.6`"}], "}"}]],
                    Annotation[#, {23.646242416589594`, 23.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.23253974060554, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"31.23253974060554`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {31.23253974060554, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.790236884100867`, 27.2}}]},
                    RowBox[{"{", 
                    RowBox[{"27.790236884100867`", ",", "27.2`"}], "}"}]],
                    Annotation[#, {27.790236884100867`, 27.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.16953991153199, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"27.16953991153199`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {27.16953991153199, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.662882174442046`, 25.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.662882174442046`", ",", "25.8`"}], "}"}]],
                    Annotation[#, {26.662882174442046`, 25.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.337613937666912`, 23.5}}]},
                    RowBox[{"{", 
                    RowBox[{"21.337613937666912`", ",", "23.5`"}], "}"}]],
                    Annotation[#, {21.337613937666912`, 23.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.61031339111385, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.61031339111385`", ",", "30.`"}], "}"}]],
                    Annotation[#, {26.61031339111385, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.20505163332017, 39.1}}]},
                    RowBox[{"{", 
                    RowBox[{"36.20505163332017`", ",", "39.1`"}], "}"}]],
                    Annotation[#, {36.20505163332017, 39.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.5218237562286, 39.}}]},
                    RowBox[{"{", 
                    RowBox[{"34.5218237562286`", ",", "39.`"}], "}"}]],
                    Annotation[#, {34.5218237562286, 39.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.19282686781115, 35.1}}]},
                    RowBox[{"{", 
                    RowBox[{"36.19282686781115`", ",", "35.1`"}], "}"}]],
                    Annotation[#, {36.19282686781115, 35.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.57570285103171, 32.3}}]},
                    RowBox[{"{", 
                    RowBox[{"36.57570285103171`", ",", "32.3`"}], "}"}]],
                    Annotation[#, {36.57570285103171, 32.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{38.089132868656044`, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"38.089132868656044`", ",", "37.`"}], "}"}]],
                    Annotation[#, {38.089132868656044`, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.80017344078409, 37.7}}]},
                    RowBox[{"{", 
                    RowBox[{"36.80017344078409`", ",", "37.7`"}], "}"}]],
                    Annotation[#, {36.80017344078409, 37.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.20373499496506, 34.1}}]},
                    RowBox[{"{", 
                    RowBox[{"35.20373499496506`", ",", "34.1`"}], "}"}]],
                    Annotation[#, {35.20373499496506, 34.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.311533834772092`, 34.7}}]},
                    RowBox[{"{", 
                    RowBox[{"31.311533834772092`", ",", "34.7`"}], "}"}]],
                    Annotation[#, {31.311533834772092`, 34.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.32524867948609, 34.4}}]},
                    RowBox[{"{", 
                    RowBox[{"34.32524867948609`", ",", "34.4`"}], "}"}]],
                    Annotation[#, {34.32524867948609, 34.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.049893593659757`, 29.9}}]},
                    RowBox[{"{", 
                    RowBox[{"29.049893593659757`", ",", "29.9`"}], "}"}]],
                    Annotation[#, {29.049893593659757`, 29.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.983615545874404`, 33.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.983615545874404`", ",", "33.`"}], "}"}]],
                    Annotation[#, {30.983615545874404`, 33.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.310032914786657`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"29.310032914786657`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {29.310032914786657`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.557919225681584`, 33.7}}]},
                    RowBox[{"{", 
                    RowBox[{"31.557919225681584`", ",", "33.7`"}], "}"}]],
                    Annotation[#, {31.557919225681584`, 33.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.740576306735143`, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"29.740576306735143`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {29.740576306735143`, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.071869160765694`, 32.9}}]},
                    RowBox[{"{", 
                    RowBox[{"26.071869160765694`", ",", "32.9`"}], "}"}]],
                    Annotation[#, {26.071869160765694`, 32.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.040948832846258`, 31.6}}]},
                    RowBox[{"{", 
                    RowBox[{"28.040948832846258`", ",", "31.6`"}], "}"}]],
                    Annotation[#, {28.040948832846258`, 31.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.367468147932115`, 28.1}}]},
                    RowBox[{"{", 
                    RowBox[{"26.367468147932115`", ",", "28.1`"}], "}"}]],
                    Annotation[#, {26.367468147932115`, 28.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.025884329722533`, 30.7}}]},
                    RowBox[{"{", 
                    RowBox[{"22.025884329722533`", ",", "30.7`"}], "}"}]],
                    Annotation[#, {22.025884329722533`, 30.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.175026616188507`, 25.4}}]},
                    RowBox[{"{", 
                    RowBox[{"19.175026616188507`", ",", "25.4`"}], "}"}]],
                    Annotation[#, {19.175026616188507`, 25.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.823022846018194`, 24.2}}]},
                    RowBox[{"{", 
                    RowBox[{"18.823022846018194`", ",", "24.2`"}], "}"}]],
                    Annotation[#, {18.823022846018194`, 24.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.886669961415112`, 22.4}}]},
                    RowBox[{"{", 
                    RowBox[{"20.886669961415112`", ",", "22.4`"}], "}"}]],
                    Annotation[#, {20.886669961415112`, 22.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.830667430917586`, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"18.830667430917586`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {18.830667430917586`, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.94098318521182, 20.2}}]},
                    RowBox[{"{", 
                    RowBox[{"20.94098318521182`", ",", "20.2`"}], "}"}]],
                    Annotation[#, {20.94098318521182, 20.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.57001086574736, 17.6}}]},
                    RowBox[{"{", 
                    RowBox[{"21.57001086574736`", ",", "17.6`"}], "}"}]],
                    Annotation[#, {21.57001086574736, 17.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.39841439150726, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.39841439150726`", ",", "28.`"}], "}"}]],
                    Annotation[#, {27.39841439150726, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.143724879616897`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.143724879616897`", ",", "27.`"}], "}"}]],
                    Annotation[#, {27.143724879616897`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.59685772056299, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.59685772056299`", ",", "34.`"}], "}"}]],
                    Annotation[#, {27.59685772056299, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.19413589951506, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"28.19413589951506`", ",", "31.`"}], "}"}]],
                    Annotation[#, {28.19413589951506, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.62974792379756, 29.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.62974792379756`", ",", "29.`"}], "}"}]],
                    Annotation[#, {27.62974792379756, 29.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.960813153425494`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.960813153425494`", ",", "27.`"}], "}"}]],
                    Annotation[#, {25.960813153425494`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.461242482765485`, 24.}}]},
                    RowBox[{"{", 
                    RowBox[{"24.461242482765485`", ",", "24.`"}], "}"}]],
                    Annotation[#, {24.461242482765485`, 24.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.025115133132584`, 23.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.025115133132584`", ",", "23.`"}], "}"}]],
                    Annotation[#, {25.025115133132584`, 23.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{34.38367174893496, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"34.38367174893496`", ",", "36.`"}], "}"}]],
                    Annotation[#, {34.38367174893496, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.77911113873562, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"36.77911113873562`", ",", "37.`"}], "}"}]],
                    Annotation[#, {36.77911113873562, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{37.36076284040476, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"37.36076284040476`", ",", "31.`"}], "}"}]],
                    Annotation[#, {37.36076284040476, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.974062581710125`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.974062581710125`", ",", "38.`"}], "}"}]],
                    Annotation[#, {30.974062581710125`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.917024228815322`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.917024228815322`", ",", "36.`"}], "}"}]],
                    Annotation[#, {29.917024228815322`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.673707744199447`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.673707744199447`", ",", "36.`"}], "}"}]],
                    Annotation[#, {27.673707744199447`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.78912399925975, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.78912399925975`", ",", "36.`"}], "}"}]],
                    Annotation[#, {30.78912399925975, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.355135961861038`, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"31.355135961861038`", ",", "34.`"}], "}"}]],
                    Annotation[#, {31.355135961861038`, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{36.040139301954966`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"36.040139301954966`", ",", "38.`"}], "}"}]],
                    Annotation[#, {36.040139301954966`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.800560393077134`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"35.800560393077134`", ",", "32.`"}], "}"}]],
                    Annotation[#, {35.800560393077134`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{35.39104211440617, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"35.39104211440617`", ",", "38.`"}], "}"}]],
                    Annotation[#, {35.39104211440617, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.741710815559035`, 25.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.741710815559035`", ",", "25.`"}], "}"}]],
                    Annotation[#, {20.741710815559035`, 25.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.51904208030336, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.51904208030336`", ",", "38.`"}], "}"}]],
                    Annotation[#, {20.51904208030336, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.584485571686557`, 26.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.584485571686557`", ",", "26.`"}], "}"}]],
                    Annotation[#, {26.584485571686557`, 26.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.48131095475502, 22.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.48131095475502`", ",", "22.`"}], "}"}]],
                    Annotation[#, {20.48131095475502, 22.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.441810709650095`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.441810709650095`", ",", "32.`"}], "}"}]],
                    Annotation[#, {26.441810709650095`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.750864188592537`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.750864188592537`", ",", "36.`"}], "}"}]],
                    Annotation[#, {26.750864188592537`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.745251189869855`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.745251189869855`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.745251189869855`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.46354348509667, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.46354348509667`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.46354348509667, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{30.379635822753638`, 44.}}]},
                    RowBox[{"{", 
                    RowBox[{"30.379635822753638`", ",", "44.`"}], "}"}]],
                    Annotation[#, {30.379635822753638`, 44.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.830326153103965`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"28.830326153103965`", ",", "32.`"}], "}"}]],
                    Annotation[#, {28.830326153103965`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{27.2904510423825, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"27.2904510423825`", ",", "28.`"}], "}"}]],
                    Annotation[#, {27.2904510423825, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.696770852420666`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.696770852420666`", ",", "31.`"}], "}"}]],
                    
                    Annotation[#, {25.696770852420666`, 31.}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                   TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxWlM0mEcAGDEkKYI02rYShtmLjsYpKIc6l8gUCowU1GblRU6zal44AJR
mlc1c642j5Wu1szakNak4bHMXKGQtZEz1wwzytJ5YPOYHdrxoff34dlDO5sX
r8DjcLhjf/37iT1ZmRHIwP7vKLFtndkLu3lLui7sh+NE3N/5DNhh8L2m4cBu
Osf9eiks9c+Z7FHBkxnlMsogTFpKNnGLmeiOrI/xduoh9PKb55FSEyyIOmnk
nw9GExtup+kJIegRZ1N9sxEW8ea2JJ0JRdMLF6w1OBbar+OuR4QBrrARdZlx
Yei6abMw3QnfwbNvTNwMRwcRU7fZeGx0D5lOE8/C3zanaWsbOOiWeY6nmMVF
Hx99GVj1CVa3exSFV/HQ+tINSV5IBLpSeLSgeBK2rca8WtRFogP1a4+c9Cj0
4hG59ZwNZuZdbj4RjqEXuvu8TXXw1MXhPYkf4PTeznUjKxrNUA1pS2th9j1j
Y9l72CxXq/jBfHRdGdWJVcIP/ByU9hE4BqteeR0kQNPGXIqZarjcmdSdaIOp
2opGo78Qja+0+2oKYCXJK8vVAu9w3yk1bz+Mjr2CW5MoYeslb0nYIFzt/Bl6
iipCmyf6vohyYUyQwsx+CnvSaAErZDH6tG5gPFoBzyZwD1oew/TcgX6GCc6v
iU1o6oJXu+WazF4Yv6vIQngG+8zoFfxhWKj1a+11wDUNbczdn2HrwwMvrk7B
MgdnLmUaThXLOWvzcL5X/duQ73DnPmr2rR/wqqB13fUXrFHpA0Y24OrxoQLl
phi0ZVnm9o4Ak8hjzRgRvo5N9VPc4dGUnIQSD9incOnrBAlOrVVrRGS4pc2F
YqDAfwBq/As9
                    "]]},
                    Annotation[#, "Charting`Private`Tag$62314#1"]& ]}, {}}},
                Axes->{False, False},
                AxesLabel->{None, None},
                AxesOrigin->{16.150000000000002`, 16.150000000000002`},
                DisplayFunction->Identity,
                Frame->{{True, False}, {True, False}},
                FrameLabel->{{
                   FormBox["\"actual value\"", TraditionalForm], None}, {
                   FormBox["\"predicted value\"", TraditionalForm], None}},
                FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
                GridLines->{Automatic, Automatic},
                GridLinesStyle->Directive[
                  GrayLevel[0.5, 0.5], 
                  AbsoluteThickness[1], 
                  AbsoluteDashing[{1, 2}]],
                ImageSize->250,
                
                Method->{
                 "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True,
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                
                PlotRange->{{16.150000000000002`, 48.1225}, {
                 16.150000000000002`, 48.1225}},
                PlotRangeClipping->True,
                PlotRangePadding->{{0, 0}, {0, 0}},
                Ticks->{Automatic, Automatic}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.822944021451518*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"5cdb8071-7cb5-4e25-ba24-bcf2d97228a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pm", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<ComparisonPlot\>\"", ",", "\"\<ResidualPlot\>\"", ",", 
     "\"\<ResidualHistogram\>\""}], "}"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.8141138669484663`*^9, 3.814113870750854*^9}, {
  3.8229440287732024`*^9, 3.822944036789919*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"9664b1f5-4307-4db1-9504-948dc0e635e2"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       GraphicsBox[{{{}, {{{
             Directive[
              PointSize[0.011000000000000001`], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[1.6]], 
             GeometricTransformationBox[
              InsetBox[
               BoxData[
                FormBox[
                 StyleBox[
                  GraphicsBox[{
                    AbsoluteThickness[1.], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CircleBox[{0, 0}, 
                    Offset[{1.8, 1.8}, {0., 0.}]]}], 
                  GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, StripOnInput -> False], 
                 TraditionalForm]], {0., 0.}], CompressedData["
1:eJxFU2tQVGUYXkCJkHBCKGBABlQuBhjsyln2dp5zdrk5KAM6KYgoEDukS2sX
GBQsSUcNIUFMhFFYUHAk4rJAjjogQU7gIhTY2DaZCEkIFGIaZoIts985vDPf
j2ee9/q87+eZoo1LsxIIBCmmZ2F6lqZnE3Ff4HNNCPWCjVFIsuk5fTGVRnmZ
yVwY+DlEXbSlaQgWDAzGJ0p1++ZZ3OpbMBpeF7wexM3LzfG1LAJ/7ah1uyMx
Y7UMFrajx/02UcRfBr9xOiYymcMS7Bo48Wz6jtScvxModNjj2tGmIFiFkUKv
iCPLlGZ/OyWe/1gRHfZcQTBwKi+j7yd71txvGQuNLsFw7ROJOV4gg8PQZPGw
O0X6kSBsqTrOolRsjo8WQxPXXTPoJCLzCqFa+7q8q1Nh9vdm8L5L4YwqR0L6
lSORmdZ8u11O4mlo8sYrDv1C6h1ksWz2m6bHWgXJBxRVB/hOVNLEPwLRad1H
PvcQE72leBlrbKkKBOlPha7t5+buLleS+uGw/dMp21hFQ7hgLWHwD+3y9Q8Q
m7GQxdarVqmHirl5FbCIELdF9TKkXjg8++zbmMuM2f8jFXZGWE/tribzjQE7
gg9kblAw/HzGp6u2HgsKNvcfD3g1enk47qdIfQp19is/TI8MJfMyiMs/u3pv
DUX0p9A/+fGVo1LSrxBI3vTgn+ibUoKlyE+7PKt+S0r8JcjeoqnRX+L0DYXV
kyd3M95ZT/JTcFxT+qn87OJ88wU3PGlXcn8FShScn15pYBnir8T8YYvCBmeO
Z3BKn1/VFMUSPYGAR82t6aZ74vY1WLPZSaMm92NkkRtiObeinOhhx6BoRtvQ
GUP+QzyDe1frr1f5ET2FDLR2ZUM37Mj9j8mxJmmfpP8/cr8HAao5IDYpRs7/
n0a3RMPQFySfEdBXXEo/3S7n9Upx1C5RO0jIvoDYkfcqc2xlRC8a9U0H3nVI
kpD7ksH9/FyCzjqE7EeBwsxtx/v9yX9Wh2LjZ8t1zYPBJL8Y5yqzbr0YERE+
BK0XHlbU3g7m9+F80jv890ci4i/C6PXd0qni9YQPwrHvN+bOp0n5/5VbEu9j
WM1hKUYDx+oMZzhs0i9tclQfJCOYRoh2xpeq4ng5Mo8OGGefhvLxU4LuFyuy
xASLsWev1eMMa46ncPLVP3zcgsi+BSwG0v96eCWV5fepKrHbH9DA8vUMLVvW
Jv5L9iFQ4jt1kUvXhJyPt1Fvc8uul/I4OKb3lSU3FTzWDbW/PZFA8/N4l/4W
uWopy+erSIrtzh7j+gGMOyy/ek3P8HzyxImu4XYRwaEo9XaeuXdYxPP1uxp/
1n3J3bcE7veNQVQOx4eAftaa5/qBhM//RsfX1eJODrPoN6zr6emgeP3Ku/17
67IW8bS78Id1ydw84dh8RswU3Zbx+cQewy8TNizuc/LvN0t26jm9afwPmXox
aw==
              "]]}}, {
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{19.731063895224935`, 23.9}}]}, 
              RowBox[{"{", 
                RowBox[{"19.731063895224935`", ",", "23.9`"}], "}"}]], 
             Annotation[#, {19.731063895224935`, 23.9}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.389275955043892`, 34.2}}]}, 
              RowBox[{"{", 
                RowBox[{"31.389275955043892`", ",", "34.2`"}], "}"}]], 
             Annotation[#, {31.389275955043892`, 34.2}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.246256308879456`, 34.5}}]}, 
              RowBox[{"{", 
                RowBox[{"31.246256308879456`", ",", "34.5`"}], "}"}]], 
             Annotation[#, {31.246256308879456`, 34.5}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{37.9880867711816, 31.8}}]}, 
              RowBox[{"{", 
                RowBox[{"37.9880867711816`", ",", "31.8`"}], "}"}]], 
             Annotation[#, {37.9880867711816, 31.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{29.9934523782323, 37.3}}]}, 
              RowBox[{"{", 
                RowBox[{"29.9934523782323`", ",", "37.3`"}], "}"}]], 
             Annotation[#, {29.9934523782323, 37.3}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.840280934902857`, 28.4}}]}, 
              RowBox[{"{", 
                RowBox[{"26.840280934902857`", ",", "28.4`"}], "}"}]], 
             Annotation[#, {26.840280934902857`, 28.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{23.30532144825884, 28.8}}]}, 
              RowBox[{"{", 
                RowBox[{"23.30532144825884`", ",", "28.8`"}], "}"}]], 
             Annotation[#, {23.30532144825884, 28.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{23.380009606458916`, 26.8}}]}, 
              RowBox[{"{", 
                RowBox[{"23.380009606458916`", ",", "26.8`"}], "}"}]], 
             Annotation[#, {23.380009606458916`, 26.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.84350541602123, 33.5}}]}, 
              RowBox[{"{", 
                RowBox[{"27.84350541602123`", ",", "33.5`"}], "}"}]], 
             Annotation[#, {27.84350541602123, 33.5}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.70993199457239, 41.5}}]}, 
              RowBox[{"{", 
                RowBox[{"30.70993199457239`", ",", "41.5`"}], "}"}]], 
             Annotation[#, {30.70993199457239, 41.5}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{38.090035335418875`, 38.1}}]}, 
              RowBox[{"{", 
                RowBox[{"38.090035335418875`", ",", "38.1`"}], "}"}]], 
             Annotation[#, {38.090035335418875`, 38.1}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.97761992337653, 32.1}}]}, 
              RowBox[{"{", 
                RowBox[{"30.97761992337653`", ",", "32.1`"}], "}"}]], 
             Annotation[#, {30.97761992337653, 32.1}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{36.115899613828475`, 37.2}}]}, 
              RowBox[{"{", 
                RowBox[{"36.115899613828475`", ",", "37.2`"}], "}"}]], 
             Annotation[#, {36.115899613828475`, 37.2}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.495053014398238`, 28.}}]}, 
              RowBox[{"{", 
                RowBox[{"26.495053014398238`", ",", "28.`"}], "}"}]], 
             Annotation[#, {26.495053014398238`, 28.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{23.11670791633066, 26.4}}]}, 
              RowBox[{"{", 
                RowBox[{"23.11670791633066`", ",", "26.4`"}], "}"}]], 
             Annotation[#, {23.11670791633066, 26.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{24.589863920123452`, 24.3}}]}, 
              RowBox[{"{", 
                RowBox[{"24.589863920123452`", ",", "24.3`"}], "}"}]], 
             Annotation[#, {24.589863920123452`, 24.3}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{20.08524547594645, 19.1}}]}, 
              RowBox[{"{", 
                RowBox[{"20.08524547594645`", ",", "19.1`"}], "}"}]], 
             Annotation[#, {20.08524547594645, 19.1}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.752963844958018`, 34.3}}]}, 
              RowBox[{"{", 
                RowBox[{"30.752963844958018`", ",", "34.3`"}], "}"}]], 
             Annotation[#, {30.752963844958018`, 34.3}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.48152074522789, 29.8}}]}, 
              RowBox[{"{", 
                RowBox[{"26.48152074522789`", ",", "29.8`"}], "}"}]], 
             Annotation[#, {26.48152074522789, 29.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{29.358420189296666`, 31.3}}]}, 
              RowBox[{"{", 
                RowBox[{"29.358420189296666`", ",", "31.3`"}], "}"}]], 
             Annotation[#, {29.358420189296666`, 31.3}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.85357087303548, 37.}}]}, 
              RowBox[{"{", 
                RowBox[{"26.85357087303548`", ",", "37.`"}], "}"}]], 
             Annotation[#, {26.85357087303548, 37.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.437296909970467`, 32.2}}]}, 
              RowBox[{"{", 
                RowBox[{"30.437296909970467`", ",", "32.2`"}], "}"}]], 
             Annotation[#, {30.437296909970467`, 32.2}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.624666701451645`, 46.6}}]}, 
              RowBox[{"{", 
                RowBox[{"31.624666701451645`", ",", "46.6`"}], "}"}]], 
             Annotation[#, {31.624666701451645`, 46.6}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{24.123192236618067`, 27.9}}]}, 
              RowBox[{"{", 
                RowBox[{"24.123192236618067`", ",", "27.9`"}], "}"}]], 
             Annotation[#, {24.123192236618067`, 27.9}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{32.364309769738604`, 40.8}}]}, 
              RowBox[{"{", 
                RowBox[{"32.364309769738604`", ",", "40.8`"}], "}"}]], 
             Annotation[#, {32.364309769738604`, 40.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{38.12396211799161, 44.3}}]}, 
              RowBox[{"{", 
                RowBox[{"38.12396211799161`", ",", "44.3`"}], "}"}]], 
             Annotation[#, {38.12396211799161, 44.3}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.632224564888965`, 43.4}}]}, 
              RowBox[{"{", 
                RowBox[{"31.632224564888965`", ",", "43.4`"}], "}"}]], 
             Annotation[#, {31.632224564888965`, 43.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{24.176455066125683`, 36.4}}]}, 
              RowBox[{"{", 
                RowBox[{"24.176455066125683`", ",", "36.4`"}], "}"}]], 
             Annotation[#, {24.176455066125683`, 36.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.568411053094987`, 30.}}]}, 
              RowBox[{"{", 
                RowBox[{"26.568411053094987`", ",", "30.`"}], "}"}]], 
             Annotation[#, {26.568411053094987`, 30.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{35.57256188629072, 44.6}}]}, 
              RowBox[{"{", 
                RowBox[{"35.57256188629072`", ",", "44.6`"}], "}"}]], 
             Annotation[#, {35.57256188629072, 44.6}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{35.4316927263501, 40.9}}]}, 
              RowBox[{"{", 
                RowBox[{"35.4316927263501`", ",", "40.9`"}], "}"}]], 
             Annotation[#, {35.4316927263501, 40.9}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.634443999798687`, 33.8}}]}, 
              RowBox[{"{", 
                RowBox[{"30.634443999798687`", ",", "33.8`"}], "}"}]], 
             Annotation[#, {30.634443999798687`, 33.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{34.4866473065674, 29.8}}]}, 
              RowBox[{"{", 
                RowBox[{"34.4866473065674`", ",", "29.8`"}], "}"}]], 
             Annotation[#, {34.4866473065674, 29.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{18.193486639289265`, 32.7}}]}, 
              RowBox[{"{", 
                RowBox[{"18.193486639289265`", ",", "32.7`"}], "}"}]], 
             Annotation[#, {18.193486639289265`, 32.7}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{23.476869531600762`, 23.7}}]}, 
              RowBox[{"{", 
                RowBox[{"23.476869531600762`", ",", "23.7`"}], "}"}]], 
             Annotation[#, {23.476869531600762`, 23.7}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{25.28284371599026, 35.}}]}, 
              RowBox[{"{", 
                RowBox[{"25.28284371599026`", ",", "35.`"}], "}"}]], 
             Annotation[#, {25.28284371599026, 35.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{23.646242416589594`, 23.6}}]}, 
              RowBox[{"{", 
                RowBox[{"23.646242416589594`", ",", "23.6`"}], "}"}]], 
             Annotation[#, {23.646242416589594`, 23.6}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.23253974060554, 32.4}}]}, 
              RowBox[{"{", 
                RowBox[{"31.23253974060554`", ",", "32.4`"}], "}"}]], 
             Annotation[#, {31.23253974060554, 32.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.790236884100867`, 27.2}}]}, 
              RowBox[{"{", 
                RowBox[{"27.790236884100867`", ",", "27.2`"}], "}"}]], 
             Annotation[#, {27.790236884100867`, 27.2}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.16953991153199, 26.6}}]}, 
              RowBox[{"{", 
                RowBox[{"27.16953991153199`", ",", "26.6`"}], "}"}]], 
             Annotation[#, {27.16953991153199, 26.6}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.662882174442046`, 25.8}}]}, 
              RowBox[{"{", 
                RowBox[{"26.662882174442046`", ",", "25.8`"}], "}"}]], 
             Annotation[#, {26.662882174442046`, 25.8}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{21.337613937666912`, 23.5}}]}, 
              RowBox[{"{", 
                RowBox[{"21.337613937666912`", ",", "23.5`"}], "}"}]], 
             Annotation[#, {21.337613937666912`, 23.5}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.61031339111385, 30.}}]}, 
              RowBox[{"{", 
                RowBox[{"26.61031339111385`", ",", "30.`"}], "}"}]], 
             Annotation[#, {26.61031339111385, 30.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{36.20505163332017, 39.1}}]}, 
              RowBox[{"{", 
                RowBox[{"36.20505163332017`", ",", "39.1`"}], "}"}]], 
             Annotation[#, {36.20505163332017, 39.1}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{34.5218237562286, 39.}}]}, 
              RowBox[{"{", 
                RowBox[{"34.5218237562286`", ",", "39.`"}], "}"}]], 
             Annotation[#, {34.5218237562286, 39.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{36.19282686781115, 35.1}}]}, 
              RowBox[{"{", 
                RowBox[{"36.19282686781115`", ",", "35.1`"}], "}"}]], 
             Annotation[#, {36.19282686781115, 35.1}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{36.57570285103171, 32.3}}]}, 
              RowBox[{"{", 
                RowBox[{"36.57570285103171`", ",", "32.3`"}], "}"}]], 
             Annotation[#, {36.57570285103171, 32.3}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{38.089132868656044`, 37.}}]}, 
              RowBox[{"{", 
                RowBox[{"38.089132868656044`", ",", "37.`"}], "}"}]], 
             Annotation[#, {38.089132868656044`, 37.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{36.80017344078409, 37.7}}]}, 
              RowBox[{"{", 
                RowBox[{"36.80017344078409`", ",", "37.7`"}], "}"}]], 
             Annotation[#, {36.80017344078409, 37.7}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{35.20373499496506, 34.1}}]}, 
              RowBox[{"{", 
                RowBox[{"35.20373499496506`", ",", "34.1`"}], "}"}]], 
             Annotation[#, {35.20373499496506, 34.1}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.311533834772092`, 34.7}}]}, 
              RowBox[{"{", 
                RowBox[{"31.311533834772092`", ",", "34.7`"}], "}"}]], 
             Annotation[#, {31.311533834772092`, 34.7}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{34.32524867948609, 34.4}}]}, 
              RowBox[{"{", 
                RowBox[{"34.32524867948609`", ",", "34.4`"}], "}"}]], 
             Annotation[#, {34.32524867948609, 34.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{29.049893593659757`, 29.9}}]}, 
              RowBox[{"{", 
                RowBox[{"29.049893593659757`", ",", "29.9`"}], "}"}]], 
             Annotation[#, {29.049893593659757`, 29.9}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.983615545874404`, 33.}}]}, 
              RowBox[{"{", 
                RowBox[{"30.983615545874404`", ",", "33.`"}], "}"}]], 
             Annotation[#, {30.983615545874404`, 33.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{29.310032914786657`, 34.5}}]}, 
              RowBox[{"{", 
                RowBox[{"29.310032914786657`", ",", "34.5`"}], "}"}]], 
             Annotation[#, {29.310032914786657`, 34.5}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.557919225681584`, 33.7}}]}, 
              RowBox[{"{", 
                RowBox[{"31.557919225681584`", ",", "33.7`"}], "}"}]], 
             Annotation[#, {31.557919225681584`, 33.7}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{29.740576306735143`, 32.4}}]}, 
              RowBox[{"{", 
                RowBox[{"29.740576306735143`", ",", "32.4`"}], "}"}]], 
             Annotation[#, {29.740576306735143`, 32.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.071869160765694`, 32.9}}]}, 
              RowBox[{"{", 
                RowBox[{"26.071869160765694`", ",", "32.9`"}], "}"}]], 
             Annotation[#, {26.071869160765694`, 32.9}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{28.040948832846258`, 31.6}}]}, 
              RowBox[{"{", 
                RowBox[{"28.040948832846258`", ",", "31.6`"}], "}"}]], 
             Annotation[#, {28.040948832846258`, 31.6}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.367468147932115`, 28.1}}]}, 
              RowBox[{"{", 
                RowBox[{"26.367468147932115`", ",", "28.1`"}], "}"}]], 
             Annotation[#, {26.367468147932115`, 28.1}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{22.025884329722533`, 30.7}}]}, 
              RowBox[{"{", 
                RowBox[{"22.025884329722533`", ",", "30.7`"}], "}"}]], 
             Annotation[#, {22.025884329722533`, 30.7}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{19.175026616188507`, 25.4}}]}, 
              RowBox[{"{", 
                RowBox[{"19.175026616188507`", ",", "25.4`"}], "}"}]], 
             Annotation[#, {19.175026616188507`, 25.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{18.823022846018194`, 24.2}}]}, 
              RowBox[{"{", 
                RowBox[{"18.823022846018194`", ",", "24.2`"}], "}"}]], 
             Annotation[#, {18.823022846018194`, 24.2}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{20.886669961415112`, 22.4}}]}, 
              RowBox[{"{", 
                RowBox[{"20.886669961415112`", ",", "22.4`"}], "}"}]], 
             Annotation[#, {20.886669961415112`, 22.4}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{18.830667430917586`, 26.6}}]}, 
              RowBox[{"{", 
                RowBox[{"18.830667430917586`", ",", "26.6`"}], "}"}]], 
             Annotation[#, {18.830667430917586`, 26.6}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{20.94098318521182, 20.2}}]}, 
              RowBox[{"{", 
                RowBox[{"20.94098318521182`", ",", "20.2`"}], "}"}]], 
             Annotation[#, {20.94098318521182, 20.2}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{21.57001086574736, 17.6}}]}, 
              RowBox[{"{", 
                RowBox[{"21.57001086574736`", ",", "17.6`"}], "}"}]], 
             Annotation[#, {21.57001086574736, 17.6}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.39841439150726, 28.}}]}, 
              RowBox[{"{", 
                RowBox[{"27.39841439150726`", ",", "28.`"}], "}"}]], 
             Annotation[#, {27.39841439150726, 28.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.143724879616897`, 27.}}]}, 
              RowBox[{"{", 
                RowBox[{"27.143724879616897`", ",", "27.`"}], "}"}]], 
             Annotation[#, {27.143724879616897`, 27.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.59685772056299, 34.}}]}, 
              RowBox[{"{", 
                RowBox[{"27.59685772056299`", ",", "34.`"}], "}"}]], 
             Annotation[#, {27.59685772056299, 34.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{28.19413589951506, 31.}}]}, 
              RowBox[{"{", 
                RowBox[{"28.19413589951506`", ",", "31.`"}], "}"}]], 
             Annotation[#, {28.19413589951506, 31.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.62974792379756, 29.}}]}, 
              RowBox[{"{", 
                RowBox[{"27.62974792379756`", ",", "29.`"}], "}"}]], 
             Annotation[#, {27.62974792379756, 29.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{25.960813153425494`, 27.}}]}, 
              RowBox[{"{", 
                RowBox[{"25.960813153425494`", ",", "27.`"}], "}"}]], 
             Annotation[#, {25.960813153425494`, 27.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{24.461242482765485`, 24.}}]}, 
              RowBox[{"{", 
                RowBox[{"24.461242482765485`", ",", "24.`"}], "}"}]], 
             Annotation[#, {24.461242482765485`, 24.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{25.025115133132584`, 23.}}]}, 
              RowBox[{"{", 
                RowBox[{"25.025115133132584`", ",", "23.`"}], "}"}]], 
             Annotation[#, {25.025115133132584`, 23.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{34.38367174893496, 36.}}]}, 
              RowBox[{"{", 
                RowBox[{"34.38367174893496`", ",", "36.`"}], "}"}]], 
             Annotation[#, {34.38367174893496, 36.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{36.77911113873562, 37.}}]}, 
              RowBox[{"{", 
                RowBox[{"36.77911113873562`", ",", "37.`"}], "}"}]], 
             Annotation[#, {36.77911113873562, 37.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{37.36076284040476, 31.}}]}, 
              RowBox[{"{", 
                RowBox[{"37.36076284040476`", ",", "31.`"}], "}"}]], 
             Annotation[#, {37.36076284040476, 31.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.974062581710125`, 38.}}]}, 
              RowBox[{"{", 
                RowBox[{"30.974062581710125`", ",", "38.`"}], "}"}]], 
             Annotation[#, {30.974062581710125`, 38.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{29.917024228815322`, 36.}}]}, 
              RowBox[{"{", 
                RowBox[{"29.917024228815322`", ",", "36.`"}], "}"}]], 
             Annotation[#, {29.917024228815322`, 36.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.673707744199447`, 36.}}]}, 
              RowBox[{"{", 
                RowBox[{"27.673707744199447`", ",", "36.`"}], "}"}]], 
             Annotation[#, {27.673707744199447`, 36.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.78912399925975, 36.}}]}, 
              RowBox[{"{", 
                RowBox[{"30.78912399925975`", ",", "36.`"}], "}"}]], 
             Annotation[#, {30.78912399925975, 36.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{31.355135961861038`, 34.}}]}, 
              RowBox[{"{", 
                RowBox[{"31.355135961861038`", ",", "34.`"}], "}"}]], 
             Annotation[#, {31.355135961861038`, 34.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{36.040139301954966`, 38.}}]}, 
              RowBox[{"{", 
                RowBox[{"36.040139301954966`", ",", "38.`"}], "}"}]], 
             Annotation[#, {36.040139301954966`, 38.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{35.800560393077134`, 32.}}]}, 
              RowBox[{"{", 
                RowBox[{"35.800560393077134`", ",", "32.`"}], "}"}]], 
             Annotation[#, {35.800560393077134`, 32.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{35.39104211440617, 38.}}]}, 
              RowBox[{"{", 
                RowBox[{"35.39104211440617`", ",", "38.`"}], "}"}]], 
             Annotation[#, {35.39104211440617, 38.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{20.741710815559035`, 25.}}]}, 
              RowBox[{"{", 
                RowBox[{"20.741710815559035`", ",", "25.`"}], "}"}]], 
             Annotation[#, {20.741710815559035`, 25.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{20.51904208030336, 38.}}]}, 
              RowBox[{"{", 
                RowBox[{"20.51904208030336`", ",", "38.`"}], "}"}]], 
             Annotation[#, {20.51904208030336, 38.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.584485571686557`, 26.}}]}, 
              RowBox[{"{", 
                RowBox[{"26.584485571686557`", ",", "26.`"}], "}"}]], 
             Annotation[#, {26.584485571686557`, 26.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{20.48131095475502, 22.}}]}, 
              RowBox[{"{", 
                RowBox[{"20.48131095475502`", ",", "22.`"}], "}"}]], 
             Annotation[#, {20.48131095475502, 22.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.441810709650095`, 32.}}]}, 
              RowBox[{"{", 
                RowBox[{"26.441810709650095`", ",", "32.`"}], "}"}]], 
             Annotation[#, {26.441810709650095`, 32.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{26.750864188592537`, 36.}}]}, 
              RowBox[{"{", 
                RowBox[{"26.750864188592537`", ",", "36.`"}], "}"}]], 
             Annotation[#, {26.750864188592537`, 36.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{23.745251189869855`, 27.}}]}, 
              RowBox[{"{", 
                RowBox[{"23.745251189869855`", ",", "27.`"}], "}"}]], 
             Annotation[#, {23.745251189869855`, 27.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{23.46354348509667, 27.}}]}, 
              RowBox[{"{", 
                RowBox[{"23.46354348509667`", ",", "27.`"}], "}"}]], 
             Annotation[#, {23.46354348509667, 27.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{30.379635822753638`, 44.}}]}, 
              RowBox[{"{", 
                RowBox[{"30.379635822753638`", ",", "44.`"}], "}"}]], 
             Annotation[#, {30.379635822753638`, 44.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{28.830326153103965`, 32.}}]}, 
              RowBox[{"{", 
                RowBox[{"28.830326153103965`", ",", "32.`"}], "}"}]], 
             Annotation[#, {28.830326153103965`, 32.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{27.2904510423825, 28.}}]}, 
              RowBox[{"{", 
                RowBox[{"27.2904510423825`", ",", "28.`"}], "}"}]], 
             Annotation[#, {27.2904510423825, 28.}, "Tooltip"]& ], 
            TagBox[
             TooltipBox[{
               Opacity[0.], 
               PointBox[{{25.696770852420666`, 31.}}]}, 
              RowBox[{"{", 
                RowBox[{"25.696770852420666`", ",", "31.`"}], "}"}]], 
             Annotation[#, {25.696770852420666`, 31.}, 
              "Tooltip"]& ]}}, {{}, {}}}, {{{{}, {}, 
            TagBox[{
              Directive[
               GrayLevel[0.2], 
               Opacity[0.5], 
               AbsoluteThickness[1.], 
               AbsoluteDashing[{2, 4}]], 
              LineBox[CompressedData["
1:eJxFxWlM0mEcAGDEkKYI02rYShtmLjsYpKIc6l8gUCowU1GblRU6zal44AJR
mlc1c642j5Wu1szakNak4bHMXKGQtZEz1wwzytJ5YPOYHdrxoff34dlDO5sX
r8DjcLhjf/37iT1ZmRHIwP7vKLFtndkLu3lLui7sh+NE3N/5DNhh8L2m4cBu
Osf9eiks9c+Z7FHBkxnlMsogTFpKNnGLmeiOrI/xduoh9PKb55FSEyyIOmnk
nw9GExtup+kJIegRZ1N9sxEW8ea2JJ0JRdMLF6w1OBbar+OuR4QBrrARdZlx
Yei6abMw3QnfwbNvTNwMRwcRU7fZeGx0D5lOE8/C3zanaWsbOOiWeY6nmMVF
Hx99GVj1CVa3exSFV/HQ+tINSV5IBLpSeLSgeBK2rca8WtRFogP1a4+c9Cj0
4hG59ZwNZuZdbj4RjqEXuvu8TXXw1MXhPYkf4PTeznUjKxrNUA1pS2th9j1j
Y9l72CxXq/jBfHRdGdWJVcIP/ByU9hE4BqteeR0kQNPGXIqZarjcmdSdaIOp
2opGo78Qja+0+2oKYCXJK8vVAu9w3yk1bz+Mjr2CW5MoYeslb0nYIFzt/Bl6
iipCmyf6vohyYUyQwsx+CnvSaAErZDH6tG5gPFoBzyZwD1oew/TcgX6GCc6v
iU1o6oJXu+WazF4Yv6vIQngG+8zoFfxhWKj1a+11wDUNbczdn2HrwwMvrk7B
MgdnLmUaThXLOWvzcL5X/duQ73DnPmr2rR/wqqB13fUXrFHpA0Y24OrxoQLl
phi0ZVnm9o4Ak8hjzRgRvo5N9VPc4dGUnIQSD9incOnrBAlOrVVrRGS4pc2F
YqDAfwBq/As9
               "]]}, 
             Annotation[#, "Charting`Private`Tag$63522#1"]& ]}}, {}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         Axes -> {False, False}, AxesLabel -> {None, None}, 
         AxesOrigin -> {16.150000000000002`, 16.150000000000002`}, 
         DisplayFunction :> Identity, Frame -> {{True, False}, {True, False}},
          FrameLabel -> {{
            FormBox["\"actual value\"", TraditionalForm], None}, {
            FormBox["\"predicted value\"", TraditionalForm], None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.5], 
           AbsoluteThickness[1], 
           AbsoluteDashing[{1, 2}]], ImageSize -> 300, 
         Method -> {
          "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, 
         PlotRange -> {{16.150000000000002`, 48.1225}, {16.150000000000002`, 
          48.1225}}, PlotRangeClipping -> True, 
         PlotRangePadding -> {{0, 0}, {0, 0}}, 
         Ticks -> {Automatic, Automatic}}], 
       FormBox[
        TagBox[
         GridBox[{{
            FormBox[
             
             TemplateBox[{"\"predictions\""}, "PointLegend", 
              DisplayFunction -> (StyleBox[
                StyleBox[
                 PaneBox[
                  TagBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    AbsoluteThickness[1.], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CircleBox[{0, 0}, 
                    Offset[{1.8, 1.8}, {0., 0.}]]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}],
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                  ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                  "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
                False]& ), 
              InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                    "}"}], ",", 
                   RowBox[{"{", #, "}"}], ",", 
                   RowBox[{"LegendMarkers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    GraphicsBox[{
                    AbsoluteThickness[1.], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CircleBox[{0, 0}, 
                    Offset[{1.8, 1.8}, {0., 0.}]]}], ",", "Automatic"}], 
                    "}"}], "}"}]}], ",", 
                   RowBox[{"Joined", "\[Rule]", 
                    RowBox[{"{", "False", "}"}]}], ",", 
                   RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                   RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], 
                 "]"}]& ), Editable -> True], TraditionalForm]}, {
            FormBox[
             
             TemplateBox[{"\"perfect predictions\""}, "LineLegend", 
              DisplayFunction -> (StyleBox[
                StyleBox[
                 PaneBox[
                  TagBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    GrayLevel[0.2], 
                    Opacity[0.5], 
                    AbsoluteThickness[1.], 
                    AbsoluteDashing[{2, 4}]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    GrayLevel[0.2], 
                    Opacity[0.5], 
                    AbsoluteThickness[1.], 
                    AbsoluteDashing[{2, 4}]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}],
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                  ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                  "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
                False]& ), 
              InterpretationFunction :> (RowBox[{"LineLegend", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.13333333333333336`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.2`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.2], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteDashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4"}], "}"}], "]"}]}], "]"}], "}"}], 
                   ",", 
                   RowBox[{"{", #, "}"}], ",", 
                   RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
                   RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                   RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], 
                 "]"}]& ), Editable -> True], TraditionalForm]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]},
    {
     GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1: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
        "], {{{}, {}, {}, 
          {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3], 
           LineBox[{102, 4}], LineBox[{114, 16}], LineBox[{115, 17}], 
           LineBox[{131, 33}], LineBox[{135, 37}], LineBox[{137, 39}], 
           LineBox[{138, 40}], LineBox[{139, 41}], LineBox[{144, 46}], 
           LineBox[{145, 47}], LineBox[{146, 48}], LineBox[{148, 50}], 
           LineBox[{164, 66}], LineBox[{165, 67}], LineBox[{167, 69}], 
           LineBox[{172, 74}], LineBox[{173, 75}], LineBox[{176, 78}], 
           LineBox[{183, 85}], LineBox[{187, 89}]}, 
          {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3], 
           LineBox[{99, 1}], LineBox[{100, 2}], LineBox[{101, 3}], 
           LineBox[{103, 5}], LineBox[{104, 6}], LineBox[{105, 7}], 
           LineBox[{106, 8}], LineBox[{107, 9}], LineBox[{108, 10}], 
           LineBox[{109, 11}], LineBox[{110, 12}], LineBox[{111, 13}], 
           LineBox[{112, 14}], LineBox[{113, 15}], LineBox[{116, 18}], 
           LineBox[{117, 19}], LineBox[{118, 20}], LineBox[{119, 21}], 
           LineBox[{120, 22}], LineBox[{121, 23}], LineBox[{122, 24}], 
           LineBox[{123, 25}], LineBox[{124, 26}], LineBox[{125, 27}], 
           LineBox[{126, 28}], LineBox[{127, 29}], LineBox[{128, 30}], 
           LineBox[{129, 31}], LineBox[{130, 32}], LineBox[{132, 34}], 
           LineBox[{133, 35}], LineBox[{134, 36}], LineBox[{136, 38}], 
           LineBox[{140, 42}], LineBox[{141, 43}], LineBox[{142, 44}], 
           LineBox[{143, 45}], LineBox[{147, 49}], LineBox[{149, 51}], 
           LineBox[{150, 52}], LineBox[{151, 53}], LineBox[{152, 54}], 
           LineBox[{153, 55}], LineBox[{154, 56}], LineBox[{155, 57}], 
           LineBox[{156, 58}], LineBox[{157, 59}], LineBox[{158, 60}], 
           LineBox[{159, 61}], LineBox[{160, 62}], LineBox[{161, 63}], 
           LineBox[{162, 64}], LineBox[{163, 65}], LineBox[{166, 68}], 
           LineBox[{168, 70}], LineBox[{169, 71}], LineBox[{170, 72}], 
           LineBox[{171, 73}], LineBox[{174, 76}], LineBox[{175, 77}], 
           LineBox[{177, 79}], LineBox[{178, 80}], LineBox[{179, 81}], 
           LineBox[{180, 82}], LineBox[{181, 83}], LineBox[{182, 84}], 
           LineBox[{184, 86}], LineBox[{185, 87}], LineBox[{186, 88}], 
           LineBox[{188, 90}], LineBox[{189, 91}], LineBox[{190, 92}], 
           LineBox[{191, 93}], LineBox[{192, 94}], LineBox[{193, 95}], 
           LineBox[{194, 96}], LineBox[{195, 97}], LineBox[{196, 98}]}}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJwNz2ciggEAANAvexXKJmnoQB2hA+iU9t4S2Tt7Ruj9eAd4yXwhNxUKgiDP
NDPMMsc8CyyyxDIrrLLGOhtsssU2O+yyR5F9ShxwSJkjjjnhlDPOueCSK665
4ZY7KtzzwCNPPPPCK2+888EnX1T55ocav/zxTyAdooFGmmimhVbaaKeDTroI
E6GbHnqJEqOPfgYYZIhhRhhljDjjJJggSYo0GSbJUgcLpzk4
           "]]}}], {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, False},
      AxesLabel->{None, None},
      AxesOrigin->{17.778268400149635`, 0.},
      DisplayFunction->Identity,
      Frame->{{True, False}, {True, False}},
      FrameLabel->{{
         FormBox["\"actual value - predicted value\"", TraditionalForm], 
         None}, {
         FormBox["\"predicted value\"", TraditionalForm], None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 244.04661961723704`},
      Method->{
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}},
      PlotRange->{{17.778268400149635`, 
       38.12396211799161}, {-18.355005815681473`, 18.355005815681473`}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {0, 0}},
      Ticks->{Automatic, Automatic}]},
    {
     GraphicsBox[{
       {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
        EdgeForm[{Opacity[0.595], Thickness[Small]}], {}, 
        {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
         EdgeForm[{Opacity[0.595], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{-8., 0}, {-6., 2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{42.81360973029966, 71.01386104217549}, {
               73.56922546121136, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{-6., 0}, {-4., 2.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{70.46386104217548, 98.66411235405131}, {
               73.56922546121136, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{-4., 0}, {-2., 3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{98.11411235405131, 126.31436366592713`}, {
               64.01095464660706, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{-2., 0}, {0., 13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{125.76436366592714`, 
               153.96461497780297`}, {-31.57175349943597, 93.23576709041996}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 13]& ,
            TagBoxNote->"13"],
           StyleBox["13", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[13, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0., 0}, {2., 22.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{153.41461497780296`, 
               181.6148662896788}, {-117.5961908308747, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 22]& ,
            TagBoxNote->"22"],
           StyleBox["22", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[22, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{2., 0}, {4., 23.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{181.06486628967878`, 
               209.2651176015546}, {-127.154461645479, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 23]& ,
            TagBoxNote->"23"],
           StyleBox["23", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[23, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{4., 0}, {6., 11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{208.7151176015546, 
               236.91536891343046`}, {-12.455211870227359`, 
               93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 11]& ,
            TagBoxNote->"11"],
           StyleBox["11", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[11, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{6., 0}, {8., 8.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{236.36536891343044`, 264.56562022530625`}, {
               16.219600573585552`, 93.23576709041998}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 8]& ,
            TagBoxNote->"8"],
           StyleBox["8", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[8, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{8., 0}, {10., 6.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{264.0156202253063, 292.2158715371822}, {
               35.33614220279415, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 6]& ,
            TagBoxNote->"6"],
           StyleBox["6", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[6, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{10., 0}, {12., 3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{291.66587153718206`, 319.86612284905794`}, {
               64.01095464660706, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 3]& ,
            TagBoxNote->"3"],
           StyleBox["3", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[3, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{12., 0}, {14., 2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{319.31612284905793`, 347.5163741609338}, {
               73.56922546121136, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{14., 0}, {16., 2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{346.9663741609337, 375.1666254728096}, {
               73.56922546121136, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 2]& ,
            TagBoxNote->"2"],
           StyleBox["2", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[2, {}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{16., 0}, {18., 1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{374.6166254728096, 402.81687678468546`}, {
               83.12749627581567, 93.23576709041997}}],
             "DelayedMouseEffectStyle"],
            StatusArea[#, 1]& ,
            TagBoxNote->"1"],
           StyleBox["1", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[1, {}], 
           "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{-8.52, 0},
      Frame->{{True, False}, {True, False}},
      FrameLabel->{{
         FormBox["\"count\"", TraditionalForm], None}, {
         FormBox["\"actual value - predicted value\"", TraditionalForm], 
         None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 245.96433371856358`},
      PlotRange->{{-8., 18.}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {None, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.822944025911148*^9, 3.822944037654952*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"67f02164-ede7-4dc0-8e9a-955b4c73e368"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5176\:4ed6\:8f93\:5165\:6570\:636e\:7c7b\:578b", "Subsection",
 CellChangeTimes->{{3.8235087367149444`*^9, 
  3.8235087619031105`*^9}},ExpressionUUID->"9250040c-7d8e-46f8-b533-\
a292d9a71d3c"],

Cell["\:8bad\:7ec3\:9884\:6d4b\:5668\:9884\:6d4b\:56fe\:50cf\:7684\:7740\:8272\
\:9762\:79ef\:ff1a", "Text",
 CellChangeTimes->{
  3.8235087994251537`*^9},ExpressionUUID->"682d41b3-9bfa-4673-8e73-\
59e42c331fca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzDwyQZ9qfv3+BenV0dO7fvw80EySCZNSx48c37tu36cABYtDmAwe2
HDy4cefO2zdvAvVqa2ujmfnv3z8g2dLcvD8//2hxMTHocHHxsfLyWampq7ds
AerV1NTEaubkiRP/19f/b24mFrW1nS8rW7tnDx4zJ/T1fa+p+dvQQAz6DSSb
m48UF6/dtQu/mT9rav43NBCDgMYCnXp01MxRM0fNxDDzW03Nn4YGYtAvINnc
fJiQmRP7+//X1v5vbCQWtbScKylZu3s3HjM7OzomlZZOq6oiEs2sra3Pydmy
fTtWMyHg0+fPLz9+fEUKev3hw+dPn4B6cZXz5IHfv39T10xgoAFrNKq7E81M
IPfbt28/KQOfP38GkpA6TkJCgkIXIgNjY2Ng/Q5siuhQAwBdqK+vDzTt+fPn
wKbIfeqBly9fAuMLAPAQtVI=
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "40.2`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJzNlr1v2kAYxhEsHSvxIYYunXFhYOnasWuq/gGJSqMuVDGQQj5sjIeIDNki
ZUyGDFmiyFIyZMiWsUJKq5JQsK0KYmwwoqF8276+tpOItkoaY6vqI/vku3v9
83N3r873dO79zFu3y+VKPIJiZvbDCxyfzbx6DJXX8cS7+Xjszct4MjYfw5/P
eaDxyfWtP7vdbp/P5/V6ffYEhEAg4PF4JEny+/3IOYXDYZZl4ROKogyHQ+Vu
jUcjuO4JAPV6PSgxDOM4DpjAh+rfTWi67uoEV1A+hGlCyoVC5exsdNPkCJMr
lT5T1Pn2do3nVds+b40Vd3evkskqSRb39hqXl+qvvZaZhsR6/dvqKiKIQSbD
EcQ5w8j1+nhiOFMwwVhxf7+fTqNcDmWz3VSqlMuVj49bkmS+ORwMrDJBTUGo
EASiKC2b1ckk2V5Y+JrPcycnsiwPjBgsFLLEHCtKiWF+JJOIpgGrk2karaw0
U6nKxgZ/egoxYQwzc/5BTGMtmrVaGTgkCW6RgdXAME3LicSngwMIeGY950eq
Wjk8vLqxCliAd9Ppi52ddreLrM+nmatStcqurcGQ9SmlKHV5uZzPS6KoquoU
TJML+QNW24uL+mQSRG1piS0UoGcw1brrSMOMJAj8+jpY/Z7JfGEYM/+nyM9J
LISWjo5aOH6xtdXp95F9JsyqpsmNxsfNTYnnb9vtMK/JCLVaLWTwnWL+KUeY
v+3P/63Pf8+EKvz1hvbU6XSgDBl7XTAYtOlwUtFoFPY6OIpgTggcRiIRoAmC
AEcRzjmJogg59hOzA7zn
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "8.9`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztls9P2mAYxwlcdlz4FQ677AyBA5ddd9zVZX+AZszsopFSECsRSogxRhO9
GG5iTDyqB2M8mCxejHoh0QAOR9mgBToYQ352tG/3UJQgFmTR0+I37ZP3bZ98
3u/TPv3xemxy5JNSoVBgLyCMjLre2u2j7vcvYfJhAvs8PmH7+G7CYRu32d+M
qeDgq5u9NVYqlVqtVqPRaPsLzuog6vUaadIvR6/Xq1QqlmV1Op04nNhIpHh+
PjjHbDYnEglYgud5juN4OTWbTcTz9Wbz8vCQstsTPh+dSiFBgOM9mbVaDaLJ
ZKIoCpjAh+n9RRFCEFvA/X1melr0+epu9+XGRp3jREFAd5PBFcTBzDawynGx
7e2fLpfo9QokKc7NZQmCOj1Ftwn/wJTyr6vV6NbWL6cTHCKfD7AiSQoEEV9e
LrCseBc7jM9iqRRdXy8BkCRvgF4vguj3lzDs684ON3zt0tKFfD66tlbF8Y5D
1AbC2O+HjZmdpS8uWj5vrfZlCgIElqajKyv1DhAuo8RpAT0e3uWCO1XE8XAw
2OC4B3xKQIaiYouLf2ZmxECgxQFvBMFh2LXTyXo8dCDwY3WV2tyMHxykw2Gh
64rdZ0LDQQ3peDy5sCACkCCqU1N5HE95vcmlpWQolNzb+35ywlxd/a5UGqKM
upnwTMG4iVD67CyC44zD8W1+Ph4MJnd3U8fHmVgsn81WoMV7+gz6U6pLlqlW
q2GcoqgvoRB9dJSNxQoMUy6XwQyS4/S05YDaG7Vao14XevLaHEmynMFMoVNI
uz2GgDzIlH3en5nPzP+VCVP46nGPE7wiIBqNRmAaDIZHOuyW1WqF7zv8ipie
QuDQYrEALZPJwK8I9XTK5XLwEvsLsLCr/A==
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "11.`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztlk1L40AYx0t72eNCX+hhL55b2kMve93jXpX9AIpV9hKl0SYVsWo9eRY/
gJeCoigexIA3vZVdxIWIkcYubWMb3ZYGk06dTHzarEF3PUgmePIPGfLM8Pzm
Py/JzNDY1PCE3+fzsR+gGB7lvmQyo7mRjxB8Y9jvk0x6/Cszk55MZz6PBaDy
09+n/+73+0OhUDAYDNEJCJFIJBAINJvNcDhseadEIlEul6ELjDFCCNNJ13Uo
4/G4LMvABD6ElA7BFZTvzBeZEKq1WltR1Gq1cXVVlyTj7o6SiXq90va2yPP1
+fn63JwyPX22vt69v7cIcckcJBrd7kWxqPG8tbxsFQq32ax0fEzj08Zqui5u
bv7JZq2lJZLPX66s3KgqNJGX3L5qjQaJumGIW1t97OKinsudF4vIsqn/Yl+5
7naigZC4s3MzO2stLCj5vHx62m8yTXdMB9vFWNzbu+V5zHHS2lq703GaXDCd
SUCmKe7vtziuzXGXgmBCJQ3TycL4/OBAZdlKoXBdqZDnVt0wHyfhQhB+M4y0
saE/364uv83BeAErHx2JLFstlczHvtwz7cEC1jRlQfi5utpptWh9PsH2CBEP
D3/s7jqbivK/ZC8NJuTXyYlSq3nC/J/vLdPRGzAhhFMP0UnTNChjsRgwo9Eo
pcOnSqVScL7DVSTuhcBhMpkEmqIocBWRvVOj0YCd8AD5PteR
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "4.9`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztVrFOwlAUJe3iaEIhDC7ONDCwuDq6YvwAiNi4YNJnERMNTV/obOIXaOIu
xNERBwcS20kdaAIDgZXQpKHt87QhYEIcoAxKPDm9uffc5vQuffftFs/yJ1ws
FiNbCPnCxb4sFy4Pt1EclcmpVC4dH5TPS1JJ3ivyEHemT5BzHCcIQjweF6IB
Dslkkuf54XCYSCTY+pDJZDqdDj7huq7jOG402LaNKIqiZVnwhD/KiBNiKsRN
8vR/wK+a0x6PPy3ro9d773ZnRAkRrWU9Pc9DfG23ryXpoVq9U5T7kEhQQkRr
9tpSni+m+VypMF1nlM6p6xDRWtHTMB4JcSl1VNUNGSSUQkRrZc8mIZgNbixk
kFDa/PfcdM8GIT6lE1X1QwYJpY0Ini3DeJJlpmmsVptT0yC2VvV8M80rRbmt
1280bUaUEN+W/4+m8P2J5zkLhMgWjrs/es6jxNZzomE0GiGm02l4plKpiBN+
Ry6Xw37HVURcBzBhNpuFW7/fx1XEWh8GgwE24BcWJYkV
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "13.6`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztlj1v2lAUhhEsHSvxIYYunUEwsHTt2DVVf0Ci0qgLKISkJnYIOAxRlAxe
SPYsDNmIooiBuVIkMsSKWyFsh6QiUFq5GBtM/NFjO41IUTHBqEPVV9dX91o+
z33tc67t5wvxuXdOh8Ox/AS6ufkPLxOJ+dTrpzB5E1t+vxiLvn0VS0YXo4kX
Cy44+ezu0MdOp9Pj8bjdbo89AcHn87lcrlar5fV6tdkpFArRNA1LyLIsSZJs
T6IoQh8MBhmGASbwYWrTIbiC/j/zn2GqIEVRZflBU5SpmaOxDxdTp/PJCQJT
qdCl0tXR0Zdi8fL4uFYuX9dqPRP4C2vJNA2IkvS5VGJ2dr5lMj8wjEeQLoJ0
Uiluff0Gx6v7+yxJ3hu1YBrA7+32R4Jor67KGKal01o2q+G43mCQyWgYNkBR
FkEqxaIZYulzIMvU4SG3tHQHMTnDzTyJYQyCsOfnENLv98cz+zxP53IQq/6G
GiFLKEoXCnpIrzeeKXU6dQjBcXVjYwxTzWYHGHZ5cKAzRdGCKUkXe3u3CKLl
cn+yqhqLQsqq5bLlvZtld0VRZ5AgwG5uqqPP08hXKx4/JYhutztJjuAaqPU6
RVH5/E0yKa+tafAQzAY1kE6LKyssipKQR46bsD7vJQjCNUlShcIngqC3t9mt
reru7kU+Xz05+Vqv35q7zKi9x75DIFLRN70hGAztSXXifTSF/gITpvDVk+yJ
53noA4EAMP1+v02Hw4pEIvB9h1+R4CwEDsPhMNAajQb8ijCzU7PZhEr4CefI
kAI=
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "15.6`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJytls9P2mAYxwlcdlwUlcMuO0vw4GXXHXd12R+gmTNLDEugYpWUX+/FqIk/
ookHDxpj4ODFk5p4MIuJ4aRxMzgUShjIWhxEitRC23dPiywsNKMVv4En79v0
/bzf532ft+3rkS9Dn8wmk8n9AsLQ8ORbl2t46v1L6Hxwuj+POUc/vnMSo2Oj
rjcjFrj46vGvtM1ms9Vq7e7utjbU09PT19dnNSgg9Pb2WiwWlmWBgFslSRoX
dcjhcCSTSZhCFEVBEMSGkrHY181N0aAqlQpEu91O0zQwgQ9dZRpZhvBjby8+
M8PxvCGH4AqiBhPjmiTF1tYYkkydnyuT6F4ETaasmiyUShmEeJK8jESkhvOn
M1VL9OlpkaJkkkzPzRU4TqXqwv6HGdvZ4SkK+/23Pl8iGtWfvvZ6yvI9bPrq
am16GiNUmZy8DodrWG9dtTJrNWV0Lp3OIYS9XmBKkP78fD6f12lVg1mtQrw+
Oir6fDgQkAMBHAyyFJU6OcH6rLYypaoCTYTDkDIOhRQmpE8QdCTCq2XWdqda
mTAGqii9vCySJDAVq8Gg7PXSs7P5mxs96WswMf55cZEDmt8PtMf0EWI9nnQ0
KuP2haqx7xinDg8LqkmFVv8hJBDE9fY2r662fiY8o6BdqlZTW1sPbjdwcINZ
N5xA6Hc2i9tZbWWy2Wx6YUGmKKnJZz39W4KA9Ntu/D/Mri5lMc/O4uPjGE4Q
+ERI2aA6ORSqwdnf2ODVIYZ83rHs1e5uYmkpMzVVdrkUOCQeCklqoSYpqsAw
+pmP9QllD+Ri8Vc8ntzfjy0uAvx+YqIOv4NCPT42yhTVs1kXtO7LZZamrwAO
zr3eisfzfWVFaLpHF/Pvc75pc6H1IAhMJnN5cPBtfR2yeAqzAxlmyrLR8w5d
eOsJnYnjOIj9/f3AtNlsHWbdrMHBQXi/w6eI/TkEDgcGBoCWy+XgU4R+PjEM
Ayv/B+bgj7c=
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "14.7`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztljtrwlAUx0WXjgUfOHTp7Gtw6dqxq6UfQKmVLha1MYkBJ0c3UQQdHN38
BGLpqGMpCJYkvkksNT4SEhuTnpq2FAoVjYODf24O9+ZcfvfPIbn3ngbufDdG
g8EQO4Lg86Pn0agfvzyGwVU4dhsKB68vwvfBUDB6FjDBy5Ov57NvNBotFovZ
bLboExBsNpvJZGJZ1mq1qruT2+0mSRKWkGVZkiRZnwRBgOh0OimKAibwYajT
IbiCeGDuA1P5o62ZynIJTYX2DflZQ12lRFHczudCVeeKMhHF8XzO8fx0sRCA
qqU299ml6ZdqlS6X24VCJ5vtZTLQOrlcu1SiKhWq0ZhMpzDN4XCsZWrlImn6
EUWnGCZi2DuCyAiioOgyHoeOhCACQXQjkYd8HmZ6XC7t31zrE+rfqtVa2Ww3
lWII4hXDxonEG46PcHyYTLbT6adi8bleh5muDeu5kGWO45jBoE+SvWaz32wO
aHrEsnOeX66ym9Zzrfbtmz8wD8x/mDCEU0/Sp9lsBlHbQ+x2u06Hv+X1emEP
gauIcxcChx6PB2jD4RCuItTuxDAMbI8fqPfkfA==
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "3.8`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJyllstPGlEUh41uutQghkU33QqNVjfddtmtTf8ATa3pRo3KG4QBDDHGjRFX
btRo1OjKGDfGGOMjsVFjbWTCa0B5yEMoIq+ZYW4Pd5BaQJH25DLcmXvmm3PP
/d0z86ZnoOtrfV1d3fArOHR1yz8MDXUrPzXCyef+4W99/b1fPvaP9Pb1Dr3v
aYCLrwu/fL++vr65uVkgEDTXbnCXUCBoEYmaBIKmxsaWlpaGhoZQKCQUCtF/
Gk07trd9FxfQfSuRuFwueBzLstlsln2xMTSNWJZD6DYate/uOozGS6nUeXYG
Q62trRRFARP4cPqSiDiOQ7kcdO4Zhjo+tlssYYUiNzzsnZkJxmJwXSKR1MYE
IHgi5LFabbOzNxoNI5cjkympUjmXl5P4WTUzEbrx+62Li369Pq1QIJ0OGY2c
Xh/TaiEDHHaozuS4wj9CsXjcurHhIYiUSoW0WmQwcASBoKnVN0ajz+3OvSRO
7AOWSCadBwc2szkBMwUaj9Lr840gWKXSPTWVYBgmm32GyT3QkpnM9fm5dXo6
MjKCRkf/oIqNIDIaDbmyAhPJZjIVmcVlhWEfSdrm5rwyGQeTNRpLaXzT6eIa
jf3wMH9LOl3O5MODJwauruxrax6dLgPhAQ1SVxGo13NarU+nCwWDcGO2bO4c
jvM2FrNtbrohdVJpcVkrR/jAtE1NpXEwj5mwZ6F/n07b9vedExNxpRJpNHla
efbKGq1WX66t8QopiTN2ff0DaCoVCzRwfnqyJS0ql3vOzyswhcK41/tzbCwJ
UqkFCMlxAzYa5UXyFxPPHTJJrq/7tVoGVpnXc1Xm6OilxUIzTAUmXiMIHsao
01PH5OSdTJaX4vMBw4aSyWBBuQdVlzNhH/A7MRIOg5C8ajXCsnwSazCEpFI/
ST7DLGieFzzHeU5ObBMT96Aog6GChPDRYTLFIxFUjVnYStii4TC5uuqHhQMx
lKSXIHIqFTk7m8H7sSqzUI4wGUo/BQGbzfnKhlGFIE2mu8FBamfncd2pwiyS
sUVuby8XFoJKZQ6SbDDk8PL5FIobknzs9iLmI6MRchwduczmgoYJwj4+HsPb
/J+ZvAUDAXJ+PgSvjIEBamkphSFPMeE0lQKX5wxKWY5lf6VStr2971IpubWV
ommomUWHRCIBR7FYDEyRSFQ1wlJ7KNrl1tnZCe93+BSR1GRi8buOjrb29rLL
4ra2NqAFAgH4FKFqNJfTCcFUHAoGg6Dw372lAMM=
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "34.7`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzD2Xg27dvQFJHR+f+/ftAM4HmA7kUuhDoKiA5LM38+/fvTxzo39+/
pJr5798/IDlhwoSeuroJTU3IaGJzc0d19bz584EKgHFEqpn9vb3/qqv/19ej
oIaGdxUVU+fMIc/MCX19P2pq/jU0oKDGxpeVldPmziXbzJ81NUCHoaDGxlcj
wMyJ/f3/amuBhqCgpqb3VVXT580jz8zO9vYnJSVAV6GgqqprhYUTp08nz8wV
K1ZMnjUL6E1kBHThpOnTt2zeDFTw/ft34s0kEpCRN/GUcn9Jz5u0c+eomQNr
JpALzAU/KQOfP38Gktra2kAzJSQkKHQhMjA2NgbW78CmiA41ANCF+vr6QNOe
P38ObIrcpx54+fIlsHwAAPpIpAw=
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "10.8`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzD2Xg27dvQFJHR+f+/ftAM4HmA7kUuhDoKiA5aubwMPMfBPz9i0D/
/pFtJkjv37/Y3YTNZCLdCTTxw/fvL548eXL9+sNLlx5fu/b80aN3X7/+Jted
z+/du75w4ZO+vhetra+bm183NgLJl62tT7q7b8+f/+DSpd+oviBo5qdPn3bU
1HwrL/9dVva/svJ/Tc3/2loQWVkJFPleWbmruPjJ48fQICLOTGB43T9//ta0
ac+bm9/U1X2oq/tYW/uxru5tXd2LpqabEyfePHLk12+UMCAyPH/8+/f6/fsn
N2/eP3367tGj90+denz9+qs3b35gizuizMSRZnDJkp8+wQCryuGXN0fNJMNM
IBdY6/2kDHz+/BlIamtrA82UkJCg0IXIwNjYGFi/A5siOtQAQBfq6+sDTXv+
/DmwKXKfeuDly5fAjAYATMPjNg==
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "4.`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzD2Xg27dvQFJHR+f+/ftAM4HmA7kUuhDoKiA5aiZ9zMQfv3///h0k
7jx2/PjGffs2HTiAjDYfOLDl4MENu3ffuH4dqObfv39EmglR2dLcvD8//2hx
MTI6Ulx8rKxseUbGvGXLsPoLv5mTJ078X1//v7kZHbW2Pq6sXLxhAxlmTujr
+15T87ehARn9AZJNTdfKyhatW0eemT9rav43NCCjf0CyqenGqJnD18yJ/f3/
amv/Nzaio+bmu+Xli9avJ8PMzvb2JyUlryorkdFLIFldfTQvb/7KlWSYuWLF
ismzZk2bOxcZTZ87d8a8eROmTj144ABQDWbpRIdyCcgF1no/YeAbXvD9+/ef
2MDnz5+BpLa2NtBMCQkJCl2IDIyNjYH1O7ApokMNAHShvr4+0LTnz58DmyL3
qQdevnwJjGgAzeFxDw==
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "16.1`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzD2Xg27dvQFJHR+f+/ftAM4HmA7kUuhDoKiA5XM389+/ff2REmZn/
MEyAiFLozh9//rx/9erzs2dfnj79+OLFtx8/KHLnv39fv3y5sHr1jdbWR7W1
T2pq7rW0XJk16+WDB8gOJd7Mf3//AsmbO3e+LC7+X1//v6kJgr6VlFzq7//x
/Ts5ZoLFL+/Y8aCw8H9t7f+Ghv+NjUD0obj44rRpv8DmkOP3//+BeeTm/v3X
J0wA+vphc/P1jo6zCxe+ffkSEjLkmQnS+v//92/ffnz+/PPz5+9fvvzEUE+y
mVjTEoVmEgFGzRw1cwiZCeQCc/RPysBnYLb9+VNbWxtopoSEBIUuRAbGxsbA
+h3YFNGhBgC6UF9fH2ja8+fPgU2R+9QDL1++BFZeAJ4w6wU=
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "3.3`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzD2Xg27dvQFJHR+f+/ftAM4HmA7kUuhDoKiA5hM389w+EcAG8sljN
/AdTDzT9569f34Hg61cQ+vYNyP2NbDKRZv4Gafr2/fvL27cfHjhwa/HiG1Om
XO/tBaHJk28tXPhg9+6XN258+fqVeHcC7X7x9OmluXMfVlV9Liz8W1Hxv7b2
f309CNXV/a2s/FJY+LSi4vrMmc/u3QM7Ft21yGYC0z+Q/en79ytz5nzMz//f
2vq/ufl/U9O/xkY4AnJBgi0tv0pK7k6d+uHLF0xjMc388vPnnRUrPhUVgbQD
EdCchgYEghkL9MKFSZM+f/uGGaqYfgeCD+/f31i37n5j4/uiol+VlSC/19WB
UG3t76qqj0VF92tqLi9a9OrFC+LjHUj+/vv3/atXj8+fv7Vhw7X5869Mn35l
2rSrc+feXLv20alTb589+/n7N1YDcZqJ5J2/EPTvHxSBIxEKiE9LQytvjpo5
aiZlZgK5wFrvJ2Xg8+fPQFJbWxtopoSEBIUuRAbGxsbA+h3YFNGhBgC6UF9f
H2ja8+fPgU2R+9QDL1++BJbVAP/Xw6g=
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "8.3`"}], ",", " ", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzD2Xg27dvQFJHR+f+/ftAM4HmA7kUuhDoKiA5aiaymf/+/fuLFwy4
O3///g0kHz96dOTcuWOXLh29eBENHblw4dq1aySZCRFZsGzZzIyMLaWlm4qL
0dDa/PzmpiZI+JBk5uING55WVf1vbf3f3IyOGhomT5xIhpmL1q27Vlb2p6np
d0PDH1T0raZmQl8feWbeKCv739T0r6HhPyr6OQLMvErt8ATFe2Ul9nivrycz
3pcv783KWlJevqi0FA3NLShobWkhyUxIPnr39u2NBw9uPH5849EjNHT94cOn
T59iNQ2XmTQtl/CDQeJOKpoJ5AJrvZ+Ugc+fPwNJbW1toJkSEhIUuhAZGBsb
A+t3YFNEhxoA6EJ9fX2gac+fPwc2Re5TD7x8+RKYPADMC4/x
         "], {{0, 28}, {28, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28, 28},
       PlotRange->{{0, 28}, {0, 28}}], " ", "->", " ", "12.6`"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8235087704965687`*^9, 3.823508780174079*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"5e4bc740-6856-4648-8e1f-f4cc587e5a51"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["15", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 15, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Image"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Image"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Fill" -> 
             Image[CompressedData["
1:eJytlslu20YYx4P20lv9AEWAPoDvvfbYa4o+QIKmQS8u4BQo+iwBcgsQJECC
LDYMIYo3mbIWW7ZEi5YgKaEsa+c+nCGHM1T/lJrNshIf8mFEkMPhj//5NurH
W3/d+OOba9eu3f0Ohxs3//l5dfXmv78u4eK3lbt/3lm5/fsvK3/fvnN79adb
32Lyh/9/yTns+zlbWlqan1xoHy0GzbZtnEyuZrEQGJfeklEkp7eWl5d1XZ9n
4m4Uhp/QJhOBpyiVjEkpP8zHcUJjTFBqW9ZnmAGlgeeFnPMowgijiGHGdTkm
XZf5fjidDBgLCMEMd12sx0s/wyS2zcfj0PMiSjlojhMMh+FoFJlmZBihYTDL
CjEMA5eY5IZBLSvgfBET26G2HRuGcJyY0uRomhKXvZ4YDKLRSPT7Ua+HmYlp
TrBfy8ICSOWLdcKZzDQTJlQB/u7BCChdj1qt6O1beXYmh8PZPMgSmgnhi3WK
MEyY2Hunw6FnPBbY9WBAmk2iqsHJSVCt0mrVq9X8djvo9dj5ORsO4aJwGtZ5
poxjRNDv97muMzylabRWI9UqU1X76IhVKmGpFB0fJ6NS4Zom223Z6fjDYbSA
iSRBHP3BwK7Xo1ot0DSnWDQVxd/fJ/v7/VTKSKXsdNrLZNxslh4diVotbjYj
6IcGJEMQXGAiNCIIyGDgNxpGqeTl8+7+vrm7O9zcdLe37c3N0fPn5tqav73N
dnfDg4OwXI40LWE2GrTbDU0TOXaROZlAv6vrkDfOZoNMJoQ8RbF3drzdXTeV
Gj9+bDx8aD59ak3JNJ8Pj4+lpnG46OwMyeZ73gWmQLg9z2634UarWIwLBVks
skzG29gIX71i6+vj+/fte/fIgwfWkyfe2hrZ2RGHh3KqlrZatNcjjvMxM5YS
oRGoEWRgp2OpalQq0WzWS6f9ly95KiW2tpxnz7xHj/iLF/76Okml/K0tUShE
eK+qEgTUNOmne0+YqFmU2GAgul1H0yYnJ/zwEB4I0mkApaLQdNrd2AhSKfL6
NRxCCgVRLvNymdbrHpRcFndkESeE9fvi/DxhqqpE2hSL4d5elMmIfB5+sDIZ
O5u1czn74MCuVJCoZJal43HCnI97kkkBtsC7Xbtafc/ke3uxoshCIYbsUkkg
V5H2qgq3i2aTn52h4qTjJJ1hXqcQEjnmOMIwLKxXVQFmocAVZaIoIpdLmMjJ
ajWs14N6ndXrYaMhhsOkG8y6zVxtJp2Qc+a6/ng8bLXY6alfqTi5HEFSKQrb
22MIx1QnmLzVCt+8CVstlK1AT0B8L2O+LyW0l1G/73Y6brs90rRRPo/8J7mc
d3hIy2W8yD099RoNT9dtXXdHI6Q6+i2C/pkeAmNo5oRgoDqsdtup191q1YHy
VstrNi2gut0kLkEQcY7Ejt/ZF5iUxu+G8LxgNELs0KOSnozcni6Ql32bFjGR
acGcUUKo46DDR6hBMBmbCbsic5ElpRGGUD7xfYmTy9Z8zMRH+cOzl5qU04MU
8CEcwvkF5owwY16/fv2KOq9iMyb+OSx/PQMNTGjWv57NPPAfPH6bCw==
               "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Type" -> 
             "Image", "Version" -> {12.2, 0}, "ID" -> 4443728544268478220]], 
           MachineLearning`MLProcessor["ConformImage", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
             "Example" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikHsUTAKRsEoGAWjYBSMglGAHwAAaVcMlw==
               "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
             "Version" -> {12.2, 0}, "ID" -> 3423635366359379055, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImageExtractNumericalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
             "ExtractorName" -> "ImagePixels", "ExtractorVersion" -> "V1", 
             "FeatureNumber" -> Automatic, "Shake" -> False, 
             "Version" -> {12.2, 0}, "ID" -> 2288663004703985268, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["DimensionReduceNumericalVector", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Reducer" -> 
             DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 15, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1: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
oZ5E7GO9sryPR5mg11V1hgNMSD2dtLDLkoQd0frMl71M8OdwHprgepWkBEbv
ppNw2LG1wkaKDewl5xlF5myYzI9zZz5G/jjBfarvHhuUKIIuOtFsyFg2escf
faa+DHUDlzcHAjo/ZCy/zIFDwNe1AvNkM8+XPmor+t2jUZ61nwno/Fp5oCMU
8XzLTewT6ry2/f7PJ9Ox7vohVxuncP/jg2xvYE6abtn0Zh3yUyB3fiqPEg3u
bbHxPlRdA9se2H/vKqqBQ/lva8MWs8F/e+Z5UUE2UO7ruc1MssDH1dtjQzgF
TPVoo5tOUeHPf1mm+2ypYCW/OisWdf0s7Cxl4LieUrlDsyQJjjxuXctxXRIv
d39+EkMC/53p9x8fkXBI4YGuJ/qW57I1lRafSChqaGasbCCBy++CwovVJBTr
cl9goG+ejA3r+scvDXcqrvO3YR7WOFbqg336/ecpdS0N1CO77diTBJwe9q52
9GFBYp7wRvVDLPjyhhZmakfCozvVXMbGLJA1Lb9YY8qCKRfvt0zkXwNFh1A+
3JejI/wSvr+ZwH9sscnbtZhfP29KtH7EAPOeKrcb5xhg+KDhVS2bAydurrHZ
W02HtoikjZ4UOgTquDEtPxDw7L3EYrGlDCi+/9iibAUDGOHc5qkRBAyKnSLE
PtOh+dVX1cxOOqwzFFavl0W9PxiWe0VxGBae2l/Zt34YUmNlf7Nfok6Kb87o
tByGm8/y087vx/s5XQ7a4gT0BDcabk0chtEHd4OUo4bBJO3oox7Mw+eMj4nL
7aRDhe7BWX5nOkjdt9b45UpAlZChoXYOHfi38d9ZkU0H4npF//VOXBdt8+ni
IQZIHcgsGPjJgJKhipbFT0kIOriBmreMBV+XBPlny7FgNU+KZ3kXCS83/FDJ
j2HB/XOfY+ZfYg7J2aK11x91S48RMYK8v1V3l/f9ShZIGsV81MGcWVMY8mG7
AerUzc/CaSocKGxK9G1D/hQxn1dYlkSAgVGt3e5nBJw1vlQjhzpf3Cc5p51H
gHRjErjQCDiS9fLBYdRdt2sut85gDnEroVcEof7uvu0aQJ+rgagVjy6a/ayB
7gefzU7tosGeawnePpiLHCm3T0+gzq+N1BfqQR4aGt87sMOLCuODdet9syjA
pH9ekvCECsYx5ZR29NsS8z0e/ojPxl7NjbrIjwNt11M/ID4jH71hv0Xf6azH
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
oovVY2D72e7Metm7wHb15Bq3mlvv7QEvIiox
                    "], "Method" -> "Naive", "VectorLength" -> 2352, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJwUW3c8VW8YJ4Qo2WSGQlbDLPW0hDJCyo6GfkVpKA2VopSRykqDkmwZ9xKZ
JRcZJUkiI+vOc+yR6Pf01/mc9Z73fd7v8x26rTzkZ3+Um4uLa60gF5dQltoR
HoHr0PBd7FzyVBBEH6CLyxy+DG8sGYGhj6iQ/0d3cMsqCuQVmHi9IilA290w
napOgVW871xqvxUAoXja2PQWBdhzEfYRTRQgfW17QlZTQVWV+2n3NwrMWXeM
VmymQvKp6ru8i6kQGiv6KestFX6E1j153U2Bm7lhMjcNqfBGuMZ/UyMVlONs
nV8/o0CczoGp1d8pUCbdJtV8jwoby8moWgMqOCXvMMptwHn9ds27/ZQKH7yk
/Cv/UmD4eap4rioFFh/WMy0YwvnYTmicMabCt/fsANkDVHjGLhe8UUmFtNID
8XWbqLDdLbtfLoYKAzV9Dew8CgxWX2N5axYCP2HsnbGcCnwPpQ2urKZAaamV
qhWDAunOI+pJrTiviXefX/+kQuoVfumDUlT4+jwvUdiDAiuq9CWM5agwwYy9
xp6kQFo46aTkQoWKB0vnZ4SoECNgNP/UkQrjvI5CP22pICasHv3zIBUi+zkV
wgkUsD7eoTS7jwqPJXtE1mVQoTdnMDPCnQpmnZkrfpVR4Jqj4LfORgpIlj+T
KY2lwEkVPjPrh1QQCeNprK6iwBtqefcOXZx3sty7mHAKNHns7x1nUeAod/Mt
7iVUUKy3XVihR4XG15qJElivUc8L+0u/UCAo11hjtQ8Vwu+ZXMvZQQXeY7Om
b89TQbqhe/ureAp8Vgm8f3w91s98JJPXiwLydreNZPE80j1883kNKvwONvZ1
NqVAL/fx9Zf4KHCmKzxwtqoAhP/elx3rLgIHtldpkGgRNJVZKtVIFkFo+vjn
FNFIuC1OPO4ZD4UN7W83Uudugq1dD98zTw7Y5V/56HCIA0cbPb5Wu3LA8INi
bOSeQsi2fN3A5C2EH3OLaW+OFYLY30e2AYIjMPa7Y5Xy4hFQPnTy+Iu/JGzz
H+1eyz8C1z/ffT/6hwTRhfQHSrMkRJmQCSV4/eLiuQsjeG6S7BnPxyAhIET+
07J5EvKu5/pvmCHB5x5/wTcc14Cm4zmE14+YhC0+JzAC5+4ZzX3jGQFh5ZuB
p3Ccw0pp4214DuUnouS4R4Al66S+km8EsjW/eVbh9edzB2Qv4rkOTPo/xXnd
usmRV1w0AjkVnwof4bhHXfaNxeN9xxKRwDt4PehHdXUBjpMbeIRQwOcrqndP
M3Aclrj7WCp+v3SRYsb9QRJU3rKL/92/K5i0RW2KhPj0WRvA5w7oqMUycLy+
zha5NTi/y5yusZd4/kA2hvYd6+AYlmT9YpSEsY1bj+a14vpPfy++lUnCgpFF
wuk3eH/wi0VkPwk9+mZWEskkPLwZq7QiAetm5pJYN0ZC8vmpOiBJWCSTGK+N
9VOR3xhbivMduyF0TnCcBGcH1941kyScd5D7FY/78enRSkkb3hGo9tE4PY/z
PLx7/XZ+PD+v2fhaf8kIKKkdX28/QsJolFiRBZOEeftdLAFchx6Pq7ghjmt2
b81yf3xvpUHb0DUcX3n94FpFHFc6gfnEco6Ep3z5mxx+k+B7Nrp4Ob53SllS
/VQWCX8TNvTPXyNBojP4P65AnH+5TvXZchKmmK3x6s9JSPCUHTGPIkHfe5uP
B9cI7FtuWSWH4+pYz5j9xPOpqN0hOfK1EPcnTcTiGw3e3eo9dIBNgxr2sEZv
Fws4Z9gyn36y4Gq58JacXhbIj5yJ/CVJhSXOE2nd7AI4avQuTIyXCr4SSy08
XpGQ5tY47VVAgtv9DkZ/BgnPxbxBdj0JV86MyJtvIKFjwHokdDsJh/ZOmS1/
iEd2l8zJOKzLq6bXPtEkRB461HG5lISG2IWlB56SUMQ8uOghjheTcM/9QRIJ
sttsovRxv95rKzo/fECC+VTsctpJEh6oRbmZuZJgc6VBPNiTBC3Fh61vzEhg
57TvUO0gYEZiha7EHAHGGX2vv7zGuhXasXNwvuq+XaYjiAee0BN67S9JGJBU
uNxYQkLS5QvO/+Xgc/MDKpx0Errz/jtiW0hCSlfQsTyctwjLLLMS51PZu8KH
hfNuekHrU8W6F9h+Hta4S4LtjYO7+igkyLj6N9Xge/QV4yd/WZKQ2sgdfk+F
hKqMMu5Tq7B/zTQvifmQcKHQnT8inABLhSqty1cIiG2ZLb5zmASHbfTPE3cJ
mGo46eqSSEB4mb9Fij/Wo4wj/ckX57F+ce7p4yRwFCdP5+C6dnKz1+k+I6FY
k6u8MA3rSKN15+F1j3hhpe3xiJ93172rsQ/q9P9cHkN8aIe5iBbhObE4zl8G
61xm/brMIAL3I/NDze7bJCiF9zA6QklYG9CYvbCfhM9zmes0NpNgyhyMOyqL
uPNzop/HeQo1nvl1IpWAX90nNs89JODZxvsJL/F5N6ktbd3XCGAMzbFdogjY
f10wKj6DgJXClxrFnxCgt0hX9EICARZFvf7ST0jIvfzHegviodV6WkgY95nn
nS1H7E8NBP992dK0nAZBcdpPCQEaWLwQCUwbYMGz359fH13KBtbmoYl1f1jA
slPpS2uggFD6/ayD9lQ49/CFYkoyBZK61PlPId6viAUYG2C/TZ+sp2ljX92O
69x+JYWEZZbHHzVgn1hYq17cFYx88NhU7gn24VxHxKNHyCt1VptMJpFXVGLb
0/2QvzRP7N31j5fqJ3eP2WI/749YJBuD4/91++nqgs9p80b3t2LfdzZ+zmnW
J+Hr5YqXKzkEPA2OTPHlJ6H0+R4N/ykCap7Y67O9CYg63GkgGExApNbv7wHu
yFfPi/O1D5CweSDn0+PTJBgMOsn5Ib4l5mTuPj+PeNph0uZ8ggTvWl6bYicS
zLp3hb67jvWbf67KG479cbYzYXYH7v/gs4acIyRE7BwIjHMmIaMlNHVeCnFT
bTRlg32xcmdLW903Ajz83evt9XDfB3ZOm+0k4F3nx5teLgSI9ms5XXYjwbX5
61ul4wTcjzo6KHGUgLr9oRa/TUmI/hX8+sBeAtabbNEFPHZzl7ZMSJJQ4pYb
8TGNgD3vj4T9xX3Wb0o3KsfnV+VYCoV6oP700VvqvBF3CmG6361IaL8SOu6I
OLYY909sP0rCi3DGusTFyHtez3ZwlpFwZ+fGvSkTBMTvX769fDnqxSezw+pP
CXC1E7r9AvviwK0TMhq7SLge+GxUZjcBh3OemIVYESAgstghbAsJcvHcH2jb
cD0dHZeebCfgW2a3X4QM6mXf9f+e3iHgToKdFvUqgXoyb/t4iICmXKmrd3sI
aG89yDvygwCWj/o7HsSDChG39BKbhGs7rT/2II66FbYNHdtBg6iLwWMlv2tg
dMztXZ43DbKGHLWMRlmw/M4Tkx+Iy7un34U8mWMBs9Yqsf8NBT4dFPVd6KVC
j6dX00839Eevfx9d+KejPxniAcjP6f+d2liIOniorOzRfexnmo/7xU7cVxMP
P6s+xGvn/Nog9QUSHtPaT+Wjzoi4X3ZYivijKi486MV5aYW9nyVRd/d/nv1z
GscdXFVZVIB4VRzSlqpEXB7WWpvfiziN09zRLvuagGSD5CV/FQi4FEFULYjg
flGDFCf2kCAdJ7ldppoDzSId6/hec0A79eTR07hfVafETbkuE6Cq5Xgv6CQB
hyjLZx7dI0HjQ9WK4kEC9n74KeFXTUDZ7x3ymRcQ/87B7NZ8AnQG73+arCNA
br/UmyPYFxmthhbRegRI2N1aN2REwPxs3lUtPuSpRtfXgsCBw+rj+T47OHDE
Wz+raC3yuUnf4IUTHBh24OmctOLAzJuOAgUcf4xgBVt/4sCksZtOwTsOwMWK
U+eQxz41pxzUyOFA/127gpZMDnzdps+ctSWB8W3ljaf5HLiSYZCYk8YBs9P/
7TenE9D6gB5RL0FAyN+PNtoLHGAZfDvzGXnuzgRL7xA3ASK9VheO8SEfJxty
jSOOo4o82/vr0cdFnvMPfcOBdaIz78gQ1Pfd5FxTGQfI7XOXi6kcEFjUx+LC
/hW3fyiQTePAPYOuujB8L0H73bfVV1GfbzqfW43X/f8ypiqwzkVTyzomW1Cv
Pr7LqvzDAdPwiWMTvAR4/RyzCIkmgPj6u+A8Hpe927jCKgf7brsr+xvy2ZSU
4YbVuL+scQvKMTyP8Z9yDJ+pgVz12u+1iM9NbV3M4+tp4GkuV3SbzoLkKzwX
l/xmQWeNn+x75NO5BzbbpD2oIKogGaFqTYWdXm9ljodQ4CJPyGXraeQbl+CF
UQL7r2WN2yz6x6TaD8vrUP+iOnmsFpC/hWhkui7qqK37uv4BxJ24S2eaF87j
p61c0jr0UYHa61/Y/sPpp/MO/YjTmRiBFX7Ir0WO0XfeYF9FydyX34M+Sb+e
m3oceXWkKfN47ncCnsPfdgdZAkw74yVacB9WrzaqrML366WmhnVwvxPNTmr7
veWA7nyNUArqsEZk2Vd+QF7b2LeyDnFl+Xv6b1Mz1v9Za+rZXwQ0x3U6re0n
II5ntMEK/Ybt9e5lqasI8PMWIY/je8HbMt0oOJ+9lb6+ur0c+GKTdxzaOZDM
NbzYkIr8FeWYLJWE+5djnOf0nAMeOo9D8tAv9HDp8wgPs6EmQv78ZjobPrhW
yLLQVzoVbLpRzseBpWv0XUe0OXDfbVZqI/oI2XtH1PpuIo5DdnKd9+fAdC6v
0lus34FTHO0XyhxwUnN5rSzKgdZvJi9+IO9/P/YhOGmaDbo/DRvO/2GD88Lx
8KVNJIQbb6VolHDgXMJjoRtPEOePv5ql4Pxr5kKnHFuwf/vvvJXAdQgpvchK
EBqBzbf3VbrNcUD1xraNwwMcYNyIzKFhPStGi4mJEQ7IpKndsKNj/xGPlknX
oN7n9d6pY3GgvqxHr2CIA3cPXH9SifzAKbcUztpDwPu/i/QibAnQWnR/+jny
cfqzYc3sJgLM2zacacZ6R6kwF51Cvnn+8n6dBPLbof/CFJORn8L66s8uW0aD
kO5879iBGvjRo3zfX5IGfQvaI4UibOiSXu7rwcUGg+VqlXGzLCA7fZrt1DHf
Zey1clKmwo6PZu5XXalwkZ0iM4a6bKVwvno3+uQlte8Cp5aPQMon28v5yANR
/CUPBV8gT4je3jyGOh91YvrTVqxDQHrTq01LR6A9jvsyG3FpZZwiGMrzT9/1
RbwwF8XJq9TLIM7jtiQO5ORhnS/K75RCf/A590RkbSzqlfN0ITeLgLEtcs/6
kS/CO72O2XE4YH/9AXPmX79wH6f5f+aAUr5hej3yQdYHfd+96MPc5BLliz8g
L1DD1010ccDGrnLZbdT5bAupairy7z6ZgnGaAAG1OvG3n7eTsKkpTT8NcZ5t
e/xxw1cOrDTkOvsO5xloblRz8yMHNoVtXHsDr2d7P9/riPtIbZSe4Mb9fp0x
fvPBOF5v+y9j6hwJeyaLM0ZnED+jMfXRLDaAmJKyIurKHI/x32cLLHgkQloZ
irOBw1g0cycMfXTQXaF1SSxQ77lqpJvPArfZiP2NuP61/j2GFhJsePDN2ayC
mw3R9j1X84rRn6wzPb/hHBs8FHTNz7iygVd1m/ixVPyu2UDAue0cqL6akjuk
w4E3usaewpjvDIuWDjkxOcDltI4K3cjDOhKD6tj/2864c1fg/DlPHZ4q1HJg
f+oKtQ2Y10LymyIPVXEg1q/23r4vHDi4uq4o4SPmphptqa2DHKgqelDah/iM
jGq6cwl5Ps0ufbPRbfQz1Wkh9cmo50k/ry+PIWBnc9FJzVICvnaNCdyvJED3
0OqXSzD3TYvm0QKwfo7FqbojmO/uLTtepUDWQEXcF/k9ozVgf54wSOTUwMrS
1gyBvyyI/pG299sUC74bnz+qhfj8a/bpimAlBWRuKZjmP6DA37N3F6eWUOBh
joDYNsypCux9um7Iz+nxq94P4Pm3lcHmucgnHTN6q7bnIn9Ms4ypiKvs/MKJ
HpyPV4b1h2HsG4o0T+ZhXH/L0Indf/B8wk0stw/x/uCjgp4y5lxBJ5hXRB9/
a0bNZ4U5CbPRYJOJOWiPinDaBPootX1RD/SGkb86Bgd98Bj16DgU4ndXypVK
t0ZzYF4328f8IQd2Plyp02ZMgvzd0+4a+WyY7fwhyk5hg2PM1z/lBzHH9+5Z
+kUEdZF7+R4V5LNVN1sDHtUiX38TjZe+z4EkuyO/bt3hwC3eW4mx6FueNRRc
uXeUA/nWWntyPDmQnjJlYYk6qFhtpXplng1X3rxdZcXPAYmLTM4j3CdV481j
ZtEsEHycdE4jjwUqUSNDg9kE/DxiXk+9ywT77/ndjEgmtHc+EukXR/99a+XU
thImlAykXbB9y4QUMach2UWYdwxL1BTvMOHpC72ru7KYcCqIkmtZRUDb2qY9
itlMsC6VeBv5hgnbGAI29Y8IUDDteVu5lAVX1AYvNiizIEPNQXIS/csmIQn7
7dvZoO5yu1LNig1Wu4tCM9CftP888TyOYAPNZd5/ZQcbVtWfCHg8j7rUPbPM
h4K85XTwaGAuG6SNtqbHoH/szX1P/7yOA2VVGW7ZG7FuFxaEi7GezeNkX8An
Akq8q1y08fhVWznRA/ORQ5FlmSSu+zB/716RcgIqdUz2SWO/7+MN6ziG+z/w
fJZ7An1fZEJvjlNJDZSmuOoYIT75lqTeyWDVgMRQbV8hyQJ9nalfZ5FHV8to
mD7nZQOfywapGD0q3HksIXYMfeijVY+d/DC/3xS+WseFvEzT8VNqR71eeYM3
ZxbHZ5SUhHVhzk3ZQNxOxbz80ElqOBLzbXDNc+Ih9kl1T8eif39PmlnNedIy
QYJOsdDLpI5/PC/+eugLCeviR78Tn0l4kmy2p+s+4jrYY24n1tXmUnfiaBnm
CJ9o2QnMf1b7VITPIS+sdiLarA1RHzV94lUAdaexTsYc560j4K2YpsyGocUd
hzrQ/2c//+v3UZgFvE/DBngWmMjvb4+VoF8/s2ld7M9GJvzZFV8rP8yEmyad
/tboN32rX0/QNrBAOPeyy9X1LBjnFqqbw75PWduQbZjDBMrKxhaTIia8DlsQ
lBYgYXLsoNpEGBMm+f0vvPBjgupZCYt16Duy7MLzr8kwwfHH5g3lG5ggmM53
TQzz3JZVfx+Ob2LCglqCvbUFExZ1BXrVniLBOmqwRFKECaZ7FRSuzjNA1Ndo
5UfM1cJ8RZ/f43WZRc8TuHcw4eAZP+mvfiRUPz5w6rIiE9pqCyPjVjPBZ/Hy
oZ5E7GO9sryPR5mg11V1hgNMSD2dtLDLkoQd0frMl71M8OdwHprgepWkBEbv
ppNw2LG1wkaKDewl5xlF5myYzI9zZz5G/jjBfarvHhuUKIIuOtFsyFg2escf
faa+DHUDlzcHAjo/ZCy/zIFDwNe1AvNkM8+XPmor+t2jUZ61nwno/Fp5oCMU
8XzLTewT6ry2/f7PJ9Ox7vohVxuncP/jg2xvYE6abtn0Zh3yUyB3fiqPEg3u
bbHxPlRdA9se2H/vKqqBQ/lva8MWs8F/e+Z5UUE2UO7ruc1MssDH1dtjQzgF
TPVoo5tOUeHPf1mm+2ypYCW/OisWdf0s7Cxl4LieUrlDsyQJjjxuXctxXRIv
d39+EkMC/53p9x8fkXBI4YGuJ/qW57I1lRafSChqaGasbCCBy++CwovVJBTr
cl9goG+ejA3r+scvDXcqrvO3YR7WOFbqg336/ecpdS0N1CO77diTBJwe9q52
9GFBYp7wRvVDLPjyhhZmakfCozvVXMbGLJA1Lb9YY8qCKRfvt0zkXwNFh1A+
3JejI/wSvr+ZwH9sscnbtZhfP29KtH7EAPOeKrcb5xhg+KDhVS2bAydurrHZ
W02HtoikjZ4UOgTquDEtPxDw7L3EYrGlDCi+/9iibAUDGOHc5qkRBAyKnSLE
PtOh+dVX1cxOOqwzFFavl0W9PxiWe0VxGBae2l/Zt34YUmNlf7Nfok6Kb87o
tByGm8/y087vx/s5XQ7a4gT0BDcabk0chtEHd4OUo4bBJO3oox7Mw+eMj4nL
7aRDhe7BWX5nOkjdt9b45UpAlZChoXYOHfi38d9ZkU0H4npF//VOXBdt8+ni
IQZIHcgsGPjJgJKhipbFT0kIOriBmreMBV+XBPlny7FgNU+KZ3kXCS83/FDJ
j2HB/XOfY+ZfYg7J2aK11x91S48RMYK8v1V3l/f9ShZIGsV81MGcWVMY8mG7
AerUzc/CaSocKGxK9G1D/hQxn1dYlkSAgVGt3e5nBJw1vlQjhzpf3Cc5p51H
gHRjErjQCDiS9fLBYdRdt2sut85gDnEroVcEof7uvu0aQJ+rgagVjy6a/ayB
7gefzU7tosGeawnePpiLHCm3T0+gzq+N1BfqQR4aGt87sMOLCuODdet9syjA
pH9ekvCECsYx5ZR29NsS8z0e/ojPxl7NjbrIjwNt11M/ID4jH71hv0Xf6azH
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
oovVY2D72e7Metm7wHb15Bq3mlvv7QEvIiox
                    "], "StandardDeviation" -> CompressedData["
1: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
62jE8Z+kl2fvMBHA2HHNeSkTee5ckiUohsjv/Nw5vmJMS3Hn335VhK6RsEUB
azfsu8Ztf26agi0aqvLF+hTIWWqc2XuDgv6ridkJX2nwFbE4pbmH6O1/3v/5
tJmBBpLTtGILGf439HY5r6fihP+jzJMSDPDcFhG79NEN3xoPk12OUvDg2qQG
jysZ3joN2XZlXuDfctI+spyCZs3yudh/dPRvFrC6u5LQfbKtzWdZD6hKW3oa
iDEgWj0vZOpDx5JPqaKnLKio1/luISBLh46s4XamLA2/5n0/JtVTQee6/Pj+
UndQ8joFPkcwYMu3UfIPxQOb7U48WPa3Bq5qIR9efarFk+6GY5eP1UJsKn11
zLto7E3p/v79HTHXv6tGVxc1gvaiwc+uPx6XP0yuyKpoxNeRB5traxoRE8e1
L/1TLgKk3nZN3GqGsv7L1SsTm1HASpMyr2jCDUVad8V4J8KmVAwcCL1bVHre
vny6Duuj/2QNz3VjnWx2XuJWFjr3l4q98KjDmTqNPk8PNoYr4/0apwi/bb7b
gYJ6fNRb9TXjAwvSZxiFvQT3tFZ5ury+UwtreweTY/XdsEzX1pcXZmHV1u/n
2q3rcbVDd572loVdymm8nzpZaDx/29xWqxlflTt7i0s60fMgvK1apQuvu3y4
E8KbMNTxbe/+S52oyBX3z3naCc5JrYVVh/MxFP485alzC7q2q1WuH2nBQc7x
noi1aZgs4c/r+VQEHz4hqYm8Ypi/Y9lenMjALbNhPQOefAQqsBSzruRjd8vZ
Y4r3klBhWdSeuj8OlnP5agpbYyGhZbPKRvcRocOVO1teBKH/rVnPrMtdqJX1
q9zMDMdviSgnuvl9kF8OeTdsfgCFabPfC2u8sURh6nbxg1vgna/rCtD3A3c7
u7RUgeBmby9TpJyBHzue6HWb0sAhVXzcys2AydiRoLAIGsz7h3i6WigQ6dwR
+99lN/SwFZW36lNBuqIc119AQZ3KD7qMFgXTQSz2JJmEEPVVU9r+ZMTnmN6J
W0LGogZ52egTKpR7XxqrrfVE9N2FE0pzZNBC/Hgf67tDWih11cUiEs5uzcvi
U6fh7JO0i+EXGZgWFHcrUPdAnt1Vb716Cjyuya5ts2Lg85M9Zl3mFJCt1YVY
i654KV0fc34NHR//now5/tQdgoNrrE0e1OOE7xH/Np0G2F3gLwoxb4DfpVze
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
ivcUPvxWVsFEs1DaUpNOg8L/eIhejA==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 2352, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2352]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association["Matrix" -> CompressedData["
1:eJwMl3c0ln0Yx40GklFmhYwIiYhQniuiIpGQlexN9t578ywee+9RRqlXcSlZ
hSaSESkppTSIhtdf93nOfZ/znHP9vr/v9fkI23pedGCgo6OTY6ajY9983hAI
rPavoCHHFeJ5kwsU1NKrOastmgZVp6JUVV4QwZj1xJ9wOmXY36OxaglXMdJF
IP8KqRCPWbD+2PUpAQeourPGUhn4u/WIoklUCUgnVjWIPkmBCzF2LYJOCfDA
hCxEjq+Hld1pHH01wfjljEeSq9+rjvOyIwJvVsIwhy70gNoPIkoo2o5XbwuC
H69WItOPRuEK34KfqD0RrmwNDtcSI6EkfQFjyIlgbODc4TbrW4aH6x/pHbFs
gAvWd7VMWZJRyi7pii+U4OK5qu5Zzmw8dp317919RdAXzZTBHhoOM6fVhRu2
HOwMmn6nvi+QBNyjPw8lWYUC33xM6+T1aFBeDDKP9kgHXPiQ5mVVCqYFx2fD
n5pAzMG4k2oCwcB428GkyC4MUuaOlkwfTUdnZr6nbi4UNFGTOM+5JRgF/G1F
TuRkYMiRDy8ZdXyQy1ZFY5LtBrT992DP6RZZwufY37fteFJgMfi09nwdEQNt
Jl62izph0Hikt9P1StBuyfzoWeuI/SWutm+DsvFzVHflz5IkaP3vzP4mUj7y
CRU1LgQQYXv42aGK4BwMWh5+eu1nId5V92hQdSWCea9gU2VpJriznlPO0CnA
AMVs4p4B6c5e8f4LPJYu+OVx4J6tDDnAmJyTKT0XhXOp6mMc+7Jgi5hozfqf
PGT1Wyr55UQE6tTcibCpJDi+vdHTNS8HLv+V5OC4ToIDSWf4vXKpOMJhRjk+
WQyvP27XuC9FQnqRE/+OylIg7d3Kw79iDajEfn/ogDcn4WFUkRnLNk/Qchcw
ad9FBHzQ3lL2KB0Y9D/PNzGSkfjz9y/1ghgQI8eYS7mkwtUXY13ZKta40N/p
SUki4WCegetgQR5kdWeY1TaW4emN4+fe5kTAueGil52xzSAjORLHcTUbgbCV
2S3eA+/+OBclRdDo7GA0Mbn/JgllZ2T999eH4xZVluYJTjc0lTTmytvug2sO
dwLDH0TBBSd6E7qnnhg93cO+g1YDt4YSnZ9/JoOn0Jbp4P5YCElZOrgkX4rd
njw2WzvqUUJMYIVZKgXHcxV2adzOhuCaR3SumdnQLPWhQMZZorPHQWLXqZVU
kKGf4i0YL8EwRX5r9c1z4rik18JtZY6V7KNCbXlXwXKajnmcTMGE8XStU0pp
uOWkot9ofTYICIuoVruV4mnGVLFLHHJw5vbPbypZelD9xFLq4h4a+C35G3E0
leMsg31XaX8saj0qbAvSPksI27fbiHQsAfuHD948rRSM7Vvefk8yo4DosrJC
lEwIJFcwB74cD4REfa+nh/hK4FWqSojxKAnZBzyJ/2KKIMzuMoenShmYNlUw
KL0vhBzn6l/rtiRcDH/43lsiD24b8sXRcxWB/t3pOOQtQzlmLWdts7OdbPFJ
axY5RLjKapB2Y7gQVZ4Yf+g6FIFmbT5MBxSpeOim0MbpfH203soW0FDrj4b0
S9sX3yXhT4mLMqq/qkCt6p3ErZx08Hst8lDntxtyTHpcK4UYuHObieF9aRlG
7qYH2V8leLoxIE1ONR0Vxg6Z1UQfI/AP34tullWEk41qgeTjWZjjb8T+3MAd
dB6dKvm0Nw0/BI1d+UQOgDZZE12Ws1nYYHymf19AHjxx9AxVKskC7Kji/DGX
DQ/yMrflRYTDtkZmyV+MFKRZ9rLVSCbhO/qDAtV2LdBN8oqwEyPjvvwZHarP
FoKgLsPwfc9d8Ivkxf8iPQvsoP7A/GwsPjsM3Nq3CyD6GZ0zY0M5KO5uqVG7
aolqvyBfzJ2Ejsvf32lFn0LOr7cOln0hY03v33zUj4B+8/d+vo3+EBaleuG6
bzbw0z0WfzWYAGOeanoTOdfwLV92d6ozHSHrepx6lmsWxI2R6BTbw2A0/Eb9
T2o0MvwVLtK2coWPNZ+5N+pL8NLYyg/S5v+dk14qWTxShowf/SxcjdyRYTLi
/X8c4fDi1NsY3eNUCAoY7hXiKEXH33IG8zl5cI97w/pXaSLObnFLXPlYgVd7
OdgkuDQJxClP59dqsfBFaHlIVjUeiBJdWxS/FiJG7J04utkPc75tTnujSmFr
7eNH96yTYZeAyHCzSD6QEi6FJb62B8OmQ/3Cu67AVHmgHeFgORw7cmZW1iAO
lj3tzm28rwZ/hULenllzYDAQb+tWckaFmz+v/rcmSMjI01QWTU6D0LPBx/lN
E6Dq/tnpE+oxUPTuuMmL5XiUfhBZ2LpWjHvGd7C9zrcFDT31ZZJ1IFwsMXnm
p+EFCtMR9xujilF3QEGqOpGCDTaM7yr0KvGF+bRqTDUV1oiNbXcoFbj+4p1A
zs9KvBHwqSNWXrHzAftnZspSzOaGkzngnpiLH5zy9KOzY2C+5mm970QoCJKS
qkVSacgYyyjKUuqNkzvfvtQWroJte+q1o4rL4UbAAc/Xp4i4XnZ4MFYlBbWD
D5LSD8TDhdOT+PlGMXQF1H1Ji87GKb+H4Te5yEB+VKgQrTDVESL2jVVYJBH+
MsKrkiYvMFs1uRG9ZgeTt/Ofyt5NwwBSR2qkUhZ2GcTGcv+2xPKMDuo/pzw8
XV0d4OAZi0e6DcIF7PPAvLZpe+q/crzpm10dzNcAN95vTycGliDT+T1yCUwW
UBx/29iKqxAnMz4IZFjrEBRcudqSJouxjSMibrduPC6pjlA5TeKAfDu4dU4/
DU88MNN+rUCBQXlovDIaB9duLZWJTCSi6125h29EEoD76r5/JW/LgXnl0x+v
c2mgNkE70/uGBEn7BUUt58jA7SjtPPyjBIPnrv3LsEmFxWd+HHfn1Qn7hGk+
x1OzkbykvLJqmAQCPuust/VyIOTG2vehnbko3s58d+hLEdS5c/ytfRQOhHPv
mqbdaHg3t0lCsMkclaPi3cMNqZiWk/P0+MtcvLjj8HJeeQk+ljwy562YhPpm
f27vkIuGm1X37/7oSYblurVR4Twtgvn299Hr5kFwjeQbZfuNCi0VCSSFOQf0
c1yST9n8PtOAZ3GvUTTqHLeriR0hQkBy3jnLzjr40chhOXGvEFeeHB6TO1gG
36ylIlelQ3Fane/9WrQvnu5/KCrOVwqsP+pbmj8FwBU9/YciR7JgNLCoW4Hv
FKGJiU82Nz8Wfj1IE0qeywCWO2zTwk4xmCAjN9jonY0mrBb9nblk5O7p87xV
WALN1CGPdT0aGNrHnZn/m4PZ/sVt+rzJMHj//Mwh+lLge6/0T/ovGX+H19/q
TC2CFOZzSa+f0sBJgUc13qgUXs8fXM0tUiC8ufeNcqspDa+eU3G86xMEZi+/
CBRsyQWl9+76jr9zgW2gmBy2EocP/2Tk7OFPwnOrkkPBw6U4ueInwornMSVV
O9S3mww+Db7y77rjUeab1YVQsjN0TAVaOPuUwAtis5d+TD0eX94rckfoBCwv
sD6eW1Pr1D7x/EDYpyP4/mh2QdliFkp8+3bmmkIxXJJeSjuzPRVNhkyVKspJ
8PEJ6+5GYjQED+2+fMfJG9kmYx6990wEhUFxjyDlTJR4mNzN71iGLDw3fov5
lSGTfXnTo5xyXMk0+2vRR4SdXlOFnRUFwB0UNBB6WrnTsfxp02t1Lxy9c3Zg
pNAHZrbfZ7g0ZQVjnbnbG/aUwvmWRzZJN0kwpR9w/153HqS1t2bv86zGo1RC
h/fHaDxdee2CUmMGPiGalP1Zy0eBnQJin+aKUfxqQNFVmQgU4vx4+iRdHuSZ
rdzqU0mHvBM+qgc4eDrXVOL+87CIh33uUSOnzltgg5UZpwlfDvx9qwWy10Mg
ISHsqo9JEfiWVST27i/B8W1MD1/+JeLx97vzOh8FY315h9U5OR+c05OsHbTK
wiexhw4OfHfCt9I9jyIxGT68GuwPLCvD2gmdyLfGjcDrcJIicGhvZ5JTjwfz
2mXsyqn0Nl8ggstDXsc1pSzwfNZ9SzkyAF+1tn1NbFYGfZO69x85KdiUP/s8
o9oC+NZlKtt1yzD8SmLr285o3C8S57bEnI8lbgy00BfXcEHe4kXVRgZWpJ3j
Er1cAC0pT+6sP8uB53vN97GfVOk0GCYaSYUk4tSqfTrVPwtVdBa0ODWcwU+1
0Pn5fAhQrJPLH8vkgMmfcMXzviXYY847mipORi7Dp2EDG0l4oCWObkA+H/Re
m2TI/BcNB74TvkVGpWyei+6rdPsCKJF/7jWx0YBdzt417dnxkDG5RDsyJE5Q
vKcjLb8SAepfJzRYTCjg2NPd8+dDISYL6ph+HHTB+d/xSjG5cZCHA/XaWTng
6azl7sxJAr4jpoLHLxUjz+8/xxhkqajKwaA18tUOl2LItq/kSpA36+e/WqYK
2Dg5YDrqVwIXd+8xaPsRj6sfO85Ha+7qZA3vn7j0MxwTZD/OZc5snsf5oakk
yST4MJbva93mA6Vc/8JemWejfYC2uvujMFRv2viktsMI7XhUBr48rQLZAvqz
1CwSiNoXKU5u5lezkFss07YcXs3GbzyuKoWDYpHBUeUl4Ej5t6FraQj7mSwt
R/z5CRecPHfN8NJQdv7GobCPFzHuOC1/j28MCJEDGciSIZjJ7waL7H4wE6ri
6xdRgsvfsobemBPhy84auTgGQwgzsi57+DYT2e4It9x4n40tRRUXqKqlOB/b
d1PbIxsMvn/Z//BVDTQQG5gtgkpQ2f7GyGjfsc5LX//OqjMH4r7iy81tqxRY
u3y3aoutLb4zMx09czgfPj+d1dhXn4nKLsur6ZHBWF7i+WnH5hyzqmx89XNP
Q5yi58+9FXlw95b4zZGhbCzdeuJ39FAFKApuJ50e8gIrc7GWiQchGG2f5MPl
Vo/llFVNlW/KnfzHtYpdbJIwOffBycvv8vFRuOEn3ZgMuJgR/PI4SwicqjXw
ptwlwu9jia7UBRJWiQYNaVvEot9dofWk474QcNGQSntZCvnvzadCQrVwzTs4
bD9/CUT/kTy+9KYOOGSMmx8ejYE8h8RjghY0CKawXiz/upXAdr5Po8svEl6V
ifDeEabAve4LssrxnnDZ8qKdo1M4yvQ80nOPyESOG/wUizcROGN4SDRWMw2K
ycQ9DqKNYH+w9rigSRZkv/g+bZhZirOlorXyh8pR8KaZIj3RCUwSTFhOf/YG
k8MTrI/f5WDnbx6trHGFzvWbjSJHGDd5iPxQWPcCGVgTnsLpCDLE/NH9Vvi6
AMvP1Ut/4UyAc3sZliVkbNHuqTO90L4E5E5+vGe/ej5UTOkt2sqE4QGDgNZD
vebIxCPDeOJuDVyrz+9Q2UOGkZfrd3uebf7ueky6sMlri4RC5+0yJwi/P3uo
PDVKBk91/VtPiSGY3jguzd/jihlNAhkjXkUw5MTUJvkqAqyya8vof3lj26NU
Y+bLKZDKPLydm64JiDuVzIO9qKibyKXxqicdpXg3Bt5WZWJ9V9+wzEgmnpdI
6DCnFGKAqZgZr3YsTBBbs9OH1QjHBgoMN64moX3G7b+PdOyAqykvc8uldBRa
cag/mEvC01pLDXGBFqBamuvgN1cN9KUPdEf01zondejXxcdD8TXHyRvnzlCw
5B7DgRHfPKxf2/eojj8aQhxGzg1MVwJJW/cmx2Ap9ijIax5QzMdLKLfx5fpi
h8v3d0kndqagiZeO4mczMnaGhLMxeaWA1Eah1WPDwM222ON++Lgvisy0zhgy
VoB1xDkPyRUyZMiY6J+SKsbCAjSP+uCC8KjsoMJ0KQ7lGPeGqGrD137S7bO3
SXBhYX25dE8lMoean+gzyIf7qmNnzdIVO+9/1vMpbQiFujO7axkGqbB0xI5K
sqTiFG3ruH1mHhY/29p7ZYwMyZeK1gS5ovHBehN/gpkXDCiQR1g+5kKD5xZ5
cb5q+NPXOplzkQwEKWmOKp8KvHxo0ZmP5zIaThaExPaFAzH5y/Xdm15BKqQ7
tLZylqCyEu4meuA8PGe8fJpyeDNvH4Y8ZUNyYOVs1tvg3jxcvNi06rM7Dxjn
6QT53zqA764et7CLCRi0xeDN2G1vYHaon498VwGUIDKdZlQybLv5oUSB3R6s
F04cSBosgv2FQ2Vdmxwp3p1lclU7D4nVW+cij53rPMRYw8XHkQ8/WimePNMB
6DCiGfvn9ua5Hm31ubbJ3QFlyBnLlQ8Tew8pL4h5w9Id1zB+Xxpk7WqQZbFK
xCOccvtqz9DQ5N0dBdFRKnpObIwH7jMAX/vVj+PRRKT9oLyKcalGwXW/sTuP
XVHrmYLS2LhyZ7/tO0Liz3iIZ79ZXdNkgpi2lePoIBkpwgfGP8llou/HSUmZ
TArYJgyVib0ogaHwL2fFsvJRoZZ50oBWAFWTxv8k1xPhgNu5TxpsJXAr+sO7
wvtl+HSf1ik9/xygu33Z48HuXBBR3OEetZaEbWolGv8ZiHY+fzIy5rHp0c6x
qa/LzSNw6UJs9zJLBe7/TzHd3Fgc24KZXazmk2HftE36qVkS8lpyJDUc9YeR
t6I1M46l4CUmqGfjFA8GxacH+fAU3va+k9TK4AAXKvvSnquXYXCWcUemYAk8
+2O/rvaDghnhAddSdp3qNIz/EDJdSkGSawxhy2ZPSlgGrbX5+oCCiYLtTns1
DNEuLU7bGggqU6bKlS2JaFp3uMBSLx+oUiOEXpNGzP+721aSj4wvjDX718MC
MbbIJ3n1iyOqrBofp91zxKUAPHrFnYqiR37ufCKXgL8yzElX01U67bzpam6w
x8CeiKMcIyUuIPKDfnHXTCCck2571SEZBeeyuSpPR2aj+3F7p5YXVGSMerTj
1P1K/OYmevPxUA6IsbOYF+bV4KX0WxN+5YXwdNTF6ZddHtj8MVdfosWAlmd9
jVWJI3TwNi+bXk3Fe7srJfounCRwMt4x2/YpBK24/r3Hm94wjovGp9w8sXyK
yfdyMhUpejYbP/eT8djH6yJFaTG4607rtZM7iLjjLFK9rzbDlwSS6d1pF/jW
/jiITcsOcrYLpGmTkuDxNS5ClyAVDYukM9i3OgLPzf5GXadKdLnPuIs3YS/h
oAQ5QM86CBPeVXwkLOQDp77AROcPV1xxYn9/r9gcmsOrfEsjIjFP20K6Vc8F
2KzSthX1V+O1Hg2P/sckVNtqVlIhGIWzoPfYh74cQ61P+dgTaPhfKduzuNIy
YKWPqTSM28zVfZrk859k1Pvj3GboKdN5gFvui0BDLBwwv7/Vyy4GCpp0dHiS
U7H1wBhHJmzu7RAPo9cXiNDnPzB7yDMetIftdmidp+LGZYePz31rQfBSRVvb
Zn7FpN/IOiwm4p1n07e1bSzRfHrEkeE2FV1ObJ8JVM9GOQYlooJEGUwl8g1e
vqlF2PJM5nK2YBpYTTrsLpHPQ9GTjw8mmsfigmJsoboaFTq+CsrLWRdA0WLl
iOWTLOSkG1nl1q+A8Yj/ZqjpZbiTafzbWqsZ9hoej4z6GQupmdO3Cts1QVA/
9ltUXwA2R8RzPi5wxvQ2PZl7e6iIoz4eJfWnOsnG/KoN7Fn4gPnz3WnTOEyY
pql0XgiG2Uc7dvZY+QDXN/L5vSXFQFkOYBSkBOFUvqnvPX0q8giHHSzKz8Er
2lEn/ttSgc/l453fKRdAYWiYW7VlOZQyqb9l8XHHo29krVsvpuNF/+4PNs9z
YJVuZAchV5nAViRvFPosBOSlRoUiDCio++als+FjCi5PqR4yq8vAmxaPUqja
FLyYvfeSv34l7tlq9qLKKAI5jHfv49Ytgh39zCcPCOQgHrs56Z3ri+8Op9jz
ZKbjI1ax9q9W+UAT/M+muzIS1VJvUp7fLAcTnn7fw8E7CRnfju0vb9v0ubaq
s2p0JPgcplk1PhkEQGrIYiETUcJQ+5eTcg30J+59PaxhigtCtkNl7E7I+vbo
mSSTYKR7L1Yh/oeIfmPTsd4BucAoZbe7wCkfmc5c6Mqqr8DWsetH+eSj4HxC
4YnVTY+2MVyrM2k63qlaPRFUuBSBz55p1T1Yc8I44Zz278yZoNM+x7F03xDO
GHxcrI8oh0/qdheuNZXC0OehQJYmG+hllP930aYUHivJ5MvYFEFVSdzyebFQ
DNOK0jxRVogEalZgkkE00t8os9illg3UNeT0Sy2BZW4ptZOFcgTlw5GH+loc
wQtDWB6IJqCgXXy91rYUMDUNo806ZaLWNEPPzf3ZYO0uVfTbKg78hDUnwivq
8MqzNd+1wgrQTthVyC18CXdZcqsUtGXjyVUF4txwDKY73e+3Us3AvbEJCcG3
ivHslliGO/wkVDoesnQ5bEEt9w3n2uBwEI4HWk/0rBMhquxn6jHPKOROUNzB
esocwg/erFaWqMVqr1F6rqEsVLb+JC9VlgnOlSqiYddJMOY+UZX9mYYK1suO
5KlsbD0xeWZm05v7u7Tff9NLgMMPgg7tnStHhvA8u1O90XDni3+CQ7Q8oV7a
ATmP7obQqFcjFfx5+HhlfGDoDRH6/zqwzvLkYEzGXRdTzlTITAsePXY/H1zj
QwoPz2SD9N/Fx681CpHMdafjwascZOatMElUpwG/sZ68q04K9P/WPPdiPRT0
Hjr/aDNNB8UYvJfXUwl5Yw/q3Bl0CEI39IT3XYqE9asqi2YvaHC86YD3bWIB
jlQyBt6dpOB80u1+0il7jLfdKeB2lwbb7MOVBjdSoHUx6Z/4bAmwFpYkpXIQ
0ebRm8OU57EgUHP0ntdMJbSMDn0a3pGFeSLnKmTyKIgt+lljc/HoaZA1x/uX
h1DW7JxYQQsCJiFvOh6dzVxv5EYLcGdha0M7e3Z/FC76uJuSn4cBeWDr4q9b
lXDFiv3Ox+ECIBq4et8YjoGwb1Vhj9pL8Mt8mvrySD5w2D4sqBhPhrs/phKJ
0oWw65p0fPkfEn6fV9/J8qoQ/YzS9slcUiDQj5A2bJTc0Pfvb5plfRF8d5X4
VLS9CImSB0vEu/JQins0u8DFFcSHiAG2zWQ0+zzF6ZXohZ/V3trM3uCCgYje
rvGLuZC/S0zpaEA5rkX9/KYtmggapbK/PyzHo/LfpNLDx/PhqCffzyXJDNAk
7XjLcE6QUOFqSrZ9H4WvR5m+x1VZIJuakvCsRyKUHU3XctkfDUp7fQZDE4jw
Z3xHiOrHYgj+x+KRHVaJ0dYHk1MyfHBoPjyzICgbucW3fG9T9sZrgUbJCeJV
+I0Ucc+nvwpKQvSTYp6QwTgya4xznwe8Ytb83hWn0vlrmr2Jm9MU/G6KhLZz
ZoK976VqKW4aamhtuIsQYvGcl3ubb5QXaM7T8/DL1cH817gs2y2R8M7g+qfg
U2boyVUl9WU9DB/9c96STrFDBcun2rU/4oBvQ82qm70WssdDb9X05QLFQ3ue
2y0P2eRvZZV+Ve4Uy9W6P3JQFJdK3AIWH5Thk9QCvoUpX2QHR9v4Ci8wmy5a
csqmYtVAj/RygRdy98odFThBheEV7481hS6gqaRyXlm2AUpmpDOCNj3K56TT
Sb2aNEw7M7eitnkv86Mz/cvYMyC3mN5aeQcVYr91rrDH6hKYfa5USPD6Y7mD
6I8jR6hA2TmqcFkvGesXdlaG/peH8790K4MvheHFy80n9ZzD8GeA5B6RUDLk
1TK9mxoPQ46JkFhOiWLUzFe85z+ehFJhs7+SJEvw+WNF0+pTm/s8tW+2MPca
7gsvOHorLR69bF1ceVqlO/Oq77K45FFASuWTlz5jLI55OwiEZttgQaXQl41n
JdjZoMskQosFKl/Pkp9yJO65nXBU8Lc3/FASZmwWKoQrPvWtVUwkeEZdebUQ
VA3LHfeNHHakgI9fRu1HWgHqHXP6Lk1XAsl+dkXbr6fjy0LtGCOHxY57Qw+u
eX70w6s3FCSVDlNgQvcsyxXxCjx/uVs790su5EzWJRRk20N8YaVh79TmnHwn
qofy44AzNi/EbysNn4z8V7RthAZ+vWuampvcaGTiwO73LgK1RMzfdDoFocwF
ixerH+IgSeMGx84AGph8Udhfrb6bUCIpz0ixC4DA3Ve6jxtGYaH08l36zb33
59iGYGmnE7Y0mx4P2/R700XJ6ylqhZg5GRN/vsgTUkOe3pvmDEb+nn55iblc
rPny+dKXinJQyQ2oFy1LBX1SbHeGDw1s9brjHRbrwNj0m+5QYTI4XL3NdTz0
FGHo8aWRQtUi7Dj6KMs2OhE7lu2u1dlu5u8RiQ8lAafrIwWpfplQ4SNJaf9r
DfcaQqTM7lDBRWeLSk5fLi68cJRmncqCps/n/4VrlYALTJRtGAaARjb4md/L
wIXkGYtPPTQYajpfMU8lwR0O9s+GAesd6ypxPmF6BbAW8HJsbKgAxLpovMub
vLtlNzWTjisG8865huTLRsC2hyunk16lQcLB7XBHpwRjniwDbfYSiHZsT+Qg
mODFjVXrwuZEqOnZ+ZnwJw6NFvZwLacEY80o3e/M0ki0/+q9brujAizrrOQ3
xpQI/t84NYUncmHSdTqC26kEsvSzej+lJ+PWrWMTs+05cNdCwVp2LBfBMTWg
qTEFXxqF7pVftYMA1SGlVZlskBVIuekpbQcT1qdIXnwh+IXLPmyp3RdUZ0Uq
uUqDIaIHGFXf0kBx4MIslzAVjtz+oqpSqUoYa3+1g3AlCrUYkkhJKgWwpMj0
VCoiBts+3XR2rs+D1XsGD0f5MoFFUyzoDCUPh8w1C2lvM2Ce9EttJr8Ceb8P
2qdlJSHvsdDFG+Uu4BnrEC1XnwP64SbbHdsKgEO98JH/2Ux0/B7nZ2FKg28F
OkoT4yc66+/8/jsKOSg3Hx8tsJ2Ip/eysp4szoeDKz+sDj6whsvUPxIuewPB
4khFn0pRKTCOctHN1F8CkaeDz04qx6Gu8GH35/W5UOt4axtZMB3lX33cv+hu
g2xBhhm6zypAh8OperfcMdzXY/SDdSMHLn0M13svfqAzfqDwQuC+QOgxbE8z
Px+PgQ0Xz39KKoKfw/mOTFu8cM7LLMJxU3LYeBwHlyyouGbJ6uOkWIAvOLV+
mk3nATczt+xTuQI4cxzfMTrG49XFbxMxYeXAdAen/1oU4msed65Bugp4wZT7
sgbDceL2QMr6Z6VOKZYco8Apb3QI4L64sEaEj2E9qh/7UsFKT4lv60Mqvv1U
Y/s8PwB8txO41qPdIPzXdhd6bRpUHMxfe+wQgnc/Cyz3iecAX+y7xJq0Suyt
0wiWIRdAKsuza87h9fhOrC+91aAII2xaT/ZEeeFWG+/TKYzSnUeAsUjxaAjq
+VLP/rybix/+sgm8PEeGZw78cj+CYmHfgObPIlIC0m5ePlYqZAKsu48Xy0qU
41QpU7LWgDwm7z3R8+7u5v7z+V47FOKJbe2hCf4q5Xg/I/09n2A+yFnqX+kV
cAcBsoD414lSyP0vfZtjGA+B9jzc1rLRE9w91BNZeRNR7X1J6wlWewy9cJRY
2JGNng23FCUYC+C+75FZhm/OOPOz+8nWtznQv09lNa2Sgncct9h6RqbC1yoW
5hm7fKCvGRryyiAia/R+p+Yvtbj3j7L9s4OlMCk7tb+dWo6avLk3evbpdE7Y
T/D+p0BFzWDjyOQvycjyQq5853oULHCRTn2USIfVyVFPOaY0lFQrFmLfMMQT
5gwr9zb70uG5bPaWjhLojkoXPrREBut66WGaSjr+a+o4ZXWkFDFPmv2MWAnq
/v6StZZQi5XarAEtm3O1jPRWviSs1anmNKebmpiAtRLfU4erfaFPVtfEKikF
PsQZnLa2TkbD0DOmD9bK4U268/WJ1iq4GZuudOl7HsxXsNwROZ+OBE59uSVW
F1h3KBSTGYuFkvVdltptbsgWdaXH600BqnDZDvNNZsOi807JJfps7GZkt35z
41wnKVZnePY6EbYKj7ef3L6ZY16zx1lc6bh1KGRVZN9F5OTQZCYabt6TebpL
AapEOGpsp3Wp/gJoaxUGl4wkYr5G1R/zGSq0WDG+zJVIRIe+SjeKRShKiX1q
l6WrQa7+gBz9oByUv/HpA23T4xK6gqOZhM92rs/fajrLlQ37sjL7lF4HQf4I
1UPGloZ6s5+3T7OS8Ezq7tuOKzHgPc/jlL+SBgUCD3vOPAvGbS/lgnQN01HM
0vCKz2wOnrbqFiMmV2D2/Y4XLTq12DjCtfvkJj95b7wdTosLx4TPj0hERyL2
VI+4HLTV6aRppWUfyEwGwsoC3/MhImremt+4Z+2GxbsnaFNNJWCovvTCrocC
k3R2uqpKkZh0Xpv40qsWzsYx190/XITqPK4G26+SoF/GYa+EoBEceZt37Nxh
fTykfnXJ7EgIqB27tVeo0hv3/pqOelhdgL+eqXqceqzYGRzUO/0yKQI29Au/
jl6PAA1nxcZLhiGQNT5GPtKej1NXMumuqQQgg8ITt56WImB4uLepJjIHxTLT
uq2UK/HjL90j3XokHHmeeDO1+ipcUmdkMdC8imwpK16/s4nQ/N+bPq9nNbAj
t27SYboQE00OFbvz/lUzFCIMCMiQ8fJdobrZ3YHwTby/9sRUAvpMhEpESZUg
vWOyZrdxOtod5fPvj06CDxw51cUHiNh3duujLzxZeIvORSOFGoHOzi2fCnWq
oFZYOuHquhFcrdaXsOpJhX/0Iu6nf9fgnX2e5df0iBC3yuOsUH+Y0HFbTWw+
JR3NGGQtwk6GYfaXDJ69r7Lwq2iqFk2qBNheWL65kxoJCd9GWjf6MtFXQMVr
20QO/smTsM3op8E1hZHCkTcxwFHApOltRME0+6vEyNByMM7W2JaRGwqmyy9r
Bf3OwUw/s9eR19VgtmP+WpCHI6GE0yXN1YKAkRaUZqnnofBW1qdDlDkXbl95
+X7gej4kpfLF2L/3xizl2X3RBjS0z3s6iFtS4Y2fzAfV5AqIPFeQVGDuhE1m
EQ4p+qWYknaEar55b8XUk30CFuNgi0Cx9pOIy1DjfGAmvq8CTONliwZbTQiX
5sJeXTwSjfFzZXNjIkkQE87scdLHGXwpfBbj2Q14ju5r7mDwVXgdwaTTj7Ho
Nx/bIsRaDI16/+Q/OVJh5uIG/zZdP+SYKix72RoM5AMytx5IBoGK1NYU7fgc
eNQn1vqYmIrUjUoFtfduUHVi1LhNIKCz98adLTedROB+f+yknhMVWrVHr2nF
JcFnS48QS0EKHGvmf9z0JwN4W8STj46WQXsScPNvO46qTyqTDjkm4PzVxbmF
V/HwOYBpYfhyJTbdyHNlrkxHx1qaTeFaMnw6q6e6sVCB4xQBn1cHyzffz9sV
fohTU6JlOpy4loZqvcSjskHpQFs6Dhoqttjl9FrW7pIbHFSWfmRCnwukf/LK
re1UuC6bVfX9Vx3GntKcXT60yT2Jq2WWz8mgfk1yQC4hAMVvaFStfKBg4dnZ
RQnhEDijJ3RoJ1slFDOcGi/NpaKg28CXIzWETmMzScvDvCrQNXL340rZpmfK
N7vrR8ihxP5RpWdLqSCbmHqlhpGI6xGryaKXyoGzXYIn+14UGjBneCt8LoH/
3s9YPk2jx4abCx+SvQrR/vHf8rHxzR6K7csJaaGC44YF6TlfIU7fE/ES56jE
77LiW+78vdA5UZLy/sXDGNTyj0y7ohIDv7SCU8KdvTY9WMHkmX8pBP187SHP
XIpbS+vj1thz4FusU5j2g1DIWdxjF+VQhvb/LXyPKPSFcLbWveaDJHjb/bKx
d6ISahdsGf6d8oa8U4zj+6ODYfRJu2JFPglwaYCj+qtrZ7lbPXPURAE2XRwN
ZpPxA99+828CdKbQ7+e8epXrDMZ2bVEtVaxE/oroD3d5VXD030TfzihPeKnD
fL7MKwZb+2s5jMWjkEA553haJRc+HNh6lcCfC7tZct7l2JfhAs+EjNz+DDy3
wD9143MRJvzZoyCreLLzAKV5YNvjNAg2o2PK6MjAi7/G2jdSSbAeJmV3aD4H
KnR0nIJCNFBknKg6LuAIvZ9OdfhjPj4cXkn5eysWHKTp/iW+S8DwaMWHYYMl
cEjnl9XSpRJUOhTY6BeWi8cynSZe+9XBYYeLKtmrvmD7+0Hgcqp955BinpHz
lYs4Kp7oc9jCEefcT1UEy9lBEqn4tFBoPPA2ah3JPlIBAeISFdeWi7C6q7s8
/ScZFILu25mXViDrdrUtK7sT4EzXwe3dIkXoRyzOihhIw8gtD7OZ/suCp1fi
aDZv8sG5IGz8euwmb0U8iV5NPdlZSzD1FSeS8Vj1mYThAy64tvZoidM8HxmT
jX/O1+ZhxOceHUVvKtDdkR6KyC3EINu6H93ToSgZ3/K2+3cS7h/w5HwWlYnO
oiSdIkIAHClCkzaTNOxVvEpdTauBk/FhFhNGVGy7wcjymSsOFo9erSsWNSDQ
h/W9KOA1wfw3LLuic4MgoLns49ljVBRZEdJjWYqGzCMbn+2OZeF7L+5xpbpN
jmAxuDj9lwwvDs90x8SXo1nwSDuJl4aPhBN9n+3ywNP8++gZOfnwzVF1s/uq
pTgrK6o0ZuCGUwukthuNtaDOWjZz2cS/87lvppusbjxO1XKK399Lgq/fFmeL
lRPx1jXZ/4R2lEAC7JmOCC+An05s/SJYinKapQ6aA2XwxJFLm/k2CUcJFddu
a2ZAsvPbuGOGGVCdmqI4h4mQ/pOFxVI2EfYd7npaKuqDfa18M3eOJEHYCVH6
98MJBAOgWr9myQNC7383nvikY3cuY0YMOuOsQv6yNWcU7GVpNG+3dMC8BeOi
8eCLaFnGMrJrcdOLWP6zFRppgudZ+dIidTQMSI/y4rsbDVc4tCgfJE3BWbEp
33rqHE6PGay7raYCh//di0SuBND6MWGBa8EEBVGW4dy5RIg7RpndWuUDDz/K
jhzdlYDJcSvx3kYNSP9M8tX7eScsDOOfUMmLxF/8sfp6TElo9jXqUFFCKKpX
7r9UplsKutWvajnr3WH3JoYyv87BNHfOrRZy/rjAeOGq2jsf/EB58fbxGQr8
1Nppu+HrSqhUuh4SMh2HQjc8/+nePoODorxWbZt+92CiQ2Skrxq7rlyosj0d
AbB4r49Jyx5KV/VcqiqzscH4RcbKzjiUmOd8W0oXg+FCe8oxJAuujUXOEFYy
QcQjXObvZBWQW6t3RVwvhxnP8J4rVlFQXKwR8/nhZYLpCWHlHV8DYcdGKk/u
w3zwf/EcfgxTgaxo+71fOA73FbeyN7uScXnnEp307RhQrjD/LC+aBiSlR3nP
8mPwx0Ybl0lLOXQ9D66tepKOObWak30FpdDieF4peL0c+mspdRUPcqEuPCMg
zJAC9eMPGuR+iBEGPze3PDVPgan7/0R22OTgyotn1me+UzCxuouj2KgYGSPq
muib0/B1D1mZT5oCz/xVX6jsCINhnqAuuXlvcDQb8dvDlgdTRw2+mKdHg22s
hbs8SxFQc24Xh3AUQozMD4+j7s7IeVLKWK2nAt+9/vnX3SmeoBWpS/r7MQNC
j+6Y16VR0EWG+w3xUxCELhYpBdwkbc7dyjpps9+0Dv+j3XcvRKeyck42pURs
Trz+/oUYGSOuk0x2V/qArJCvyIxeIUy9veX5uoqGb1oi440zc/GSeISoRk0l
9tvIinrYpuE4pDUYdl3sbDw3t333IxLORns23zh4FN8EcOrsrijFouGvxDuD
wdjwTuU/PdlwjOyx+uKRGQM619sqr21UoEx8Xrf8WiqMO12sKyNSMMo6qL6Q
k4a/g6aF67QrQD1z4rvA2QRQIpxuuC0WiksdbF3332SAmoBDQkamGmGmt4RT
w9sLVtW1lQ2dyDAp9jPkxp5CxPNW2jO7Sfjx0kpevnQRSFxcCL+/2Wvfebvo
kYEKXk0alR880+DpscxRn3hlGKsxLpGITAZZl8bqOUkaBP+0VnzkVQdtCYpG
qo005B+x2e/FboKyP3UunWsL7XR3I/+qastAzmCpdwOW+VimI2Lw8Y4vXvfd
3kx6TUGOAlDlmyyAk73ywZWZ+fiPcW1U3FUe84VVWwhAxt7gey5PCOU46+Uy
IrqZu4thz5fln2fhhbyxwxePFODPZ9//qdgmQLFG04vUK0SIt+d6YMUf0rnK
WSs6okrGJ00sTVLnkkA0MLB9v2cOcBSvYwx3Hob+bXuzY6MU9rR2ZObSx0Kq
/8OK3RRnUIz/Rj98Ig8ePHlzT23OHnxk7AaVIovwfNrzMRcDNzjwofm9skYW
HLzlMMF4qxC7OfoKy40pGLbjlg8djzXhoHMM7YCUNQrwsmwd/JaOTeJna7eK
BsHgmRiJjY1K7CtdUniV5YPLk/niP62DYH/10ZAHm5x4ufLZTymbWPyyTPyu
RC0DzYPyGh1+JJTPucc4u2GMOv78R0w9q7G16dOv8PhSFD7wUNBuPh4Wa8aO
S5WadSYUfGXYSZcAfseXty1fOI+zPHyjD8ZiUVvY0WvpTBhsfdwkamNEQpq4
+YeDB3xASF/2gv77Bkg4SHt9iFCFxwUbc65MBMCgxQ+B/rM0aNZt2CHmbQG2
j9T+1twgQ2Bl1rB5FglsLxvOTormw/QNyZJLZR6Ev0OTfr4Lo51SIQITg8LO
sNSztKfsYBI2fEkWC841Bd9/4if2Yi7ENk7MP/9XAImLnHX0K3XgfGu1iTRM
xuauLQLDlmRYdXrvE+9uB3/seoWqlcjomGDbS1GsghCnY2IeU1kQY9furZRo
AlLfe85zBrh2Cv1iPV7zKgi6/3U0Pq4KheJIkX56vk3/8TGCZCYy3irSH2To
zMF54f01+Ve88OuT/XVVjfG4amN91ftTObDbcO8ZUiqCncZ3HrY8I0GqjsQ8
XYMPbHk4YbVFJx4z+nnTrCYaoCS9Tc77IBEfPvWk15yIIWTuepznzRaF5ZHb
WR2FKTjGdlDiyVQ2aGobni7tsMMKifGK6Nx49Dvwg+9ITyKyvDti47QnH8cb
KU9DhMthPZTjZU1AAb4e2WM3JEOBG9s+2tpcSsfksDO/jOTLQNbgAVFYIBMX
SRxUW91Nno2RNvyaFkpgeD5vvbyNCp48XAku3RQQl89WYXpMRq2p9wVnKTmY
cvzqvgs6ZKTmPPTIoo/GZ/F/j7b554Pl3pNVGW+oqHDr/hPu1Fw4YCDM6FdW
COsHNFhjXp/CGcu92v/VlOLR30HPHcouYHXL4HHnHVSs2zUjePN7CKFx5VRP
Lkc2/muz+SEpkIZHxwfDz8p7oZ2uXvCV40Q4H/3iYGU7EXIezlttfRUO+xR6
9bdjLnZdP0Q5UVcPZZFlnxwCE4FkI8xA6y7EXzrqvBmuQRArvy3NOj4SrdxW
1E445sFkoNEujwtuoJfLcG2815TgJ/BPpjM2DEaFnY/tmMsFIt+eFLed4XBa
LPrMtxsUkCWdGVD96YOLeGDMiCcHuXXesbsOZWL/UXv/sM/W6FghtaCdR0U7
u2bRq7uLQWBZwEfkTS3aX5F/xiAdBdJLIfWxy5V4+18DIXPRH+wiPqprHPTv
JFg1zsTQyCDHKi707j9HXFrp9W0JIqLH3bHBc6nReM3t5f3jPj6YGH7Une1i
NKwu3eqOnKXACeIHqY3mPBiau/+lYE8WvugLEpLY34hdRmeNtgjFQxuufzld
UQWfpP/cobePh5M3D6uGmMaCuPHhwQtXLnf6f963eGRrPq5/j73vtp+ICsfM
Tvm/c0cLtp9dHVkx4DF1snPx7RXg1qNp8rxNgf/UtJhiN6Ih4C8v/68fJGxw
Vfqb8r0aOLXuYZJQOPDP+H86VFKCnS1dM0++EvF7mtgaxbUM+yR372JfSYRR
stHd6DyXzlDd8Fv7NhIxPsFA1+43ETU+NJd/F6JC0TqL4+/MXFi1eJPvoRKA
pHvejCbv/YD/wYnPO6S84NXZKfpZkUysVckKH+iNBiaNgXWbmFoYWO2NkpWh
wsRZ6ysrdzKwg65D3MPBFgp0Lh1ezGvAn8tshvvyozqrZWKENT4kwEOL36TF
Vm54+PJ5QMrJ83BygiQimpMKnBU0Y1a2UDzlKe7FPJuNrTa+0tZ1NfC3RehP
lTkNf0Va5yhsxIDQn51F9RMk3LJzRnJPbyU+uG4u8XGVCiFVPUHbwkM398mV
rltaVeDAOdP+fNC3c+NVWVFpMQn23+7ZGLDNAKJwZvDiM2+sKnSJ1GC/gH2K
7G5z5db48fnj4XcnyVB6wzfuyLFCGKU/3+3WVI6Kuz6pWt4oAAPDmaWnh8Kw
z7Dl4ZnxNFw5tZ7LMxAMyxFmlnUa13DNIvqalX0cvFgy/31S0p/gJmz59yM7
Ff5d2v35s082/nYdYFhVpYBwErNdtbo/7rwyo/nLIhdunU6MbJ9PB9duJ+L+
dTJui3lFSdVPxm1R4ooLfEUQ9Ob19J3gGKA0pxh+aiCDiNvxC0m77fBUXUjL
V+lyHHi/dmqPSwXYneyvu8er0/n5nvKkkCkJ8y7/rJU7QIQ1UV7P0c+Z6Osi
sMx43Q+GKeqb2lkMiSW6hb4mJBgnxOzt793kPnnVh5HWZCD9TudMI0XCI29j
CyFSNf7Rke91qCmA8xezVE/2noOdozed7seUgl7f7b63OSnQ+pSTQSXEubNc
2TJhTisaF1lPl9+yjwAnr8B/UWQi2pv0UqQ/BIJLsJHczrQaZPNZecV8uBjq
+U/91s7JhVda1DeyvYlozqbFwL7HD+Zmgq6p7DyGXd/MRbimU/BxjI7g2dYS
mNmXdrfVqQSp5t8rs5LIsP5Ng6mpPblzxwfpw1xzQahI2GPtWxIL1Afvpvev
+6KB/62ph+qRuPHk1ttDNuVgEckTIPC5Fm++tJP75UvEfQceHXeqJ6Py9koj
A2MfuPGP+jv/bjpOyEpLFnZnwA6xHp8fGRW4KtXbJugaCjOfXhDendiJTvIx
dbrn0gkJC1odUt+jMb9r8PiRLcmg9MrSSkfbB48TZDXNDYqBsCd3RmTSF73v
ZfGrFG9y2e+eaWWRVBS7GdFjVVQA/5GLC+e2NcD+jeCJlIIQ2L3MwP+KFgJe
QZy9tkZ8IKhhpRAqlQOOKR8T2/+rAL6Yayru/+I6n7UxXpSSccU3OBuzwRMF
IqmC708u5ABRVkzG6F4eSr+6HOGoZ4hcIjRrSosDBI5FfttKTIaN80mtkSMk
bGO7w+fpfh13pKrp7LeOw7byF3KFEgC6X6cCs2SKkW333r2310jwMa/Ih0ZH
g3CJlt1R+70I/Jy/lOJvUiFC5BH5CTkeOJoehjp3RELlF2vh3WrZkLc9baWV
nIHnBRlVHtLbACurR2SAbTr8KmleuRJSiNxezCFfEsm4XaKl5a5yOfjn2bb3
9JegOmW7RVN9NfTxKAuqWOjhBSe+1VY6M6zgVdcJemfbCQysctKmiSjJ0AsN
55OgsTz14h7lMAzh59Yjq0XB9bBfhYHtx/AKV/URKYk81H4QExUo7w+eH76y
fx/Mh5OEz8/EljLgUaJKn+Z8CWxop3H2pJHh71C63NfBAOh8Kqu906UWuLsW
ybvlGnFRc6uGzyuvzgq2A2fROA3jjHL3zkeGI8Oc+hmzF6lIy8rXrtKPx4uq
p3XW+r1Q16754NxeCn5w0InTPVMJWzYKWCI/lOLOy53amZ+uwhuV5wbmd/Lg
/TfpDK+IShjhaBnY8HRHKdeUvEjjXHxwW4f38pZCvH25q9pX25HwNFpYqagu
CFjrfa661FOh/bTmJ92zITjaOqpwnicL2b7+UP/R2giRy+4M+f0XoSrx69ec
N0Uw4uBhy1VPw/G0UKtdwZEwWNHD8/qmKabPf7u//NUBdDkvm1HENNBerqur
7406qomJP2a8F4UflrfVRZ00JHzfaJoLqg0Axpgdy9rPKJAh6Tj+RMcPw9kf
3Bd4mY+HqPFNOdvqIeZmpezCgiPMDZW+YO/LhZv5htcTrpXiduGe6btWAAIP
HGyO5Boi8zXhtwkvPVGu79jh66ku4DVwyH511gKulB17/9czCW77M0rlDUl2
JpgyvXTe6wHbvX/06m5yTqypgnEGLRibt/5o3LXpVTanJb48r66Ho6PlYb+4
zaGZL/Jv2OV8UD94z662vQRb8NrWV9cvgHWvmN97cT+cHN7Ztz8tAfeEvXjD
9jgSbn3cGiOuYAHvCLwCd92jwY1/dychgL9ToJtiFKbtDYnidLShfzQwZs8e
9rWNwjJ5rv/8XWkoIRvZxfO7EcKaWtt4W9zx+N1fLhxZROgqFcheds/B/+a/
PnV5bQfb2wT5eDyuYKjkoOoy12b/NbQf2dsTBbcP8fdpNXtA3RVL7pa7qeCh
fFKZJiBMUF+7bOH9zwvm2I8NKGRS4R33Mv3Lr2H46oAW+3JBEarucEv9s60W
2ObKeNfLbKCG/8VMDHse1J5flfjBWYZRAk5Jd55vQeF5QsQfSgTG5Pwwufsl
BlMf9G8t5g2Ee0lYckwjHt0vWKtRsiOBXtv3pts9w05Dm1UjIUEHWDQ8ZjLf
SwbGxZGk3wuuuK2CJ1TMpBh9+pj02rPqwCP+3kjDPR/UI3X0mBTlwF+/YY0c
/VKcE+SWF2ryA49LO/TFFOzQeCTAg+mnOxrlNW/8/GSC57uu0VJbjLDmv3/s
930yoXtDTyV974VOBgEWkRNhMVhESHTneOkBjW3hiUSGSDDyYkn2ky7EdtmF
R/JO5di8thTl6poAp4OWffaerkbRh5OSPt3ZgIlPcvi/XEGrtcP/tByDML+k
hAMy47AitC/w1dML6JMUem24tgLirJ83P0i6CneGNe3tYo06Ldee3CrkzUOH
jIXDlCxvrKvrkk+ZPI2fZHhVawLsYH+CXuf2ggyMfip4Ky3MAzIyJoRn/1QA
764hykftLKyMmsmhj05HYY1JvRZqIapl7mHZeZOIYwpe/44+c0MiA/Gek281
mokwHP7wNAf1zdp86bSMCWceMJYZspGhiBr1uEshE+XuP/2hNkpF5n9VhQwf
PHCH9dt64Z2XYdlK+dswNRVcmRji0oWoqEUqGvBIisbm8aBcCbZYMLv5RP69
YwkwPh0J3tZZBsYyPwsCzkTjKYoKY4UNGXM/ndnJHnAd/mNrY76f6kVgW7Qs
UVagYfYh8p/chShckwyTDpgsgqkxgWrRTe4kJdq43XC/hGv0N749YKbBykUF
6lZIAFMed8v18atgyedtdekAEXMftfP1RzhgY4zMNvNdpUDtGNvLubcWd+tz
MboWUSFzS/HLurEkoNn+DTo360NIY9vYGdVDgvCVl02h2TGwh7mjf1sCEfoP
1NitFGdBz51dae5spshkN4HmSVHgVMDjdH0uA9NoIS9lb5EgRujvjOt/NXgw
PyuBqzwNBMyqthSoBINCIDmqDmoRGBMj1MTzkZtz4U2WbDAE8fk8mZ6zJQzf
PBwby5qJLym3fZg60iF4R1DzI8NQUFfo8qoyC4InBUeF95XSwIfb6dpL1QBw
kBtiWpEjQhnlZrjVIhHCv3Bv+Z+C84yn8n/jeCq7KCkZGQmlkhUZncseISOE
skf23vPYe+99jpH1MysNOVeIRFIiSouIUhmVRPT3f/h99H3d9/1Z7yd3EncN
Ogju5uATScExuQQ10rEgyHXOeaN5koQs4iW8f9ZrIHSlZdJnjQRzPm6HQqIv
E7jbXyc8/JuNlsVr74esnKGDXJN5lEgExvjc/KbuFOgNdd6U8reAh5FZJpNP
r4Oqh0giE20yag2MKPgubfOd2PT0q5RorNonpvpum9PmEx++5NQqgUPMJoPD
W8qQwMV357R9DqRYWyT0t2XBVutuDs+4cMpKQaQO7aIRrqT58xGOXsbp5cPi
Aoe3n4czWsz9tRe0evuntF+Mhbox5j4RixJ0vCwb/64hG27Pjr899NwDSQz3
dDZZQrDjmPbu+7IZ+G7++fhjpv+QpWmvi5ByPVyV46++1F4EN9YkAzLSSfCV
2czVvNGfIEWwt/72LxvzbkuIeC7nYx996wmL8ny4tHwrtX0uGdopAr99K0Nx
T2K0r1ZvLnAcoW8eLSpAJkUueFBRgrEfzzF4/c1HScYRHmJWBfYWj7A5O3oi
rcofR8PlKxC/QbfPZW82MNOJCvPdSUCeN0yMz+LcCN8Zdx2VkHPBgemZaK09
kfDTs6t5x+csEIjfbHPYUYzJZacaQ1oKYFx/PuNlbBD2/nZ95BSai9qDovPZ
lhGAjzMUpq7FAivFndUz2A8aB2/4sn3Pg6pLu2yv2NXAqBfp4/k/BTDYwcaS
YfcfGnD1rM00RhPas491bO2JgmYHp7PVqtlw8diIdrSvNfyZdcqpWLAH+BOd
s9TogpSnv96cUKmFWod3/2j7YkG6yUMlYc4YR75wcl3FeHwom9Qw2VsJeh13
Zh4T/PFXHKf889Ji5F621418RoQDdHw2v3rrYefvPGN6hmjC67/86pIb7tjV
l1W+KKcHJTPnvaxCi/ChVKRdSq0vhJ0PENx8lwtOYy93PSrNwnJfscy+tBLY
mXxEq7o5EQR8jubt2u0LEKdkr7VAQuG7HU+6d1eBx2iVkL1NFWquOXCt82aC
Xc1+ntneCnjyIUvAMUKPsItD6zPvtn8yewhBNX9SYYIyErB51wfOyt368/Bd
OopZz4e2kPOgIaGMUtgXitpnR90rqcrwoEBBc8JIJWpkhtCHvcgB+1oxNjI5
A8Op7tT/LSsGXpYu4ef0dajuFVbo+EMNukw/bUUejQe+hW8uQpedKa0bHwgT
NIXgnqVBd2szFy59GIh5S+sHNXUuqyfEiZi0JWtu9jsOxnqJuvkCOcDz4c+n
9OhcFHicF/RvRBn9uKYXhbjM8V+pbGyLWgk2Z/d+WG2sR+IxW/kKg2soSyP4
+5BVHk5wuXeQ2Avxz8ML9yL6LQmqw97q+90y4KvsmHL7UCyM2j1Q8TErhLsz
NY41RDJuVIZS6W364u43BfkK1aaw7hmOdW5ZyBFV+HL+QDgoRb9v35jWxrN5
11N3hxdhlI+U+XJDFZK41pt+/KrAIYmo1a/SuRhTLxMvz2wLj29N+6QLGBEq
bVPFpuhjsfhnpy8cTwQ3RhYP2w8OWNblyzHckgHspn/1ho87wcjUo4y4ZTJ4
pAa0ykVnouiNJ22slyOBVUQ76kd7FuyndbduZazE8oGNtMcSZDxQXzpX7xuD
z/dePnibpw4anp0fob1YCqPdxafYIl0JVTT5T9xlPWDeWjT+dFEaRn2OmPmp
mgmHC6sPjSt6gtBoVuG3qTq4/dxXf2oyCyflH6QtRyRD5/dR9UWbANTuf+eb
e4EICwdrXznuzYTd327+d07oOiTrxN4fuhoGpa6pfTavyRBX99mpxyMQDYXX
OMJsbSiDcQKLK40x8OnFru5EORKsDhgM2ulGoM4qaaDlQyE2Mp1ZcfOIg4kd
pzWYGIwhQOt7IEdsPtaU+1Jz1uWg2Nw/LUmGTHChu7f+/dcFnJ0dUCLfy4Yp
roqD1Y3XUVGRb++6ZRyioOFqhWQlFH287//ANYpwnCXwgUp0CciKdX1a60wC
l94k+qR7RMCf/jt2HszHL40e9Uf6YnDxbPNFciMJmMWKKT9kI4F/a//TWdVK
OF7kcdT6xAUsLOYZ1DqRgYzq5xVnm2KgzFdFRYa/APc+iCstt80C7sLaU+LP
PcBd+4G/j40VxaTYpUxwNBRFKtgPTG2R8C8vW6+ucjHUCO1ls3fJQ+uXfTHH
HtiDMDULc+/nCKCo+n8sDruG8nbyb6R/52I8vWr+mg8J/F7d9TrNFAhWg7dj
2Yb0QJhmcqceAxmtov7dEKsmwcPw5hIocATTVtpWCxc3wo9yCQkP91yMe+HN
8Te/Ao0k2TwqWQuh/MI+0/cqiUjUauIKag+CofCdc0tb8XjRWr0Pb6bAAt8V
ePs6A46fWXZnohTDw10ZzAHMaWieksRKN1IId9JSBDUUXPGXHEfTEXtHsMr/
8bZUJQSKAu4s5ZxVoezbKRiqs+2LZJoub0euanzfwXdy92Ip0P5SMv8QWITE
jcqB7p3u4L80zuAw7wTMz48z3hTxAz+doG+92t6gT45gq7wTD9UV46yM9HGg
QcMd/lYqEn0POqzeeKIDPNGkN/3DahjFPze/eysQ/ugkRBzSUScwXTn/XMsx
EzN3Gsx8F6/E0cjDFye+lwPd919fS5VIyC4xvXD4sRu4pb0slSa5wUz4R9Lj
RB+YaQ+r5/cjQgdrqcZAbwJEfgTBuP2hEMZ7ylh0kIiXaCeAf48BUGvfU3wb
YoinB9ltD1wlgPsvL/csBjpKt6ysgkxjBiYZuwx0nq/ECfoDd1eOlQNNx7PO
HWJk7NdSu3FlvzcESfOPNPU5QO1voVFhsSvQyd8V73ExCmJc+O4YnYyHPb+T
RtYDAqBbtCZ01y9PpBnxu8ktFwTcVHQ3uKTOYLoDs6FfqCeWcOacy8pQIxg1
pUjE3MhElaP5b1O8KzDEv6/AOr8MLDu4WpgoZXhS45btQAkvqtaz5Ibt2Nb5
ziA/uhtEEDG9KbnGlg0zLz5r1KrEQVFY/Lv/VuPg8YL8+7FcH4xJOpiWVJ8A
uV6h1lOZgTA0xmWpZeINCXI2rs3ZJwhW3PTqNJ8zUL2FX58mugrDua766ceS
IP1AxY2hkhJUyrxmYjHpCXHdd9QY7xqjb9kra9OX0ujkXXfbNtUPftoRv7dq
xYF515binzpOYKjUZhcVisRJ9o45owA7CEjfmG4LMMZnLrtjWdO/UuKPGmst
cZ0mnCDQv5ChzcIwrpOJji/IePjQzJ+DHiQ4x6wb0xFOwkbJ8/s29cPhRehk
4fMCNWgbZjEr2O0H2e/U77npxYGTUq2Vyb9IeL7McZt3+5z9ZMOjel8ATq5S
9Vo3xYLw6UNKPGJGqDr4t39/ORG/kZru+bEIE+h78ipS2XyQ/EyRol5Pgmr1
4KJjL6/Bke//eO3PhIE/Ux5rmJsztDs5ge2fHLy981DddEYeDGfliXzdmQWB
MRZjZiUFUOHuUcrsrw2+Hz5+1/1RibsEO/49OxCGb09eWzvX5AXsSaeoN7ER
c71Hze16DCilhfP9mds9847DuCr6cibaDel+Gh9Lgm7Gkmdjx/LR6PUV81s1
6UBm1dqVspSKMXt6pVWrCzDn9caXJN4oCPlgMGc+VIfTjbPnedyLMMd1fjH6
YzlkT/qnPCsoALbnzHWXkjNQJniRgSMzH05KaPhzFgdSfkq0UjHpZcBPtvtN
Dy9kQxJv56XxpwloEZzCeDW4FO26XVKdQ9NBTCxS/X4oCWqpj12Ys3VGezH5
9dXwS7iWc3bvv5dE1H8pdG9vrw8cO6L8judIKsY77Lb5pdAE8VU9z1TiwpBY
uOFbeycSCG2s/514Fk0JDVPR0KEORbpXccXK+1xwUSyxKHfCD0QKa5uNOaJw
UoPzR0hoAr7yWvShSNdga6SN9o44b6h7Yk/sJ27vuZiK4Sf/FaHZg7mxB13l
IPHDmmvf2SpMlyCqvS4sxWOCR+4MZ1bA++Dbbo7qOfgo4e/Bvs0zBK6Jsicp
w/7wfcfbH7HUBdgUsFhl6++DbiPGLtx82TDIXzb0zzcBON5ZUp8YSkCBlJj1
s9nlsPviumT8ui4M0qadSV53BL2h9acvehrxdBojIdapEEbL/byMMuJRyjD9
lOJMBZw7yPI04rcPrtI8jW/Jk6PQmwqbRpQWYXb/nhPEd7l4fFlZ/rdxASTG
RfZn7vAHu19sNM+EY7Bey3648hEtmp4VLW93IcFLagvC+OtsZLeytrTeQcaF
EPGVqEZfCBKhQVvmMthdHeNMLg0C5/0PA5sHA+CdE7n0xzb/vDc+OWeVIUmg
6nciDsVGwoXqoBkl/izkUznKydleCrJvnQw53l2G/o6rp97yRkKh2fppGc0q
wDCjxylQjLW25qPM/zJwEFGgMIWMp9iFVvqbQ+D+8tHLkl9i4A3/hMhcbCTm
kbzWxyyyIGXPC7oD27yUphM8trv9MqVBySLv20YIMLZo3aPmjALqe7vO+ixq
wcOLz13W7sdgaK49h2FMCL55P97g/CYF0r33zSggCR6pfP4aneoDzl49VWlT
BSDI0M/vXlaFNNk5wpVdoVhDKHaVGwxH9vfc4WT/NvxX8DIqvJOIsSjeznpQ
lHLSQKJwl+IVMNi9ZSvyJBvvW831GGlH4vwVpg8GInowwyig3NxYDE0vfmU/
JhaCjPM3TZf/apGatnjQPSkRDkR1N+056I/0ldoTav3h8J89eVRCKh0W2/dJ
fJwtgexbD9Mrf14FV7MrcwLCdWCXoh7tdoiLkvfZ8G6bNxH5ixkO9exxgSa3
odWebA3gr3lx83FXIszInIr8W1CJOxxvKsQlFcHpoq+6sfTpeLiY49p9Mhnv
YC5f9EsikNOKG3bOFuHzR5WhdH1lUHt9DZ7E5oEA4326v77X4fRa56c/Uf2E
wqD5m6UHzhCOqmSmrw9v81caSzOxMg2meeTG/3Mgw3Pp7xXXYwXQWlHCoPxm
ANRoax5Z3FMIXxl+SuTI1sJUxBMRJzwPR7JSoyIvOsO1lW5bh3QPiBQZqVxT
CUAPi/fMT8fJ8OzRmH7ehAFY7dN9sqM1D9+za5/nOsdEoeZKqiA+D0W9geDx
6jepsBT109rAIgNY+ia7frUkYICP4Jv1G8G47596WMVaBhDEVle1KHUoVUEq
qZysgvSdbF+UD+XgZ+VddSEOCVBt253pTDZF0QvJ55Vq0lFzeC0zu78Cpbi+
8tR4O8Dhv68TqTMPElhXnygmzsSi1Nug+ZgrhWA3lHGB3X7bH6J8s0eonfGY
ub0801US1qoTb4tJpmNN9PLO42KJcMazktZePREeBY0/CX2RB6mUItd1iQI8
3dapK/UhBnRXsz1KmuLwqdX0z5U3GWg9tlVzKL0R5kT6HrDMC1HoNyIFdqcF
gEZ7T+ArY1NcDNdIXWxWhvWsmXNveg1RW3YPymTkIPmzqnTcgVBIO/D4clNz
E8StdMxMyBahS8eXohuvUjEtTW3SWdUT+A+6v6t/lY2P5X8MtPRXww4RuqnY
5GsgZTr53/JSOYxddtJtyg0mWDf8oDQISyMtqapO3zcNFf86cB0zu4yW1Uw3
zspUwdPhwC74EQKv+Xx5zSbkQVnu7Q37wFSgo8qcjOQoBLqHE/oSOpYophjB
xB2x/d7fO9udoyLDXa6xYA/+YqjyW5OjaiCj9gGhexM7cpHnlz2D3LFrlBea
HQ9b0zKwx4YsFv8iFcy0X3LKPChCNwtKykt2F4gx+XLws3YqaHfVCj9lCked
Ky2+2VlE0Mk78yqapQgM/+7Te9iiB3fvVV9xc2iAFKUle92/JPg7eoC7eo8b
1p88a/15Yvs8fODOiPhl9LPUFVfNI1Bc9cf5xxczkdzxXHSvaypOnmyVsH/j
gAa8nO8jiJFIVUjr8lqbjLNfMjiYJ7Pxt6yL0s+UCpTcWXf4ZKEPlvXk3a5I
IYHDv0PJC1+L0dH1+zWNRyEw4vqfs92xVFhdnLng/NEK9IvTjguUVcI0t/mJ
UypXKGSLLDJJJge/pzJNTPXHw44HV45obut/yjYsQEEzHuHVVtc/CYD+f5Hc
cbNpeLqhUt5ywgYVBZ/U3Kkig6R+Rvvbnhz8y58aJL5ZBN8jPn0d25ePCgGq
DqmtXigR+5qtaHcaPrGd/G9XGwmfaJNv8qW6EBLCDX8yEn2hZs6TZZdrJfac
lOAWGQrC791K1aH30+Br5+ZS3FYSxh81NbNrdkK+UOqLyUPlQG97RudbcB44
002ny8ykwrsgWmkLrWhYW+l3DZ68jjvcOQM8PgeA7PjFG03umUh3N+HrDsF8
lLUJzVFlMiE4z38suiWaBEzt/qQ3ymT0U76c+LIhFtvIxD7F7nI82fggvnzB
GxM8Pnr/mE/f3vN0MTI8njjKLxDEm56BfcxrU90XKkGz89v5tskUqDAUoa60
iIYPooNDwXM5uNd8D4VHKwuWEq3ksvfk4eAvy3z7nSGULtfb79PYY7AtX8yQ
U8QTk+eoN6NCq1CG7eomg2I6aNrPxvFvc3PAlMYbccks+OcqsWI6HYXR4RdP
d5mWoWncquzXrjJ4YbJT/uLxQNRxrpKQ/kRCBUNFgeTGPOAKWwzyrLVAV2IP
aTflKOgy7VBqG71G6RHMEhCujQFwrv2y8K0Qg/beOzMvlIsip+kXS8r98Bs/
p+aFtSx0i0rhupUTh1/2vnojb5GPLDJN1DnjqejmoEZN5ixCFtdHrswXE9HV
zWj9Zdc2d3P2S0QM5sPXZqbPUcx1UK666+Tw1TB8lm/iRWlyodxiaOTIL4sF
AkOs6ivXQtTmevYt8VYYVos8m4zt3e59F37a/TLFkM02Spn6l4Abz/YrrMpH
4sRd4bbkTCu04BxT/yzuiCNmWp8PEQvR7NaNnkzvDOAZP5q4U6gVThRTTY1z
Z0KlrI+4mFYx/Hef6snF0EiK+3e1cbuUKBy9rc9MqfAFOZ2nD+79C8HjThPt
iW6ZIDd1f6h+RxIu/WHtka8hYatGMP9pkSxgnk5qziqKBlLE96CF/9JB8isX
23P/ArhzIzBqRKYVMprdvVmNCuDI4XAZk10poHR0K4iHc5srKHvg9F0jSplk
1Z+7XilQGdg/evh2EPzx33vWj9sA5zX35PQ9LUbuhQcKBGMTZFH90vtFwBsl
nmTMfsi4DuepuN7Ru8Xi5tszkbIjKUD6PMX0sa4BXV4ZV7lLOeG/pmeMm/bl
uBKT25x95whU9dF79FIy8fT79rll6iDChd5C9r41MWB4mduaTJWBCRyBV6VM
MuCIR9/x/XO5WCNAETJcyYX62zaRDS4F+DKTNDtjVI/8F2In9buyYEzzftre
S74oc7K0cMDVA6ZJT58+dciBXUJejp8qKlDQWF359S4fvH2jOGBaJw0oQY/r
qqqtKGY3FLOTw0PwU6z0w/uYDYbL8UdT8zNRPJ1Mx3YmA8e8TI7w34tETZNW
n12LNchItmR4qBgFjPqkmrBnRPx7/pCscMcZPGniYEdpDkUDmadlxVMNUKZz
6N2D+lD88mqqqL44DaO2JtvWWPNwKF8r9mS1N6X9flLilrA//Pig8elxTArS
e8mWpJyswor7nI35X3Ow8MKqba1UJXqxCwTWRESD3AZLXXooGaK5be49cNOB
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
4IiIwBCfogP4W3EkVr8vQ/ZraWH0nQ7ws9ow8uyvTCz3Cjsy8KYa3hHyaG2s
E7Et666/XYwrCu6rs20+GgPZUhYSNTU8RGkpqdc1KYUoyhTr8qw3F25MDwVq
7k+HmHd/zxydyoY2raXD9/tLkHjNr/S+ZjQIEkKlPMPtwDmAs/BHVymmj3/9
7tzhDn8bp5am9jymoPIN/VJADZwnL0iVnElGjcz/Nksa3HDaRJ33uFk0XI2X
3TzKQEfYP0Bxjc7TAw5ciStoORgHAulW52j8CoHx47d9V3Xi4AGfl412aR6u
zNc+9LXIgvSB4v1JVEb40nWG8aF6OgYV5U5cL8vA3dj1NZW6dsze9edftS2H
xzaHmtu5IlA1XOqJ8oE4vPYv4OnlsQTIlRkllOrTE2cIrcI+ERVIut/23Oeq
HBAR+qcjoe4D+6+XkLD/yoNHQQshw3Q5yET1MuxpPyCT9nZOsawwSropm7mN
Z6GCZ6urclYMyMyTp/eMVmFS/Cyp2rU84BuzEzQpDECfJ5FXDrgnIKvNk6r3
Vj7A5faa8/jJE8QkBQf3Tz4VGGhmPnAyMwf6490LzP56wqEQ/1SDmVxofm/c
Yu6ajVQjfwcEe62A/8tGRNOaMhg35ZG0puag50ufUMfdaFANe9bcllqFk+0H
2zqPF0DpKPmXhc5QtImS642bS8aSFxExTHEBoOH26W/Q1EXi2fU1Ug3BOvyj
eUY+4noOSF4JPrzmFI9yulLCv/QSYfjijX3PeXywqWNwlvq1B9L+NmMgBgZj
khn76o8HEfCqYJzmVp8mPJaRciTfmwte5/ip7Qbgy0cmBxVU/OFj+tKuUZUF
1BzqC77ZaouH7Ec7Gg4QiIPaPrr6knVYaXaLkEiZC68E/E+X7/XbvWjrX5OR
MRDa2PfFmM0D7xlzVjJnWuMH3kj3/yAcP3tz22QvR8BscTF13vPr8LjvLDP1
8CVIauLUZ1D2R5HGDntHWVfYDkhcGx63xGKzmuHEOBekJxBFDUU4iYeyfANb
9857+2EeN6lILswVMN8hsUjEglXxXg22OHhcqDD96pw50mjmcqU8s0IV9nuP
j6qGI41X6Kr+WAh41VqfhGFLcMh4mdJkegRFE7CXn9QfZZ70ieVR+ULS4Z+B
FSzXUU1Fd/tfmhGKDMWe7wo/R2TrKp8hCtehjEBIfgRLDti7T28IRsfj+UaS
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
m6yxF2DD7TNzNHv7DqLkZfhLmYfCjUUXdHN90dntASubeQ7QZQTqPeROQnul
UJf/HpfiJ/p3f5vZDYjTqtScydJZyBPMXKJyOgmlr3pvXWZKxql2xbnq6Fxc
/Phl69YHZ+xm1nJuyCyFb7z5a9XiAcDAdTeKJiEDbWN+bXj6FGNdbs6SW3AZ
/NMWenEq1BKKKpns+JMjEUmktj9BOnwkNP4Smb4G7FraxSxVcgS2KZc8Y/FU
GJrRNGAxvY5fu2kpCC+TcaiR+KL1eyjMBvNZuB5IQrbl8vt6sgmgaGLSul1e
hjQdW/fZHeKBmlXKz4s2FeVqyErVA8th9o9u1EJcLm543PPd1AzHLWuZrJdc
d/DEPZVEJ6tQFDmcnZf33IvYqcVz1z4vEg31fVWY9+bk3JSpLPP8MvFiy59o
25R4CLEZuUGfmY0zFpH71jxLMb1xmEvJOwfPN1b/eX6zHEpmF94kH967n5Xa
Td4ohcTtQ4HfxkMwhiB7/tO0Lj4zpJGo1yhF6z+ClPSPSxB9X3A9qDtF9NMp
3DjQmYps73S/ydOl4syKcndhejp+O8mgaEqpC1LwSWZrKBHbLqkLeicUIsHO
/YgvZTnYeDUM7XcJhthW547gxWCsELxzkkIoCqh9yP1VQ9P3uGVHNfJBFtws
445rSa/d4/1fVuw9rjhFOVv+p02MQCP5X6fpQXH0Y5JU4SfNx8eJrt38Tcno
6aH5emI5E0+QB53w8PRHyibaJ0JKGRhe5kQix10N9qoW2uNTKZgqqXmy7UEK
2BGMPb6yBOB02Ll75EkFcFKU8SMHXRmI/GZRdWJOBdkTXnYStFaoM6dYnyRJ
Qzhi2KOXEuWDhZ9SL6Yk54FQtLul1pQ3ZIg1FV/iC4S7XvGfiQQ55L3P+05D
qxTeMpA3yKoV4FU/u1Gqf3mQoB35+K5TOL7006S/vGMNO2yUf8j5I+Dg/HMa
bcYa2Pq95EqVXokFQ37fGud9wUogZXRG4hYhTFohwrQzH+cZL/205wtCVJeo
t/GMQ+q7VEgimIYT5I0n7k2n4cPC8Hfx+WUocbzTpyMkEk+QDpjr7nluebrX
fPnTfJQWJW+miU4E7ndTUimrKUDPRj/5+Gs+NJhunPt+1xRK1P6r/1CVA0mK
zGQX5EwIZft5/v3eDsInzUa790MTYJhzOdztfD76zVPMvZ4NwSpevgyhkyUQ
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
wAe9Rt9SE4WJA5wi3KmXKvAH3ViJnVsKyDn693S9DsVozjXJdJ8MGH4uS2q2
GokGYh6BkVzRKHj2mkqugg7wP8TpOJcU1Jg4IrnLkAWOg1OLO+1uyBAwdYzJ
MA5sky88+lrsgKk+GfYHyiLx0mWG7owzFmjWd3Go1VuY4Cj6+ZmPdBVGXar4
vLO3fiJKcXohNhYPle+/8ZEjACoNu/+71KGNzBdHFsdfWKAxG8UchVUkJtEg
/eIBWwiMf7LpWy6PV2m16cNJXOC1YOn8EXMP1IqUsC8sMIXuAmNrUVUduFVN
Hm9tYo9gwvCXelSMcOHdYkwNTxWGnLBPiVPLAOU++0nde7GowyzSxfUoBrTK
m16V3bqFx9t2cqN/uiDlJtmM13YI9lOZnEtZ9YVTAhFt55euw+vDoq9YGiQg
cKCNmNwahIwK2+nGzsYwJnF1I/zaHmcpolKBtyfW3w7jpKR/3XGAc/1n40wl
sr7oP1L1PhOYX77J8oiKR9qtdXsy+kiYFk+eeUbhhtYDWzeSpG3QsefsslxO
KBbE6Yp1ZPjB5/tSsfsyjOEc+X3d9zVmQBhp+G9jIhhLOPVLupWcgfaA3qDW
kgFaz781OPTXE1U4Ov+09XIRz5ByHSDVqEJ2tf4n7v2ZMKX7IbSXJgo/Vi++
4fYIh4pTrc31ktew3oWx8JGrKVIublwdl/XHinU+XTe1EOiafMOxkCmGhzQo
aVhtTWCfS1LZ1JgDqoiZMUmIeEJZlfqAbYseLAgtHFFgdUFL1QnGi4rniXmu
Mdsv/arwlGT8aYb2dPhu9O7z2r9IfJjaziXuEwUfBu/s/7bohoVv67Uqh2zw
n82Z+4/pPLDoOKfh5/0hYFL2Yc5U8Tx8ZZg2G6C/BYJaEjGPhP3xDmfP4OUe
K2jubOAyobWGaevU85E97rjbceXY1a7LxLbKAXPKpCqccmNNLSRPh0baiJ+f
yGLRa2Mrpj4vHE5fvE3OzGCLX3/49ScXWmB+8tn2l25hyFY556C34Qj3PfI5
/JuN4Gfh/kNvrV2QhkaP1MXZDWcWu48FCHvBqd2RzPnjeqDP4axiEeeCYsaJ
1Cu9igRvoZMZG5Ye2PQj1NitLAnswmz8qUw8MV2WTylILxEcr/hyblWV4dgx
P71pYgikuN5Y1PyeBfd77+W32CbDRDC9gUpgIt509BD8IJ4NgkqubM9ZyvHU
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
+3NNNFr8cVTKiZt0ORo9X/Pp9BjKwb9lOdbHzCZw5dJNryIxGULWC+qOQald
o6/U22/9IwP30hiXHdj1lg0ri9tWbCW4s6VKko2qwIiQ0OvukQ6o1aum5i8b
hUPEILYvmI1XiYMHlwNy8bKlRrhmsjeOk4++FJkMx2Gvzh8UW6m4cSRzOSPc
HO4KvzmxUOcLCmp9LSsJgqTrT4CXl1SGf3/zJUp5h6M+4dd+S7oqtLt0t0f1
UhH43fjjd9I2HvTnZafefyuC38ncbMP3Y/BQgx7T2msnEI4kN1amjMGFk3Tv
rkRagdJZTdeVvZ7oXxs18rnXCk3X97pcHrsC03FOe+tmz0KqWQ6XeAcPyZAt
51FXbwnit+Oj2v9FIXVeTQJXXg3aOXe9Lr2YA13B00tkM9rgKTyforJcChPv
9Mz25zqC6Qan1Yfj0SDWWd3/VS8GParOXhPQ0EG+uK2wWxyBmPbkuvSDU15I
4xrN2rNPBerCfnrczpUD5T9OobEJ4qQnFGVvX7eX4JPGiK5J40g0Mqo83Lan
Ft840jaleOfAoZwf3OYjlkB22/8/Vu5ScBEd1XT64gh7XazN3giFwhKDyLt6
0Vi0W6huEO3WQwY3gVcXL7uha7CoSE+ZP8Y/0Fyxzr6EVmSfGylIkniY6j2B
lMZDUqQzZVhdqcLitA97pgbiYM4h3+0xsRI7KlvS7Z5q4qFvoY+LP6Sh80Kr
j8GsH0bGS+oqVqQhOuxdu+DgiZ8pzA+JkkXjCU3346KxRujMOUZ4wxyLUat9
DZZgir9ZI3W1Ru1Q68Dtx4vinniE+o12oZkMyfoAwWruTRH+qW3Rf7EnGp9d
1Kbbm1iHSjZc0jxCGUBUTjVcWvXGnPnYCwTrYhhWj2Lb0xQFZ6KLpAVpYoDL
kn+wjy8OlQTYR9rfWGDUGzrrKgdXDLyqGKbPHo6fykT2nzE/jUUpkDzvpI+j
gjJfD0YzE8gH6W1afxWhVk/wD/f6KDzM28xXs+udpSmach4T6bDofurmYREv
TG/oS3rxuATKnzAw67+PAjlWjihmySjgi1N4acMTg3PpqV7v+7VwvzVf39Cq
IzqOGStWOQXgi/nF73+GVXE8IeNU74Yker2Zmr3WIEL6kXfu2a24WuzQnbe8
O+UHTD/fm3d/yMPC4zctnkfb4LGfVtIXmJPwG+Fm1kPPcLQ/wTZwlTIXCwTe
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
1wl406onei85B1ZTfxDvPrdC37Bam51WybC30NaRyyEUlrz8yvOHt3sgI/+c
a2IOXrf5NLPRUwQd5pnH3s0Gwtq5B08+iXrib1ZrHqalfOQ3Pt69q7cVaaw/
D+ufSIWSBpvy769ioIfzz9rbYAvKJ+9eqZUbNVgzPt3153sBaCpQH61VScI8
nZsCVEzZQDgd9lBxUxuywr6PiBgHYWrAjcAjDZdRhZFSsV5/EeDygyftQwZY
LV3noqIVBT+6TjAnLQSgwEsZkUySNh5R3cfBdNwBWr3KR0V9EvGrTw69B5FA
6JnPOJznT8a7z3IBV0iwXjf+qGK7V7N6SquXWZNAsbuTGNl5CrPa7nksafri
E5UYO5XrErCDEx+crI7DyoaUQK5f3tiTLH5wKN4W3Vgm6A5ohAD5kntiHHcq
+Lexu7977w6hPRsR+cNR6FYQKP4syYRix76mqS1bjfOK4u2vJMqgbfNsewhL
KiopdRH6GS9Dmf+rFz3u2znhzSCr10zCKtZ5iy2+eHRicdN/8CAapZxUKu2i
AvAT59Y571+GcMT3RcX5V45wmTum32olCMN1jlPoQ0jQ3jEn5NvjBm+8ry6U
nbahtCfpaM1Q1aKmCh3h5RUSKAfFnJpszcT01Ju+GpaJYMolUn+6yRg4pCh7
f10NxE9yjxeOj4Wjd8FPPbW27e9z4gnzaRFXnM+b1d/yjMbnz5tY29akYNfg
+YTulWQYKUqT1+VzwzCrA4EDQjnIfGKv3CWNpbu7wtvPcV4h41fxK5YKJBIc
fkqI37JPRhNH4/vPBYNg6gMxUYpHB6eDsl2z7cNg8L8TBxs3g3HGX6Z4l6wD
Sr2eXEksoEH57gY1v1BDlKwN+ta3FYgVA/zZtlwu+MDuYa+dZRTenDiZtWGQ
DWY3JNqjBhwJxtRvZU6cJWN2av3V9P1JoKatv41uCduc5uZ1qTcL9Ake26Z7
CdrT3+eMNRDRjb8h3vaAG5CaTYY3lKIhYsHxkkeVHF6l1HLO6DujZKT8kL1A
OrqO3s5Ui1HFxbkPd179DsEUikDEDKcqJKTpML71sCAkOPwczouuwIrwFEOu
C15Y9Enr53WrRMwt2n/wrHM2RmyVW91SLsLLhQ9cB9Pt8WDUh3vvTvvhxPEr
Y7VRFZjo4BCwoFsGbHH54cce5cHSK5q35trKoKB488HOR+kwojZuTvstCWX3
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
BsuFadgTnA7OVTv3iHgEg16y6afbiynI/JqkeXM2ClSz51eSNEpQreliv2xy
FrQweFi1pJfgg6crFVwno8AzQvdYeyAv5bLyI6afKdmg0HHspuShHJhU/GBC
tNvmp4YjDQZFTrBXXu3u2od0ABEBxyfq2SCT8SSx6tkAZUMqi2Q67Q/eepis
qPadYvv+q9TnIH2UfiD1uoerFNXHqre0jmiCy/y6/dU7ZeB8OrVzcKoAjqVV
iVI3iVJUTVetKsXTQVfG42tuXCVa9Bu8GaANQOdUtyfUBd7YtrjqtumWAIxn
heN3VHjiWO/j/6yYwvGfw6F3zY2VYC6v3sjQEYNO+xzWew6lQzFR4IInHQmv
6NnzHSm2xoSk716vlkl40ld3cnYzGjgGA8V8zKwJ4W37GIYqnVEyxSV8g7cQ
83ZF/2MIigE/Po2Zfyc84F/GXWv20nT4wvjbkmkvCf1eXbAKPJ6P2dZJ+o4c
STjX6rL7bF4Dvn8cKr7FlolRMkdWfIsLUXGWmStnORbYdyvRdDGnQMs9tpjK
vxHIM7XcaeN0gfDQ864Xr2wk+IveWzNJjkfNutY8Bpd8PCG3yHmgJw9T9bYS
t5jTYbDgxQEO/ixcWi8K/SZOhKyXVUYkwwh4wCC+p07IEaZYOIRuPnOGgSaH
WTfQBsNhqZOMIlXQO/E8u1aAjA2z2Cu/VAMSm/3pnnVqBBpHl4iCp574rNnG
Jn8wH5ud+7/wV4fCrjg55YyNbY4yYw16tycGxKNSZytP5sDquUtxuFIGJBnu
vYpLpXjyV9H5B2vlON7Yok5nRsJfROP+/JwCOJCZcfruSDhGGOjffDUTjSPV
YTHZV5yw5kP2ctH8ScKBYRr3mLYI3Njra501m4WeL9JPG8omQqPa+7Ip8wQg
2ndIrVSUo2SDxe1m/QrY4SJHIxdPAuO/WcKJHKH4542btd2NYpCtdszlXsyA
RcC351Szcf5IDr/eswTo2k3b/OGwJTR6KolZ9qig6vc7QfK9phTmEoaaW7IJ
8HiHUX03pzW+X74q+flfOnbT/Mu+cscNQvy0Z1u26yf248N02bs06H2czcB9
hAyhlAcCD/3DYLQhXeLH1ZsQcuHN5WKNSBDJEpJjB3doqfygqF8Tj05CilE/
NRmA3n7moiB7Kf6nlJF59rM+RZnmi2WFRQbeO23bRh0bgx8M1kjcdf4YNnhD
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
SwCf
                   "], "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1: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
oZ5E7GO9sryPR5mg11V1hgNMSD2dtLDLkoQd0frMl71M8OdwHprgepWkBEbv
ppNw2LG1wkaKDewl5xlF5myYzI9zZz5G/jjBfarvHhuUKIIuOtFsyFg2escf
faa+DHUDlzcHAjo/ZCy/zIFDwNe1AvNkM8+XPmor+t2jUZ61nwno/Fp5oCMU
8XzLTewT6ry2/f7PJ9Ox7vohVxuncP/jg2xvYE6abtn0Zh3yUyB3fiqPEg3u
bbHxPlRdA9se2H/vKqqBQ/lva8MWs8F/e+Z5UUE2UO7ruc1MssDH1dtjQzgF
TPVoo5tOUeHPf1mm+2ypYCW/OisWdf0s7Cxl4LieUrlDsyQJjjxuXctxXRIv
d39+EkMC/53p9x8fkXBI4YGuJ/qW57I1lRafSChqaGasbCCBy++CwovVJBTr
cl9goG+ejA3r+scvDXcqrvO3YR7WOFbqg336/ecpdS0N1CO77diTBJwe9q52
9GFBYp7wRvVDLPjyhhZmakfCozvVXMbGLJA1Lb9YY8qCKRfvt0zkXwNFh1A+
3JejI/wSvr+ZwH9sscnbtZhfP29KtH7EAPOeKrcb5xhg+KDhVS2bAydurrHZ
W02HtoikjZ4UOgTquDEtPxDw7L3EYrGlDCi+/9iibAUDGOHc5qkRBAyKnSLE
PtOh+dVX1cxOOqwzFFavl0W9PxiWe0VxGBae2l/Zt34YUmNlf7Nfok6Kb87o
tByGm8/y087vx/s5XQ7a4gT0BDcabk0chtEHd4OUo4bBJO3oox7Mw+eMj4nL
7aRDhe7BWX5nOkjdt9b45UpAlZChoXYOHfi38d9ZkU0H4npF//VOXBdt8+ni
IQZIHcgsGPjJgJKhipbFT0kIOriBmreMBV+XBPlny7FgNU+KZ3kXCS83/FDJ
j2HB/XOfY+ZfYg7J2aK11x91S48RMYK8v1V3l/f9ShZIGsV81MGcWVMY8mG7
AerUzc/CaSocKGxK9G1D/hQxn1dYlkSAgVGt3e5nBJw1vlQjhzpf3Cc5p51H
gHRjErjQCDiS9fLBYdRdt2sut85gDnEroVcEof7uvu0aQJ+rgagVjy6a/ayB
7gefzU7tosGeawnePpiLHCm3T0+gzq+N1BfqQR4aGt87sMOLCuODdet9syjA
pH9ekvCECsYx5ZR29NsS8z0e/ojPxl7NjbrIjwNt11M/ID4jH71hv0Xf6azH
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
oovVY2D72e7Metm7wHb15Bq3mlvv7QEvIiox
                    "], "StandardDeviation" -> CompressedData["
1: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
62jE8Z+kl2fvMBHA2HHNeSkTee5ckiUohsjv/Nw5vmJMS3Hn335VhK6RsEUB
azfsu8Ztf26agi0aqvLF+hTIWWqc2XuDgv6ridkJX2nwFbE4pbmH6O1/3v/5
tJmBBpLTtGILGf439HY5r6fihP+jzJMSDPDcFhG79NEN3xoPk12OUvDg2qQG
jysZ3joN2XZlXuDfctI+spyCZs3yudh/dPRvFrC6u5LQfbKtzWdZD6hKW3oa
iDEgWj0vZOpDx5JPqaKnLKio1/luISBLh46s4XamLA2/5n0/JtVTQee6/Pj+
UndQ8joFPkcwYMu3UfIPxQOb7U48WPa3Bq5qIR9efarFk+6GY5eP1UJsKn11
zLto7E3p/v79HTHXv6tGVxc1gvaiwc+uPx6XP0yuyKpoxNeRB5traxoRE8e1
L/1TLgKk3nZN3GqGsv7L1SsTm1HASpMyr2jCDUVad8V4J8KmVAwcCL1bVHre
vny6Duuj/2QNz3VjnWx2XuJWFjr3l4q98KjDmTqNPk8PNoYr4/0apwi/bb7b
gYJ6fNRb9TXjAwvSZxiFvQT3tFZ5ury+UwtreweTY/XdsEzX1pcXZmHV1u/n
2q3rcbVDd572loVdymm8nzpZaDx/29xWqxlflTt7i0s60fMgvK1apQuvu3y4
E8KbMNTxbe/+S52oyBX3z3naCc5JrYVVh/MxFP485alzC7q2q1WuH2nBQc7x
noi1aZgs4c/r+VQEHz4hqYm8Ypi/Y9lenMjALbNhPQOefAQqsBSzruRjd8vZ
Y4r3klBhWdSeuj8OlnP5agpbYyGhZbPKRvcRocOVO1teBKH/rVnPrMtdqJX1
q9zMDMdviSgnuvl9kF8OeTdsfgCFabPfC2u8sURh6nbxg1vgna/rCtD3A3c7
u7RUgeBmby9TpJyBHzue6HWb0sAhVXzcys2AydiRoLAIGsz7h3i6WigQ6dwR
+99lN/SwFZW36lNBuqIc119AQZ3KD7qMFgXTQSz2JJmEEPVVU9r+ZMTnmN6J
W0LGogZ52egTKpR7XxqrrfVE9N2FE0pzZNBC/Hgf67tDWih11cUiEs5uzcvi
U6fh7JO0i+EXGZgWFHcrUPdAnt1Vb716Cjyuya5ts2Lg85M9Zl3mFJCt1YVY
i654KV0fc34NHR//now5/tQdgoNrrE0e1OOE7xH/Np0G2F3gLwoxb4DfpVze
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
ivcUPvxWVsFEs1DaUpNOg8L/eIhejA==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 15, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0323834, "MaxTrainingMemory" -> 1033008, 
                  "DataMemory" -> 282448, "FunctionMemory" -> 409976, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 3, 1, 10, 26, 51.674145`9.465848149581612}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]], 
             "Version" -> {12.2, 0}, "ID" -> 2415225454440620157, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 1238937338526786206]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {13.5}, "StandardDeviation" -> {10.327439179196364`}, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7976243291166265683]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 8830488112310637183]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (13.5 + 10.327439179196364` #& ), 
      "ProcessorFunction" -> (-1.307197240841123 + 0.0968294252474906 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.987660137524404, 2.585345654107999}], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> RawArray["Integer16",{1, 3}], 
         "NumericalThresholds" -> {26.55663454402195, -21.11128267489731}, 
         "NominalSplits" -> {}, "Children" -> 
         RawArray["Integer16",{{2, -1}, {-2, -3}}], "LeafValues" -> 
         RawArray["Real32",{{2.58534574508667, 0.7071067690849304}, {
           0.8956722021102905, 1.1072208881378174`}, {-0.36472415924072266`, 
           0.5142157077789307}}], "RootIndex" -> 1, "NominalDimension" -> 0]],
       "Processor" -> MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Calibrator" -> None, "Method" -> 
      "DecisionTree", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[93009], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 2.334804351062665, "PreprocessingTime" -> 
      0.2198046`6.793581770453838, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[3.380377588003914, 0.09748227240128038], 
         "StandardDeviation" -> Around[8.156689221497386, 1.281879968886801], 
         "EvaluationTime" -> 0.00007224901179385928, "TestSize" -> 15, 
         "ModelMemory" -> 5952., "ModelUtility" -> -2.822944504321759, 
         "TrainingSize" -> 12, "TrainingTime" -> 0.004324671915780886, 
         "TrainingMemory" -> 70848., "ExperimentCount" -> 5, 
         "MeanCrossEntropyHistory" -> {
           Around[3.309830566887058, 0.2284587184246642], 
           Around[3.326376329115796, 0.22752812784294038`], 
           Around[3.5247990841430155`, 0.14837596357204927`], 
           Around[3.404748705065412, 0.21080845918631338`], 
           Around[3.33613325480829, 0.22599032666976884`]}, 
         "StandardDeviationHistory" -> {
           Around[7.830453370704589, 3.1246410900780823`], 
           Around[7.911051799273173, 3.0652713600175763`], 
           Around[8.746800478983001, 2.4380704311799], 
           Around[8.313086510804236, 2.757167467788745], 
           Around[7.982053947721927, 3.0059241247562554`]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 15], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 5], 
          TypeSystem`Vector[TypeSystem`AnyType, 5], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.380377588003914, 0.09748227240128038], 
              "StandardDeviation" -> 
              Around[8.156689221497386, 1.281879968886801], "EvaluationTime" -> 
              0.00007224901179385928, "TestSize" -> 15, "ModelMemory" -> 
              5952., "ModelUtility" -> -2.822944504321759, "TrainingSize" -> 
              12, "TrainingTime" -> 0.004324671915780886, "TrainingMemory" -> 
              70848., "ExperimentCount" -> 5, "MeanCrossEntropyHistory" -> {
                Around[3.309830566887058, 0.2284587184246642], 
                Around[3.326376329115796, 0.22752812784294038`], 
                Around[3.5247990841430155`, 0.14837596357204927`], 
                Around[3.404748705065412, 0.21080845918631338`], 
                Around[3.33613325480829, 0.22599032666976884`]}, 
              "StandardDeviationHistory" -> {
                Around[7.830453370704589, 3.1246410900780823`], 
                Around[7.911051799273173, 3.0652713600175763`], 
                Around[8.746800478983001, 2.4380704311799], 
                Around[8.313086510804236, 2.757167467788745], 
                Around[7.982053947721927, 3.0059241247562554`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007224901179385928, "ModelMemory" -> 
             5952., "StandardDeviation" -> 
             Around[8.156689221497386, 1.281879968886801], "TrainingMemory" -> 
             70848., "TrainingTime" -> 0.004973372703148018], "Index" -> 1], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.592777893744343, 0.07827454520353412], 
              "StandardDeviation" -> 
              Around[9.008439290759034, 1.128261166668154], "EvaluationTime" -> 
              0.00007511914577464096, "TestSize" -> 15, "ModelMemory" -> 
              7728., "ModelUtility" -> -2.916060908548685, "TrainingSize" -> 
              12, "TrainingTime" -> 0.003571674682851674, "TrainingMemory" -> 
              75520., "ExperimentCount" -> 5, "MeanCrossEntropyHistory" -> {
                Around[3.6500664610569085`, 0.12731930461863356`], 
                Around[3.6365283726624504`, 0.1194680700884262], 
                Around[3.6421595216898273`, 0.1569085074523289], 
                Around[3.408652896136967, 0.25244034019651823`], 
                Around[3.6264822171755604`, 0.12663473332783773`]}, 
              "StandardDeviationHistory" -> {
                Around[9.32287497348156, 2.3269519947035326`], 
                Around[9.087573968708924, 2.28560052575767], 
                Around[9.286764690029448, 2.7611990157180277`], 
                Around[8.379828150550669, 2.799627639096784], 
                Around[8.965154671024566, 2.432448264431864]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007511914577464096, "ModelMemory" -> 
             7728., "StandardDeviation" -> 
             Around[9.008439290759034, 1.128261166668154], "TrainingMemory" -> 
             75520., "TrainingTime" -> 0.004107425885279425], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.623921329226364, 0.06024425982027589], 
              "StandardDeviation" -> 
              Around[8.713926408110279, 1.2307732318118993`], 
              "EvaluationTime" -> 0.0006937887781307763, "TestSize" -> 15, 
              "ModelMemory" -> 97328., "ModelUtility" -> -2.885940882704115, 
              "TrainingSize" -> 12, "TrainingTime" -> 0.009834725879601963, 
              "TrainingMemory" -> 157446.66666666666`, "ExperimentCount" -> 5,
               "MeanCrossEntropyHistory" -> {
                Around[3.592343545635009, 0.1279562201008009], 
                Around[3.6005510215571745`, 0.12533705535747994`], 
                Around[3.6644436211720697`, 0.1337078938093537], 
                Around[3.6553380845969423`, 0.14240093362318265`], 
                Around[3.606930373170629, 0.12540298807773193`]}, 
              "StandardDeviationHistory" -> {
                Around[8.326557260452537, 2.7244745373714747`], 
                Around[7.60711861725567, 3.3498971394169326`], 
                Around[9.767340582286064, 2.1707807388315916`], 
                Around[9.43125742047943, 2.513266782809479], 
                Around[8.437358160077697, 2.668916182229082]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006937887781307763, "ModelMemory" -> 
             97328., "StandardDeviation" -> 
             Around[8.713926408110279, 1.2307732318118993`], "TrainingMemory" -> 
             157446.66666666666`, "TrainingTime" -> 0.011309934761542257`], 
           "Index" -> 3], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.651049167491761*^10, 1.1665367222918568`*^10], 
              "StandardDeviation" -> 
              Around[10.575701362527983`, 1.4576641434682744`], 
              "EvaluationTime" -> 0.0002675961365768691, "TestSize" -> 12, 
              "ModelMemory" -> 16136., "ModelUtility" -> -3.078911307391449, 
              "TrainingSize" -> 12, "TrainingTime" -> 0.005530952779684403, 
              "TrainingMemory" -> 72851.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[3.1705744155244843`*^10, 2.7317155295375504`*^10], 
                Around[9.509843006093454*^9, 5.716832952298939*^9], 
                Around[4.938568022648965*^10, 2.8383137673272213`*^10], 
                Around[5.544069931184249*^10, 4.661506831270259*^10]}, 
              "StandardDeviationHistory" -> {
                Around[10.604987810680113`, 2.7557875179399707`], 
                Around[8.495555195451423, 2.6420984481406804`], 
                Around[11.28121598952302, 1.9541908201943887`], 
                Around[11.921046454457379`, 3.1715237124761244`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002675961365768691, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[10.575701362527983`, 1.4576641434682744`], 
             "TrainingMemory" -> 72851.2, "TrainingTime" -> 
             0.006360595696637064], "Index" -> 4], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.1021452832942895`, 0.08406060177211169], 
              "StandardDeviation" -> 
              Around[9.094311644902525, 1.2088484908156019`], 
              "EvaluationTime" -> 0.00025804996628517947`, "TestSize" -> 15, 
              "ModelMemory" -> 16136., "ModelUtility" -> -2.9270456811038033`,
               "TrainingSize" -> 12, "TrainingTime" -> 0.005500440671434401, 
              "TrainingMemory" -> 72796., "ExperimentCount" -> 5, 
              "MeanCrossEntropyHistory" -> {
                Around[4.106818239219437, 0.1895730223043738], 
                Around[4.110119876816099, 0.19069237616690216`], 
                Around[4.092188887296915, 0.18425526814399013`], 
                Around[4.098059334108329, 0.18644667208499302`], 
                Around[4.103540079030671, 0.1883936113291856]}, 
              "StandardDeviationHistory" -> {
                Around[8.847808202028277, 2.6494549250130013`], 
                Around[7.748563075243991, 3.214295282607168], 
                Around[10.25210255149054, 2.1064474037329477`], 
                Around[9.62269312676666, 2.4354692682077808`], 
                Around[9.00039126898316, 2.6332802797270323`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00025804996628517947`, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[9.094311644902525, 1.2088484908156019`], "TrainingMemory" -> 
             72796., "TrainingTime" -> 0.006325506772149561], "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[36548.270585117236`, 11676.669235253854`], 
              "StandardDeviation" -> 
              Around[10.574536087122873`, 1.4575225204268976`], 
              "EvaluationTime" -> 0.0002538846855584879, "TestSize" -> 12, 
              "ModelMemory" -> 16136., "ModelUtility" -> -3.0788014528919403`,
               "TrainingSize" -> 12, "TrainingTime" -> 0.005530952779684403, 
              "TrainingMemory" -> 72852.8, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[31738.09326236245, 27344.235041980774`], 
                Around[9519.78152219441, 5721.487293851935], 
                Around[49443.87201424067, 28416.673480449816`], 
                Around[55491.33554167141, 46655.57517606517]}, 
              "StandardDeviationHistory" -> {
                Around[10.603630441382963`, 2.7554308529225953`], 
                Around[8.494971731682066, 2.6424396554947887`], 
                Around[11.280441652185974`, 1.954271701839095], 
                Around[11.91910052324049, 3.170607629427753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002538846855584879, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[10.574536087122873`, 1.4575225204268976`], 
             "TrainingMemory" -> 72852.8, "TrainingTime" -> 
             0.006360595696637064], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.651082610516919*^8, 1.1665472301305372`*^8], 
              "StandardDeviation" -> 
              Around[10.575690799822919`, 1.4576628330940897`], 
              "EvaluationTime" -> 0.0002567047438939299, "TestSize" -> 12, 
              "ModelMemory" -> 16136., "ModelUtility" -> -3.078910300406193, 
              "TrainingSize" -> 12, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 72864., "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[3.170603207237116*^8, 2.7317406668213505`*^8], 
                Around[9.509927018763869*^7, 5.716884110299032*^7], 
                Around[4.938619857581707*^8, 2.8383448453291184`*^8], 
                Around[5.544114675372466*^8, 4.661543702662249*^8]}, 
              "StandardDeviationHistory" -> {
                Around[10.604975716615774`, 2.7557842942627686`], 
                Around[8.495549902679095, 2.642101543325111], 
                Around[11.281208931501661`, 1.9541915021311755`], 
                Around[11.921028648495144`, 3.171515362962856]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002567047438939299, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[10.575690799822919`, 1.4576628330940897`], 
             "TrainingMemory" -> 72864., "TrainingTime" -> 
             0.005763653186713628], "Index" -> 7], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.168942451865246, 0.09539031951846007], 
              "StandardDeviation" -> 
              Around[8.91319990585426, 1.2172532851113247`], "EvaluationTime" -> 
              0.0002762022874234115, "TestSize" -> 15, "ModelMemory" -> 
              16136., "ModelUtility" -> -2.9076395442125893`, "TrainingSize" -> 
              12, "TrainingTime" -> 0.005228155854360921, "TrainingMemory" -> 
              72806.66666666666, "ExperimentCount" -> 5, 
              "MeanCrossEntropyHistory" -> {
                Around[4.171839950708888, 0.21433331055322932`], 
                Around[4.178173261259382, 0.2167708287114774], 
                Around[4.1593688615967555`, 0.2095418081558701], 
                Around[4.165723396901897, 0.21198889252019826`], 
                Around[4.169606788859304, 0.21349077057157825`]}, 
              "StandardDeviationHistory" -> {
                Around[8.59734729982442, 2.7183276116407473`], 
                Around[7.661898900862648, 3.3010120337534965`], 
                Around[10.093818727180826`, 2.1359798682102333`], 
                Around[9.330885541524411, 2.4301096170393164`], 
                Around[8.882049059878984, 2.6539487574076346`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002762022874234115, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[8.91319990585426, 1.2172532851113247`], "TrainingMemory" -> 
             72806.66666666666, "TrainingTime" -> 0.006012379232515059], 
           "Index" -> 8], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.651045721325589*^12, 1.1665356318893943`*^12], 
              "StandardDeviation" -> 
              Around[10.575702345782247`, 1.4576642475791377`], 
              "EvaluationTime" -> 0.0002704161949123111, "TestSize" -> 12, 
              "ModelMemory" -> 16136., "ModelUtility" -> -3.0789114026063498`,
               "TrainingSize" -> 12, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 72838.40000000001, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[3.170571435919032*^12, 2.7317128920809697`*^12], 
                Around[9.509834501285687*^11, 5.716827764163531*^11], 
                Around[4.938562868872354*^12, 2.838310642086676*^12], 
                Around[5.544065130382401*^12, 4.661502864692866*^12]}, 
              "StandardDeviationHistory" -> {
                Around[10.604988922912305`, 2.7557877775095663`], 
                Around[8.49555570631543, 2.6420981491876567`], 
                Around[11.281216725007697`, 1.9541907291166591`], 
                Around[11.921048028893557`, 3.1715244536527574`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002704161949123111, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[10.575702345782247`, 1.4576642475791377`], 
             "TrainingMemory" -> 72838.40000000001, "TrainingTime" -> 
             0.005763653186713628], "Index" -> 9], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[370.5148675831291, 117.54147084623011`], 
              "StandardDeviation" -> 
              Around[10.564111101435397`, 1.456258649334395], 
              "EvaluationTime" -> 0.0002921989802781896, "TestSize" -> 12, 
              "ModelMemory" -> 16136., "ModelUtility" -> -3.077818335508754, 
              "TrainingSize" -> 12, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 72865.6, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[321.93913167848643`, 275.4835317016886], 
                Around[97.74711364238233, 57.06466695737676], 
                Around[501.2846889557858, 286.5754100225767], 
                Around[561.0885360558619, 469.78992332980954`]}, 
              "StandardDeviationHistory" -> {
                Around[10.591482979848879`, 2.752251401406032], 
                Around[8.489750171003664, 2.6454996368681867`], 
                Around[11.273512254014532`, 1.954998315924073], 
                Around[11.901699000874514`, 3.1624264507281525`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002921989802781896, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[10.564111101435397`, 1.456258649334395], "TrainingMemory" -> 
             72865.6, "TrainingTime" -> 0.005763653186713628], "Index" -> 
           10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LinearRegression", "NearestNeighbors", 
             "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 15, "PreprocessorEvaluationTime" -> 
      3.93828125*^-6, "PreprocessorMemory" -> 433448, "InputDimension" -> 15, 
      "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8235832123791974`17.335045535308772*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 12, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.45020920000000003`, "ExperimentCounts" -> 45]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association["Type" -> "Image", "Weight" -> 1, "Values" -> {
             Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAGikFsJiYmERERYWFhEcoA0AQxMTFmZuZXr16Jior+px7Q09O7d+8e0Io/
f/78/PnzD2Xg27dvQFJHR+f+/ftAM4HmA7kUuhDoKiA5aiZ9zMQfv3///h0k
7jx2/PjGffs2HTiAjDYfOLDl4MENu3ffuH4dqObfv39EmglR2dLcvD8//2hx
MTI6Ulx8rKxseUbGvGXLsPoLv5mTJ078X1//v7kZHbW2Pq6sXLxhAxlmTujr
+15T87ehARn9AZJNTdfKyhatW0eemT9rav43NCCjf0CyqenGqJnD18yJ/f3/
amv/Nzaio+bmu+Xli9avJ8PMzvb2JyUlryorkdFLIFldfTQvb/7KlWSYuWLF
ismzZk2bOxcZTZ87d8a8eROmTj144ABQDWbpRIdyCcgF1no/YeAbXvD9+/ef
2MDnz5+BpLa2NtBMCQkJCl2IDIyNjYH1O7ApokMNAHShvr4+0LTnz58DmyL3
qQdevnwJjGgAzeFxDw==
              "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, "ID" -> 
           4922843929423532927]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.8470291, 
      "MaxTrainingMemory" -> 2936280, "DataMemory" -> 43240, "FunctionMemory" -> 
      559792, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 1, 10, 26, 52.4042573`9.47194141764789}, "Instant",
         "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8235087851276703`*^9, 3.823604812433917*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"cf40c3ec-e42a-4432-b4a9-f64a215aa15e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "[", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztlV1L21AYx7v1YrvcR9i+xW53uVvHPoCyTnbTQU2bpDFNQRSpiHqjKAVR
bwTxShCUgIJ4IxibZo19T+vWztqkb+t7m3bPyJRS1zSzKXjhwz+Hk1z8znn+
ec553ox9Hfn83GAwTLyEYWQUfWexjOIfXsHLR/PEl3Gz6dN7M2IaN1nejhnh
4+u/z5/5UKPdbivjMOKJ/8S/i0ajwdF0Pp8fBr/Val0eHSVtNtbtLpfLuvMj
Hk/Mbm87nTkM8+7u1ut1HfnJWMxPUS2KAj7oGkUhF8hIF35GkjiXq0GSClyR
gOOQ0eD8UqnErq5WCKITDoJcAhSVEIRB+GCyd2cnj2FdcEVNh4ObnZVE8WF8
WZZ5mk6h6D/hiiAvdnm5WCw+gB9mmDiOq8AVFXCc3d6u1Wr/xU9Eo4Hbaumr
GxT1HRxAvhr5YCkYC/Zq5IOuMCx0dqaFD2ayKyv3C6avQiR5FQyq88FGMLNX
wahLdjh809PpVEqFz5+f+6emklYrXAJdB0qLapOT7NJSoVDoxYcjn8vlEvF4
6OTEs7XlXVwMO50/EQQy0vg7inY7u7lZrVbV6+fOrmw2+0MQgsfHFxsb3MJC
hKKuEQRqUu69nGSzcXt7zWazL78rYFeZTOZ7OByg6Yv19W/z81GSTCHIr3vL
JTAscHoKbgzSvyqViiRJUDP+w0PG7fbNzQkEcWO1gkVwO0UIIsbzOvZHaDqi
KMZ5/nJ/n1lb410uZmbmhdGoF78zwBm4eNPp9LPH1N8fM394MaSdd8ZvsJau
Jg==
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], ",", " ", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFABikFsmoL///9DSFqAUfNHzaeP+d++fbtz9eqnT59oYT7Q2DMTJrwqLd3R
2Pj9+3eqm3999+6PFRX/Gxrel5df27WLuub/+PHjSl8f0HAIArKBIlQ0//Xr
14+qq+HmA9lAESqa/+jWrZclJXDzgbEAFKGi+fdOnfoADnwIArKBIlQ0//aR
Ix+RzAeygSJDyP20Dn9apx9ap38gAOZZYM6FBD4wLxNpOPHmA8scYMkDDPnT
/f0kFXHEl59AY4HlJ7AUJd5wkswnD4yaP2o+VcynHaCRy5EBANZ9U00=
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSize->{32, 32},
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], ",", " ", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFABikFsmoL///9DSFqAUfNHzR81f9T8wWZ+A9GAbPP/E4FGzaed+TSNX2qB
UfNHzR81nw7m0w7QyOXIAAA3PjVp
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSize->{32, 32},
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.823508804955757*^9, 3.8235088049567537`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"4ccc052c-a4e4-4940-a0fd-6e22c9df4ecd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9.733333428257907`", ",", "9.733333428257907`", ",", 
   "9.733333428257907`"}], "}"}]], "Output",
 CellChangeTimes->{3.823604815244277*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"9bfe3c69-99ef-4c9f-98b3-1531e58da5b2"]
}, Open  ]],

Cell["\:7528\:65e5\:671f\:6570\:636e\:7c7b\:578b\:8fdb\:884c\:8bad\:7ec3", \
"Text",
 CellChangeTimes->{{3.823508987490656*^9, 
  3.82350899734076*^9}},ExpressionUUID->"aee61694-2ffd-466e-bacf-\
8cd85f15ffb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      TemplateBox[{
        RowBox[{"\"Mon 5 May 2014 09:53:06\"", 
          StyleBox[
           RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
             StyleBox[
              RowBox[{"-", "5"}], NumberMarks -> False, StripOnInput -> 
              False]}], FontColor -> GrayLevel[0.5]]}], 
        RowBox[{"DateObject", "[", 
          RowBox[{
            RowBox[{"{", 
              
              RowBox[{"2014", ",", "5", ",", "5", ",", "9", ",", "53", ",", 
                "6.301578998565674`"}], "}"}], ",", "\"Instant\"", ",", 
            "\"Gregorian\"", ",", 
            RowBox[{"-", "5.`"}]}], "]"}]},
       "DateObject",
       Editable->False], "\[Rule]", "1"}], ",", 
     RowBox[{
      TemplateBox[{
        RowBox[{"\"Sat 1 Jan 2000 00:00:00\"", 
          StyleBox[
           RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
             StyleBox[
              RowBox[{"-", "5"}], NumberMarks -> False, StripOnInput -> 
              False]}], FontColor -> GrayLevel[0.5]]}], 
        RowBox[{"DateObject", "[", 
          RowBox[{
            RowBox[{"{", 
              
              RowBox[{"2000", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                "0.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", ",", 
            RowBox[{"-", "5.`"}]}], "]"}]},
       "DateObject",
       Editable->False], "\[Rule]", "2"}], ",", 
     RowBox[{
      TemplateBox[{
        RowBox[{"\"Thu 23 Aug 2007\""}], 
        RowBox[{"DateObject", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{"2007", ",", "8", ",", "23"}], "}"}], ",", "\"Day\"", 
            ",", "\"Gregorian\"", ",", 
            RowBox[{"-", "6.`"}]}], "]"}]},
       "DateObject",
       Editable->False], "\[Rule]", "3"}], ",", 
     RowBox[{
      TemplateBox[{
        RowBox[{"\"Mon 4 Apr 2016 15:59:18\"", 
          StyleBox[
           RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
             StyleBox[
              RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> 
              False]}], FontColor -> GrayLevel[0.5]]}], 
        RowBox[{"DateObject", "[", 
          RowBox[{
            RowBox[{"{", 
              
              RowBox[{"2016", ",", "4", ",", "4", ",", "15", ",", "59", ",", 
                "18.273754119873047`"}], "}"}], ",", "\"Instant\"", ",", 
            "\"Gregorian\"", ",", 
            RowBox[{"-", "4.`"}]}], "]"}]},
       "DateObject",
       Editable->False], "\[Rule]", "4"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823509030458066*^9, 3.8235090469120846`*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"24628fd4-6ee1-4281-a2e7-ececeb2b8d2b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"data", ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"AbsoluteTime", "[", "#", "]"}], ",", 
         RowBox[{"#", "[", "\"\<Year\>\"", "]"}]}], "}"}], "&"}], ")"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8235090529108725`*^9, 3.8235090529108725`*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"667cc53a-1012-4576-93ee-583e29e4cea1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Date\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Date\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Date"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Date"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Date", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1.1f1.2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToExpression", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
             "FromMLDataset" -> MachineLearning`MLProcessor["FromMLDataset", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
                "Output" -> 
                Association["f1" -> Association["Type" -> "Date"]], 
                "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed", 
                "InversePreprocessor" -> 
                MachineLearning`MLProcessor["Sequence", 
                  Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"Date"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]]]], "Version" -> {12.2, 0}, "ID" -> 
             1352059392705037876, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ExpressionFunction", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]], 
             "Function" -> ({
               AbsoluteTime[#], 
               #["Year"]}& ), "InverseFunction" -> Identity, "Listable" -> 
             False, "ListableInverse" -> False, "Version" -> {12.2, 0}, "ID" -> 
             8823147874667970304, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromExpression", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]], 
             "ToMLDataset" -> MachineLearning`MLProcessor["ToMLDataset", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical"], "f2" -> 
                  Association["Type" -> "Numerical"]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                  Association["Processors" -> {
                    MachineLearning`MLProcessor["Transpose", 
                    Association["FeatureNumber" -> 2]], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"Numerical", "Numerical"}, 
                    "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"]], "Output" -> 
             Association[
              "f1.1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
               "f1.2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2042069112652310705]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1.1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
               "f1.2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 6347361572668097278]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 4, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {3.457380486143833*^9, 2009.25}, "Method" -> 
                   "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {3.457380486143833*^9, 2009.25}, 
                   "StandardDeviation" -> {2.0133856977096432`*^8, 
                    6.299801584177076}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865492}, {-0.7071067811865459}}, 
                  "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {3.457380486143833*^9, 2009.25}, 
                    "StandardDeviation" -> {2.0133856977096432`*^8, 
                    6.299801584177076}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 1, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0092051, "MaxTrainingMemory" -> 105816, 
                  "DataMemory" -> 176, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 2, 28, 7, 50, 54.6821296`9.490420261732545}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             8869518442197077374]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {3.457380486143833*^9, 2009.25}, 
             "StandardDeviation" -> {2.0133856977096432`*^8, 
              6.299801584177076}, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 6791220151293742269]]}, 
         "Invertibility" -> "Approximate", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 165603422009605739]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Mean" -> {2.5},
              "StandardDeviation" -> {1.118033988749895}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4130492645139583438]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 440749166914930942]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (2.5 + 1.118033988749895 #& ), 
      "ProcessorFunction" -> (-2.23606797749979 + 0.8944271909999159 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.3416407864998738`, 1.3416407864998738`}], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "Trees" -> {}, "ClassNumber" -> 1, "IterationsNumber" -> 0, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f1.1f1.2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], "Output" -> 
         Association[
          "(f1.1f1.2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 5422117302557716657, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2],
              "Key" -> "(f1.1f1.2)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, {1.414777653874033}}, 
      "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 110, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 15, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association[
         "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[407713], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0.11157177565710492`, "PreprocessingTime" -> 
      0.1416213`6.602673570132131, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[1.5790586872736925`, 0.24395602347672216`], 
         "StandardDeviation" -> 
         Around[1.0606601717798212`, 0.6173339496254198], "EvaluationTime" -> 
         0.000630957344480193, "TestSize" -> 1, "ModelMemory" -> 20480, 
         "ModelUtility" -> -0.86215565484459, "TrainingSize" -> 3, 
         "TrainingTime" -> 0.01, "TrainingMemory" -> 61184, "ExperimentCount" -> 
         1, "MeanCrossEntropyHistory" -> {
           Around[1.5790586872736925`, 0.1725029585116948]}, 
         "StandardDeviationHistory" -> {
           Around[1.0606601717798212`, 0.4365210220368088]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
           0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> "MeanSquaredError"}, 
         "FinalTrainingSize" -> 4], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5790586872736925`, 0.24395602347672216`], 
              "StandardDeviation" -> 
              Around[1.0606601717798212`, 0.6173339496254198], 
              "EvaluationTime" -> 0.000630957344480193, "TestSize" -> 1, 
              "ModelMemory" -> 20480, "ModelUtility" -> -0.86215565484459, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              61184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5790586872736925`, 0.1725029585116948]}, 
              "StandardDeviationHistory" -> {
                Around[1.0606601717798212`, 0.4365210220368088]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000630957344480193, "ModelMemory" -> 20480, 
             "StandardDeviation" -> 
             Around[1.0606601717798212`, 0.6173339496254198], 
             "TrainingMemory" -> 61184, "TrainingTime" -> 0.0104], "Index" -> 
           1], Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6074161414919965`, 0.25812722731788007`], 
              "StandardDeviation" -> 
              Around[1.0293479882430472`, 0.6847621788068243], 
              "EvaluationTime" -> 0.0025118864315095794`, "TestSize" -> 1, 
              "ModelMemory" -> 97224, "ModelUtility" -> -0.9395934946760133, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              155048, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.6074161414919965`, 0.18252351284535442`]}, 
              "StandardDeviationHistory" -> {
                Around[1.0293479882430472`, 0.48419998013438065`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0025118864315095794`, "ModelMemory" -> 
             97224, "StandardDeviation" -> 
             Around[1.0293479882430472`, 0.6847621788068243], 
             "TrainingMemory" -> 155048, "TrainingTime" -> 0.0104], "Index" -> 
           2], Association[
          "Value" -> "GaussianProcess", "Options" -> 
           Association[
            AssumeDeterministic -> Association["Value" -> False], 
             "CovarianceType" -> 
             Association[
              "Value" -> None, "Options" -> 
               Association[
                "Numerical" -> Association["Value" -> "SquaredExponential"], 
                 "Nominal" -> Association["Value" -> "HammingDistance"]]], 
             "EstimationMethod" -> Association["Value" -> "MaximumPosterior"],
              "OptimizationMethod" -> Association["Value" -> Automatic], 
             "SearchMethod" -> Association["Value" -> "SimulatedAnnealing"], 
             "InputFeatures" -> Association["Value" -> {}]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4074415488676708`, 0.2917061718076876], 
              "StandardDeviation" -> 
              Around[1.0606601717798212`, 0.6173339496254198], 
              "EvaluationTime" -> 0.001995262314968879, "TestSize" -> 1, 
              "ModelMemory" -> 20096, "ModelUtility" -> -0.9317025634802795, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 3180928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4074415488676708`, 0.20626741219918399`]}, 
              "StandardDeviationHistory" -> {
                Around[1.0606601717798212`, 0.4365210220368088]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.001995262314968879, "ModelMemory" -> 20096, 
             "StandardDeviation" -> 
             Around[1.0606601717798212`, 0.6173339496254198], 
             "TrainingMemory" -> 3180928, "TrainingTime" -> 
             0.3288768766575115], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "ModelMemory" -> 1, "StandardDeviation" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GaussianProcess", "GradientBoostedTrees", 
             "LinearRegression", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value", "Options"}, {TypeSystem`AnyType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[String]}], 2]}], TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 4, "PreprocessorEvaluationTime" -> 
      4.5953125*^-6, "PreprocessorMemory" -> 59800, "InputDimension" -> 2, 
      "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8234874547808646`17.33503465872652*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 3, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.35579320000000003`, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association["Type" -> "Date", "Weight" -> 1, "Values" -> {
             
             DateObject[{2016, 4, 4, 15, 59, 18.273754119873047`}, "Instant", 
              "Gregorian", -4.]}, "ID" -> 5450862126438409522]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 0.582143, 
      "MaxTrainingMemory" -> 4290688, "DataMemory" -> 1664, "FunctionMemory" -> 
      185576, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 28, 7, 50, 55.1974942`9.494494201661007}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.823509055223425*^9},
 CellLabel->
  "Out[141]=",ExpressionUUID->"b0a74b70-6824-46e4-80dc-c768740b518c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "@", 
  TemplateBox[{
    RowBox[{"\"Wed 18 Jan 2017 23:24:10\"", 
      StyleBox[
       RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
         StyleBox[
          RowBox[{"-", "5"}], NumberMarks -> False, StripOnInput -> False]}], 
       FontColor -> GrayLevel[0.5]]}], 
    RowBox[{"DateObject", "[", 
      RowBox[{
        RowBox[{"{", 
          
          RowBox[{"2017", ",", "1", ",", "18", ",", "23", ",", "24", ",", 
            "10.098992824554443`"}], "}"}], ",", "\"Instant\"", ",", 
        "\"Gregorian\"", ",", 
        RowBox[{"-", "5.`"}]}], "]"}]},
   "DateObject",
   Editable->False]}]], "Input",
 CellChangeTimes->{{3.823509102293849*^9, 3.823509102731923*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"f1ad64a0-2049-41ea-963c-4f80e0d3a965"],

Cell[BoxData["2.5`"], "Output",
 CellChangeTimes->{3.8235091087509937`*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"608f2194-3e39-41e8-a747-b037d8e3075e"]
}, Open  ]],

Cell["\:4e5f\:53ef\:6307\:660e\:505a\:5f52\:4e00\:5316\:5904\:7406", "Text",
 CellChangeTimes->{{3.8235091641683965`*^9, 
  3.8235091744689035`*^9}},ExpressionUUID->"d9758763-fb22-4477-990c-\
1ef9a2d9e27b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"data", ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"AbsoluteTime", "[", "#", "]"}], ",", 
          RowBox[{"#", "[", "\"\<Year\>\"", "]"}]}], "}"}], "&"}], ",", 
       "\"\<StandardizedVector\>\""}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823509065371161*^9, 3.823509065372153*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"3af57622-cad0-4573-bfd2-9be63577649e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Date\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Date\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Date"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Date"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Date", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1.1f1.2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToExpression", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
             "FromMLDataset" -> MachineLearning`MLProcessor["FromMLDataset", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Date", "Weight" -> 1]], 
                "Output" -> 
                Association["f1" -> Association["Type" -> "Date"]], 
                "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed", 
                "InversePreprocessor" -> 
                MachineLearning`MLProcessor["Sequence", 
                  Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"Date"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]]]], "Version" -> {12.2, 0}, "ID" -> 
             1352059392705037876, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ExpressionFunction", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]], 
             "Function" -> ({
               AbsoluteTime[#], 
               #["Year"]}& ), "InverseFunction" -> Identity, "Listable" -> 
             False, "ListableInverse" -> False, "Version" -> {12.2, 0}, "ID" -> 
             8823147874667970304, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromExpression", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Expression", "Weight" -> 1]], 
             "ToMLDataset" -> MachineLearning`MLProcessor["ToMLDataset", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical"], "f2" -> 
                  Association["Type" -> "Numerical"]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                  Association["Processors" -> {
                    MachineLearning`MLProcessor["Transpose", 
                    Association["FeatureNumber" -> 2]], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"Numerical", "Numerical"}, 
                    "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"]], "Output" -> 
             Association[
              "f1.1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
               "f1.2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2042069112652310705]], 
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1.1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
               "f1.2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 6347361572668097278]], 
           MachineLearning`MLProcessor["NumericalVectorStandardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {3.457380486143833*^9, 2009.25}, 
             "StandardDeviation" -> {2.0133856977096432`*^8, 
              6.299801584177076}, "Version" -> {12.2, 0}, "ID" -> 
             6335309238188554068, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 4, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {5.551115123125783*^-16, 5.551115123125783*^-17},
                    "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {5.551115123125783*^-16, 5.551115123125783*^-17},
                    "StandardDeviation" -> {1.0000000000000047`, 1.}, 
                   "Method" -> "NaiveSampler", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865476}, {-0.7071067811865475}}, 
                  "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.551115123125783*^-16, 
                    5.551115123125783*^-17}, 
                    "StandardDeviation" -> {1.0000000000000047`, 1.}, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 1, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0092851, "MaxTrainingMemory" -> 105808, 
                  "DataMemory" -> 176, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 2, 28, 7, 51, 58.0139052`9.516106931902765}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             728340822376724213]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {5.551115123125783*^-16, 5.551115123125783*^-17}, 
             "StandardDeviation" -> {1.0000000000000047`, 1.}, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 3636835827569097872]]}, 
         "Invertibility" -> "Approximate", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 165603422009605739]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Mean" -> {2.5},
              "StandardDeviation" -> {1.118033988749895}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4130492645139583438]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 440749166914930942]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (2.5 + 1.118033988749895 #& ), 
      "ProcessorFunction" -> (-2.23606797749979 + 0.8944271909999159 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.3416407864998738`, 1.3416407864998738`}], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "Trees" -> {}, "ClassNumber" -> 1, "IterationsNumber" -> 0, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f1.1f1.2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], "Output" -> 
         Association[
          "(f1.1f1.2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 426044462361057063, "Output" -> 
             Association[
              "(f1.1f1.2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2],
              "Key" -> "(f1.1f1.2)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, {1.414777653874033}}, 
      "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 110, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 15, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association[
         "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[409185], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0.11157177565710492`, "PreprocessingTime" -> 
      0.1087677`6.488044938541809, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[1.5790586872736925`, 0.12197801173836108`], 
         "StandardDeviation" -> 
         Around[1.0606601717798212`, 0.3086669748127099], "EvaluationTime" -> 
         0.00031622776601683794`, "TestSize" -> 2, "ModelMemory" -> 20480., 
         "ModelUtility" -> -0.8086131520381675, "TrainingSize" -> 3, 
         "TrainingTime" -> 0.009999999999999998, "TrainingMemory" -> 61104., 
         "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
           Around[1.5790586872736925`, 0.1725029585116948], 
           Around[1.5790586872736925`, 0.1725029585116948]}, 
         "StandardDeviationHistory" -> {
           Around[1.0606601717798212`, 0.4365210220368088], 
           Around[1.0606601717798212`, 0.4365210220368088]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
           0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> "MeanSquaredError"}, 
         "FinalTrainingSize" -> 4], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5790586872736925`, 0.12197801173836108`], 
              "StandardDeviation" -> 
              Around[1.0606601717798212`, 0.3086669748127099], 
              "EvaluationTime" -> 0.00031622776601683794`, "TestSize" -> 2, 
              "ModelMemory" -> 20480., "ModelUtility" -> -0.8086131520381675, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 61104., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5790586872736925`, 0.1725029585116948], 
                Around[1.5790586872736925`, 0.1725029585116948]}, 
              "StandardDeviationHistory" -> {
                Around[1.0606601717798212`, 0.4365210220368088], 
                Around[1.0606601717798212`, 0.4365210220368088]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00031622776601683794`, "ModelMemory" -> 
             20480., "StandardDeviation" -> 
             Around[1.0606601717798212`, 0.3086669748127099], 
             "TrainingMemory" -> 61104., "TrainingTime" -> 
             0.010399999999999998`], "Index" -> 1], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6112367566895167`, 0.13028749465542627`], 
              "StandardDeviation" -> 
              Around[1.0998331573020748`, 0.28323152483937086`], 
              "EvaluationTime" -> 0.002339678392662679, "TestSize" -> 2, 
              "ModelMemory" -> 97224., "ModelUtility" -> -0.9241410331720717, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 154746.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[1.6074161414919965`, 0.18252351284535442`], 
                Around[1.615057371887037, 0.1858723527452595]}, 
              "StandardDeviationHistory" -> {
                Around[1.0293479882430472`, 0.48419998013438065`], 
                Around[1.1703183263611023`, 0.3329011068496028]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.002339678392662679, "ModelMemory" -> 97224.,
              "StandardDeviation" -> 
             Around[1.0998331573020748`, 0.28323152483937086`], 
             "TrainingMemory" -> 154746.66666666666`, "TrainingTime" -> 
             0.010399999999999998`], "Index" -> 2], 
         Association[
          "Value" -> "GaussianProcess", "Options" -> 
           Association[
            AssumeDeterministic -> Association["Value" -> False], 
             "CovarianceType" -> 
             Association[
              "Value" -> None, "Options" -> 
               Association[
                "Numerical" -> Association["Value" -> "SquaredExponential"], 
                 "Nominal" -> Association["Value" -> "HammingDistance"]]], 
             "EstimationMethod" -> Association["Value" -> "MaximumPosterior"],
              "OptimizationMethod" -> Association["Value" -> Automatic], 
             "SearchMethod" -> Association["Value" -> "SimulatedAnnealing"], 
             "InputFeatures" -> Association["Value" -> {}]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4097274425842574`, 0.14490900832987733`], 
              "StandardDeviation" -> 
              Around[1.0606601717798219`, 0.30866697481270944`], 
              "EvaluationTime" -> 0.0027732725451018792`, "TestSize" -> 2, 
              "ModelMemory" -> 20096., "ModelUtility" -> -0.9112333824129765, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.1995262314968879, 
              "TrainingMemory" -> 194288., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4074415488676708`, 0.20626741219918399`], 
                Around[1.412013336300844, 0.20357273431127182`]}, 
              "StandardDeviationHistory" -> {
                Around[1.0606601717798212`, 0.4365210220368088], 
                Around[1.0606601717798223`, 0.4365210220368076]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0027732725451018792`, "ModelMemory" -> 
             20096., "StandardDeviation" -> 
             Around[1.0606601717798219`, 0.30866697481270944`], 
             "TrainingMemory" -> 194288., "TrainingTime" -> 
             0.20750728075676342`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.464110908660189, 0.12611345288269557`], 
              "StandardDeviation" -> 
              Around[1.090786328670659, 0.2830068372439312], "EvaluationTime" -> 
              0.0002339678392662679, "TestSize" -> 2, "ModelMemory" -> 5760., 
              "ModelUtility" -> -0.8306369607365771, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
              66328., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.464110908660189, 0.1783513554644084], 
                Around[1.464110908660189, 0.1783513554644084]}, 
              "StandardDeviationHistory" -> {
                Around[1.090786328670659, 0.4002321074746827], 
                Around[1.090786328670659, 0.4002321074746827]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002339678392662679, "ModelMemory" -> 5760.,
              "StandardDeviation" -> 
             Around[1.090786328670659, 0.2830068372439312], "TrainingMemory" -> 
             66328., "TrainingTime" -> 0.004140314573756367], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5539771082784999`, 0.13991503536967068`], 
              "StandardDeviation" -> 
              Around[1.1795761339087414`, 0.29684513096422266`], 
              "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 2, 
              "ModelMemory" -> 6256., "ModelUtility" -> -0.9074094895170906, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.003162277660168379, 
              "TrainingMemory" -> 67608., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.492153709277932, 0.1699163158160407], 
                Around[1.6158005072790678`, 0.18621155601874378`]}, 
              "StandardDeviationHistory" -> {
                Around[1.0206207261596576`, 0.5002003545087673], 
                Around[1.3385315416578254`, 0.2897145451790903]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00019952623149688788`, "ModelMemory" -> 
             6256., "StandardDeviation" -> 
             Around[1.1795761339087414`, 0.29684513096422266`], 
             "TrainingMemory" -> 67608., "TrainingTime" -> 
             0.0032887687665751142`], "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[318.4956671717789, 448.2564847617027], 
              "StandardDeviation" -> 
              Around[42.042701404659915`, 41.149568338137385`], 
              "EvaluationTime" -> 0.000501187233627272, "TestSize" -> 1, 
              "ModelMemory" -> 16136, "ModelUtility" -> -4.610610203412502, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 64232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[318.4956671717789, 316.9652000858443]}, 
              "StandardDeviationHistory" -> {
                Around[42.042701404659915`, 29.097138814796196`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000501187233627272, "ModelMemory" -> 16136, 
             "StandardDeviation" -> 
             Around[42.042701404659915`, 41.149568338137385`], 
             "TrainingMemory" -> 64232, "TrainingTime" -> 
             0.005212347229723628], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5823650226404098`, 0.24531301225138827`], 
              "StandardDeviation" -> 
              Around[1.0933965128712024`, 0.5620379265497182], 
              "EvaluationTime" -> 0.0003981071705534969, "TestSize" -> 1, 
              "ModelMemory" -> 16136, "ModelUtility" -> -0.8802962492372994, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 62984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5823650226404098`, 0.17346249447625525`]}, 
              "StandardDeviationHistory" -> {
                Around[1.0933965128712024`, 0.39742082914733246`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "ModelMemory" -> 16136,
              "StandardDeviation" -> 
             Around[1.0933965128712024`, 0.5620379265497182], 
             "TrainingMemory" -> 62984, "TrainingTime" -> 
             0.005212347229723628], "Index" -> 7], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.035179066387612, 4.961875336125757], 
              "StandardDeviation" -> 
              Around[6.3492983125304345`, 5.405761132675294], 
              "EvaluationTime" -> 0.0003981071705534969, "TestSize" -> 1, 
              "ModelMemory" -> 16136, "ModelUtility" -> -2.698736098165851, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 62984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.035179066387612, 3.508575697576802]}, 
              "StandardDeviationHistory" -> {
                Around[6.3492983125304345`, 3.822450354389372]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "ModelMemory" -> 16136,
              "StandardDeviation" -> 
             Around[6.3492983125304345`, 5.405761132675294], "TrainingMemory" -> 
             62984, "TrainingTime" -> 0.005212347229723628], "Index" -> 8], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.578725072100462, 0.12191321720944157`], 
              "StandardDeviation" -> 
              Around[1.100304280127947, 0.2767735318101059], "EvaluationTime" -> 
              0.00046682721260268026`, "TestSize" -> 2, "ModelMemory" -> 
              16136., "ModelUtility" -> -0.8378204045111013, "TrainingSize" -> 
              3, "TrainingTime" -> 0.0054444393724491225`, "TrainingMemory" -> 
              63090.666666666664`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.579226641071217, 0.17255030186238873`], 
                Around[1.578223503129707, 0.17226977261292878`]}, 
              "StandardDeviationHistory" -> {
                Around[1.0748207506876133`, 0.4185254087122516], 
                Around[1.1257878095682807`, 0.36620256483263613`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00046682721260268026`, "ModelMemory" -> 
             16136., "StandardDeviation" -> 
             Around[1.100304280127947, 0.2767735318101059], "TrainingMemory" -> 
             63090.666666666664`, "TrainingTime" -> 0.005662216947347087], 
           "Index" -> 9], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.579311591489123, 0.2440569230115592], 
              "StandardDeviation" -> 
              Around[1.0752454294980007`, 0.591159522168884], 
              "EvaluationTime" -> 0.000501187233627272, "TestSize" -> 1, 
              "ModelMemory" -> 16136, "ModelUtility" -> -0.8700208818830836, 
              "TrainingSize" -> 3, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 62984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.579311591489123, 0.17257430525699666`]}, 
              "StandardDeviationHistory" -> {
                Around[1.0752454294980007`, 0.41801290688861703`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000501187233627272, "ModelMemory" -> 16136, 
             "StandardDeviation" -> 
             Around[1.0752454294980007`, 0.591159522168884], "TrainingMemory" -> 
             62984, "TrainingTime" -> 0.005212347229723628], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GaussianProcess", "GradientBoostedTrees", 
             "LinearRegression", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value", "Options"}, {TypeSystem`AnyType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[String]}], 2]}], TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 4, "PreprocessorEvaluationTime" -> 
      7.32734375*^-6, "PreprocessorMemory" -> 61848, "InputDimension" -> 2, 
      "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.823487518759712`17.335034665993618*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 3, "TimeBudgets" -> 0.44000000000000006`, 
          "ElapsedTimes" -> 0.596549, "ExperimentCounts" -> 16]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association["Type" -> "Date", "Weight" -> 1, "Values" -> {
             
             DateObject[{2016, 4, 4, 15, 59, 18.273754119873047`}, "Instant", 
              "Gregorian", -4.]}, "ID" -> 5450862126438409522]], 
        Association[
        "RawExample" -> False, "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
         "LogDensityRatios" -> 0]], "TrainingTime" -> 0.8134072, 
      "MaxTrainingMemory" -> 741408, "DataMemory" -> 1664, "FunctionMemory" -> 
      204528, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 28, 7, 51, 58.7916262`9.521890304078314}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.823509068394824*^9, 3.8235091188165593`*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"80a6a8c2-54af-42c5-8a48-8ad7fe0fa967"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "@", 
  TemplateBox[{
    RowBox[{"\"Wed 18 Jan 2017 23:24:10\"", 
      StyleBox[
       RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
         StyleBox[
          RowBox[{"-", "5"}], NumberMarks -> False, StripOnInput -> False]}], 
       FontColor -> GrayLevel[0.5]]}], 
    RowBox[{"DateObject", "[", 
      RowBox[{
        RowBox[{"{", 
          
          RowBox[{"2017", ",", "1", ",", "18", ",", "23", ",", "24", ",", 
            "10.098992824554443`"}], "}"}], ",", "\"Instant\"", ",", 
        "\"Gregorian\"", ",", 
        RowBox[{"-", "5.`"}]}], "]"}]},
   "DateObject",
   Editable->False]}]], "Input",
 CellLabel->
  "In[146]:=",ExpressionUUID->"8f80384a-18bc-45f9-9a42-95a37072334f"],

Cell[BoxData["2.5`"], "Output",
 CellChangeTimes->{3.8235091212657156`*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"da4f2f66-7cb4-4714-ba33-4367f769a559"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6307\:5b9a\:7b97\:6cd5\:548c\:53c2\:6570", "Subsection",
 CellChangeTimes->{{3.814108391988168*^9, 3.8141084010462837`*^9}, {
  3.814113911464898*^9, 3.8141139139723473`*^9}, {3.814114142754916*^9, 
  3.8141141436544323`*^9}, {3.814114310134038*^9, 3.81411434706426*^9}, {
  3.8141855944843397`*^9, 3.8141855969331923`*^9}, {3.814187817663793*^9, 
  3.8141878682480087`*^9}, {3.822944059214864*^9, 
  3.822944070389138*^9}},ExpressionUUID->"5da73421-0bd6-4281-bb17-\
47754a5c8eeb"],

Cell["\:9f20\:6807\:79fb\:5230 Method \:4f4d\:7f6e\:663e\:793a\:7b97\:6cd5\
\:7684\:8be6\:7ec6\:4fe1\:606f", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814287187468966*^9, 3.8142872107445087`*^9}, {
   3.8229456085869517`*^9, 
   3.822945636836828*^9}},ExpressionUUID->"ca55ca8a-bee4-46a0-8452-\
db1f7329869d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "p", "]"}]], "Input",
 CellChangeTimes->{{3.8141143498736973`*^9, 3.814114352377283*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"bc0a9faa-cbf5-4763-8738-486406bc4387"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Nominal\"",
                     ",", "\"Text\""}], "}"}], Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                   "Numerical", "Numerical", "Nominal", "Text"}, 10], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Standard deviation"], 
                   TextCell["Standard deviation"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"2.5963205253036125697`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.592516905655493753`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "1.4112867139926250637`3.", "\", \"", 
                   "3.7813543366146000757`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 1.4112867139926250637`3., 
                   ", ", 3.7813543366146000757`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "GradientBoostedTrees",ExpressionUUID->
                   "c01506fa-c9b4-43d4-894b-63447a7399c4"],
                  TextCell["GradientBoostedTrees"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"BoostingMethod\"", "\"Gradient\""}, {
                    "MaxTrainingRounds", "50"}, {"\"LeavesNumber\"", "110"}, {
                    "\"LearningRate\"", "0.2`"}, {"\"MaxDepth\"", "6"}, {
                    "\"LeafSize\"", "15"}, {"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "0"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                   Alignment -> Left, Frame -> All, FrameStyle -> 
                   GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.37`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"13.9`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"3.375078995555231387`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0172218394399231735`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "3.3406353166753848249`3.", "\", \"", 
                   "3.4095226744350779491`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 3.3406353166753848249`3., 
                   ", ", 3.4095226744350779491`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"540.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"300", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.21`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 2}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.4741126939804727`}, {
                    3.912023005428146, 1.0680356888742728`}, {
                    5.480638923341991, 0.9540952601352894}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    1.4741126939804727`}}, {{3.912023005428146, 
                    1.0680356888742728`}}, {{5.480638923341991, 
                    0.9540952601352894}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 1.3977345013428433`}, {
                    2.302585092994046, 1.5450689295575133`}, {
                    2.302585092994046, 1.5450689295575133`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.9618425810320129}, {
                    3.912023005428146, 1.164026565232269}, {3.912023005428146,
                     1.164026565232269}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.480638923341991, 0.6950471842333089}, {
                    5.480638923341991, 1.1596564086661263`}, {
                    5.480638923341991, 
                    1.1596564086661263`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0.9252054026994458}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0.9252054026994458, 1.4741126939804727`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 23.744061648711448`}, {
                    3.912023005428146, 0.018460908227302487`}, {
                    5.480638923341991, 0.18644305732212121`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    23.744061648711448`}}, {{3.912023005428146, 
                    0.018460908227302487`}}, {{5.480638923341991, 
                    0.18644305732212121`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 23.580732062298537`}, {
                    2.302585092994046, 23.884422350193155`}, {
                    2.302585092994046, 23.884422350193155`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.007633318626063497}, {
                    3.912023005428146, 0.029172515816626506`}, {
                    3.912023005428146, 0.029172515816626506`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.480638923341991, 0.17204743097750216`}, {
                    5.480638923341991, 0.20063438710781656`}, {
                    5.480638923341991, 
                    0.20063438710781656`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, -1.2996280217995946`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }], {}}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }][#, #2, {6, 6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {-1.2996280217995946`, 23.744061648711448`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& }]}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603049156737783}, {
                    3.912023005428146, 4.672293595231984}, {5.480638923341991,
                     4.167627968410739}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.7766589057766007`}, {
                    3.912023005428146, 2.5313076656612896`}, {
                    5.480638923341991, 2.5566796432927523`}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.084048966604046}, {
                    3.912023005428146, 2.5585011352763605`}, {
                    5.480638923341991, 2.5196301288894043`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.3209300489480875`}, {
                    3.912023005428146, 2.531845888030266}, {5.480638923341991,
                     2.4623123347918625`}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.391853325085897}, {
                    5.480638923341991, 3.5167895330745536`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.52814333850048}, {
                    5.480638923341991, 3.52814333850048}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.2174258263234403`}, {
                    3.912023005428146, 3.659328729428095}, {5.480638923341991,
                     3.915239451875844}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.288964877192595, 7.696595821345574}, {
                    5.480638923341991, 3.527412121768714}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.425547559429526}, {
                    3.912023005428146, 2.64787345784768}, {5.480638923341991, 
                    3.608173148019115}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.593914022241319}, {
                    3.912023005428146, 4.640129574846416}, {5.480638923341991,
                     5.2652345937342835`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5083086424958627`}, {
                    5.480638923341991, 3.5083086424958627`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.667272415470441}, {
                    5.480638923341991, 4.588919783512541}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603447386144963}, {
                    3.912023005428146, 3.188755353091236}, {5.480638923341991,
                     3.3750789955552314`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.6673624032468375`}, {
                    5.480638923341991, 4.746518876500792}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5084828462149558`}, {
                    5.480638923341991, 3.5084828462149558`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603049156737783}}, {{
                    3.912023005428146, 4.672293595231984}}, {{
                    5.480638923341991, 4.167627968410739}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.7766589057766007`}}, {{
                    3.912023005428146, 2.5313076656612896`}}, {{
                    5.480638923341991, 2.5566796432927523`}}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.084048966604046}}, {{
                    3.912023005428146, 2.5585011352763605`}}, {{
                    5.480638923341991, 2.5196301288894043`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.3209300489480875`}}, {{
                    3.912023005428146, 2.531845888030266}}, {{
                    5.480638923341991, 2.4623123347918625`}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.391853325085897}}, {{
                    5.480638923341991, 3.5167895330745536`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.52814333850048}}, {{
                    5.480638923341991, 3.52814333850048}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.2174258263234403`}}, {{
                    3.912023005428146, 3.659328729428095}}, {{
                    5.480638923341991, 3.915239451875844}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 37.647044107655006`}}, {{
                    5.480638923341991, 3.527412121768714}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.425547559429526}}, {{
                    3.912023005428146, 2.64787345784768}}, {{
                    5.480638923341991, 3.608173148019115}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.593914022241319}}, {{
                    3.912023005428146, 4.640129574846416}}, {{
                    5.480638923341991, 5.2652345937342835`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5083086424958627`}}, {{
                    5.480638923341991, 3.5083086424958627`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.667272415470441}}, {{
                    5.480638923341991, 4.588919783512541}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603447386144963}}, {{
                    3.912023005428146, 3.188755353091236}}, {{
                    5.480638923341991, 3.3750789955552314`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.6673624032468375`}}, {{
                    5.480638923341991, 4.746518876500792}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5084828462149558`}}, {{
                    5.480638923341991, 3.5084828462149558`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0, 7.696595821345574}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.4741126939804727`}, {
                    3.912023005428146, 1.0680356888742728`}, {
                    5.480638923341991, 0.9540952601352894}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    1.4741126939804727`}}, {{3.912023005428146, 
                    1.0680356888742728`}}, {{5.480638923341991, 
                    0.9540952601352894}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 1.3977345013428433`}, {
                    2.302585092994046, 1.5450689295575133`}, {
                    2.302585092994046, 1.5450689295575133`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.9618425810320129}, {
                    3.912023005428146, 1.164026565232269}, {3.912023005428146,
                     1.164026565232269}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.480638923341991, 0.6950471842333089}, {
                    5.480638923341991, 1.1596564086661263`}, {
                    5.480638923341991, 
                    1.1596564086661263`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0.9252054026994458}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0.9252054026994458, 1.4741126939804727`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 23.744061648711448`}, {
                    3.912023005428146, 0.018460908227302487`}, {
                    5.480638923341991, 0.18644305732212121`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    23.744061648711448`}}, {{3.912023005428146, 
                    0.018460908227302487`}}, {{5.480638923341991, 
                    0.18644305732212121`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 23.580732062298537`}, {
                    2.302585092994046, 23.884422350193155`}, {
                    2.302585092994046, 23.884422350193155`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, 0.007633318626063497}, {
                    3.912023005428146, 0.029172515816626506`}, {
                    3.912023005428146, 0.029172515816626506`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{5.480638923341991, 0.17204743097750216`}, {
                    5.480638923341991, 0.20063438710781656`}, {
                    5.480638923341991, 
                    0.20063438710781656`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, -1.2996280217995946`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }], {}}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 
                    1& }][#, #2, {6, 6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    (Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {-1.2996280217995946`, 23.744061648711448`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    
                    Charting`ScaledTicks[{
                    Log[# - SetPrecision[3.1701229888448363`, 15] + 1]& , 
                    Exp[#] + SetPrecision[3.1701229888448363`, 15] - 1& }]}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603049156737783}, {
                    3.912023005428146, 4.672293595231984}, {5.480638923341991,
                     4.167627968410739}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.7766589057766007`}, {
                    3.912023005428146, 2.5313076656612896`}, {
                    5.480638923341991, 2.5566796432927523`}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.084048966604046}, {
                    3.912023005428146, 2.5585011352763605`}, {
                    5.480638923341991, 2.5196301288894043`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.3209300489480875`}, {
                    3.912023005428146, 2.531845888030266}, {5.480638923341991,
                     2.4623123347918625`}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.391853325085897}, {
                    5.480638923341991, 3.5167895330745536`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.52814333850048}, {
                    5.480638923341991, 3.52814333850048}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.2174258263234403`}, {
                    3.912023005428146, 3.659328729428095}, {5.480638923341991,
                     3.915239451875844}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.288964877192595, 7.696595821345574}, {
                    5.480638923341991, 3.527412121768714}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 5.425547559429526}, {
                    3.912023005428146, 2.64787345784768}, {5.480638923341991, 
                    3.608173148019115}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.593914022241319}, {
                    3.912023005428146, 4.640129574846416}, {5.480638923341991,
                     5.2652345937342835`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5083086424958627`}, {
                    5.480638923341991, 3.5083086424958627`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.667272415470441}, {
                    5.480638923341991, 4.588919783512541}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.603447386144963}, {
                    3.912023005428146, 3.188755353091236}, {5.480638923341991,
                     3.3750789955552314`}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 4.6673624032468375`}, {
                    5.480638923341991, 4.746518876500792}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.480638923341991, 3.5084828462149558`}, {
                    5.480638923341991, 3.5084828462149558`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603049156737783}}, {{
                    3.912023005428146, 4.672293595231984}}, {{
                    5.480638923341991, 4.167627968410739}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 13}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 35}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.7766589057766007`}}, {{
                    3.912023005428146, 2.5313076656612896`}}, {{
                    5.480638923341991, 2.5566796432927523`}}}]}, 
                    Column[{
                    Style["DecisionTree", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"DistributionSmoothing", 1}, {
                    "FeatureFraction", 1}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.084048966604046}}, {{
                    3.912023005428146, 2.5585011352763605`}}, {{
                    5.480638923341991, 2.5196301288894043`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.3209300489480875`}}, {{
                    3.912023005428146, 2.531845888030266}}, {{
                    5.480638923341991, 2.4623123347918625`}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.391853325085897}}, {{
                    5.480638923341991, 3.5167895330745536`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {"L2Regularization", 1.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.52814333850048}}, {{
                    5.480638923341991, 3.52814333850048}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.2174258263234403`}}, {{
                    3.912023005428146, 3.659328729428095}}, {{
                    5.480638923341991, 3.915239451875844}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 100.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 37.647044107655006`}}, {{
                    5.480638923341991, 3.527412121768714}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.1}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 5.425547559429526}}, {{
                    3.912023005428146, 2.64787345784768}}, {{
                    5.480638923341991, 3.608173148019115}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.593914022241319}}, {{
                    3.912023005428146, 4.640129574846416}}, {{
                    5.480638923341991, 5.2652345937342835`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 10000.}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5083086424958627`}}, {{
                    5.480638923341991, 3.5083086424958627`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.01}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.667272415470441}}, {{
                    5.480638923341991, 4.588919783512541}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.1}, {"MaxDepth", 6}, {"LeafSize", 90}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.603447386144963}}, {{
                    3.912023005428146, 3.188755353091236}}, {{
                    5.480638923341991, 3.3750789955552314`}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 110}, {
                    "LearningRate", 0.2}, {"MaxDepth", 6}, {"LeafSize", 15}, {
                    "L1Regularization", 0}, {"L2Regularization", 0}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 4.6673624032468375`}}, {{
                    5.480638923341991, 4.746518876500792}}}]}, 
                    Column[{
                    Style["GradientBoostedTrees", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"BoostingMethod", "Gradient"}, {
                    MaxTrainingRounds, 50}, {"LeavesNumber", 60}, {
                    "LearningRate", 0.02}, {"MaxDepth", 6}, {
                    "LeafSize", 35}, {"L1Regularization", 0}, {
                    "L2Regularization", 0}}, Alignment -> Left, Frame -> All, 
                    FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.480638923341991, 3.5084828462149558`}}, {{
                    5.480638923341991, 3.5084828462149558`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"L1Regularization", 0}, {
                    "L2Regularization", 0.0001}, {
                    "OptimizationMethod", Automatic}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.6618548978330927, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.6618548978330927, 
                    Log[300]}, {0, 7.696595821345574}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{363., {132., 137.}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   PredictorFunction[
    Association[
    "ExampleNumber" -> 300, "Input" -> 
     Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Numerical"], "f2" -> 
            Association["Type" -> "Numerical"], "f3" -> 
            Association["Type" -> "Numerical"], "f4" -> 
            Association["Type" -> "Numerical"], "f5" -> 
            Association["Type" -> "Numerical"], "f6" -> 
            Association["Type" -> "Numerical"], "f7" -> 
            Association["Type" -> "Nominal"], "f8" -> 
            Association["Type" -> "Text"]], "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
            Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
            Association["Type" -> "Text", "Weight" -> 1]], "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["Transpose", 
                Association["FeatureNumber" -> 8]], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                   "Numerical", "Numerical", "Nominal", "Text"}, 
                 "FeatureKeys" -> {
                  "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False]]}]], "ScalarFeature" -> 
          False, "Invertibility" -> "Perfect", "StructurePreserving" -> False,
           "Missing" -> "Allowed"]], "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
            Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
            Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
            Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
          Association[
           "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
            "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
               "], "Type" -> "NumericalVector"]], "Processors" -> {
            MachineLearning`MLProcessor["Threads", 
             Association[
             "Input" -> Association[
               "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6], "f7" -> 
                Association["Type" -> "NominalVector", "Weight" -> 1]], 
              "Processors" -> {
                MachineLearning`MLProcessor["ToVector", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                    "f2" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                  "Output" -> 
                  Association[
                   "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                  "Version" -> {12.2, 0}, "ID" -> 2890808244938110393]], 
                MachineLearning`MLProcessor["ToVector", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                  "Output" -> 
                  Association[
                   "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                  "Version" -> {12.2, 0}, "ID" -> 5629229317859041261]]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
              "Missing" -> "Allowed"]], 
            MachineLearning`MLProcessor["Threads", 
             Association[
             "Input" -> Association[
               "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
                "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
                "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Output" -> 
              Association[
               "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
                "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
                "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Processors" -> {
                MachineLearning`MLProcessor["ImputeMissing", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                  "VectorLength" -> 1, "Output" -> 
                  Association[
                   "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                  "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                  3108122425444935999]], 
                MachineLearning`MLProcessor["ImputeMissing", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                  "Fill" -> "", "Output" -> 
                  Association[
                   "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                  "Type" -> "Text", "Version" -> {12.2, 0}, "ID" -> 
                  4678014907749892316]], 
                MachineLearning`MLProcessor["ImputeMissing", 
                 Association[
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, "Input" -> 
                  Association[
                   "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                  "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 300, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {5.81, 214.705, 111.98993288590604`, 3133., 
                    15.262333333333336`, 74.43333333333334}, "Method" -> 
                    "Naive", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 6]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{0.4605590621517039, 
                    0.16532129222891656`, -0.17928480258893864`}, {
                    0.47481865987092087`, 
                    0.10973097855544875`, -0.15783158719594648`}, {
                    0.46711400079704124`, -0.05038165021487633, 
                    0.0910181514892921}, {0.45121493134376595`, 
                    0.21668223939483658`, -0.30890288627439744`}, \
{-0.35406462025884416`, 
                    0.25027290269167884`, -0.8433558144222124}, \
{-0.12361404119722114`, 0.9211416575705231, 0.35775944833773293`}}, 
                    "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 3, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0274908, "MaxTrainingMemory" -> 
                    246608, "DataMemory" -> 57808, "FunctionMemory" -> 22144, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 2, 21, 18, 52, 22.1901436`9.09873504186336}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                  "DimensionReduction", "VectorLength" -> 6, "Output" -> 
                  Association[
                   "(f1f2f3f4f5f6)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                  "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                  8312269817718464215]]}, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
            MachineLearning`MLProcessor["Standardize", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Mean" -> {5.8100000000000005`, 214.705, 111.80060492339395`, 
               3133., 15.262333333333322`, 74.43333333333334}, 
              "StandardDeviation" -> {1.7494475318416, 108.9054198605377, 
               40.213575468437234`, 882.9886446985981, 2.7367281966286785`, 
               2.772283455124271}, "Output" -> 
              Association[
               "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Version" -> {12.2, 0}, "ID" -> 3893966427905481628]], 
            MachineLearning`MLProcessor["ToLowerCase", 
             Association[
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 4900972772377279668, "Output" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["RemoveDiacritics", 
             Association[
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 7285476586811196156, "Output" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["TextToNominalSequence", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
              "Tokens" -> {{
                " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(",
                  ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                 "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                 ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
              "Version" -> {12.2, 0}, "ID" -> 4740781770089804510, "Output" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NominalSequence", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
             Association[
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
              MachineLearning`SortedHashAssociation[
                Association["KeyHashes" -> CompressedData["
1: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
                  "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                 Function[{
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                   Switch[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.2, 0}]], 
              "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDgBxIx7ItmSbsKOuz4p2ex0YTF4cbUhKg1F8TgtMLyvX8q
nJkdREO37t6YLQQXh+mD8Wf5Nf56zCXi0G2Uemd2ggBcPUwc3Vx0eXQ+zHwY
H51GN6/13/JYeQE+DPegqyOWhvkDXRyXe9H9jx5OxLpnvfSa7Ze8+XHaT4iG
uIsJbh96uMTP7+8MkeHEsA/dfbj4uPwBEz/48dhW0WJ2h4mPi6udvrOT7H70
cEQPb/T0RWp8oqcvdHWzr3H/XGbKjdNduPTBwplQ+MDCG+Z+Yv1ByF5c+Qtd
H658S2w+Q0/3L1ObbZ88wyw3CKUjQukKnQ8LN3TzbRtaS5f948EZPrjM4yx4
ObevhQOnP2HmovsbF5+8fCqEQcP8gct8XOUCuv9RzWUimC5v7ln7XS8q2579
rupBo9L/9jD51+YbE//pMxKdPtHjCT194vIXrvhFT2/o8UJsPsFlPro9uOoR
QvkCl3uJTY/o7iO2XEavX2DlO7npFWYeoXQIs++xwMWThycwE13vwtwHALj8
4gE=
               "], "Version" -> {12.2, 0}, "ID" -> 2064344366300366075, 
              "Output" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Index" -> {
                Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
              "Version" -> {12.2, 0}, "ID" -> 958951729582329572, "Output" -> 
              Association[
               "f7" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["MergeVectors", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f8" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1], 
                "(f1f2f3f4f5f6)" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 6]], 
              "Spans" -> {
                Span[1, 271], 
                Span[272, 277]}, "Wrappers" -> {SparseArray, Identity}, 
              "Output" -> 
              Association[
               "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                   "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
              "ID" -> 7107213858894378356]]}, "Invertibility" -> "Impossible",
           "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
     Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False]]}]], "ScalarFeature" -> True,
           "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"]], "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
          "Processors" -> {
            MachineLearning`MLProcessor["ToVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 1916512723103570139]], 
            MachineLearning`MLProcessor["Standardize", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Mean" -> {20.799}, "StandardDeviation" -> {6.274889029563264}, 
              "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 2901205138368446714]], 
            MachineLearning`MLProcessor["FromVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
              Association[
               "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
              "Version" -> {12.2, 0}, "ID" -> 2965090389962885354]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
              "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
       "InverseProcessorFunction" -> (20.799 + 6.274889029563264 #& ), 
       "ProcessorFunction" -> (-3.314640291168245 + 0.15936536810270902` #& ),
        "Name" -> "value", 
       "Quantiles" -> {-1.8803519782438636`, 3.554007074058514}], 
     "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
       Association[
       "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
     Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
     "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
     Association["Trees" -> {
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 280, 
             278, 1, 277, 279, 276, 280}], 
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
            0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
            0.24144437909126282`, -0.16238045692443848`, \
-0.16512740403413773`, 1.5453717708587646`, 
            0.7698086202144623, -0.4086989164352417, -0.8244205117225647, 
            1.2433704137802124`, 0.5593376457691193}, "LeafValues" -> 
           RawArray["Real32",{0.27456700801849365`, -0.001228633802384138, 
             0.1286134570837021, -0.17389293015003204`, 0.42019957304000854`, 
             0.027671096846461296`, -0.11889686435461044`, \
-0.09863805770874023, 0.12792828679084778`, 
             0.20898635685443878`, -0.2680215537548065, 
             0.0727115347981453, -0.06480830907821655, -0.23054561018943787`, \
-0.21314755082130432`, -0.03119794651865959}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
             10, -7}, {12, -8}, {-6, 11}, {-3, -10}, {
             13, -11}, {-9, -12}, {-2, 15}, {
             14, -14}, {-4, -15}, {-13, -16}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 277, 280, 278, 280, 276, 280, 280, 
             277, 278, 278, 278, 2}], 
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 
            0.5658965408802032, -0.9371588230133057, 0.5732026696205139, 
            0.24144437909126282`, -0.16238045692443848`, \
-0.15244100242853165`, 0.9478608965873718, 1.3836916089057922`, 
            0.15441440045833588`, -0.5082264244556427, 0.16060373932123184`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.21963994204998016`, -0.030857663601636887`, 
             0.10741038620471954`, -0.14869855344295502`, 0.3361459970474243, 
             0.022123223170638084`, -0.09513114392757416, \
-0.07892409712076187, 0.10560908913612366`, 
             0.1729222685098648, -0.1715865582227707, -0.21236197650432587`, \
-0.056691572070121765`, 0.05763629078865051, 0.002475572982802987}], 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {9, 8}, {
             10, -7}, {12, -8}, {-6, 13}, {-3, -10}, {-4, 11}, {-11, -12}, {
             14, -13}, {-9, -14}, {-2, -15}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 278, 278, 3, 280, 278, 280, 278, 275, 
             278, 280, 277}], 
           "NumericalThresholds" -> {-0.4167654514312744, \
-1.1651025414466858`, 0.586245059967041, 
            0.03975731506943703, -0.3362342417240143, -1.0184027552604675`, 
            0.5593376457691193, -0.054887235164642334`, -1.0345970392227173`, 
            1.3984212279319763`, 0.924881786108017, -0.10787223652005196`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.1705792099237442, -0.023322811350226402`, 
             0.12576191127300262`, -0.13860741257667542`, 
             0.27001214027404785`, -0.11652486771345139`, 0.08647242933511734,
              0.011211839504539967`, -0.08198753744363785, 
             0.03568991273641586, -0.18351492285728455`, \
-0.06946929544210434, -0.032580744475126266`}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 6}, {7, 5}, {-1, -5}, {10, 
             11}, {-3, 9}, {8, 
             12}, {-2, -9}, {-7, -10}, {-4, -11}, {-6, -12}, {-8, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 278, 280, 277, 279, 280, 276, 280, 
             280, 280, 197, 280, 2, 278}], 
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.586245059967041, 
            0.5658965408802032, -0.6694435179233551, 
            0.6047321557998657, -0.3362342417240143, 0.15237538516521454`, 
            0.5593376457691193, -0.8736674189567566, 0.5677475333213806, 
            0.0010977291967719793`, 0.924881786108017, 0.1606035903096199, 
            1.243042528629303}, "LeafValues" -> 
           RawArray["Real32",{0.13381440937519073`, -0.03298359364271164, 
             0.12889614701271057`, -0.15273821353912354`, 
             0.22427277266979218`, 0.06887724250555038, 
             0.05144066363573074, -0.09321989864110947, -0.06632155925035477, \
-0.01655604876577854, 0.0054458389058709145`, 
             0.05525364726781845, -0.10163259506225586`, -0.05557543411850929,
              0.004180360585451126, -0.11925958096981049`}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {8, 7}, {-1, -5}, {6, 
             10}, {-3, -7}, {12, 13}, {14, 9}, {-9, -10}, {-6, 
             11}, {-11, -12}, {-4, 15}, {-8, -14}, {-2, -15}, {-13, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 277, 3, 280, 280, 279, 276, 280, 
             277, 280, 278, 3, 277}], 
           
           "NumericalThresholds" -> {-0.45557039976119995`, \
-1.1651025414466858`, 0.380217507481575, 0.03975731506943703, 
            0.5677475333213806, 0.9344088137149811, 
            0.9131649434566498, -0.9028680622577667, -0.5227583944797516, 
            1.5696318745613098`, 
            0.5649594366550446, -0.027853557374328375`, -0.13868915289640427`,
             0.9461058378219604}, "LeafValues" -> 
           RawArray["Real32",{0.10312169045209885`, -0.007154310122132301, 
             0.07404609769582748, -0.05556468293070793, 0.1802009791135788, 
             0.08056026697158813, -0.03878110274672508, \
-0.060475047677755356`, 0.0126131447032094, 
             0.030627330765128136`, -0.11132784932851791`, 
             0.007184752728790045, -0.04255010932683945, \
-0.09660004824399948, -0.08421824127435684}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, 5}, {7, 6}, {-1, -5}, {8, -6}, {
             10, -7}, {11, -8}, {9, -9}, {-3, -10}, {13, -11}, {
             12, -12}, {-2, -13}, {14, -14}, {-4, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 280, 278, 278, 280, 278, 280, 275, 280, 
             3, 278, 279, 1, 278}], 
           "NumericalThresholds" -> {-0.4167654514312744, 1.2770469188690186`,
             0.9138865172863007, -1.0339843034744263`, 
            1.2920055389404297`, -0.054887235164642334`, \
-0.16512740403413773`, -1.0345970392227173`, -0.5140877664089203, \
-0.13868915289640427`, 0.49990423023700714`, -1.0121296644210815`, 
            0.76980921626091, 1.2327117323875427`}, "LeafValues" -> 
           RawArray["Real32",{0.04942077025771141, -0.003346428507938981, 
             0.15019510686397552`, -0.07314929366111755, 0.04268650338053703, 
             0.019521579146385193`, -0.017482789233326912`, 
             0.11001615226268768`, 
             0.0048992447555065155`, -0.06911906599998474, \
-0.059525005519390106`, -0.05285973846912384, -0.10529101639986038`, 
             0.07859601080417633, -0.05287855863571167}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {5, 9}, {7, 8}, {
             6, -6}, {-2, 10}, {-1, 13}, {-5, -9}, {12, 14}, {
             11, -11}, {-7, -12}, {-4, -13}, {-8, -14}, {-10, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 280, 277, 276, 280, 280, 276, 279, 280, 
             276, 1, 280, 275, 3}], 
           "NumericalThresholds" -> {-0.47015997767448425`, 
            1.2770469188690186`, -0.03924974054098129, -0.931493729352951, 
            1.2774283289909363`, -0.16512740403413773`, \
-0.13077695667743683`, -0.6464331150054932, 0.5593376457691193, 
            1.053425371646881, -0.03583664447069168, -0.3362342417240143, \
-1.0335904359817505`, -0.13868936151266098`}, "LeafValues" -> 
           RawArray["Real32",{0.03354673087596893, 0.01676269993185997, 
             0.12869229912757874`, -0.029443709179759026`, \
-0.0035599498078227043`, -0.014107538387179375`, 
             0.08748812973499298, -0.033891696482896805`, \
-0.09269203990697861, -0.0024030229542404413`, -0.04877068102359772, 
             0.02865503914654255, -0.05954791605472565, 
             0.058491434901952744`, -0.06651772558689117}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {7, 5}, {6, 11}, {
             8, -6}, {-1, 13}, {-2, 9}, {10, 12}, {-8, -10}, {-4, 
             14}, {-5, -12}, {-9, -13}, {-7, -14}, {-11, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 280, 1, 277, 275, 276, 278, 280, 
             279, 277, 197, 279, 280}], 
           "NumericalThresholds" -> {-0.3617333471775055, -0.9406689703464508,
             0.9269111454486847, -0.03583710826933384, 
            0.9461058378219604, -1.0363672375679016`, -0.7376145124435425, 
            0.9138865172863007, 
            1.2880584597587585`, -0.6358448565006256, -0.05150502175092697, 
            0.0010977291967719793`, 0.6437021195888519, -0.523695707321167}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.06690282374620438, -0.0049407766200602055`, \
-0.0032952765468508005`, 0.12548133730888367`, 
             0.012824958190321922`, -0.06486864387989044, 0.02668704092502594,
              0.05335512012243271, -0.041362714022397995`, 
             0.006022348999977112, -0.01652158424258232, \
-0.048652052879333496`, -0.03697754815220833, -0.029033459722995758`, \
-0.051383502781391144`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, 4}, {6, -4}, {13, 7}, {8, 
             12}, {-1, -7}, {-5, -8}, {9, -9}, {10, -10}, {-2, 
             11}, {-11, -12}, {-6, 14}, {-3, -14}, {-13, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 280, 277, 276, 279, 1, 276, 278, 
             279, 278, 279, 280, 275, 1}], 
           "NumericalThresholds" -> {-0.3825637698173523, -0.931493729352951, 
            0.9269111454486847, 0.9461058378219604, -1.1564356684684753`, 
            0.37745968997478485`, -0.03583710826933384, -0.7376145124435425, 
            0.6433023512363434, 0.08657680824398994, 
            0.08500208333134651, -0.8317069709300995, 0.5732026696205139, 
            0.10741028934717178`, -0.03583761118352413}, "LeafValues" -> 
           RawArray["Real32",{
             0.06573162227869034, -0.013297252357006073`, \
-0.009375303983688354, 0.10038506239652634`, -0.042604438960552216`, 
             0.04912140965461731, 0.008077098987996578, 0.004631709307432175, 
             0.0428459458053112, -0.03751879930496216, -0.010267259553074837`,
              0.021171391010284424`, -0.05526578426361084, \
-0.014283590950071812`, -0.030312836170196533`, -0.02845325879752636}], 
           "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, 7}, {5, -4}, {9, 12}, {-1, 
             6}, {-6, -7}, {-3, 8}, {-8, -9}, {10, 13}, {11, 14}, {-2, -12}, {
             15, -13}, {-10, -14}, {-11, -15}, {-5, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 280, 277, 278, 279, 279, 280, 279, 277, 
             279, 276, 276, 280, 2, 1}], 
           "NumericalThresholds" -> {-0.4773160368204117, 1.2770469188690186`,
             0.380217507481575, -1.3414121866226196`, 
            0.9971522688865662, -0.43372008204460144`, 1.2897033095359802`, 
            0.9131649434566498, -0.4097961485385895, -0.4701126515865326, \
-0.931493729352951, 0.9391058683395386, -0.15047303587198257`, 
            0.16060330718755722`, -0.03583761118352413}, "LeafValues" -> 
           RawArray["Real32",{0.052189454436302185`, 0.020580926910042763`, 
             0.07584480196237564, -0.0035503122489899397`, \
-0.005193439777940512, -0.01612800918519497, 0.0405082181096077, 
             0.020034361630678177`, -0.03581859916448593, \
-0.027981268242001534`, -0.04666673392057419, 
             0.013623467646539211`, -0.015534654259681702`, \
-0.0017225807532668114`, -0.04727216809988022, -0.025074400007724762`}], 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {7, 10}, {-1, 5}, {
             6, -6}, {-5, 11}, {8, -8}, {9, -9}, {-2, 13}, {
             12, -11}, {-7, -12}, {-4, 14}, {-10, -14}, {-13, 
             15}, {-15, -16}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 278, 276, 280, 279, 277, 280, 280, 279, 
             200, 275, 280, 2}], 
           "NumericalThresholds" -> {-1.03275465965271, -1.1940594911575317`, 
            0.24144437909126282`, -0.5120998322963715, 
            1.0665029883384705`, -0.3825637698173523, 1.2774283289909363`, 
            0.921964555978775, 0.41610319912433624`, 0.2693440392613411, 
            1.2532107830047607`, 0.5684428811073303, 0.1606035903096199}, 
           "LeafValues" -> 
           RawArray["Real32",{0.07159765064716339, 
             0.029207633808255196`, -0.010062930174171925`, \
-0.020028261467814445`, 
             0.03905925527215004, -0.02082948386669159, -0.01902349293231964, 
             0.004178453236818314, 
             0.0007192401681095362, -0.044570889323949814`, \
-0.0019167581340298057`, -0.04009895399212837, 0.013857665471732616`, 
             0.002481470350176096}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 12}, {6, -6}, {
             8, 13}, {9, -8}, {-2, -9}, {10, -10}, {
             11, -11}, {-4, -12}, {-5, -13}, {-7, -14}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 276, 279, 277, 280, 280, 279, 279, 
             280, 280, 275, 197}], 
           "NumericalThresholds" -> {-0.7113344073295593, 
            0.9308460652828217, -1.1564356684684753`, 0.9971522688865662, 
            0.380217507481575, -0.8875118792057037, -0.5195336639881134, 
            0.8980397582054138, -0.4701126515865326, 
            0.207212895154953, -0.5258615911006927, -1.0299208760261536`, 
            0.001291881431825459}, "LeafValues" -> 
           RawArray["Real32",{0.05029553920030594, 0.018988464027643204`, 
             0.06901617348194122, 
             0.019669968634843826`, -0.03003685176372528, \
-0.021615799516439438`, -0.032053399831056595`, 
             0.016315938904881477`, -0.01846752129495144, \
-0.03358190506696701, -0.0020708353258669376`, -0.032541535794734955`, \
-0.0009356975788250566, -0.004678369965404272}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {6, 
             9}, {-2, 7}, {-7, 8}, {12, -9}, {10, -10}, {11, -11}, {
             13, -12}, {-8, -13}, {-6, -14}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 277, 280, 277, 277, 279, 268, 1, 277, 2,
              1, 197, 275, 277}], 
           "NumericalThresholds" -> {-1.03275465965271, -0.7773292362689972, 
            0.5713980197906494, 0.380217507481575, -0.5424853265285492, 
            0.8980397582054138, 
            9.999999682655224*^-21, -0.035837357863783836`, \
-0.3617333471775055, 0.1606033369898796, -0.03583812527358532, 
            0.0012387987226247787`, 1.2499743103981018`, -0.5444541573524475},
            "LeafValues" -> 
           RawArray["Real32",{0.02309465780854225, 
             0.021741081029176712`, -0.020575467497110367`, 
             0.06989883631467819, -0.00419276999309659, 
             0.012797858566045761`, -0.0231586005538702, -0.01307919342070818,
              0.007976751774549484, -0.01500753778964281, \
-0.0379931665956974, -0.023586075752973557`, -0.019202252849936485`, 
             0.0012359312968328595`, -0.007906495593488216}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, 5}, {-1, -4}, {6, 
             10}, {-3, -6}, {7, 14}, {8, -8}, {-2, 9}, {-9, -10}, {-5, 
             11}, {-11, 12}, {-12, 13}, {-13, -14}, {-7, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 276, 279, 277, 280, 275, 3, 3, 3}],
            "NumericalThresholds" -> {-0.7113344073295593, 
            0.9308460652828217, -1.1564356684684753`, 0.9971522688865662, 
            1.5696318745613098`, -1.2298340201377869`, 0.10891465097665787`, 
            0.10532283037900925`, 0.03975666128098965, -0.13868919014930725`},
            "LeafValues" -> 
           RawArray["Real32",{0.03457096219062805, 0.03255116567015648, 
             0.0469890832901001, 
             0.01262342743575573, -0.0234586950391531, -0.023149782791733742`,
              0.0009229590650647879, -0.009969980455935001, \
-0.02970903553068638, 0.01354038342833519, -0.01354801282286644}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, -5}, {
             6, -6}, {7, 8}, {-2, -8}, {9, -9}, {10, -10}, {-7, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 279, 3, 1, 278, 277, 276, 280, 3, 280}],
            "NumericalThresholds" -> {-1.03275465965271, \
-0.34000593423843384`, 0.03975666128098965, 0.7698083817958832, 
            1.6209778189659119`, -0.875508576631546, -0.873746246099472, \
-0.523048460483551, -0.13868913799524307`, -1.2398365139961243`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.01762579195201397, -0.019095176830887794`, 
             0.00452686520293355, 0.0164779219776392, 
             0.05550764501094818, -0.02406701259315014, 
             0.024531755596399307`, -0.0038933276664465666`, 
             0.0052881701849401, -0.006628889124840498, \
-0.01781727373600006}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {-3, 4}, {-4, -5}, {
             6, -6}, {-2, 7}, {-7, 8}, {10, 9}, {-9, -10}, {-8, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 279, 279, 279, 278, 3, 2, 280, 280,
              280, 275, 197, 280}], 
           "NumericalThresholds" -> {-0.7113344073295593, 0.9308460652828217, 
            1.3694056868553162`, 0.636465311050415, 
            1.0671756267547607`, -0.23888037353754044`, 
            0.10532283037900925`, -0.190930537879467, 0.20124167948961258`, 
            0.570195347070694, 1.2880584597587585`, 1.2471793293952942`, 
            0.001291881431825459, -0.8875118792057037}, "LeafValues" -> 
           RawArray["Real32",{0.002230970421805978, 0.027003979310393333`, 
             0.03526477888226509, -0.013756439089775085`, 
             0.02672821283340454, -0.02068674936890602, \
-0.004306606017053127, -0.013435732573270798`, 0.001321291085332632, 
             0.012448814697563648`, -0.013986721634864807`, 
             0.00500012282282114, -0.017463039606809616`, 
             0.0041885473765432835`, -0.023877384141087532`}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {4, -4}, {-1, -5}, {
             6, -6}, {7, 9}, {8, -8}, {-2, -9}, {12, 10}, {-10, 
             11}, {-11, -12}, {14, 13}, {-13, -14}, {-7, -15}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 3, 2, 279, 280, 278, 3, 1, 279, 1}], 
           "NumericalThresholds" -> {-1.3061254620552063`, 
            0.1053234227001667, -0.1909310594201088, -0.11623026803135872`, \
-0.3362342417240143, 
            1.3984212279319763`, -0.13868922740221024`, \
-0.035837702453136444`, -0.15096715837717056`, -0.035838160663843155`}, 
           "LeafValues" -> 
           RawArray["Real32",{0.020192226395010948`, 
             0.028502000495791435`, -0.02450515329837799, \
-0.014779331162571907`, 0.004360830411314964, 
             0.016588646918535233`, -0.01915837451815605, \
-0.017317945137619972`, 0.002569944364950061, 
             0.000717483286280185, -0.002037324709817767}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 5}, {-2, -5}, {6, 7}, {
             10, -7}, {9, 8}, {-8, -9}, {-6, -10}, {-4, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 276, 3, 3, 1, 280}], 
           "NumericalThresholds" -> {-1.02145117521286, -1.0807608366012573`, \
-0.9406689703464508, 0.039756910875439644`, 0.039757510647177696`, 
            1.3843857645988464`, 0.5593376457691193}, "LeafValues" -> 
           RawArray["Real32",{-0.004461807198822498, -0.035477086901664734`, 
             0.02552429959177971, -0.005415341351181269, 
             0.027535155415534973`, 
             0.013421596959233284`, -0.01717778854072094, 
             0.004261428955942392}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 5}, {-1, -5}, {
             6, -6}, {7, -7}, {-4, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 280, 280, 280, 275, 275, 1, 1, 280, 275,
              279, 276}], 
           "NumericalThresholds" -> {-1.0317081809043884`, 
            0.9308460652828217, -0.8858247101306915, -0.16512740403413773`, \
-1.0290305614471436`, -1.025515377521515, -0.03583679907023907, \
-0.035837702453136444`, 0.19654250144958496`, 1.2474907636642456`, 
            9.999999682655224*^-21, -1.1293277144432068`}, "LeafValues" -> 
           RawArray["Real32",{0.021286191418766975`, -0.023461082950234413`, 
             0.03237009420990944, -0.02185959927737713, -0.004225605167448521,
              0.016068467870354652`, -0.009800917468965054, \
-0.017017658799886703`, -0.0015378218377009034`, 0.01493488997220993, 
             0.0028298303950577974`, -0.002203255193307996, 
             0.00898117944598198}], "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -3}, {-1, 4}, {-4, 12}, {-2, 
             6}, {-6, 7}, {8, 11}, {10, 
             9}, {-9, -10}, {-7, -11}, {-8, -12}, {-5, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 276, 276, 279, 278, 3, 276, 2, 275, 2, 
             1, 1}], "NumericalThresholds" -> {
            0.6255472302436829, -1.1447357535362244`, -1.0895200967788696`, 
            0.8745190799236298, -0.6289621293544769, 
            0.03975699655711651, -0.6931112706661224, 0.16060422360897064`, 
            1.2447961568832397`, 0.1606033369898796, 
            0.7698091566562653, -0.03583761118352413}, "LeafValues" -> 
           RawArray["Real32",{-0.03979016840457916, 0.0394180491566658, 
             0.021844662725925446`, 
             0.016512973234057426`, -0.022523291409015656`, 
             0.005783454515039921, -0.001532122609205544, \
-0.002473314292728901, 
             0.016115864738821983`, -0.0051437439396977425`, \
-0.020793011412024498`, -0.013449542224407196`, -0.004771602340042591}], 
           "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, 5}, {-2, 4}, {-4, 7}, {6, 
             8}, {-3, -7}, {-5, -8}, {10, 9}, {-9, -10}, {11, 
             12}, {-6, -12}, {-11, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 275, 3, 1, 275, 275, 280, 277, 276}], 
           "NumericalThresholds" -> {-1.0425257086753845`, \
-1.0317081809043884`, 0.03975666128098965, 
            0.7698088586330414, -1.0290305614471436`, -1.025515377521515, \
-0.14740513265132904`, 1.5696318745613098`, -0.344004824757576}, "LeafValues" -> 
           RawArray[
             "Real32",{-0.017429132014513016`, -0.008972707204520702, \
-0.017614416778087616`, 0.006659054663032293, 0.0325125977396965, 
             0.012404737062752247`, -0.010508392006158829`, 
             0.008126724511384964, -0.010886883363127708`, 
             0.0005449877353385091}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 5}, {7, 4}, {-4, -5}, {-3, 
             6}, {-6, 8}, {-2, -8}, {9, -9}, {-7, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 277, 277, 276, 278, 276, 277, 277, 1}], 
           "NumericalThresholds" -> {-0.7113344073295593, \
-0.5447868406772614, -0.4196389615535736, -1.1498605012893677`, \
-1.1176645159721375`, 1.7023435831069946`, 
            1.1105183362960815`, -0.8993055820465088, -0.03583677113056183}, 
           "LeafValues" -> 
           RawArray["Real32",{0.015638357028365135`, -0.01212505716830492, 
             0.01741628535091877, 
             0.0008515134686604142, -0.011276689358055592`, 
             0.0032723769545555115`, 
             0.007796016056090593, -0.013675971888005733`, 
             0.017337389290332794`, -0.0060083214193582535`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 6}, {-1, 5}, {-5, 8}, {
             7, -7}, {9, -8}, {-6, -9}, {-4, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> RawArray["Integer16",{275, 3, 1, 2, 3, 1, 1}], 
           "NumericalThresholds" -> {-1.0425257086753845`, 
            0.03975731506943703, 0.7698083817958832, -0.1909310594201088, 
            0.03975571505725384, -0.03583662211894989, -0.03583680838346481}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.014494395814836025`, 
             0.008627481758594513, -0.0010229599429294467`, 
             0.021357590332627296`, -0.00015842291759327054`, \
-0.020618319511413574`, 0.019793830811977386`, -0.011323072016239166`}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, 5}, {
             6, -6}, {7, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 279, 275, 278, 1, 278}], 
           "NumericalThresholds" -> {-1.1961490511894226`, -1.082087218761444,
             0.42247603833675385`, -1.040117859840393, -0.9371588230133057, 
            1.384385883808136, 1.6209778189659119`}, "LeafValues" -> 
           RawArray["Real32",{0.013236629776656628`, -0.028801022097468376`, 
             0.018070276826620102`, 0.007195407524704933, 
             0.008764585480093956, 
             0.00010181204561376944`, -0.01395548228174448, \
-0.011738305911421776`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, 5}, {-5, 
             6}, {7, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 279, 275, 279, 279, 197, 279}], 
           "NumericalThresholds" -> {1.3843860030174255`, 
            0.21878673136234283`, -1.0416456460952759`, 1.1287112832069397`, 
            0.7867037355899811, 0.0010088002309203148`, 0.37745968997478485`},
            "LeafValues" -> 
           RawArray["Real32",{-0.018062666058540344`, -0.003816725919023156, 
             0.027109477669000626`, 
             0.013590388931334019`, -0.011326807551085949`, 
             0.018079008907079697`, 
             0.0008819478680379689, -0.011354874819517136`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {5, -5}, {
             6, -6}, {-4, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 3, 1, 275, 3, 2, 1, 3}], 
           "NumericalThresholds" -> {0.1053234227001667, 0.03975718095898628, 
            0.7698086202144623, -1.040117859840393, 
            0.03975571505725384, -0.19093096256256104`, \
-0.035836661234498024`, -0.13868863135576248`}, "LeafValues" -> 
           RawArray["Real32",{0.012577795423567295`, -0.010172308422625065`, 
             0.00016212947957683355`, 
             0.023683341220021248`, -0.0029307387303560972`, 
             0.005361876916140318, -0.0251762792468071, 0.012895986437797546`,
              0.008711091242730618}], "Children" -> 
           RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {-1, 5}, {7, 
             6}, {-6, -7}, {8, -8}, {-5, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 1, 275, 1, 1, 279, 278, 2}], 
           "NumericalThresholds" -> {1.3843860030174255`, 
            1.3843865990638733`, -1.0416456460952759`, 0.76980921626091, 
            0.7698079645633698, 0.8745190799236298, -0.6216471195220947, 
            0.16060348600149155`}, "LeafValues" -> 
           RawArray["Real32",{-0.014930673874914646`, 
             0.022271176800131798`, -0.004030933603644371, 
             0.0131318848580122, -0.01089363731443882, 
             0.01983598619699478, -0.018672045320272446`, \
-0.0008112947107292712, -0.0028238047380000353`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {5, -5}, {
             6, -6}, {7, 8}, {-4, -8}, {-7, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 280, 276, 280, 278, 280, 1, 278, 279, 1,
              5}], "NumericalThresholds" -> {0.7867037355899811, 
            0.5720357596874237, -1.1447357535362244`, 
            0.5698419213294983, -0.8614740073680878, 0.20124167948961258`, 
            0.7698089778423309, 0.6929723620414734, 
            0.055151479318737984`, -0.035837167873978615`, 
            9.999999682655224*^-21}, "LeafValues" -> 
           RawArray["Real32",{-0.021822664886713028`, -0.014838575385510921`, 
             0.028978388756513596`, 0.016955701634287834`, 
             0.013177195563912392`, -0.0035204521846026182`, 
             0.013688896782696247`, -0.02026699110865593, \
-0.012779772281646729`, -0.005214362870901823, 0.0014279604656621814`, 
             0.00805634818971157}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {10, -3}, {-1, 4}, {5, 7}, {-4, 6}, {
             11, -7}, {8, -8}, {9, -9}, {-5, -10}, {-2, -11}, {-6, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 276, 278, 277, 277, 280, 279, 280, 198, 
             276, 280, 279}], 
           "NumericalThresholds" -> {-0.7113344073295593, \
-1.1498605012893677`, -1.1176645159721375`, -0.5447868406772614, \
-0.4156266450881958, -0.51617032289505, -1.0054724216461182`, \
-1.2357004284858704`, 9.999999682655224*^-21, 
            0.9525408148765564, -0.886361688375473, 0.6256912350654602}, 
           "LeafValues" -> 
           RawArray["Real32",{
             0.01413520984351635, -0.010246384888887405`, \
-0.010340387932956219`, 0.013475905172526836`, 0.009914765134453773, 
             0.010951909236609936`, -0.00022718582476954907`, \
-0.018966084346175194`, -0.007929431274533272, -0.010407610796391964`, 
             0.012470852583646774`, -0.004756684880703688, 
             0.0009635017486289144}], "Children" -> 
           RawArray["Integer16",{{2, 4}, {-1, 3}, {-3, 12}, {-2, 5}, {-5, 
             6}, {7, 9}, {8, 11}, {-6, -9}, {
             10, -10}, {-7, -11}, {-8, -12}, {-4, -13}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 3, 279, 275, 275, 3, 276, 1}], 
           "NumericalThresholds" -> {0.10532283037900925`, 
            0.03975731506943703, 
            0.44301658868789673`, -1.040117859840393, -1.0303456783294678`, 
            0.03975571505725384, -0.8611071407794952, -0.035836778581142426`},
            "LeafValues" -> 
           RawArray["Real32",{0.009712575934827328, -0.015217911452054977`, 
             0.017612246796488762`, 0.0010065584210678935`, 
             0.0037388892378658056`, 
             0.01369846984744072, -0.016572261229157448`, 
             0.0004800058959517628, -0.006997625343501568}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {4, -3}, {-2, -4}, {-1, 5}, {6, 
             7}, {-5, -7}, {-6, 8}, {-8, -9}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 3, 279, 2, 278}], 
           "NumericalThresholds" -> {-1.2001294493675232`, \
-1.0895200967788696`, -1.040117859840393, 
            0.03975699655711651, -0.09426458552479744, -0.1909307837486267, 
            1.6209778189659119`}, "LeafValues" -> 
           RawArray["Real32",{-0.01018956582993269, 0.011424422264099121`, 
             0.012103348970413208`, 
             0.011025477200746536`, -0.0002932068891823292, \
-0.016917621716856956`, 0.00004789864760823548, -0.009159047156572342}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {6, 
             5}, {-5, -6}, {-4, 7}, {-7, -8}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 276, 279, 278, 277, 279, 1, 276}], 
           "NumericalThresholds" -> {-1.0416456460952759`, \
-1.1447357535362244`, 
            0.8940755724906921, -0.946847140789032, -0.7921875417232513, 
            0.6268712878227234, 0.76980921626091, -0.6931112706661224}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.008741379715502262, 
             0.013814592733979225`, -0.0016264194855466485`, \
-0.014929144643247128`, -0.00011955903755733743`, 0.01965932734310627, 
             0.01174067985266447, -0.011873900890350342`, \
-0.0014149337075650692`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 8}, {5, 6}, {-3, -6}, {
             7, -7}, {-5, -8}, {-4, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 277, 280, 276, 279, 276, 279, 268}], 
           "NumericalThresholds" -> {
            1.5568374395370483`, -1.0759419202804565`, -1.0584542155265808`, \
-0.1426393911242485, -0.8317069709300995, -1.082087218761444, \
-1.1676327586174011`, 0.30660974979400635`}, "LeafValues" -> 
           RawArray["Real32",{-0.011639402247965336`, 0.01000222284346819, 
             0.021819913759827614`, -0.011970380321145058`, 
             0.008855203166604042, -0.01278601586818695, -0.00979348924010992,
              0.002263125032186508, -0.00861585233360529}], "Children" -> 
           RawArray["Integer16",{{2, -2}, {-1, 3}, {4, 6}, {-3, 
             5}, {-5, -6}, {-4, 7}, {-7, 8}, {-8, -9}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 280, 276, 280, 276, 279, 2, 278, 280, 
             2}], "NumericalThresholds" -> {0.7867037355899811, 
            0.9234128594398499, -1.1447357535362244`, 
            0.5698419213294983, -0.9848584532737732, 1.185479462146759, 
            0.16060304641723633`, 0.515142410993576, 0.20124167948961258`, 
            0.1606038138270378}, "LeafValues" -> 
           RawArray["Real32",{-0.01868119090795517, 0.006496012210845947, 
             0.024718178436160088`, 
             0.015333658084273338`, -0.012857310473918915`, 
             0.0036496352404356003`, -0.008696704171597958, 
             0.0039308262057602406`, -0.009266807697713375, 
             0.009449830278754234, -0.0053864638321101665`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {6, -3}, {-1, 4}, {5, 7}, {-4, 
             9}, {-2, -7}, {-5, 8}, {-8, -9}, {10, -10}, {-6, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 2, 1, 2, 1, 275, 275, 280, 280}], 
           "NumericalThresholds" -> {-1.3061254620552063`, \
-0.19093182682991028`, 
            0.7698082029819489, -0.1909308210015297, -0.035837702453136444`, 
            1.2474907636642456`, 1.2435283064842224`, 
            0.924881786108017, -0.1533832624554634}, "LeafValues" -> 
           RawArray["Real32",{0.007527391891926527, -0.018514422699809074`, 
             0.012855833396315575`, 
             0.0008239721064455807, -0.0026979732792824507`, \
-0.00022616265050601214`, 
             0.003992266487330198, -0.01944119483232498, \
-0.005449267104268074, 0.009973322041332722}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, 5}, {6, 8}, {
             7, -7}, {-5, -8}, {9, -9}, {-6, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{277, 280, 278, 2, 1, 198, 280, 279}], 
           "NumericalThresholds" -> {-1.115539014339447, \
-1.0584542155265808`, -1.1370901465415955`, 
            0.16060296446084976`, -0.035837605595588684`, 0.2464868351817131, 
            1.2951242923736572`, 0.44301658868789673`}, "LeafValues" -> 
           RawArray["Real32",{0.007012093439698219, 
             0.017290238291025162`, -0.017127107828855515`, 
             0.0025718698743730783`, -0.010046174749732018`, 
             0.00580659881234169, -0.007857033051550388, 
             0.008351999334990978, -0.005967315286397934}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, 6}, {-2, 
             5}, {-5, -6}, {7, -7}, {8, -8}, {-4, -9}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 276, 279, 1, 1, 278, 278, 1, 277, 3, 2, 
             277, 276, 3, 197}], 
           "NumericalThresholds" -> {0.0946783609688282, -1.1447357535362244`,
             0.2728509306907654, -0.0358369592577219, -0.035837702453136444`, 
            0.4685831815004349, -1.1041871905326843`, -0.035837192088365555`, \
-0.2908952236175537, -0.1386895254254341, 
            0.16060345619916916`, -0.598229706287384, -1.0746153593063354`, 
            0.03975666128098965, 0.0012387987226247787`}, "LeafValues" -> 
           RawArray["Real32",{0.005093687679618597, 0.01926800049841404, 
             0.014097552746534348`, -0.015199854969978333`, \
-0.016055546700954437`, 0.019000833854079247`, 
             0.0016533646266907454`, -0.013992773368954659`, 
             0.012911097146570683`, 0.0035210498608648777`, 
             0.002137698233127594, -0.015428628772497177`, \
-0.001477011595852673, -0.017581263557076454`, 
             0.004346128087490797, -0.0015758539084345102`}], "Children" -> 
           RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 7}, {5, 13}, {10, 
             6}, {-6, -7}, {-4, 8}, {9, 12}, {-8, -10}, {-1, 
             11}, {-11, -12}, {-9, -13}, {-5, 14}, {15, -15}, {-14, -16}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 275, 1, 280, 276}], 
           "NumericalThresholds" -> {-1.2001294493675232`, \
-1.0895200967788696`, -1.0411556959152222`, -1.0365572571754456`, 
            0.76980921626091, 0.20209703594446182`, 0.15237538516521454`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.00873740203678608, 0.012282812036573887`, 
             0.009646444581449032, -0.010920053347945213`, 
             0.005360695533454418, 
             0.0005790966097265482, -0.01672438532114029, \
-0.0011858321959152818`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {7, 
             6}, {-6, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 276, 279, 1, 280, 277, 268, 276, 279}], 
           "NumericalThresholds" -> {-1.0418539643287659`, \
-1.1498605012893677`, 0.8745190799236298, 0.76980921626091, 
            0.3837786391377449, 0.380217507481575, 9.999999682655224*^-21, 
            1.7023435831069946`, 1.3565325736999512`}, "LeafValues" -> 
           RawArray["Real32",{-0.006644937209784985, 0.013492836616933346`, 
             0.0064139338210225105`, -0.010157876648008823`, 
             0.0011881821556016803`, -0.01114583294838667, \
-0.0026554560754448175`, -0.007329984102398157, 
             0.00758633716031909, -0.001075503882020712}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 9}, {6, 5}, {-5, -6}, {
             7, 8}, {-3, -8}, {-7, -9}, {-4, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{1, 279, 277, 278, 278, 3, 275}], 
           "NumericalThresholds" -> {1.3843860030174255`, 
            0.21878673136234283`, -1.130354642868042, -1.1651025414466858`, \
-0.9794070720672607, -0.13869009166955948`, -1.0350556373596191`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.011841820552945137`, -0.0022841361351311207`,
              0.016118304803967476`, 
             0.010369709692895412`, -0.010748103260993958`, \
-0.004964270628988743, 0.009964226745069027, 0.0002292875142302364}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, 4}, {-4, 5}, {-5, 
             6}, {-6, 7}, {-7, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
            "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 275, 278, 276}], 
           "NumericalThresholds" -> {-1.189745008945465, \
-1.0895200967788696`, -1.0411556959152222`, -1.0359485745429993`, 
            1.6209778189659119`, 1.2497752904891968`}, "LeafValues" -> 
           RawArray["Real32",{-0.007774415425956249, 0.010953055694699287`, 
             0.00850010383874178, -0.008439823053777218, \
-0.00017733912682160735`, -0.006710558198392391, 0.007845803163945675}], 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {
             6, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 280, 276, 276, 280, 280, 2, 2, 1, 279}],
            "NumericalThresholds" -> {0.7867037355899811, 
            0.5720357596874237, -1.1447357535362244`, -1.0734038949012756`, 
            0.5698419213294983, 0.20124167948961258`, 0.1606038138270378, 
            0.16060304641723633`, -0.03583712875843048, 1.5466718673706055`}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.015445376746356487`, 0.0005572688532993197, 
             0.017544522881507874`, 0.009691284038126469, 
             0.0024810589384287596`, -0.011617674492299557`, 
             0.008562182076275349, -0.003978077322244644, \
-0.006006881594657898, 0.004249026533216238, -0.008412128314375877}], 
           "Children" -> 
           RawArray["Integer16",{{3, 2}, {10, -3}, {-1, 4}, {-4, 5}, {6, 8}, {
             7, -7}, {-5, -8}, {-6, 9}, {-9, -10}, {-2, -11}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 2, 275, 275, 280, 1, 279, 1, 279, 279, 
             3}], "NumericalThresholds" -> {0.1606040820479393, 
            0.16060390323400497`, 1.2474907636642456`, 
            1.2560738921165466`, -0.8875118792057037, 0.7698083817958832, 
            0.6255472302436829, 0.7698076665401459, 
            0.2757168859243393, -0.34000593423843384`, -0.13868939131498337`},
            "LeafValues" -> 
           RawArray["Real32",{0.007263779640197754, 
             0.005117371212691069, -0.014978645369410515`, 
             0.012763487175107002`, -0.004007771145552397, \
-0.0032278739381581545`, -0.003457588842138648, 
             0.020148990675807, -0.02201157435774803, -0.003058837493881583, 
             0.01840560883283615, -0.005041437689214945}], "Children" -> 
           RawArray["Integer16",{{2, 9}, {3, -3}, {5, 4}, {-4, -5}, {-1, 6}, {
             8, 7}, {-7, -8}, {-6, -9}, {10, -10}, {11, -11}, {-2, -12}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{280, 280, 277, 278, 1, 198, 2, 2}], 
           "NumericalThresholds" -> {-1.591059386730194, -0.8875118792057037, \
-1.115539014339447, -1.1370901465415955`, -0.03583694063127041, 
            9.999999682655224*^-21, 
            0.16060379892587662`, -0.39369185268878937`}, "LeafValues" -> 
           RawArray["Real32",{-0.005133630707859993, -0.0005674721323885024, 
             0.010022378526628017`, -0.013149682432413101`, 
             0.00799503643065691, 0.01342150941491127, 
             0.0015236923936754465`, -0.01412906963378191, 
             0.0004005177761428058}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {5, 3}, {-3, 4}, {-4, 
             6}, {-2, -6}, {8, 7}, {-7, -8}, {-5, -9}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 197, 280, 280, 276, 277, 200, 280, 3}], 
           "NumericalThresholds" -> {0.1606043055653572, 
            0.0010088002309203148`, 1.2770469188690186`, 1.290135383605957, 
            1.585935115814209, 0.9830326735973358, 0.2693440392613411, 
            0.5679879188537598, -0.1386890485882759}, "LeafValues" -> 
           RawArray["Real32",{0.0070451609790325165`, 
             0.018066372722387314`, -0.003525697160512209, 
             0.013110853731632233`, -0.0008554381201975048, 
             0.006644480861723423, -0.017681432887911797`, 
             0.0069886003620922565`, -0.002761300653219223, \
-0.001756808953359723}], "Children" -> 
           RawArray["Integer16",{{2, 8}, {-1, 3}, {5, 4}, {-4, -5}, {6, -6}, {
             7, -7}, {-3, -8}, {9, -9}, {-2, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 276, 197, 277, 279, 276, 277, 277, 2}], 
           "NumericalThresholds" -> {-0.19093182682991028`, \
-1.0858586430549622`, 0.0010977291967719793`, -0.5447868406772614, 
            0.8745190799236298, -0.9270240962505341, -0.5937579572200775, \
-0.4097961485385895, 0.16060306876897812`}, "LeafValues" -> 
           RawArray["Real32",{-0.003855551825836301, 0.010771424509584904`, 
             0.008079497143626213, -0.010287119075655937`, 
             0.0059857722371816635`, -0.008995741605758667, \
-0.00785841140896082, 
             0.010185006074607372`, -0.00007453561556758359, \
-0.00030132351093925536`}], "Children" -> 
           RawArray["Integer16",{{3, 2}, {-2, 5}, {4, -4}, {-1, -5}, {6, 
             9}, {-3, 7}, {-7, 8}, {-8, -9}, {-6, -10}}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
           "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{275, 1, 3, 278, 3, 1, 1, 1, 2}], 
           "NumericalThresholds" -> {-1.0389081835746765`, 0.7698088586330414,
             0.03975718095898628, -1.082496464252472, 
            0.03975571505725384, -0.035836661234498024`, \
-0.03583684004843235, -0.03583714924752712, -0.1909310594201088}, 
           "LeafValues" -> 
           RawArray["Real32",{-0.010072899982333183`, -0.0008427618886344135, 
             0.005085209384560585, 
             0.017127908766269684`, -0.0004014023288618773, 
             0.00035144403227604926`, 
             0.00935518741607666, -0.010563033632934093`, 
             0.009086883626878262, -0.01250296737998724}], "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -3}, {5, 4}, {-4, -5}, {6, 9}, {
             7, -7}, {8, -8}, {-2, -9}, {-6, -10}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{276, 276, 275, 3, 277, 140, 278}], 
           "NumericalThresholds" -> {-1.189745008945465, \
-1.0895200967788696`, -1.040117859840393, 
            0.03975699655711651, -0.42157675325870514`, 0.4703100025653839, 
            1.6209778189659119`}, "LeafValues" -> 
           RawArray["Real32",{-0.005795991513878107, 0.008259627036750317, 
             0.006542353890836239, 
             0.0012416276149451733`, -0.010884137824177742`, 
             0.00033351575257256627`, -0.006815627217292786, \
-0.005909495986998081}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {6, 
             5}, {-5, -6}, {7, -7}, {-4, -8}}], "NominalSplits" -> {}, 
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
           0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{279, 277, 277, 278, 276, 275}], 
           "NumericalThresholds" -> {
            1.5568374395370483`, -1.0759419202804565`, -0.9103866219520569, \
-0.9832614362239838, -0.8611071407794952, 0.1051686629652977}, "LeafValues" -> 
           RawArray["Real32",{-0.009610779583454132, 0.006076374556869268, 
             0.008236336521804333, -0.005496431607753038, 
             0.004773454274982214, -0.004803651012480259, 
             0.0007947777630761266}], "Children" -> 
           RawArray["Integer16",{{2, -2}, {-1, 3}, {-3, 4}, {-4, 5}, {-5, 
             6}, {-6, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
         MachineLearning`DecisionTree[
          Association[
          "FeatureIndices" -> 
           RawArray["Integer16",{278, 276, 3, 3, 1, 275, 2}], 
           "NumericalThresholds" -> {-1.3494816422462463`, \
-1.1564356684684753`, 0.03975731506943703, 
            0.03975633159279823, -0.035836584866046906`, \
-1.0312357544898987`, -0.39369235932826996`}, "LeafValues" -> 
           RawArray["Real32",{
             0.005770768504589796, -0.00997285358607769, \
-0.0075362492352724075`, 0.0007214112556539476, -0.006093882955610752, 
             0.006281726527959108, 0.00006203418161021546, 
             0.010134507901966572`}], "Children" -> 
           RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 7}, {5, -5}, {
             6, -6}, {-3, -7}, {-4, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
           1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]]}, 
       "ClassNumber" -> 1, "IterationsNumber" -> 50, "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f7" -> Association[
             "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}], 
            "(f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
               "], "Type" -> "NumericalVector"]], "Output" -> 
          Association[
           "(f7(f8(f1f2f3f4f5f6)))" -> 
            Association["Type" -> "NumericalVector", "Weight" -> 8.]], 
          "Processors" -> {
            MachineLearning`MLProcessor["EmbedNominalVector", 
             Association[
             "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f7" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}]],
               "Index" -> {
                Association[1 -> 1, 2 -> 2, 3 -> 3]}, "Output" -> 
              Association[
               "f7" -> Association[
                 "Weight" -> 1, "Type" -> "NumericalVector"]], 
              "EmbeddingVectors" -> {{{0., 0., 0.}, {-0.035837482661008835`, 
               0.160603865981102, -0.13868938386440277`}, {
               1.3843863010406494`, -0.19093137979507446`, 
               0.03975660353899002}, {
               0.7698085308074951, -0.39369234442710876`, 
               0.10532329231500626`}}}, "Version" -> {12.2, 0}, "ID" -> 
              2900860608003839972]], 
            MachineLearning`MLProcessor["MergeVectors", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "f7" -> Association[
                 "Weight" -> 1, "Type" -> "NumericalVector"], 
                "(f8(f1f2f3f4f5f6))" -> 
                Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBRLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPRNMA
qp6VTg==
                   "], "Type" -> "NumericalVector"]], "Spans" -> {
                Span[1, 3], 
                Span[4, 280]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
              Association[
               "(f7(f8(f1f2f3f4f5f6)))" -> 
                Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                   "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
              "ID" -> 8596584706593563824]], 
            MachineLearning`MLProcessor["DensifyNumericalVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, "Input" -> 
              Association[
               "(f7(f8(f1f2f3f4f5f6)))" -> 
                Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                   "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
              "ID" -> 6600348544166215312, "Output" -> 
              Association[
               "(f7(f8(f1f2f3f4f5f6)))" -> 
                Association["Type" -> "NumericalVector", "Weight" -> 8.]]]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association[
               "Type" -> "NumericalVector", "Weight" -> 8.], "Key" -> 
              "(f7(f8(f1f2f3f4f5f6)))", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"]], 
       "DistributionData" -> {NormalDistribution, {0.45748147300198405`}}, 
       "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
       "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
       Association[
        "BoostingMethod" -> 
         Association["Value" -> "Gradient", "Options" -> Association[]], 
         MaxTrainingRounds -> 
         Association["Value" -> 50, "Options" -> Association[]], 
         "LeavesNumber" -> 
         Association["Value" -> 110, "Options" -> Association[]], 
         "LearningRate" -> 
         Association["Value" -> 0.2, "Options" -> Association[]], 
         ValidationSet -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "MaxBinNumber" -> 
         Association["Value" -> 255, "Options" -> Association[]], 
         "ThreadNumber" -> 
         Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
         Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
         Association["Value" -> 15, "Options" -> Association[]], 
         "FeatureFraction" -> 
         Association["Value" -> 1, "Options" -> Association[]], 
         "BaggingFraction" -> 
         Association["Value" -> 1, "Options" -> Association[]], 
         "BaggingFrequency" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "MinGainToSplit" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "L1Regularization" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "L2Regularization" -> 
         Association["Value" -> 0, "Options" -> Association[]], 
         "LossFunction" -> 
         Association[
          "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
     "TrainingInformation" -> 
     Association[
      "PanelCell" -> CellObject[20081], "TrainingFunction" -> Predict, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 1.8365558003297235`, "PreprocessingTime" -> 
       3.0653784`7.938029086343358, "LossName" -> "StandardDeviation", 
       "BestModelInformation" -> Dataset[
         Association[
         "MeanCrossEntropy" -> 
          Around[3.3750789955552314`, 0.017221839439923173`], 
          "StandardDeviation" -> 
          Around[2.5963205253036126`, 0.5925169056554938], "EvaluationTime" -> 
          0.00006635119509224949, "TestSize" -> 60, "ModelMemory" -> 166928, 
          "ModelUtility" -> -1.6918816692064054`, "TrainingSize" -> 240, 
          "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 2241440, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[3.3750789955552314`, 0.012177679452475608`]}, 
          "StandardDeviationHistory" -> {
            Around[2.5963205253036126`, 0.4189727219566694]}, 
          "Configuration" -> {
           "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
            MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
            0.2, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
            "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
            "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
            "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
            "L1Regularization" -> 0, "L2Regularization" -> 0, "LossFunction" -> 
            "MeanSquaredError"}, "FinalTrainingSize" -> 300], 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
           "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
           "TrainingTime", "TrainingMemory", "ExperimentCount", 
           "MeanCrossEntropyHistory", "StandardDeviationHistory", 
           "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 17], 
           TypeSystem`Atom[Integer]}], 
         Association[]], "Configurations" -> Dataset[
         Association[
         Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 13], "LearningRate" -> 
              Association["Value" -> 0.1], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 35], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.603049156737783, 0.014939033552083007`], 
               "StandardDeviation" -> 
               Around[6.341079117087336, 0.34459816403946864`], 
               "EvaluationTime" -> 0.000030470488799470136`, "TestSize" -> 
               290, "ModelMemory" -> 61696, 
               "ModelUtility" -> -2.5510108951007116`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               237592, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.603049156737783, 0.01056349192905125]}, 
               "StandardDeviationHistory" -> {
                 Around[6.341079117087336, 0.24366769857674256`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.672293595231984, 0.037164925118015404`], 
               "StandardDeviation" -> 
               Around[6.334717971060417, 0.6771054726798769], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 61696, "ModelUtility" -> -2.5603494108660483`,
                "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 534360, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[4.672293595231984, 0.02627957057323894]}, 
               "StandardDeviationHistory" -> {
                 Around[6.334717971060417, 0.4787858713104635]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.167627968410739, 0.02225031185502816], 
               "StandardDeviation" -> 
               Around[2.6764781776815196`, 0.2946986893736171], 
               "EvaluationTime" -> 0.00007207786526301476, "TestSize" -> 120, 
               "ModelMemory" -> 161357.3333333333, 
               "ModelUtility" -> -1.6994386660090806`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.039810717055349706`, "TrainingMemory" -> 
               2.238528*^6, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                 Around[4.17639486746727, 0.029183762338317272`], 
                 Around[4.158861069354208, 0.028665596095754493`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.7501758953649276`, 0.4690347445287801], 
                 Around[2.602780459998112, 0.35951187360974785`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00007207786526301476, "ModelMemory" -> 
              161357.3333333333, "StandardDeviation" -> 
              Around[2.6764781776815196`, 0.2946986893736171], 
              "TrainingMemory" -> 2.238528*^6, "TrainingTime" -> 
              0.06561232824379827], "Index" -> 1], 
          Association[
           "Value" -> "DecisionTree", "Options" -> 
            Association[
             "DistributionSmoothing" -> Association["Value" -> 1], 
              "FeatureFraction" -> Association["Value" -> 1]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.7766589057766007`, 0.18105750197704637`], 
               "StandardDeviation" -> 
               Around[5.749120396477743, 0.30987984937514557`], 
               "EvaluationTime" -> 0.00001414739315879119, "TestSize" -> 290, 
               "ModelMemory" -> 57152, "ModelUtility" -> -2.4529209417081246`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
               "TrainingMemory" -> 1151288, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.7766589057766007`, 0.12802698743266622`]}, 
               "StandardDeviationHistory" -> {
                 Around[5.749120396477743, 0.21911814284623135`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5313076656612896`, 0.07159246743754022], 
               "StandardDeviation" -> 
               Around[3.121019370008615, 0.25382771696363227`], 
               "EvaluationTime" -> 0.000015107104941529995`, "TestSize" -> 
               250, "ModelMemory" -> 57216, 
               "ModelUtility" -> -1.8474461815234962`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 421360, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.5313076656612896`, 0.05062351920696178]}, 
               "StandardDeviationHistory" -> {
                 Around[3.121019370008615, 0.17948329991808404`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5566796432927523`, 0.08644921466303497], 
               "StandardDeviation" -> 
               Around[3.107056447870278, 0.23815122403862546`], 
               "EvaluationTime" -> 0.000020982090196569435`, "TestSize" -> 
               120, "ModelMemory" -> 57216., 
               "ModelUtility" -> -1.8420408798531893`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               1.703248*^6, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                 Around[2.5363331112459475`, 0.12238322330101609`], 
                 Around[2.577026175339557, 0.11555694508743569`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.103287605308288, 0.3869852268880616], 
                 Around[3.1108252904322673`, 0.30207944417914945`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000020982090196569435`, "ModelMemory" -> 
              57216., "StandardDeviation" -> 
              Around[3.107056447870278, 0.23815122403862546`], 
              "TrainingMemory" -> 1.703248*^6, "TrainingTime" -> 
              0.047359344249110875`], "Index" -> 2], 
          Association[
           "Value" -> "NearestNeighbors", "Options" -> 
            Association[
             "NeighborsNumber" -> Association["Value" -> Automatic], 
              "DistributionSmoothing" -> Association["Value" -> 0.5], 
              "NearestMethod" -> Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[5.084048966604046, 0.608898303347392], 
               "StandardDeviation" -> 
               Around[4.536462450427245, 0.3587105581553748], 
               "EvaluationTime" -> 0.000015562459098473143`, "TestSize" -> 
               290, "ModelMemory" -> 80368, 
               "ModelUtility" -> -2.220990602546297, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               222744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[5.084048966604046, 0.4305561193499243]}, 
               "StandardDeviationHistory" -> {
                 Around[4.536462450427245, 0.2536466681548769]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5585011352763605`, 0.1382396817509295], 
               "StandardDeviation" -> 
               Around[3.3327192643914736`, 0.36300563643362316`], 
               "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 
               200, "ModelMemory" -> 170080, 
               "ModelUtility" -> -1.918493638119745, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
               558328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.5585011352763605`, 0.09775021639515247]}, 
               "StandardDeviationHistory" -> {
                 Around[3.3327192643914736`, 0.2566837471311534]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5196301288894043`, 0.1472128191703286], 
               "StandardDeviation" -> 
               Around[2.755591167802839, 0.3399368676534227], 
               "EvaluationTime" -> 0.000026414886541018543`, "TestSize" -> 
               120, "ModelMemory" -> 597952., 
               "ModelUtility" -> -1.731170754873685, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.008628854898161877, "TrainingMemory" -> 
               3.137725333333333*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.5925199168729973`, 0.1787549571057685], 
                 Around[2.4467403409058113`, 0.18308159747685096`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.9932105369193938`, 0.33502565735642], 
                 Around[2.517971798686285, 0.3532696817454866]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000026414886541018543`, "ModelMemory" -> 
              597952., "StandardDeviation" -> 
              Around[2.755591167802839, 0.3399368676534227], "TrainingMemory" -> 
              3.137725333333333*^6, "TrainingTime" -> 0.018729350969945158`], 
            "Index" -> 3], 
          Association[
           "Value" -> "RandomForest", "Options" -> 
            Association[
             "FeatureFraction" -> Association["Value" -> Automatic], 
              "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
              Association["Value" -> Automatic], "DistributionSmoothing" -> 
              Association["Value" -> 0.5], "Implementation" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.3209300489480875`, 0.23383845777763082`], 
               "StandardDeviation" -> 
               Around[4.982078924495252, 0.47697494804648316`], 
               "EvaluationTime" -> 0.00004496472020903844, "TestSize" -> 200, 
               "ModelMemory" -> 148592, "ModelUtility" -> -2.317967958604359, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.025118864315095794`, 
               "TrainingMemory" -> 251192, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.3209300489480875`, 0.16534875919676692`]}, 
               "StandardDeviationHistory" -> {
                 Around[4.982078924495252, 0.33727222021976944`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.531845888030266, 0.0834161505833649], 
               "StandardDeviation" -> 
               Around[3.1249311512157543`, 0.28894590300983947`], 
               "EvaluationTime" -> 0.00004777286046641963, "TestSize" -> 250, 
               "ModelMemory" -> 148592, "ModelUtility" -> -1.850890365860601, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
               "TrainingMemory" -> 454888, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.531845888030266, 0.058984125737975505`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.1249311512157543`, 0.20431560741432792`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.4623123347918625`, 0.10595927737700336`], 
               "StandardDeviation" -> 
               Around[2.8759147406510612`, 0.2769487921783146], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 120, 
               "ModelMemory" -> 159898.66666666666`, 
               "ModelUtility" -> -1.768601941061596, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.02727219573731649, "TrainingMemory" -> 
               1.5580213333333333`*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.4972482026165106`, 0.1840921013867683], 
                 Around[2.427376466967214, 0.11916234764834543`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.945970148012384, 0.4293249139110472], 
                 Around[2.8058593332897384`, 0.34292438855049173`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
              159898.66666666666`, "StandardDeviation" -> 
              Around[2.8759147406510612`, 0.2769487921783146], 
              "TrainingMemory" -> 1.5580213333333333`*^6, "TrainingTime" -> 
              0.05920910898674141], "Index" -> 4], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 1.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[257.2628818891713, 38.796354991064206`], 
               "StandardDeviation" -> 
               Around[4.529676575609829, 0.3326032199964365], 
               "EvaluationTime" -> 0.00002324976954344266, "TestSize" -> 290, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.2183811453025104`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.025118864315095794`,
                "TrainingMemory" -> 12061744, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[257.2628818891713, 27.43316569950206]}, 
               "StandardDeviationHistory" -> {
                 Around[4.529676575609829, 0.23518599230396134`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.391853325085897, 0.7594002690643396], 
               "StandardDeviation" -> 
               Around[3.7416916447089803`, 0.46634032272725134`], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.03731080050001, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               3550256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.391853325085897, 0.5369770798902832]}, 
               "StandardDeviationHistory" -> {
                 Around[3.7416916447089803`, 0.32975240454116245`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.5167895330745536`, 0.020375650287547634`], 
               "StandardDeviation" -> 
               Around[3.7040101820153257`, 0.5284310609375128], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.0307013845016844`,
                "TrainingSize" -> 240, "TrainingTime" -> 
               0.012589254117941668`, "TrainingMemory" -> 4828560, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.5167895330745536`, 0.014407760489410558`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.7040101820153257`, 0.373657186578517]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[3.7040101820153257`, 0.5284310609375128], 
              "TrainingMemory" -> 4828560, "TrainingTime" -> 
              0.04085543196252288], "Index" -> 5], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.001], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[485394.79478777153`, 101834.8325970013], 
               "StandardDeviation" -> 
               Around[4.148344679415135, 0.43108739649747885`], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.136431808184696, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               3550192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[485394.79478777153`, 72008.10069033649]}, 
               "StandardDeviationHistory" -> {
                 Around[4.148344679415135, 0.3048248213474212]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.5882367441420376`*^8, 7.223337426932076*^7], 
               "StandardDeviation" -> 
               Around[4.623017308578716, 0.6287693007431978], 
               "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 
               100, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.2510377667245938`, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               3282712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.5882367441420376`*^8, 5.1076708773822576`*^7]}, 
               "StandardDeviationHistory" -> {
                 Around[4.623017308578716, 0.44460703635743887`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.52814333850048, 0.02206950906312532], 
               "StandardDeviation" -> 
               Around[3.631122828504231, 0.39879893512429776`], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 120, 
               "ModelMemory" -> 64136., "ModelUtility" -> -2.004421635184225, 
               "TrainingSize" -> 240, "TrainingTime" -> 0.009999999999999998, 
               "TrainingMemory" -> 4.828725333333333*^6, "ExperimentCount" -> 
               2, "MeanCrossEntropyHistory" -> {
                 Around[3.508466172981872, 0.014536236279795646`], 
                 Around[3.5478205040190884`, 0.01376176246280559]}, 
               "StandardDeviationHistory" -> {
                 Around[3.9514602199883333`, 0.3585856392585578], 
                 Around[3.3107854370201286`, 0.3170891145624073]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.631122828504231, 0.39879893512429776`], 
              "TrainingMemory" -> 4.828725333333333*^6, "TrainingTime" -> 
              0.0225], "Index" -> 6], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 100.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.2174258263234403`, 0.0634883747234744], 
               "StandardDeviation" -> 
               Around[5.481347554919375, 0.6468724687711669], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.4178312904783708`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282712, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.2174258263234403`, 0.04489306029348135]}, 
               "StandardDeviationHistory" -> {
                 Around[5.481347554919375, 0.4574079092309753]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.659328729428095, 0.010250773588439423`], 
               "StandardDeviation" -> 
               Around[3.823564368165172, 0.29022811581941804`], 
               "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.0494018879340907`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550256, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.659328729428095, 0.007248391516793475]}, 
               "StandardDeviationHistory" -> {
                 Around[3.823564368165172, 0.2052222687869052]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.915239451875844, 0.031141556448652293`], 
               "StandardDeviation" -> 
               Around[3.5140527310120526`, 0.331984288045451], 
               "EvaluationTime" -> 0.00003899463987771132, "TestSize" -> 120, 
               "ModelMemory" -> 64136., "ModelUtility" -> -1.968640266780822, 
               "TrainingSize" -> 240, "TrainingTime" -> 0.011726169411961113`,
                "TrainingMemory" -> 4.828746666666666*^6, "ExperimentCount" -> 
               2, "MeanCrossEntropyHistory" -> {
                 Around[3.8883075185300906`, 0.021448434696545327`], 
                 Around[3.942171385221598, 0.02284095092466365]}, 
               "StandardDeviationHistory" -> {
                 Around[3.6965039698254323`, 0.36872896575344], 
                 Around[3.331601492198673, 0.4209040411312939]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003899463987771132, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.5140527310120526`, 0.331984288045451], 
              "TrainingMemory" -> 4.828746666666666*^6, "TrainingTime" -> 
              0.024657711764951393`], "Index" -> 7], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.1], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[26002.29171875621, 7256.363374277151], 
               "StandardDeviation" -> 
               Around[4.624433270451427, 0.6288627927188927], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.2513398213251774`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282648, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[26002.29171875621, 5131.023748705071]}, 
               "StandardDeviationHistory" -> {
                 Around[4.624433270451427, 0.4446731451674392]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[37.647044107655006`, 5.342783107852846], 
               "StandardDeviation" -> 
               Around[3.370793521014749, 0.24225483854627688`], 
               "EvaluationTime" -> 0.000024368167755758284`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -1.9225714931534927`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550128, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[37.647044107655006`, 3.777918165971684]}, 
               "StandardDeviationHistory" -> {
                 Around[3.370793521014749, 0.1713000391113246]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.527412121768714, 0.022426830007490618`], 
               "StandardDeviation" -> 
               Around[3.5727753558312605`, 0.38721907863315186`], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 120, 
               "ModelMemory" -> 64136., 
               "ModelUtility" -> -1.9879390978929679`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.009999999999999998, "TrainingMemory" -> 
               8.062261333333333*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.5073248885934025`, 0.014506723656960119`], 
                 Around[3.5474993549440264`, 0.013733626675062284`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.876493307827907, 0.3654559956204864], 
                 Around[3.269057403834614, 0.3187002769138467]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.5727753558312605`, 0.38721907863315186`], 
              "TrainingMemory" -> 8.062261333333333*^6, "TrainingTime" -> 
              0.0225], "Index" -> 8], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 10.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[5.425547559429526, 1.0698531111818443`], 
               "StandardDeviation" -> 
               Around[4.763041756105327, 0.6358314429873951], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.2803867193081757`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282584, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[5.425547559429526, 0.7565003897902074]}, 
               "StandardDeviationHistory" -> {
                 Around[4.763041756105327, 0.44960072502801474`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.64787345784768, 0.0615241618325005], 
               "StandardDeviation" -> 
               Around[3.3980409049719666`, 0.2658376430050166], 
               "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -1.931876312818681, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550128, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2.64787345784768, 0.043504152038579665`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.3980409049719666`, 0.18797560006349578`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.608173148019115, 0.017810454033276794`], 
               "StandardDeviation" -> 
               Around[3.4256858191688466`, 0.379725767585207], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 120, 
               "ModelMemory" -> 64136., 
               "ModelUtility" -> -1.9463807372498456`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.013675813386831489`, "TrainingMemory" -> 
               4.828661333333333*^6, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[3.594034147326451, 0.01527717829174122], 
                 Around[3.6223121487117793`, 0.015356567250146766`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.691974497137692, 0.3765154603893469], 
                 Around[3.1593971412000013`, 0.3894875560859703]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136., "StandardDeviation" -> 
              Around[3.4256858191688466`, 0.379725767585207], 
              "TrainingMemory" -> 4.828661333333333*^6, "TrainingTime" -> 
              0.02709476673353936], "Index" -> 9], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 10000.], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.593914022241319, 0.027787721380235553`], 
               "StandardDeviation" -> 
               Around[6.329755394805718, 0.6496334753369907], 
               "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
               100, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.558731981453258, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
               3282648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.593914022241319, 0.019648886221686968`]}, 
               "StandardDeviationHistory" -> {
                 Around[6.329755394805718, 0.45936023569656986`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.640129574846416, 0.024236630930106924`], 
               "StandardDeviation" -> 
               Around[6.128642719518877, 0.3650588828396368], 
               "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -2.5179679831643216`, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3550000, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.640129574846416, 0.017137886083794227`]}, 
               "StandardDeviationHistory" -> {
                 Around[6.128642719518877, 0.2581356115882925]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[5.2652345937342835`, 0.08597750391980621], 
               "StandardDeviation" -> 
               Around[5.514630920399861, 0.6021897814631463], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.4221612555317202`,
                "TrainingSize" -> 240, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 4828560, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[5.2652345937342835`, 0.060795276051187945`]}, 
               "StandardDeviationHistory" -> {
                 Around[5.514630920399861, 0.4258124780338358]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[5.514630920399861, 0.6021897814631463], "TrainingMemory" -> 
              4828560, "TrainingTime" -> 0.02508925411794167], "Index" -> 10],
           Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.01], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[2907.3235717163566`, 397.7594669108454], 
               "StandardDeviation" -> 
               Around[3.4489573303635646`, 0.23881992253401998`], 
               "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 
               250, "ModelMemory" -> 64136, 
               "ModelUtility" -> -1.944977636421346, "TrainingSize" -> 50, 
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3549664, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[2907.3235717163566`, 281.2584163338049]}, 
               "StandardDeviationHistory" -> {
                 Around[3.4489573303635646`, 0.16887118670625148`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.5083086424958627`, 0.020546336004268972`], 
               "StandardDeviation" -> 
               Around[3.9447295801878193`, 0.5075073229121089], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.0909377267052243`,
                "TrainingSize" -> 240, "TrainingTime" -> 
               0.012589254117941668`, "TrainingMemory" -> 4828432, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.5083086424958627`, 0.014528453517155903`]}, 
               "StandardDeviationHistory" -> {
                 Around[3.9447295801878193`, 0.35886186953298305`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.051840030733022*^6, 309178.46958212415`], 
               "StandardDeviation" -> 
               Around[4.367344485110485, 0.32113783987144195`], 
               "EvaluationTime" -> 0.00001922557869792714, "TestSize" -> 290, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.1819062574337797`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 3282776, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.051840030733022*^6, 218622.1924383987]}, 
               "StandardDeviationHistory" -> {
                 Around[4.367344485110485, 0.22707874426869623`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[4.367344485110485, 0.32113783987144195`], 
              "TrainingMemory" -> 3282776, "TrainingTime" -> 
              0.04776776235382501], "Index" -> 11], 
          Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 60], "LearningRate" -> 
              Association["Value" -> 0.1], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 90], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[4.667272415470441, 0.024683835812017708`], 
               "StandardDeviation" -> 
               Around[6.251707144295453, 0.37000431292225927`], 
               "EvaluationTime" -> 0.00001901871830953335, "TestSize" -> 250, 
               "ModelMemory" -> 61696, "ModelUtility" -> -2.5377737739361628`,
                "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 536864, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[4.667272415470441, 0.01745410768837307]}, 
               "StandardDeviationHistory" -> {
                 Around[6.251707144295453, 0.2616325587355988]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.588919783512541, 0.057951756375120574`], 
               "StandardDeviation" -> 
               Around[3.0387891228194377`, 0.48341433250052035`], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
               "ModelMemory" -> 157344, 
               "ModelUtility" -> -1.8359340470531218`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
               2241280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.588919783512541, 0.04097807991451849]}, 
               "StandardDeviationHistory" -> {
                 Around[3.0387891228194377`, 0.34182555263388636`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
              157344, "StandardDeviation" -> 
              Around[3.0387891228194377`, 0.48341433250052035`], 
              "TrainingMemory" -> 2241280, "TrainingTime" -> 
              0.0521177248700464], "Index" -> 12], 
          Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 110], "LearningRate" -> 
              Association["Value" -> 0.2], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 15], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[3.188755353091236, 0.010969837572900105`], 
               "StandardDeviation" -> 
               Around[2.90965840843094, 0.2931452364085463], "EvaluationTime" -> 
               0.00010430402130441927`, "TestSize" -> 200, "ModelMemory" -> 
               158304, "ModelUtility" -> -1.7811395645522192`, "TrainingSize" -> 
               50, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
               573128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.188755353091236, 0.007756846536312642]}, 
               "StandardDeviationHistory" -> {
                 Around[2.90965840843094, 0.2072849845370167]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.3750789955552314`, 0.017221839439923173`], 
               "StandardDeviation" -> 
               Around[2.5963205253036126`, 0.5925169056554938], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
               "ModelMemory" -> 166928, 
               "ModelUtility" -> -1.6918816692064054`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
               2241440, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.3750789955552314`, 0.012177679452475608`]}, 
               "StandardDeviationHistory" -> {
                 Around[2.5963205253036126`, 0.4189727219566694]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.603447386144963, 0.014929018870274535`], 
               "StandardDeviation" -> 
               Around[6.341079117087336, 0.34459816403946864`], 
               "EvaluationTime" -> 0.000016395446818563233`, "TestSize" -> 
               290, "ModelMemory" -> 61696, 
               "ModelUtility" -> -2.55101088102567, "TrainingSize" -> 10, 
               "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
               181320, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.603447386144963, 0.010556410479633054`]}, 
               "StandardDeviationHistory" -> {
                 Around[6.341079117087336, 0.24366769857674256`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000016395446818563233`, "ModelMemory" -> 
              61696, "StandardDeviation" -> 
              Around[6.341079117087336, 0.34459816403946864`], 
              "TrainingMemory" -> 181320, "TrainingTime" -> 
              0.08735751282918311], "Index" -> 13], 
          Association[
           "Value" -> "GradientBoostedTrees", "Options" -> 
            Association[
             "BoostingMethod" -> Association["Value" -> "Gradient"], 
              MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
              Association["Value" -> 60], "LearningRate" -> 
              Association["Value" -> 0.02], ValidationSet -> 
              Association["Value" -> Automatic], "MaxBinNumber" -> 
              Association["Value" -> 255], "ThreadNumber" -> 
              Association["Value" -> 6], "MaxDepth" -> 
              Association["Value" -> 6], "LeafSize" -> 
              Association["Value" -> 35], "FeatureFraction" -> 
              Association["Value" -> 1], "BaggingFraction" -> 
              Association["Value" -> 1], "BaggingFrequency" -> 
              Association["Value" -> 0], "MinGainToSplit" -> 
              Association["Value" -> 0], "L1Regularization" -> 
              Association["Value" -> 0], "L2Regularization" -> 
              Association["Value" -> 0], "LossFunction" -> 
              Association["Value" -> "MeanSquaredError"]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[4.6673624032468375`, 0.024685311531796622`], 
               "StandardDeviation" -> 
               Around[6.251707144295453, 0.37000431292225927`], 
               "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 250, 
               "ModelMemory" -> 61696, "ModelUtility" -> -2.537773778860592, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`, 
               "TrainingMemory" -> 537024, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[4.6673624032468375`, 0.01745515117983587]}, 
               "StandardDeviationHistory" -> {
                 Around[6.251707144295453, 0.2616325587355988]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[4.746518876500792, 0.06443967651644998], 
               "StandardDeviation" -> 
               Around[3.3597067317315656`, 0.4930925971746341], 
               "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
               "ModelMemory" -> 160920, 
               "ModelUtility" -> -1.9339388624388025`, "TrainingSize" -> 240, 
               "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
               2241376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.746518876500792, 0.0455657322422493]}, 
               "StandardDeviationHistory" -> {
                 Around[3.3597067317315656`, 0.3486691192150704]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
              160920, "StandardDeviation" -> 
              Around[3.3597067317315656`, 0.4930925971746341], 
              "TrainingMemory" -> 2241376, "TrainingTime" -> 
              0.07849733612802016], "Index" -> 14], 
          Association[
           "Value" -> "LinearRegression", "Options" -> 
            Association[
             "L1Regularization" -> Association["Value" -> 0], 
              "L2Regularization" -> Association["Value" -> 0.0001], 
              "OptimizationMethod" -> Association["Value" -> Automatic], 
              MaxIterations -> Association["Value" -> 30]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[4.8437402720050275`*^7, 1.0188818542009313`*^7], 
               "StandardDeviation" -> 
               Around[4.148172715159739, 0.43211748957594637`], 
               "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.136439850155056, 
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
               3549664, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[4.8437402720050275`*^7, 7.204582683334017*^6]}, 
               "StandardDeviationHistory" -> {
                 Around[4.148172715159739, 0.3055532071484589]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[3.5084828462149558`, 0.02055849306032157], 
               "StandardDeviation" -> 
               Around[3.9521461691064794`, 0.5070785466376446], 
               "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.0927478558615955`,
                "TrainingSize" -> 240, "TrainingTime" -> 
               0.012589254117941668`, "TrainingMemory" -> 4828560, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[3.5084828462149558`, 0.01453704985392996]}, 
               "StandardDeviationHistory" -> {
                 Around[3.9521461691064794`, 0.3585586789216975]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[2.050760538782293*^10, 3.0902660190252595`*^9], 
               "StandardDeviation" -> 
               Around[4.367159046752454, 0.3211357312166417], 
               "EvaluationTime" -> 0.00001922557869792714, "TestSize" -> 290, 
               "ModelMemory" -> 64136, "ModelUtility" -> -2.1818643165639573`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.01, 
               "TrainingMemory" -> 3282712, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[2.050760538782293*^10, 2.1851480577231174`*^9]}, 
               "StandardDeviationHistory" -> {
                 Around[4.367159046752454, 0.22707725322458777`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00001922557869792714, "ModelMemory" -> 
              64136, "StandardDeviation" -> 
              Around[4.367159046752454, 0.3211357312166417], "TrainingMemory" -> 
              3282712, "TrainingTime" -> 0.04], "Index" -> 15]], 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "DecisionTree", "GradientBoostedTrees", "LinearRegression", 
              "NearestNeighbors", "RandomForest"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`AnyLength]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
               "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
               "TrainingTime", "TrainingMemory", "ExperimentCount", 
               "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "ModelMemory", "StandardDeviation", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 15], 
         Association[]], "MaxTrainingSize" -> 300, 
       "PreprocessorEvaluationTime" -> 3.49609375*^-6, "PreprocessorMemory" -> 
       116296, "InputDimension" -> 278, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
       True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
       "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.8229223471597467`17.334970465692574*^9, 
       "RoundPartitioning" -> Dataset[{
          Association[
          "TrainingSizes" -> 10, "TimeBudgets" -> 0.30040708320000026`, 
           "ElapsedTimes" -> 0.4999646, "ExperimentCounts" -> 13], 
          Association[
          "TrainingSizes" -> 50, "TimeBudgets" -> 0.42915297600000024`, 
           "ElapsedTimes" -> 0.5049406, "ExperimentCounts" -> 15], 
          Association[
          "TrainingSizes" -> 240, "TimeBudgets" -> 0.6130756800000001, 
           "ElapsedTimes" -> 0.6694668, "ExperimentCounts" -> 23]}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], 
         Association[]]], "AnomalyDetector" -> None, "Log" -> 
     Association["Example" -> MachineLearning`MLDataset[
         Association[
         "f1" -> Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
            8718539460336612740], "f2" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {140.}, "ID" -> 
            5330523246654450449], "f3" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {72.}, "ID" -> 
            5227176333101167944], "f4" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2408.}, "ID" -> 
            5596007189629378955], "f5" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
            2638574294534422359], "f6" -> 
          Association[
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {71}, "ID" -> 
            5604019906672533564], "f7" -> 
          Association[
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {1}, "ID" -> 
            7446114396074216018], "f8" -> 
          Association[
           "Type" -> "Text", "Weight" -> 1, 
            "Values" -> {"chevrolet vega (sw)"}, "ID" -> 
            3206511614197282240]], 
         Association[
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False]], "TrainingTime" -> 5.2114544, 
       "MaxTrainingMemory" -> 106365280, "DataMemory" -> 102576, 
       "FunctionMemory" -> 534440, "LanguageVersion" -> {12.2, 0}, "Date" -> 
       DateObject[{2021, 2, 21, 18, 52, 27.3205709`9.189064685787097}, 
         "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}]]]]]], "Output",
 CellChangeTimes->{3.8229455852269893`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"7916f294-af7a-4974-9aff-aa91ebab3416"]
}, Open  ]],

Cell["\:4e5f\:53ef\:4ee5\:5c06\:53c2\:6570\:4fe1\:606f\:6253\:5370\:51fa\:6765\
", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.8142872160545883`*^9, 3.814287238473769*^9}, {
   3.822945649287175*^9, 
   3.8229456564869967`*^9}},ExpressionUUID->"fd12ee00-eb61-4615-a99a-\
26133c2b28ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"p", ",", "\"\<MethodOption\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.814113993409144*^9, 3.8141140045134363`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"aab7b277-450f-4200-b9d2-75b8e5324af9"],

Cell[BoxData[
 RowBox[{"Method", "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"\<\"GradientBoostedTrees\"\>", ",", 
    RowBox[{"\<\"BoostingMethod\"\>", "\[Rule]", "\<\"Gradient\"\>"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "50"}], ",", 
    RowBox[{"\<\"LeavesNumber\"\>", "\[Rule]", "110"}], ",", 
    RowBox[{"\<\"LearningRate\"\>", "\[Rule]", "0.2`"}], ",", 
    RowBox[{"\<\"MaxDepth\"\>", "\[Rule]", "6"}], ",", 
    RowBox[{"\<\"LeafSize\"\>", "\[Rule]", "15"}], ",", 
    RowBox[{"\<\"L1Regularization\"\>", "\[Rule]", "0"}], ",", 
    RowBox[{"\<\"L2Regularization\"\>", "\[Rule]", "0"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.8229456661667953`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"9805637a-5b1f-4212-93e5-0fabe51594b5"]
}, Open  ]],

Cell["\:6539\:53d8\:7b97\:6cd5\:548c\:76f8\:5e94\:53c2\:6570", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814287255115362*^9, 3.814287291665324*^9}, {
   3.822945682946834*^9, 
   3.8229456879804688`*^9}},ExpressionUUID->"25fc8cfd-ddb5-456c-b2ae-\
2dcd7ffa94c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"training", ",", 
    RowBox[{"Method", " ", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<RandomForest\>\"", ",", 
       RowBox[{"\"\<FeatureFraction\>\"", "\[Rule]", 
        RowBox[{"1", "/", "2"}]}], ",", 
       RowBox[{"\"\<LeafSize\>\"", "\[Rule]", "12"}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8141140438446617`*^9, 3.814114091623633*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"5feb302d-4a31-48e2-875c-d92c048708ff"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Nominal\"",
                     ",", "\"Text\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Nominal", "Text"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", "\"Nominal\"",
                     ",", "\"Text\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Nominal", "Text"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 300, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Nominal"], "f8" -> 
           Association["Type" -> "Text"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Text", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 8]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Nominal", "Text"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "(f7f8(f1f2f3f4f5f6))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6], "f7" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                 "Version" -> {12.2, 0}, "ID" -> 2890808244938110393]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.2, 0}, "ID" -> 5629229317859041261]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
               "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Output" -> 
             Association[
              "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
               "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                 3108122425444935999]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {12.2, 0}, "ID" -> 
                 4678014907749892316]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f4f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 300, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {5.81, 214.705, 111.98993288590604`, 3133., 
                    15.262333333333336`, 74.43333333333334}, "Method" -> 
                    "Naive", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 6, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 6]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{0.4605590621517039, 
                    0.16532129222891656`, -0.17928480258893864`}, {
                    0.47481865987092087`, 
                    0.10973097855544875`, -0.15783158719594648`}, {
                    0.46711400079704124`, -0.05038165021487633, 
                    0.0910181514892921}, {0.45121493134376595`, 
                    0.21668223939483658`, -0.30890288627439744`}, \
{-0.35406462025884416`, 
                    0.25027290269167884`, -0.8433558144222124}, \
{-0.12361404119722114`, 0.9211416575705231, 0.35775944833773293`}}, 
                    "Processor" -> MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.8100000000000005`, 214.705, 
                    111.98993288590604`, 3133., 15.262333333333322`, 
                    74.43333333333334}, 
                    "StandardDeviation" -> {1.7494475318416, 
                    108.9054198605377, 40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`, 2.772283455124271}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 3, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0170731, "MaxTrainingMemory" -> 
                    209848, "DataMemory" -> 57808, "FunctionMemory" -> 22144, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 2, 21, 19, 21, 30.8871443`9.242352664386473}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 6, "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 6]], 
                 "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                 8312269817718464215]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Mean" -> {5.8100000000000005`, 214.705, 111.80060492339395`, 
              3133., 15.262333333333322`, 74.43333333333334}, 
             "StandardDeviation" -> {1.7494475318416, 108.9054198605377, 
              40.213575468437234`, 882.9886446985981, 2.7367281966286785`, 
              2.772283455124271}, "Output" -> 
             Association[
              "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Version" -> {12.2, 0}, "ID" -> 3893966427905481628]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4900972772377279668, "Output" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7285476586811196156, "Output" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f7" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f7" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "f8" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["EmbedNominalVector", 
                Association[
                "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f7" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                   Association[1 -> 1, 2 -> 2, 3 -> 3]}, "Output" -> 
                 Association[
                  "f7" -> Association[
                    "Weight" -> 1, "Type" -> "NumericalVector"]], 
                 "EmbeddingVectors" -> {{{0., 0., 0.}, {-1.0434616804122925`, 
                  0.9697090983390808, -0.7399314045906067}, \
{-0.37971484661102295`, 
                  1.0284090042114258`, -1.1383795738220215`}, \
{-0.1109640821814537, -0.7508296966552734, -0.1093394011259079}}}, 
                 "Version" -> {12.2, 0}, "ID" -> 4301611367669486598]], 
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f8" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {12.2, 0}, "ID" -> 1577059603555340345, 
                    "Output" -> 
                    Association[
                    "f8" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f8" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.2, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDgBxIx7ItmSbsKOuz4p2ex0YTF4cbUhKg1F8TgtMLyvX8q
nJkdREO37t6YLQQXh+mD8Wf5Nf56zCXi0G2Uemd2ggBcPUwc3Vx0eXQ+zHwY
H51GN6/13/JYeQE+DPegqyOWhvkDXRyXe9H9jx5OxLpnvfSa7Ze8+XHaT4iG
uIsJbh96uMTP7+8MkeHEsA/dfbj4uPwBEz/48dhW0WJ2h4mPi6udvrOT7H70
cEQPb/T0RWp8oqcvdHWzr3H/XGbKjdNduPTBwplQ+MDCG+Z+Yv1ByF5c+Qtd
H658S2w+Q0/3L1ObbZ88wyw3CKUjQukKnQ8LN3TzbRtaS5f948EZPrjM4yx4
ObevhQOnP2HmovsbF5+8fCqEQcP8gct8XOUCuv9RzWUimC5v7ln7XS8q2579
rupBo9L/9jD51+YbE//pMxKdPtHjCT194vIXrvhFT2/o8UJsPsFlPro9uOoR
QvkCl3uJTY/o7iO2XEavX2DlO7npFWYeoXQIs++xwMWThycwE13vwtwHALj8
4gE=
                    "], "Version" -> {12.2, 0}, "ID" -> 2494702381911828557, 
                    "Output" -> 
                    Association[
                    "f8" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "StructurePreserving" -> 
                 True, "Missing" -> "Forbidden"]]}, "Invertibility" -> 
             "Impossible", "StructurePreserving" -> True, "Missing" -> 
             "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f7" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "f8" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], "(f1f2f3f4f5f6)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 6]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 274], 
               Span[275, 280]}, 
             "Wrappers" -> {Identity, SparseArray, Identity}, "Output" -> 
             Association[
              "(f7f8(f1f2f3f4f5f6))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 3082359335592234161]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 1916512723103570139]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {20.799}, "StandardDeviation" -> {6.274889029563264}, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2901205138368446714]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2965090389962885354]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (20.799 + 6.274889029563264 #& ), 
      "ProcessorFunction" -> (-3.314640291168245 + 0.15936536810270902` #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.8803519782438636`, 3.554007074058514}], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 280, 276, 1, 2, 2, 278, 276, 277, 
            275, 280, 279, 280, 280, 197, 279}], 
          "NumericalThresholds" -> {-0.4557889997959137, \
-1.0715806484222412`, -0.15079298615455627`, -1.144734501838684, \
-0.3797141909599304, 0.9697098731994629, 1.0284080505371094`, 
           1.0636487007141113`, 0.16747114062309265`, -0.41597944498062134`, 
           0.10789179801940918`, 0.20991963148117065`, -1.194346308708191, 
           0.933877170085907, -0.5071090459823608, 
           0.0010770648950710893`, -0.8337973952293396}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {
            6, -7}, {-4, 7}, {-5, -6}, {9, 15}, {10, 12}, {-8, 
            11}, {-9, -10}, {13, 14}, {-11, -12}, {-13, -14}, {16, -18}, {-15,
             17}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 0., 0., 0., 1., 0., 0., 0., -1., -1.,
             0., 0., -1., -1., -1., -1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 276, 280, 278, 2, 278, 280, 280, 277, 
            276, 275, 278, 279, 280, 275, 278, 278}], 
          "NumericalThresholds" -> {-0.6784085631370544, -0.9921403527259827, 
           0.919838547706604, -1.284757375717163, 
           0.9697083830833435, -0.5032175183296204, -0.5099691152572632, \
-0.8858606219291687, 0.33183443546295166`, 0.16747114062309265`, 
           0.1082599014043808, -0.16865241527557373`, 0.7907620668411255, 
           0.5729522705078125, 1.2462751865386963`, 1.2719563245773315`, 
           1.3628252744674683`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, -4}, {-1, 5}, {-2, -3}, {
            7, -8}, {8, -7}, {-5, -6}, {10, 14}, {11, 13}, {
            12, -11}, {-9, -10}, {-12, -13}, {15, -18}, {16, 
            17}, {-14, -15}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 1., 2., 1., 0., 1., 0., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 276, 278, 2, 276, 276, 275, 279, 275, 
            279, 276, 277, 279, 278, 278, 280, 277}], 
          "NumericalThresholds" -> {-0.35936620831489563`, \
-0.9921403527259827, -1.1930866241455078`, 
           0.9697093963623047, -1.1483805179595947`, -1.081267237663269, \
-1.0247828960418701`, 
           0.18869072198867798`, -1.0349844694137573`, -1.1872395277023315`, 
           1.704641580581665, 0.6928627490997314, 0.6043300628662109, 
           0.3224751353263855, -0.3411245346069336, 0.5681697130203247, 
           0.953661322593689}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 7}, {4, 6}, {-1, 
            5}, {-2, -3}, {-4, -5}, {8, -9}, {9, -8}, {-6, -7}, {11, 
            12}, {-10, -11}, {13, 16}, {14, -15}, {15, -14}, {-12, -13}, {
            17, -18}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{2., 2., 1., 1., 1., 1., 1., 0., 0., -1., -1., 0.,
             0., 0., -1., -1., -1., -1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 278, 1, 277, 278, 280, 276, 279, 277, 
            276, 277, 276, 280, 280, 280, 3, 278}], 
          "NumericalThresholds" -> {-0.4246463179588318, \
-1.1930866241455078`, -0.37971413135528564`, -0.5330016613006592, \
-1.0045322179794312`, -0.15799441933631897`, -0.8547540903091431, \
-0.1053517684340477, 0.6928627490997314, 
           0.16747114062309265`, -0.21382853388786316`, -0.2891048491001129, 
           0.2054470330476761, 
           0.9238637089729309, -0.15323132276535034`, -0.7399314641952515, 
           1.150390386581421}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, 8}, {6, 
            7}, {-3, -4}, {-5, -6}, {-7, -8}, {10, 15}, {11, 14}, {
            12, -12}, {-9, 13}, {-10, -11}, {-13, -14}, {16, -18}, {-15, 
            17}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 1., 1., 0., 1., 0., 0., 0., 
            0., -1., 0., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 1, 278, 280, 275, 2, 276, 278, 277, 
            1, 280, 280, 278, 3, 278, 1}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.019231915473938, \
-0.3797139823436737, -0.9400729537010193, -0.15799441933631897`, \
-1.0399802923202515`, 0.9697085022926331, 0.3922237157821655, 
           0.15378010272979736`, -0.420380562543869, -1.0434619188308716`, 
           0.9349404573440552, -0.5146312117576599, 
           1.253255844116211, -0.7399311065673828, 
           1.0501130819320679`, -1.043461799621582}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 
            6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, 12}, {10, 
            11}, {-8, -9}, {-10, -11}, {13, -18}, {14, 16}, {-12, 
            15}, {-13, -14}, {-15, 17}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 1., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., -1., 0.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 280, 278, 279, 276, 279, 275, 277, 275, 
            278, 280, 279, 280, 280, 278, 277, 3, 280}], 
          "NumericalThresholds" -> {-0.4246463179588318, 
           1.2769668102264404`, -1.2141449451446533`, -0.28343528509140015`, \
-1.0147191286087036`, 0.4236699342727661, -1.0353401899337769`, 
           0.3278268575668335, -0.4557889997959137, -0.24382491409778595`, 
           0.5648195147514343, 0.6254911422729492, 1.2790077924728394`, 
           0.5681697130203247, 0.4788776636123657, 
           1.1925233602523804`, -0.7399318218231201, 0.9276695847511292}, 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, -7}, {-1, 4}, {-2, 5}, {6, 
            7}, {-3, -4}, {-5, -6}, {9, 14}, {-8, 10}, {-9, 11}, {12, 
            13}, {-10, -11}, {-12, -13}, {15, 18}, {-14, 16}, {
            17, -17}, {-15, -16}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 1., 1., 1., 0., 1., 0., 0., 0., -1., 0., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 278, 1, 280, 2, 280, 276, 277, 278, 
            3, 276, 277, 275, 276, 280, 3, 276, 197}], 
          "NumericalThresholds" -> {-0.4557889997959137, \
-1.0345097780227661`, -1.284757375717163, -0.37971431016921997`, \
-0.15165068209171295`, 
           0.9697089791297913, -0.16159924864768982`, -0.9579377174377441, 
           0.6928627490997314, 0.6877230405807495, -0.7399308681488037, 
           0.14743487536907196`, -0.41597944498062134`, 0.11703275144100189`, 
           0.3198108673095703, 0.5729522705078125, -0.7399315237998962, 
           1.243857979774475, 0.0010770648950710893`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, 8}, {-5, -6}, {-7, -8}, {10, 16}, {11, -15}, {12, -14}, {13, 
            14}, {-9, -10}, {15, -13}, {-11, -12}, {17, -20}, {18, 
            19}, {-16, -17}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 0., 1., 1., 0., 0., 0., 0., -1., 
            0., 0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 278, 2, 275, 276, 279, 279, 2, 277, 277, 
            275, 280, 278, 197, 280, 280, 3, 277, 278}], 
          "NumericalThresholds" -> {-0.4246463179588318, -1.1950323581695557`,
            0.9697093963623047, -1.041416049003601, -0.9921403527259827, \
-0.09927638620138168, 0.18869072198867798`, 0.9697085022926331, 
           0.33183443546295166`, -0.41597944498062134`, 0.10737818479537964`, 
           0.5593653917312622, -0.04173899441957474, 
           0.0011007366701960564`, -0.5116760730743408, 
           0.5681697130203247, -0.7399318218231201, 0.9576848149299622, 
           0.9054194092750549}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {-3, 5}, {6, 
            7}, {-4, -5}, {8, -8}, {-6, -7}, {10, 14}, {11, 12}, {-9, -10}, {
            13, -13}, {-11, -12}, {15, 16}, {-14, -15}, {17, 19}, {-16, 
            18}, {-17, -18}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., 0., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 278, 280, 275, 280, 278, 275, 276, 
            279, 2, 278, 2, 277, 278, 275, 279, 278, 279}], 
          "NumericalThresholds" -> {-0.4557889997959137, -0.7097876071929932, \
-1.1930866241455078`, -0.14874880015850067`, -1.0412864685058594`, 
           0.5628461837768555, -0.9400729537010193, -1.033600926399231, 
           0.4266532063484192, 0.8914657235145569, 0.9697085022926331, 
           0.3224751353263855, 0.9697095155715942, 0.9466785788536072, 
           0.8373072147369385, 1.2489458322525024`, -1.914427399635315, 
           1.4983795881271362`, -1.1837315559387207`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {-6, 8}, {-7, -8}, {10, 14}, {11, -13}, {-9, 12}, {
            13, -12}, {-10, -11}, {15, 17}, {16, -16}, {-14, -15}, {-17, 
            18}, {19, -20}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 1., 1., 0., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 197, 275, 278, 277, 279, 277, 275, 
            277, 276, 2, 276, 280, 1, 280, 277, 275, 280, 2}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.1930866241455078`,
            0.0010770648950710893`, -1.0349844694137573`, \
-0.6320851445198059, -0.8369765281677246, -0.09110552072525024, \
-0.6680732369422913, -1.0304204225540161`, 0.2033333033323288, 
           0.16575826704502106`, 0.9697091579437256, -0.13366420567035675`, 
           1.2809675931930542`, -1.0434620380401611`, -0.5146312117576599, 
           1.5622260570526123`, 1.2509028911590576`, 0.5729522705078125, 
           0.969709575176239}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 4}, {-1, -2}, {5, 8}, {
            6, -6}, {-3, 7}, {-4, -5}, {-7, 9}, {-8, -9}, {11, 16}, {12, 
            15}, {13, -13}, {-10, 14}, {-11, -12}, {-14, -15}, {17, 19}, {
            18, -18}, {-16, -17}, {20, -21}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{2., 2., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 
            0., -1., 0., -1., -1., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 277, 278, 280, 275, 279, 279, 279, 277, 
            278, 1, 279, 280, 278, 280, 197, 1, 2, 277, 2}], 
          "NumericalThresholds" -> {-0.4246463179588318, -0.7164722681045532, \
-1.1930866241455078`, 
           0.5643483996391296, -1.0375268459320068`, -0.09618634730577469, \
-0.28343528509140015`, 0.18869072198867798`, 
           0.6928627490997314, -0.04173899441957474, -1.0434610843658447`, 
           0.8914657235145569, 0.5582587718963623, 0.185827374458313, 
           1.2790077924728394`, 0.0011007366701960564`, -1.0434621572494507`, 
           0.9697090983390808, 0.9459270238876343, 0.9697092175483704}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 7}, {4, 6}, {
            5, -3}, {-1, -2}, {-4, -5}, {-6, 8}, {-7, -8}, {10, 16}, {11, 
            12}, {-9, -10}, {13, -15}, {14, 15}, {-11, -12}, {-13, -14}, {17, 
            19}, {-16, 18}, {-17, -18}, {-19, 20}, {-20, -21}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 2., 1., 1., 0., 1., 1., 0., 0., 0., -1., 
            0., 0., -1., -1., -1., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 276, 279, 279, 280, 278, 276, 276, 277, 
            278, 277, 280, 1, 278, 277, 280, 279, 197}], 
          "NumericalThresholds" -> {-0.5032175183296204, -1.1341696977615356`,
            0.09432513266801834, 1.2234145402908325`, 
           0.5628461837768555, -0.9777382612228394, -0.8662619590759277, \
-0.9440244436264038, 
           0.44964098930358887`, -0.04173899441957474, -0.2949031591415405, 
           0.5551348328590393, -1.0434620380401611`, 0.3375381529331207, 
           1.4519836902618408`, 0.5725878477096558, -1.1962790489196777`, 
           0.0011007366701960564`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
            8}, {-4, 7}, {-5, -6}, {-7, -8}, {10, 15}, {11, 12}, {-9, -10}, {
            13, 14}, {-11, -12}, {-13, -14}, {16, -19}, {17, -18}, {-15, 
            18}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 2., 1., 0., 0., 1., 1., 0., 0., -1., 0., 
            0., 0., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 277, 278, 2, 278, 276, 279, 275, 277, 
            280, 278, 276, 1, 280, 277, 279, 276, 1, 277}], 
          "NumericalThresholds" -> {-0.43523797392845154`, \
-0.7097876071929932, -1.1930866241455078`, 
           0.9697096347808838, -1.341922640800476, -1.1588550806045532`, 
           0.48815667629241943`, -1.0349844694137573`, 0.44726139307022095`, 
           1.2790077924728394`, -0.04173899441957474, -0.14536404609680176`, \
-1.043461799621582, 0.5729522705078125, 
           1.9424686431884766`, -1.0057814121246338`, 
           1.2382566928863525`, -1.0434616804122925`, 0.6928627490997314}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 8}, {4, 7}, {5, 
            6}, {-1, -2}, {-3, -4}, {-5, -6}, {-7, -8}, {10, 14}, {11, -13}, {
            12, 13}, {-9, -10}, {-11, -12}, {15, 19}, {16, -18}, {17, 
            18}, {-14, -15}, {-16, -17}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{2., 2., 1., 1., 1., 1., 1., 0., 0., 0., -1., 0., 
            0., -1., -1., -1., -1., -1., 0., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 280, 277, 278, 279, 3, 278, 279, 
            279, 2, 280, 276, 280, 280, 277, 1}], 
          "NumericalThresholds" -> {-1.024882435798645, -1.0358009338378906`, \
-0.15079298615455627`, -0.7097876071929932, -1.0345097780227661`, \
-0.4563278257846832, -0.10933993756771088`, 
           0.9223536252975464, -1.0051634311676025`, 0.8993940949440002, 
           0.9697084426879883, -0.5227949619293213, 0.16747114062309265`, 
           0.5593653917312622, -0.5146312117576599, 
           1.5671464204788208`, -1.0434616804122925`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 
            6}, {-3, -4}, {-5, 7}, {-6, -7}, {9, 15}, {-8, 10}, {
            11, -14}, {-9, 12}, {-10, 13}, {14, -13}, {-11, -12}, {16, 
            17}, {-15, -16}, {-17, -18}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 0., 0., 1., -1., 0., 0., 0., 0., 
            0., 0., -1., -2., -1., -1.}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 278, 280, 280, 276, 275, 279, 279, 278, 
            276, 277, 2, 278, 278, 197, 277, 275, 277}], 
          "NumericalThresholds" -> {-0.5841295123100281, -1.018988847732544, \
-0.15799441933631897`, 
           0.9313036799430847, -1.0758421421051025`, -1.0349844694137573`, \
-0.27167776226997375`, 0.08468595147132874, 0.5802165269851685, 
           0.16747114062309265`, -0.41597944498062134`, 0.9697095155715942, 
           0.2270234078168869, 1.381439447402954, 0.0010770648950710893`, 
           0.9460882544517517, 1.2486631870269775`, 1.5620664358139038`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {-1, 4}, {5, -4}, {-2, -3}, {
            7, 8}, {-5, -6}, {-7, -8}, {10, 14}, {11, 13}, {-9, 
            12}, {-10, -11}, {-12, -13}, {15, 18}, {-14, 16}, {
            17, -17}, {-15, -16}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 2., 0., 1., 1., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 277, 1, 278, 279, 2, 275, 275, 276, 
            278, 1, 1, 2, 280, 277, 279, 3, 277}], 
          "NumericalThresholds" -> {-1.0247828960418701`, \
-0.7164722681045532, -1.0050268173217773`, -0.3797140419483185, \
-1.018988847732544, 0.44254040718078613`, 
           0.9697092175483704, -1.0382546186447144`, -1.033600926399231, 
           0.4266532063484192, 
           0.28491491079330444`, -1.0434621572494507`, -1.043461561203003, 
           0.9697093367576599, -0.1513964831829071, 
           0.9521276354789734, -0.8176050782203674, -0.7399312257766724, 
           0.823742687702179}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, 9}, {8, -7}, {-5, -6}, {-8, -9}, {11, 14}, {12, -13}, {-10, 
            13}, {-11, -12}, {15, 19}, {16, -18}, {-14, 17}, {
            18, -17}, {-15, -16}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 0., 1., 0., 0., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 276, 278, 276, 279, 1, 279, 278, 277, 
            276, 276, 280, 278, 280, 197, 277, 278, 280}], 
          "NumericalThresholds" -> {-0.36343562602996826`, \
-0.9440244436264038, -1.1076263189315796`, -1.1483805179595947`, 
           0.2774304747581482, -0.37971433997154236`, 0.4510561525821686, 
           0.5802165269851685, 0.2033333033323288, 0.08632256835699081, 
           0.14743487536907196`, -0.15845517814159393`, 
           0.3101420998573303, -0.5071090459823608, 0.0010770648950710893`, 
           1.5671464204788208`, 1.3628252744674683`, 0.926660418510437}, 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, -7}, {-5, -6}, {9, 14}, {10, 13}, {-8, 11}, {-9, 
            12}, {-10, -11}, {-12, -13}, {15, 18}, {16, 
            17}, {-14, -15}, {-16, -17}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 1., 1., 0., 0., 1., 0., 0., -1., 
            0., -1., -1., -1., -2., -1., -1., -1., 0.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 279, 277, 277, 276, 2, 277, 276, 2, 
            276, 278, 277, 277, 278, 277, 2, 1}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.0345097780227661`,
            1.3622239828109741`, -1.0194401741027832`, -0.7737725973129272, \
-0.8763742446899414, 0.9697087407112122, 0.3278268575668335, 
           0.16747114062309265`, 0.9697084426879883, 
           0.09830424934625626, -0.06272993236780167, -0.046263545751571655`, 
           0.9460882544517517, 0.6608882546424866, 1.5622260570526123`, 
           0.9697087407112122, -1.0434616804122925`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
            6}, {-5, 7}, {-6, -7}, {9, 14}, {10, 13}, {-8, 11}, {
            12, -11}, {-9, -10}, {-12, -13}, {15, 16}, {-14, -15}, {17, 
            18}, {-16, -17}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 278, 280, 275, 275, 280, 279, 279, 277, 
            276, 279, 278, 2, 278, 280, 279, 197, 277, 277}], 
          "NumericalThresholds" -> {-0.4246463179588318, -1.100748062133789, 
           0.9174581170082092, -1.0375268459320068`, -1.025861144065857, 
           0.5628461837768555, 0.6288999915122986, 0.020837264135479927`, 
           0.6919527649879456, 0.15233291685581207`, 0.45950353145599365`, 
           0.5268338918685913, 0.9697093963623047, 1.381439447402954, 
           0.5729522705078125, -1.3669438362121582`, 0.0011007366701960564`, 
           1.5622260570526123`, 1.1392104625701904`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 5}, {4, -3}, {-1, -2}, {6, -8}, {
            7, 8}, {-4, -5}, {-6, -7}, {10, 14}, {11, 12}, {-9, -10}, {
            13, -13}, {-11, -12}, {15, 18}, {16, -17}, {-14, 
            17}, {-15, -16}, {19, -20}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 2., 1., 0., 1., 1., 0., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., -1., -1., -2.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 278, 1, 280, 277, 197, 280, 278, 
            276, 2, 280, 280, 277, 279, 280, 277, 280}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.018988847732544, \
-1.2917823791503906`, -0.37971413135528564`, -0.15799441933631897`, \
-0.35936620831489563`, 0.0010770648950710893`, -0.5099691152572632, 
           0.9054194092750549, 0.16547797620296478`, 0.9697086811065674, 
           0.5593653917312622, 0.923194408416748, 0.8171451091766357, 
           0.09107770025730133, -0.5071090459823608, 
           1.5622260570526123`, -0.5269991755485535}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, -8}, {8, -7}, {-5, -6}, {10, 16}, {11, 13}, {-9, 
            12}, {-10, -11}, {14, -15}, {15, -14}, {-12, -13}, {17, -19}, {
            18, -18}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 0., 1., 1., 0., 0., 0., 0., 
            0., -1., -1., 0., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 280, 3, 276, 277, 276, 2, 280, 276, 
            278, 280, 2, 277, 280, 278, 278, 197, 278}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.0194401741027832`,
            0.5628461837768555, -1.1383790969848633`, -0.9440244436264038, \
-0.5996070504188538, -1.075882911682129, 0.9697083234786987, 
           0.19483117759227753`, 0.3265804350376129, 
           0.3224751353263855, -0.5227949619293213, 0.9697086215019226, 
           0.9460882544517517, 0.5551348328590393, 0.6064744591712952, 
           0.9054194092750549, 0.0010770648950710893`, 1.2325942516326904`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 5}, {4, -3}, {-1, -2}, {6, 8}, {
            7, -6}, {-4, -5}, {-7, 9}, {-8, -9}, {11, 14}, {12, -13}, {-10, 
            13}, {-11, -12}, {15, 18}, {16, 17}, {-14, -15}, {-16, -17}, {-18,
             19}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{1., 1., 2., 1., 1., 1., 1., 0., 0., 0., 0., 
            0., -1., -1., -1., 0., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 278, 275, 1, 1, 280, 278, 1, 278, 279, 
            276, 2, 278, 275, 277, 280, 1, 276, 278}], 
          "NumericalThresholds" -> {-0.5377264618873596, -1.224677324295044, \
-1.0365740060806274`, -1.0434619188308716`, -0.3797141909599304, 
           0.2024124413728714, -0.7975683808326721, -0.11096471548080444`, 
           0.9054194092750549, -1.0057814121246338`, 0.16747114062309265`, 
           0.9697090983390808, -0.04173899441957474, 1.2454909086227417`, 
           1.5620664358139038`, 0.21076351404190063`, -1.043461561203003, 
           1.24262535572052, 1.4669841527938843`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {-3, 5}, {6, 8}, {
            7, -6}, {-4, -5}, {-7, -8}, {10, 15}, {-9, 11}, {12, 14}, {-10, 
            13}, {-11, -12}, {-13, -14}, {16, 19}, {17, -18}, {
            18, -17}, {-15, -16}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 1., 0., 0., 1., 1., 0., -1., 0., 0., 
            0., -1., 0., -1., -1., -1., -1., -1., -2.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 278, 1, 278, 279, 277, 3, 278, 280, 278, 
            277, 279, 276, 278, 198, 276, 275, 277}], 
          "NumericalThresholds" -> {-0.43523797392845154`, \
-1.1930866241455078`, -0.37971413135528564`, -1.0861122608184814`, 
           0.8966854214668274, -0.6478146314620972, -0.10934000462293625`, 
           0.5711894035339355, 
           0.211929053068161, -0.1142943874001503, -0.0434655025601387, 
           0.8469076156616211, 0.10195037722587585`, 1.3628252744674683`, 0., 
           0.8230495452880859, 1.2460795640945435`, 1.4486593008041382`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {-3, 5}, {
            6, -7}, {-4, 7}, {-5, -6}, {9, 14}, {10, 12}, {-8, 
            11}, {-9, -10}, {13, -13}, {-11, -12}, {15, 18}, {16, -17}, {-14, 
            17}, {-15, -16}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 0., 1., 0., 0., -1., -1., 0., 0.,
             0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 277, 280, 2, 276, 278, 2, 277, 276, 2, 1,
             280, 280, 275, 197, 277, 277, 279}], 
          "NumericalThresholds" -> {-0.4246463179588318, -0.7164722681045532, 
           0.571773111820221, -0.7508293390274048, -1.073075771331787, \
-0.9460930228233337, 0.9697091579437256, 0.7020260691642761, 
           0.3289593756198883, 0.9697084426879883, -1.0434608459472656`, 
           0.211929053068161, -0.5091662406921387, 1.2465544939041138`, 
           0.0010770648950710893`, 1.5622260570526123`, 
           1.455650806427002, -0.7589070796966553}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 6}, {4, -4}, {-1, 
            5}, {-2, -3}, {-5, 7}, {-6, -7}, {9, 15}, {10, 14}, {-8, 11}, {
            12, -12}, {13, -11}, {-9, -10}, {-13, -14}, {16, 
            17}, {-15, -16}, {18, -19}, {-17, -18}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 1., 2., 1., 0., 0., 0., 0., 0., 0., 
            0., -1., 0., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 279, 276, 276, 276, 280, 2, 276, 276, 
            278, 280, 277, 280, 278, 279}], 
          "NumericalThresholds" -> {-0.4557889997959137, -0.4562300741672516, \
-0.9996792078018188, -1.1636162996292114`, -1.0830062627792358`, 
           0.5687160491943359, 0.9697098731994629, 0.4266532063484192, 
           0.16747114062309265`, 0.28491491079330444`, 
           0.20174336433410645`, -0.172439306974411, 0.5582587718963623, 
           1.4128376245498657`, -1.1837315559387207`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {-1, 3}, {4, 7}, {-2, 5}, {-3, 
            6}, {-4, -5}, {-6, -7}, {9, 13}, {10, 12}, {
            11, -10}, {-8, -9}, {-11, -12}, {14, -16}, {
            15, -15}, {-13, -14}}], "LeafValues" -> 
          RawArray["Real32",{0., 2., 1., 1., 2., 1., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1.}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 2, 280, 279, 3, 1, 277, 278, 276, 
            275, 279, 279, 278, 1, 280}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.1930866241455078`,
            0.9697093963623047, -0.5099691152572632, 
           0.9966655373573303, -0.7399314045906067, -1.0434614419937134`, \
-0.4602089524269104, 0.5802165269851685, 0.16747114062309265`, 
           0.10754044353961945`, 0.26578396558761597`, -0.754431426525116, 
           1.340649962425232, -1.0434620380401611`, -0.5096538066864014}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, 7}, {
            6, -5}, {-3, -4}, {-6, 8}, {-7, -8}, {10, 14}, {11, 13}, {
            12, -11}, {-9, -10}, {-12, -13}, {15, -17}, {-14, 
            16}, {-15, -16}}], "LeafValues" -> 
          RawArray["Real32",{2., 2., 1., 0., 0., 1., 1., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1.}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 278, 275, 280, 278, 2, 275, 276, 277, 
            278, 276, 280, 280, 280, 277, 280, 279, 2}], 
          "NumericalThresholds" -> {-0.1330440789461136, \
-1.2141449451446533`, -1.033640742301941, -0.5099691152572632, \
-0.9476012587547302, 
           0.9697083830833435, -1.025570273399353, -0.9827172756195068, \
-0.4211443066596985, 0.9054194092750549, 0.16747114062309265`, 
           0.2054470330476761, 0.20991963148117065`, -1.230308175086975, 
           0.954615592956543, 0.21076351404190063`, -0.6383392214775085, 
           0.9697093367576599}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 4}, {-1, -2}, {5, 7}, {-3, 
            6}, {-4, -5}, {8, -9}, {-6, 9}, {-7, -8}, {11, 15}, {12, 
            13}, {-10, -11}, {14, -14}, {-12, -13}, {16, 18}, {
            17, -17}, {-15, -16}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 0., 0., 0., 1., 1., 0., 0., 0., 
            0., -1., -1., 0., -1., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 275, 276, 275, 276, 276, 278, 279, 279, 
            278, 277, 276, 2, 275, 1, 280, 277, 276}], 
          "NumericalThresholds" -> {-1.02488112449646, -1.0328662395477295`, \
-1.1279189586639404`, -1.040189266204834, -0.9921403527259827, \
-0.8566052317619324, -1.018988847732544, 0.08389510959386826, 
           0.08468595147132874, 0.9054194092750549, 0.833430826663971, 
           0.16747114062309265`, 0.9697094559669495, 
           1.245810866355896, -1.0434619188308716`, 0.5725878477096558, 
           1.5622260570526123`, 1.24262535572052}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {8, 9}, {-6, -7}, {-8, -9}, {11, 16}, {12, -15}, {
            13, 14}, {-10, -11}, {15, -14}, {-12, -13}, {17, -19}, {
            18, -18}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 3., 1., 0., 1., 1., 1., 1., 0., 0., 0., -1., 
            0., 0., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 275, 279, 1, 276, 278, 276, 280, 280, 277, 
            277, 278, 276, 276, 197, 278, 279, 278}], 
          "NumericalThresholds" -> {-0.3797157108783722, -1.02488112449646, \
-0.09618634730577469, -1.043461799621582, 0.47381001710891724`, 
           0.02693791128695011, -0.12745845317840576`, 0.20991963148117065`, 
           0.5725878477096558, 0.9466785788536072, 0.618850588798523, 
           1.4983795881271362`, 1.2455945014953613`, -1.1279189586639404`, 
           0.0010770648950710893`, -0.9747549891471863, 
           0.0856090784072876, -0.47834154963493347`}, "Children" -> 
          RawArray["Integer16",{{2, 14}, {3, 5}, {-1, 4}, {-2, -3}, {6, 9}, {
            7, 8}, {-4, -5}, {-6, -7}, {10, -13}, {11, 12}, {-8, -9}, {
            13, -12}, {-10, -11}, {15, 16}, {-14, -15}, {17, 
            18}, {-16, -17}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., -1., 1., 2., 1., 1., 0., 0.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 276, 277, 1, 276, 277, 276, 275, 277, 
            279, 280, 277, 278, 277, 279, 62, 280, 3, 277}], 
          "NumericalThresholds" -> {-0.4557889997959137, -0.9921403527259827, \
-1.0194401741027832`, -0.3797140419483185, -1.084184169769287, \
-0.7935157418251038, -0.6817659139633179, -1.0341522693634033`, 
           0.33183443546295166`, 0.8575724363327026, 
           1.2797460556030273`, -0.40886276960372925`, -0.20967614650726318`, 
           1.3159432411193848`, -1.3774187564849854`, 0.2074400931596756, 
           0.5729522705078125, -0.7399313449859619, 1.9476453065872192`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, 
            5}, {-1, -2}, {-3, -4}, {-5, 7}, {8, -8}, {-6, -7}, {10, 14}, {
            11, -13}, {12, -12}, {-9, 13}, {-10, -11}, {15, 19}, {-14, 16}, {
            17, -18}, {18, -17}, {-15, -16}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 1., 1., 0., 1., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 276, 277, 276, 276, 280, 276, 278, 278, 
            279, 278, 280, 278, 276, 280, 277, 276}], 
          "NumericalThresholds" -> {-1.043460726737976, 
           0.15233291685581207`, -0.7808858752250671, -0.5377264618873596, 
           0.09586256742477417, 0.2008548080921173, 0.8025649785995483, 
           1.556851863861084, 1.3760253190994263`, -1.194346308708191, 
           0.9054194092750549, 
           0.9228050112724304, -1.056585669517517, -1.1279189586639404`, 
           0.19851870834827423`, -0.35936620831489563`, -0.9287675619125366}, 
          "Children" -> 
          RawArray["Integer16",{{2, 13}, {3, 6}, {-1, 4}, {-2, 5}, {-3, -4}, {
            7, 11}, {-5, 8}, {9, -9}, {10, -8}, {-6, -7}, {
            12, -12}, {-10, -11}, {14, 16}, {15, -15}, {-13, -14}, {
            17, -18}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 0., 0., -1., -1., -1., -1., -1., -1., 
            0., -1., 2., 2., 1., 1., 0., 0.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 277, 275, 278, 276, 279, 280, 1, 276, 
            279, 276, 3, 278, 277, 1, 277, 280, 278}], 
          "NumericalThresholds" -> {-0.5841295123100281, -1.019231915473938, \
-1.03357994556427, -0.9400729537010193, -0.9996792078018188, \
-0.26901522278785706`, -0.5099691152572632, -0.3797139525413513, 
           0.16575826704502106`, 
           0.45950353145599365`, -0.39890480041503906`, -0.7399309873580933, 
           1.0636487007141113`, 0.9402255415916443, -1.0434621572494507`, 
           0.43232524394989014`, -0.1513964831829071, 1.4128376245498657`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, 7}, {
            6, -5}, {-3, -4}, {-6, 8}, {-7, -8}, {10, 13}, {11, -12}, {-9, 
            12}, {-10, -11}, {14, 17}, {15, -16}, {-13, 16}, {-14, -15}, {
            18, -19}, {-17, -18}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 
            0., -1., 0., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 278, 280, 277, 276, 280, 280, 275, 280, 
            275, 277, 278, 279, 280, 278, 277, 278, 275, 278}], 
          "NumericalThresholds" -> {-0.5841295123100281, -1.2381705045700073`,
            0.5643483996391296, -0.3708231449127197, -0.9440244436264038, 
           0.5628461837768555, -0.8767547607421875, -1.0349844694137573`, \
-0.14792464673519135`, -1.0293954610824585`, 0.833430826663971, 
           0.8773177266120911, 0.8914657235145569, 0.5593653917312622, 
           0.17578741908073425`, 0.07560781389474869, 1.340649962425232, 
           1.2482706308364868`, 1.7636221647262573`}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 4}, {-1, -2}, {5, -10}, {6, 8}, {
            7, -5}, {-3, -4}, {9, 10}, {-6, -7}, {-8, -9}, {12, 17}, {
            13, -16}, {14, -15}, {15, 16}, {-11, -12}, {-13, -14}, {18, 
            19}, {-17, -18}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 1., 1., 1., 0., 0., 0., 0., -1., 
            0., 0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 1, 197, 277, 276, 275, 275, 1, 276, 276, 
            275, 278, 279, 2, 279, 3, 1, 280, 197, 278}], 
          "NumericalThresholds" -> {-0.6228988766670227, \
-0.11096499860286713`, 
           0.0010770648950710893`, -0.7097876071929932, -1.0513416528701782`, \
-1.0317609310150146`, -1.0350333452224731`, -0.3797156810760498, \
-1.1279189586639404`, -1.2102010250091553`, -1.0349844694137573`, 
           0.9054194092750549, -0.895330548286438, 0.9697085022926331, 
           0.8993940949440002, -0.7399320602416992, -1.043461799621582, \
-0.15323132276535034`, 0.0010770648950710893`, 1.3628252744674683`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 12}, {3, 9}, {4, 8}, {5, 7}, {
            6, -3}, {-1, -2}, {-4, -5}, {-6, -7}, {10, 
            11}, {-8, -9}, {-10, -11}, {13, 18}, {-12, 14}, {-13, 15}, {
            16, -17}, {-14, 17}, {-15, -16}, {19, -21}, {-18, 
            20}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{1., 1., 0., 0., 0., 1., 1., 1., 2., 1., 1., -1., 
            0., 0., 0., 0., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 277, 1, 279, 277, 280, 275, 1, 278, 275, 
            276, 275, 279, 280, 278, 280, 197, 1}], 
          "NumericalThresholds" -> {-0.4246463179588318, -0.9231954216957092, \
-0.3797139823436737, 
           1.2234145402908325`, -0.7097876071929932, -0.5099691152572632, \
-1.0359151363372803`, -0.37971407175064087`, 0.5802165269851685, 
           0.10131269693374634`, 0.16747114062309265`, 0.1082599014043808, 
           0.34626832604408264`, 0.20433951914310455`, 1.381439447402954, 
           0.5729522705078125, 0.0011007366701960564`, -1.043461561203003}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 5}, {4, -3}, {-1, -2}, {-4, 6}, {
            7, 8}, {-5, -6}, {-7, -8}, {10, 15}, {-9, 11}, {12, 
            13}, {-10, -11}, {14, -14}, {-12, -13}, {16, 18}, {
            17, -17}, {-15, -16}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 2., 1., 1., 0., 1., 1., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 280, 277, 276, 278, 277, 197, 278, 277, 
            278, 280, 278, 278, 280, 278, 277}], 
          "NumericalThresholds" -> {-0.4557889997959137, \
-0.15967388451099396`, -0.4265170395374298, -0.9037349820137024, \
-1.1505950689315796`, -1.019231915473938, 
           0.0010770648950710893`, -0.765389621257782, -0.5962766408920288, 
           0.5538307428359985, 0.211929053068161, -0.1142943874001503, 
           0.2669893205165863, -0.5071090459823608, 1.3760253190994263`, 
           0.8171451091766357}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 6}, {4, -4}, {5, -3}, {-1, -2}, {
            7, 8}, {-5, -6}, {-7, 9}, {-8, -9}, {11, 14}, {12, 
            13}, {-10, -11}, {-12, -13}, {15, 16}, {-14, -15}, {-16, -17}}], 
          "LeafValues" -> 
          RawArray["Real32",{1., 1., 0., 0., 2., 2., 1., 0., 0., 0., -1., 0., 
            0., -1., -1., -1., -1.}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 280, 278, 280, 278, 277, 278, 277, 
            278, 278, 275, 280, 1, 280, 3, 279, 3}], 
          "NumericalThresholds" -> {-1.02488112449646, -1.1930866241455078`, 
           0.5581523180007935, -0.4762905240058899, 
           0.5650993585586548, -1.0334588289260864`, -0.5968523621559143, \
-0.7975683808326721, -0.7737725973129272, 0.5711894035339355, 
           0.15378010272979736`, 
           0.10578453540802002`, -0.1566842496395111, -1.043461799621582, \
-0.5071090459823608, -0.7399311661720276, -0.8296165466308594, \
-0.7399314045906067}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 4}, {-1, -2}, {5, -9}, {6, 
            9}, {-3, 7}, {-4, 8}, {-5, -6}, {-7, -8}, {11, 15}, {12, 
            13}, {-10, -11}, {-12, 14}, {-13, -14}, {16, 18}, {
            17, -17}, {-15, -16}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 0., 1., 0., 1., 1., 0., 0., 0., -1., 
            0., 0., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 277, 280, 277, 279, 276, 277, 276, 
            276, 3, 280, 279, 276, 277, 3, 278}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.100748062133789, \
-1.2892743349075317`, -0.15079298615455627`, -0.35936620831489563`, 
           0.4510561525821686, -0.9827172756195068, -0.7737725973129272, 
           0.8095256686210632, 
           0.16747114062309265`, -0.739931583404541, -0.15353520214557648`, \
-0.06003284081816673, 1.234968662261963, 
           0.833430826663971, -0.7399317026138306, 1.1737502813339233`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 5}, {-1, 4}, {-2, -3}, {6, -8}, {
            7, 8}, {-4, -5}, {-6, -7}, {10, 14}, {11, 13}, {-9, 
            12}, {-10, -11}, {-12, -13}, {15, 16}, {-14, -15}, {-16, 
            17}, {-17, -18}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 2., 1., 1., 1., 0., 0., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 276, 278, 3, 276, 3, 275, 279, 277, 278, 
            3, 280, 277, 278, 277, 1, 2, 279}], 
          "NumericalThresholds" -> {-0.4557889997959137, -0.9827172756195068, \
-1.1930866241455078`, -1.1383787393569946`, -1.1447370052337646`, \
-1.138379693031311, -1.0349844694137573`, -0.39642083644866943`, 
           0.7077211141586304, 0.15378010272979736`, -0.7399317622184753, 
           0.5593653917312622, -0.17172035574913025`, 0.5538307428359985, 
           1.5622260570526123`, -1.043461799621582, 
           0.9697093367576599, -1.119170069694519}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {8, -8}, {-6, -7}, {10, 15}, {11, 12}, {-9, -10}, {
            13, 14}, {-11, -12}, {-13, -14}, {16, 18}, {-15, 
            17}, {-16, -17}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 0., 1., 1., 1., 1., 0., 0., 0., 0., -1., 
            0., 0., -1., -1., -1., -1., -2.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 278, 2, 1, 278, 279, 275, 2, 278, 3, 276,
             275, 280, 276, 274, 278, 197}], 
          "NumericalThresholds" -> {-0.5841295123100281, -1.1950323581695557`,
            0.9697096347808838, -0.3797154128551483, -0.9460930228233337, 
           0.48815667629241943`, -1.036394476890564, 0.9697089791297913, 
           0.5393133163452148, -0.7399308681488037, 0.15233291685581207`, 
           0.1053103432059288, 0.926660418510437, 0.8108637928962708, 0., 
           1.3760253190994263`, 0.0011007366701960564`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 5}, {-1, 4}, {-2, -3}, {6, 8}, {
            7, -6}, {-4, -5}, {-7, -8}, {10, 13}, {11, -12}, {
            12, -11}, {-9, -10}, {14, -18}, {-13, 15}, {16, -17}, {
            17, -16}, {-14, -15}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 2., 1., 1., 1., 1., 0., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., 0.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 280, 278, 280, 278, 280, 277, 280, 276, 
            278, 277, 280, 278, 278, 3, 280, 277, 275, 275}], 
          "NumericalThresholds" -> {-0.4557889997959137, -0.5099691152572632, \
-1.0334588289260864`, -0.8727125525474548, -1.1930866241455078`, 
           0.5575618743896484, -0.9104859828948975, 
           0.5650993585586548, -0.8602399826049805, 0.5802165269851685, 
           0.3278268575668335, 0.5648195147514343, -0.04173899441957474, 
           0.2393026202917099, -0.7399321794509888, -0.1513964831829071, 
           0.953661322593689, 1.249027967453003, 1.2485604286193848`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
            7}, {-4, -5}, {-6, 8}, {-7, 9}, {-8, -9}, {11, 15}, {12, -14}, {
            13, 14}, {-10, -11}, {-12, -13}, {-15, 16}, {17, 19}, {-16, 
            18}, {-17, -18}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 0., 2., 2., 1., 1., 1., 1., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{276, 276, 280, 278, 276, 278, 280, 278, 275, 
            277, 276, 275, 277, 2, 280, 278, 197, 3, 276}], 
          "NumericalThresholds" -> {-0.5841295123100281, -0.9921403527259827, 
           0.9227070212364197, -1.1950323581695557`, -1.0903515815734863`, \
-0.4246463179588318, 
           0.2124224454164505, -0.7242572903633118, -1.0326430797576904`, 
           0.33183443546295166`, 0.16575826704502106`, 
           0.10579603910446167`, -0.41597944498062134`, 0.9697093963623047, 
           0.5729522705078125, 1.543134331703186, 
           0.0011007366701960564`, -0.7399312853813171, 0.9512391686439514}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 6}, {4, -4}, {-1, 5}, {-2, -3}, {
            7, -9}, {8, -8}, {9, -7}, {-5, -6}, {11, 15}, {12, 14}, {-10, 
            13}, {-11, -12}, {-13, -14}, {16, -20}, {17, -19}, {18, 
            19}, {-15, -16}, {-17, -18}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 1., 2., 1., 0., 0., 1., 0., 0., 0., 
            0., -1., 0., -1., -1., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{277, 278, 280, 278, 280, 276, 276, 277, 2, 
            276, 276, 1, 275, 276, 278, 280, 276, 3, 279, 277}], 
          "NumericalThresholds" -> {-0.4107295274734497, -1.0345097780227661`,
            1.2784075736999512`, -1.1930866241455078`, -0.15079298615455627`, \
-1.0751125812530518`, -0.1330440789461136, -0.7579352855682373, 
           0.969708263874054, 
           0.39069169759750366`, -0.5433776378631592, -1.0434621572494507`, 
           0.11279329657554626`, 0.14743487536907196`, 1.381439447402954, 
           0.9250177145004272, 
           0.8515461683273315, -0.7399315237998962, -0.8347751498222351, 
           1.5620664358139038`}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 7}, {4, -5}, {5, 
            6}, {-1, -2}, {-3, -4}, {8, -9}, {-6, 9}, {-7, -8}, {11, 
            15}, {-10, 12}, {-11, 13}, {14, -14}, {-12, -13}, {16, 20}, {
            17, -19}, {18, 19}, {-15, -16}, {-17, -18}, {-20, -21}}], 
          "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 2., 1., 0., 0., 0., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., 0., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 280, 280, 280, 2, 278, 278, 1, 277, 
            280, 276, 2, 3, 278, 280, 278, 275, 1, 1}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.019231915473938, 
           0.5628461837768555, -0.1647363305091858, 0.5668615698814392, 
           1.0284085273742676`, -0.9777382612228394, -0.8151567578315735, \
-1.0434619188308716`, 0.33183443546295166`, 1.2809675931930542`, 
           0.16575826704502106`, 0.9697085022926331, -0.739931583404541, 
           0.17578741908073425`, 0.9349404573440552, 1.3760253190994263`, 
           1.2474173307418823`, -1.0434616804122925`, -1.0434616804122925`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 5}, {4, -3}, {-1, -2}, {6, 9}, {
            7, -7}, {-4, 8}, {-5, -6}, {-8, -9}, {11, 16}, {12, -15}, {13, 
            15}, {-10, 14}, {-11, -12}, {-13, -14}, {17, -21}, {18, 20}, {-16,
             19}, {-17, -18}, {-19, -20}}], "LeafValues" -> 
          RawArray["Real32",{1., 1., 2., 1., 0., 0., 1., 1., 1., 0., 0., 
            0., -1., -1., 0., -1., -1., -1., -1., -1., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 278, 280, 276, 1, 278, 280, 278, 276, 2, 
            3, 278, 2, 278, 280, 3, 276, 197}], 
          "NumericalThresholds" -> {-0.4246463179588318, -1.2015128135681152`,
            0.924239456653595, -0.9827172756195068, -0.37971562147140503`, \
-0.532500147819519, -0.5168130397796631, 0.5802165269851685, 
           0.16547797620296478`, 
           0.9697086811065674, -0.7399308681488037, -0.1142943874001503, 
           0.9697093963623047, 1.381439447402954, 
           0.9276695847511292, -0.739931583404541, 0.9512391686439514, 
           0.0010770648950710893`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 6}, {-3, -4}, {
            7, -7}, {-5, -6}, {9, 14}, {10, 13}, {-8, 11}, {
            12, -11}, {-9, -10}, {-12, -13}, {15, 18}, {16, -17}, {-14, 
            17}, {-15, -16}, {-18, -19}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 0., 1., 1., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -2., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 275, 278, 278, 280, 277, 276, 2, 277, 277, 
            278, 275, 3, 278, 277, 1, 277, 1}], 
          
          "NumericalThresholds" -> {-1.043460726737976, -1.02488112449646, \
-1.018988847732544, 0.9223536252975464, -0.5227949619293213, 
           0.44726139307022095`, 0.16747114062309265`, 
           0.9697087407112122, -0.0441044420003891, 0.7546997666358948, 
           1.4983795881271362`, 
           1.2564681768417358`, -0.7399314641952515, -1.0345097780227661`, \
-1.0194401741027832`, -0.11096499860286713`, -0.35936620831489563`, \
-0.37971433997154236`}, "Children" -> 
          RawArray["Integer16",{{2, 14}, {3, 4}, {-1, -2}, {5, 10}, {6, 
            7}, {-3, -4}, {8, 9}, {-5, -6}, {-7, -8}, {-9, 11}, {12, -13}, {
            13, -12}, {-10, -11}, {15, 17}, {16, -16}, {-14, -15}, {
            18, -19}, {-17, -18}}], "LeafValues" -> 
          RawArray["Real32",{1., 0., 0., -1., 0., 0., 0., 
            0., -1., -1., -1., -1., -1., 1., 2., 1., 0., 1., 0.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 278, 278, 2, 1, 275, 279, 3, 278, 276, 
            279, 276, 280, 280, 277, 197, 275, 2}], 
          "NumericalThresholds" -> {-0.4557889997959137, \
-1.0345097780227661`, -1.1950323581695557`, 
           1.0284080505371094`, -0.37971463799476624`, -1.0350333452224731`, \
-0.09110552072525024, -0.739931583404541, 0.5393133163452148, 
           0.16747114062309265`, 0.6254911422729492, -0.13991473615169525`, 
           0.2008548080921173, -0.1513964831829071, 0.953661322593689, 
           0.0010770648950710893`, 1.2504056692123413`, 0.9697089791297913}, 
          "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, 8}, {-5, -6}, {-7, -8}, {10, 14}, {11, 13}, {
            12, -11}, {-9, -10}, {-12, -13}, {15, 17}, {-14, 
            16}, {-15, -16}, {18, -19}, {-17, -18}}], "LeafValues" -> 
          RawArray["Real32",{2., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., -1., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{278, 278, 1, 276, 279, 280, 280, 277, 275, 
            277, 278, 278, 276, 275, 1, 278, 280}], 
          "NumericalThresholds" -> {-0.4762905240058899, \
-1.1950323581695557`, -0.3797139823436737, -0.8570728898048401, 
           0.08629219233989716, -0.15799441933631897`, -0.16316166520118713`, 
           0.6987440586090088, 0.10855148732662201`, 1.316677212715149, 
           0.8599857091903687, 1.4669841527938843`, 0.1560659259557724, 
           0.09900657832622528, -1.0434616804122925`, 0.9054194092750549, 
           0.9228050112724304}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, -6}, {
            6, -5}, {-3, -4}, {8, 13}, {9, 10}, {-7, -8}, {11, 
            12}, {-9, -10}, {-11, -12}, {14, 16}, {-13, 15}, {-14, -15}, {
            17, -18}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 1., 0., 
            0., -1., -1., -1., -1., -1., 0., 0., 0., -1., 0., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 275, 277, 278, 279, 278, 278, 279, 
            278, 276, 277, 268, 275, 1, 278, 277, 280, 197, 280, 280}], 
          "NumericalThresholds" -> {-0.4557889997959137, -0.9216382503509521, \
-1.0328662395477295`, -1.130102276802063, -0.9460930228233337, 
           0.020837264135479927`, -0.8151567578315735, -0.43523797392845154`, 
           0.4510561525821686, 0.5393133163452148, 
           0.16747114062309265`, -0.16507793962955475`, 0., 
           0.10789179801940918`, -1.0434620380401611`, 1.381439447402954, 
           0.7077211141586304, 0.5697059631347656, 
           0.0010947217233479023`, -0.5269991755485535, -0.8801836967468262}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 5}, {4, -3}, {-1, -2}, {6, 
            7}, {-4, -5}, {-6, 8}, {9, -9}, {-7, -8}, {11, 16}, {12, 15}, {
            13, -13}, {14, -12}, {-10, -11}, {-14, -15}, {17, 21}, {18, 
            19}, {-16, -17}, {-18, 20}, {-19, -20}, {-21, -22}}], 
          "LeafValues" -> 
          RawArray["Real32",{2., 2., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 
            0., -1., 0., -1., 0., -1., -1., -1., -2., -1.}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{275, 277, 3, 278, 3, 280, 280, 278, 276, 280, 
            279, 276, 276, 277, 278, 279, 3, 275}], 
          "NumericalThresholds" -> {-0.4557889997959137, -1.019231915473938, \
-0.7399307489395142, -0.9747549891471863, -0.7399319410324097, \
-0.5099691152572632, -0.8829471468925476, -0.6320851445198059, 
           0.8025649785995483, 0.5648195147514343, 0.45950353145599365`, 
           0.1409197896718979, 0.14743487536907196`, 0.9460882544517517, 
           0.9223536252975464, -0.818511962890625, -0.7399308085441589, 
           1.2459540367126465`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 4}, {-1, -2}, {5, 6}, {-3, -4}, {
            7, 8}, {-5, -6}, {-7, -8}, {10, 14}, {11, 13}, {
            12, -11}, {-9, -10}, {-12, -13}, {15, 16}, {-14, -15}, {
            17, -19}, {18, -18}, {-16, -17}}], "LeafValues" -> 
          RawArray["Real32",{1., 2., 1., 1., 0., 0., 1., 0., 0., 0., -1., 0., 
            0., -1., -1., -1., -1., -1., -1.}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]]}, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association["Info" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQABKhYHDVHp0ulrpTOdEqb5QepUfpUXqUHqVH6VGa5jQD
GHwgmgYAH3uehw==
            "], "Type" -> "NumericalVector"], "Key" -> "(f7f8(f1f2f3f4f5f6))",
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, 0.36816892503383997`}, 
      "Calibrator" -> None, "Method" -> "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association["Value" -> Rational[1, 2], "Options" -> Association[]], 
        "LeafSize" -> Association["Value" -> 12, "Options" -> Association[]], 
        "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[42689], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 1.8365558003297235`, "PreprocessingTime" -> 
      0.1312197`6.569544034016069, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[2.340760643585322, 0.09106193898858979], 
         "StandardDeviation" -> 
         Around[2.6014898951265217`, 0.2661168369956868], "EvaluationTime" -> 
         0.00005069634261967712, "TestSize" -> 180, "ModelMemory" -> 108288., 
         "ModelUtility" -> -1.669489898758759, "TrainingSize" -> 240, 
         "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
         1.037806*^6, "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
           Around[2.450901308168702, 0.17900058915889616`], 
           Around[2.3677576811314704`, 0.11719768791092115`], 
           Around[2.203622941455793, 0.0662683217941587]}, 
         "StandardDeviationHistory" -> {
           Around[2.8385532827779447`, 0.4165227140816253], 
           Around[2.677344885034527, 0.35028243282403165`], 
           Around[2.288571517567094, 0.3385618405645606]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Rational[1, 2], "LeafSize" -> 
           12, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 0.5, 
           "Implementation" -> Automatic}, "FinalTrainingSize" -> 300], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Rational[1, 2]], 
             "LeafSize" -> Association["Value" -> 12], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.4424723073848273`, 0.21148301572948505`], 
              "StandardDeviation" -> 
              Around[6.334717971060417, 0.6771054726798769], "EvaluationTime" -> 
              0.000031622776601683795`, "TestSize" -> 100, "ModelMemory" -> 
              99360, "ModelUtility" -> -2.560350601095942, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 165024, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.4424723073848273`, 0.14954107452810017`]}, 
              "StandardDeviationHistory" -> {
                Around[6.334717971060417, 0.4787858713104635]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.598051992078988, 0.1073953423429326], 
              "StandardDeviation" -> 
              Around[3.2421930486286565`, 0.3503885325981248], 
              "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 200,
               "ModelMemory" -> 104560, 
              "ModelUtility" -> -1.8907871163532213`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.01, "TrainingMemory" -> 324800, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.598051992078988, 0.0759399748385384]}, 
              "StandardDeviationHistory" -> {
                Around[3.2421930486286565`, 0.2477621074501377]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.340760643585322, 0.09106193898858979], 
              "StandardDeviation" -> 
              Around[2.6014898951265217`, 0.2661168369956868], 
              "EvaluationTime" -> 0.00005069634261967712, "TestSize" -> 180, 
              "ModelMemory" -> 108288., "ModelUtility" -> -1.669489898758759, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 1.037806*^6, "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[2.450901308168702, 0.17900058915889616`], 
                Around[2.3677576811314704`, 0.11719768791092115`], 
                Around[2.203622941455793, 0.0662683217941587]}, 
              "StandardDeviationHistory" -> {
                Around[2.8385532827779447`, 0.4165227140816253], 
                Around[2.677344885034527, 0.35028243282403165`], 
                Around[2.288571517567094, 0.3385618405645606]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005069634261967712, "ModelMemory" -> 
             108288., "StandardDeviation" -> 
             Around[2.6014898951265217`, 0.2661168369956868], 
             "TrainingMemory" -> 1.037806*^6, "TrainingTime" -> 
             0.025736567647427086`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]], "MaxTrainingSize" -> 300, 
      "PreprocessorEvaluationTime" -> 3.829296875*^-6, "PreprocessorMemory" -> 
      124176, "InputDimension" -> 280, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8229240910070445`17.334970663798373*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.001823755980721744, 
          "ElapsedTimes" -> 0.0151734, "ExperimentCounts" -> 1], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.00911877990360872, 
          "ElapsedTimes" -> 0.0190109, "ExperimentCounts" -> 1], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 0.045593899518043594`, 
          "ElapsedTimes" -> 0.045940499999999995`, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           8718539460336612740], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {140.}, "ID" -> 
           5330523246654450449], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {72.}, "ID" -> 
           5227176333101167944], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2408.}, "ID" -> 
           5596007189629378955], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
           2638574294534422359], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {71}, "ID" -> 
           5604019906672533564], "f7" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7446114396074216018], "f8" -> 
         Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"chevrolet vega (sw)"}, "ID" -> 3206511614197282240]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.3475225, 
      "MaxTrainingMemory" -> 2214064, "DataMemory" -> 102576, 
      "FunctionMemory" -> 316400, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 21, 19, 21, 31.2042051`9.24678802838994}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8229456912368813`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"50c52939-8fba-4d86-93b9-3b4751cf2c4e"]
}, Open  ]],

Cell["\:91cd\:65b0\:6d4b\:8bd5", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814287300384157*^9, 3.814287305466457*^9}, {
   3.822945705626906*^9, 
   3.8229457075666094`*^9}},ExpressionUUID->"40ce2f18-aff6-461f-9c46-\
5ac6e5aa590d"],

Cell[BoxData[
 RowBox[{"pm", " ", "=", " ", 
  RowBox[{"PredictorMeasurements", "[", 
   RowBox[{"p", ",", "testing"}], "]"}]}]], "Input",ExpressionUUID->"7ec7aca2-\
e933-4000-8d24-1699a18010c7"],

Cell["\:6027\:80fd\:62a5\:544a", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.81428731481802*^9, 3.8142873218333893`*^9}, {
   3.822949612791112*^9, 
   3.8229496143900642`*^9}},ExpressionUUID->"0bedf6e5-d224-4129-a243-\
7e6dd2e903f1"],

Cell[BoxData[
 RowBox[{"pm", "[", "\"\<ComparisonPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.814114368077095*^9, 
  3.814114376496368*^9}},ExpressionUUID->"558b9fe3-9e2b-4976-b787-\
18de31b8ebac"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6307\:660e\:7279\:5f81\:7684\:7c7b\:578b", "Subsection",
 CellChangeTimes->{{3.814108391988168*^9, 3.8141084010462837`*^9}, {
  3.814113911464898*^9, 3.8141139139723473`*^9}, {3.814185609884367*^9, 
  3.814185612389369*^9}, {3.814187827060349*^9, 3.814187857774241*^9}, {
  3.822949684380315*^9, 
  3.822949688278314*^9}},ExpressionUUID->"1b18813a-2d01-48af-9051-\
65088776dc04"],

Cell["\:7279\:5f81\:6570\:636e\:7c7b\:578b\:7684\:8be6\:7ec6\:4fe1\:606f", \
"Text",
 CellChangeTimes->{{3.814287328920594*^9, 3.814287358488618*^9}, {
  3.822949674087607*^9, 
  3.8229496787290735`*^9}},ExpressionUUID->"83d1c0ba-bc9c-4e9e-b665-\
8fe5d3813b21"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"p", ",", " ", "FeatureTypes"}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"1ebfa9aa-1461-4645-886c-58e75924de51"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"f1\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f2\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f3\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f4\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f5\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f6\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f7\"\>", "\[Rule]", "\<\"Nominal\"\>"}], ",", 
   RowBox[{"\<\"f8\"\>", "\[Rule]", "\<\"Text\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.822949640594104*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"a19d02cf-1cfe-4e83-9ffa-bda61246981e"]
}, Open  ]],

Cell["\:81ea\:5b9a\:4e49\:9884\:6d4b\:5668\:5982\:4f55\:5224\:65ad\:7279\:5f81\
\:7684\:7c7b\:578b\:6216\:8005\:5c5e\:6027", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814287373754838*^9, 3.8142874015445642`*^9}, {
   3.822949751754736*^9, 
   3.822949767151464*^9}},ExpressionUUID->"86df0d66-3567-47b5-b9c9-\
9aec70c1bc6a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pWithF", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"training", ",", 
    RowBox[{"FeatureTypes", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Nominal\>\"", ",", "\"\<Numerical\>\"", ",", "\"\<Numerical\>\"", 
       ",", "\"\<Numerical\>\"", ",", "\"\<Numerical\>\"", ",", 
       "\"\<Nominal\>\"", ",", "\"\<Nominal\>\"", ",", "\"\<Text\>\""}], 
      "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.814105019909184*^9, 3.8141050207841043`*^9}, {
  3.8141050910991783`*^9, 3.814105096127097*^9}, {3.814105128516737*^9, 
  3.814105196702528*^9}, {3.814108535973649*^9, 3.814108540278926*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"6be581d1-6404-47aa-b692-9ece899449c5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Text\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Nominal", "Nominal", "Text"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "8", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Text\""}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Nominal", "Nominal", "Text"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 300, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal"], "f2" -> 
           Association["Type" -> "Numerical"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Nominal"], "f7" -> 
           Association["Type" -> "Nominal"], "f8" -> 
           Association["Type" -> "Text"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Text", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 8]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Nominal", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Nominal", "Nominal", "Text"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f6f7)" -> Association["Type" -> "NominalVector", "Weight" -> 3],
            "(f8(f2f3f4f5))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f2f3f4f5)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4], 
               "(f1f6f7)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f2f3f4f5)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                 "Version" -> {12.2, 0}, "ID" -> 2755195742605412028]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f1f6f7)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 3]], 
                 "Version" -> {12.2, 0}, "ID" -> 6934654164466035284]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
               "(f1f6f7)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3], 
               "(f2f3f4f5)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]], 
             "Output" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
               "(f1f6f7)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3], 
               "(f2f3f4f5)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {12.2, 0}, "ID" -> 
                 4678014907749892316]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f6f7)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 3]], 
                 "VectorLength" -> 3, "Output" -> 
                 Association[
                  "(f1f6f7)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 3]], 
                 "Type" -> "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                 7351931382004160556]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f2f3f4f5)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 300, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {214.705, 111.98993288590604`, 3133., 
                    15.262333333333336`}, "Method" -> "Naive", "VectorLength" -> 
                    4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {214.705, 111.98993288590604`, 3133., 
                    15.262333333333322`}, 
                    "StandardDeviation" -> {108.9054198605377, 
                    40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{-0.5306709807604901, 
                    0.25230863508782236`}, {-0.5351249422563389, \
-0.03321775270110001}, {-0.5074118227833019, 0.4680021859993132}, {
                    0.41780719052402193`, 0.8462924361386394}}, "Processor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {214.705, 111.98993288590604`, 3133., 
                    15.262333333333322`}, 
                    "StandardDeviation" -> {108.9054198605377, 
                    40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0123118, "MaxTrainingMemory" -> 
                    175616, "DataMemory" -> 43408, "FunctionMemory" -> 21888, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 2, 21, 20, 30, 31.1574563`9.246136899179366}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 4, "Output" -> 
                 Association[
                  "(f2f3f4f5)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                 "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                 5572308242481007021]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2f3f4f5)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]], 
             "Mean" -> {214.705, 111.75981830454292`, 3133., 
              15.262333333333322`}, 
             "StandardDeviation" -> {108.9054198605377, 40.25014047607277, 
              882.9886446985981, 2.7367281966286785`}, "Output" -> 
             Association[
              "(f2f3f4f5)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]], 
             "Version" -> {12.2, 0}, "ID" -> 5352178567683931546]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4900972772377279668, "Output" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7285476586811196156, "Output" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {12.2, 0}, "ID" -> 1577059603555340345, "Output" -> 
             Association[
              "f8" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association["KeyHashes" -> CompressedData["
1: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
                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.2, 0}]], 
             "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDgBxIx7ItmSbsKOuz4p2ex0YTF4cbUhKg1F8TgtMLyvX8q
nJkdREO37t6YLQQXh+mD8Wf5Nf56zCXi0G2Uemd2ggBcPUwc3Vx0eXQ+zHwY
H51GN6/13/JYeQE+DPegqyOWhvkDXRyXe9H9jx5OxLpnvfSa7Ze8+XHaT4iG
uIsJbh96uMTP7+8MkeHEsA/dfbj4uPwBEz/48dhW0WJ2h4mPi6udvrOT7H70
cEQPb/T0RWp8oqcvdHWzr3H/XGbKjdNduPTBwplQ+MDCG+Z+Yv1ByF5c+Qtd
H658S2w+Q0/3L1ObbZ88wyw3CKUjQukKnQ8LN3TzbRtaS5f948EZPrjM4yx4
ObevhQOnP2HmovsbF5+8fCqEQcP8gct8XOUCuv9RzWUimC5v7ln7XS8q2579
rupBo9L/9jD51+YbE//pMxKdPtHjCT194vIXrvhFT2/o8UJsPsFlPro9uOoR
QvkCl3uJTY/o7iO2XEavX2DlO7npFWYeoXQIs++xwMWThycwE13vwtwHALj8
4gE=
              "], "Version" -> {12.2, 0}, "ID" -> 2494702381911828557, 
             "Output" -> 
             Association[
              "f8" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f6f7)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]], 
             "Index" -> {
               Association[3 -> 1, 4 -> 2, 5 -> 3, 6 -> 4, 8 -> 5], 
               Association[
               70 -> 1, 71 -> 2, 72 -> 3, 73 -> 4, 74 -> 5, 75 -> 6, 76 -> 7, 
                77 -> 8, 78 -> 9, 79 -> 10], 
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
             "Version" -> {12.2, 0}, "ID" -> 2619506389077579970, "Output" -> 
             Association[
              "(f1f6f7)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f8" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "(f2f3f4f5)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 4]], 
             "Spans" -> {
               Span[1, 271], 
               Span[272, 275]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association[
              "(f8(f2f3f4f5))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 706551971336912087]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 1916512723103570139]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {20.799}, "StandardDeviation" -> {6.274889029563264}, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2901205138368446714]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2965090389962885354]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (20.799 + 6.274889029563264 #& ), 
      "ProcessorFunction" -> (-3.314640291168245 + 0.15936536810270902` #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-1.8803519782438636`, 3.554007074058514}], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 286, 284, 6, 286, 285, 286, 
            206}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.7065409123897552, -0.9608926475048065, 0.24158983677625656`, 
           0.25817278772592545`, 1.3851943016052246`, -0.36325328052043915`, 
           0.647684782743454, 0.0012387987226247787`}, "LeafValues" -> 
          RawArray["Real32",{0.07130782306194305, 0.0006618510233238339, 
            0.039143990725278854`, -0.04219968616962433, 
            0.02300974540412426, -0.01666768454015255, 
            0.008928383700549603, -0.04892336577177048, \
-0.009991917759180069, -0.02699567936360836, -0.03337171673774719}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {8, 
            9}, {-5, -7}, {10, -8}, {-2, -9}, {-6, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 286, 284, 6, 286, 206, 285, 286, 
            10}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.7065409123897552, -0.9608926475048065, 0.31597021222114563`, 
           0.25817278772592545`, 1.4955399632453918`, 
           0.0010977291967719793`, -0.36325328052043915`, 
           0.647684782743454, -0.4969720095396042}, "LeafValues" -> 
          RawArray["Real32",{0.06728283315896988, -0.0015154173597693443`, 
            0.03640555590391159, -0.043574072420597076`, 
            0.020916679874062538`, -0.017528079450130463`, 
            0.007398572750389576, -0.049771375954151154`, \
-0.03204888477921486, -0.010766616091132164`, -0.027088526636362076`, \
-0.03682376816868782}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {9, 
            10}, {-5, -7}, {8, -8}, {-4, 
            11}, {-2, -10}, {-6, -11}, {-9, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 286, 284, 6, 286, 286, 286, 
            206}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.7065409123897552, -0.9608926475048065, 0.1601264476776123, 
           0.25817278772592545`, 1.3851943016052246`, -0.03439049515873194, 
           0.647684782743454, 0.0012387987226247787`}, "LeafValues" -> 
          RawArray["Real32",{0.06459151953458786, 0.0016034747241064906`, 
            0.03494933247566223, -0.04004329815506935, 
            0.02008001320064068, -0.015651972964406013`, 
            0.007102630101144314, -0.04624462500214577, \
-0.010756786912679672`, -0.026004986837506294`, -0.03182791918516159}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {8, 
            9}, {-5, -7}, {10, -8}, {-2, -9}, {-6, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 286, 284, 9, 286, 8, 285, 5, 206,
             2}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.7065409123897552, -0.9608926475048065, 0.24158983677625656`, 
           0.10854299366474152`, 
           1.4955399632453918`, -0.09138473868370056, -0.36325328052043915`, 
           0.2680231034755707, 0.0010977291967719793`, -0.23376770317554474`},
           "LeafValues" -> 
          RawArray["Real32",{0.06200785934925079, -0.0004172183107584715, 
            0.03355136141180992, -0.04016736522316933, 
            0.016847137361764908`, -0.025139259174466133`, 
            0.023528775200247765`, -0.045930735766887665`, 
            0.0029260546434670687`, -0.009918665513396263, \
-0.01576114445924759, -0.0340181328356266, -0.029366953298449516`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {9, 10}, {
            8, -7}, {11, -8}, {-5, -9}, {-2, -10}, {-6, -11}, {-4, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 286, 284, 9, 286, 6, 286, 286, 
            206, 10}], 
          "NumericalThresholds" -> {
           0.25391924381256104`, -1.0523850321769714`, 
           0.7065409123897552, -1.1830604672431946`, 0.1601264476776123, 
           0.10854299366474152`, 1.4955399632453918`, 
           0.25817278772592545`, -0.03439049515873194, 0.647684782743454, 
           0.0010977291967719793`, -0.4969720095396042}, "LeafValues" -> 
          RawArray["Real32",{0.05952754616737366, 0.0016320360591635108`, 
            0.016751479357481003`, -0.03856067359447479, 
            0.036954425275325775`, -0.0143195278942585, 
            0.026184752583503723`, -0.04409350827336311, 
            0.004234560299664736, -0.010024783201515675`, \
-0.024184290319681168`, -0.028148816898465157`, -0.03270086646080017}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 6}, {5, 7}, {-1, -5}, {9, 10}, {
            8, -7}, {11, -8}, {-3, -9}, {-2, -10}, {-6, -11}, {-4, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 285, 286, 9, 284, 285, 286, 6, 8}], 
          "NumericalThresholds" -> {-0.4162716120481491, -1.1830604672431946`,
            0.4231622815132141, -0.9608926475048065, 0.10854299366474152`, 
           0.1601264476776123, -0.41093386709690094`, 1.4955399632453918`, 
           0.3196902573108673, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.05714644491672516, 0.00487247109413147, 
            0.031122542917728424`, -0.030011039227247238`, 
            0.01816178858280182, -0.01868937350809574, \
-0.014797979965806007`, -0.008240296505391598, -0.04294357821345329, 
            0.008965933695435524, -0.037085261195898056`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 5}, {-3, 9}, {8, -6}, {
            7, -7}, {-2, -8}, {10, -9}, {-5, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 284, 284, 9, 285, 6, 286, 2, 5, 
            8}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.0523850321769714`, 
           0.7065409123897552, -1.133621633052826, 0.31597021222114563`, 
           0.10854299366474152`, 1.1039468050003052`, 0.25817278772592545`, 
           1.440826177597046, 0.4229576140642166, 
           0.2680231034755707, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.059145066887140274`, -0.0007039817865006626, 
            0.015378274954855442`, -0.025526484474539757`, 
            0.03922683373093605, -0.022638503462076187`, 
            0.024594364687800407`, -0.0335254892706871, 
            0.0035710055381059647`, -0.04312201589345932, \
-0.009261640720069408, -0.01386964786797762, -0.031715963035821915`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 6}, {5, 7}, {-1, -5}, {10, 11}, {
            8, -7}, {12, 
            9}, {-3, -9}, {-8, -10}, {-2, -11}, {-6, -12}, {-4, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 285, 284, 9, 5, 285, 286, 12, 8}], 
          "NumericalThresholds" -> {-0.4162716120481491, -1.1830604672431946`,
            0.4231622815132141, -0.9497449100017548, 0.10854299366474152`, 
           0.6700158715248108, 1.6968544721603394`, -0.03439049515873194, 
           0.24446164816617966`, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.05279698967933655, -0.004781960975378752, 
            0.029056211933493614`, -0.02735268510878086, 
            0.01751549169421196, -0.017080014571547508`, 
            0.002078095218166709, -0.04016498476266861, \
-0.014440737664699554`, 0.007967147044837475, -0.03492142632603645}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 5}, {-3, 9}, {7, -6}, {
            8, -7}, {10, -8}, {-2, -9}, {-5, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 286, 286, 284, 285, 285, 286, 7, 
            6}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.5959504842758179, -0.9608926475048065, 
           0.1601264476776123, 0.9432089030742645, -0.37488171458244324`, 
           1.440826177597046, -0.01675202138721943, 0.3196902573108673}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05068511143326759, 0.004858496133238077, 
            0.02775195986032486, -0.022471647709608078`, 
            0.01618117094039917, -0.019198114052414894`, -0.0299861840903759, \
-0.007087133824825287, -0.0393703430891037, -0.009014715440571308, 
            0.007577721495181322}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 10}, {7, 
            9}, {-4, 8}, {-2, -8}, {-7, -9}, {-6, -10}, {-5, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 284, 9, 286, 6, 285, 284, 6, 
            284}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.0523850321769714`, 
           0.7065409123897552, -1.133621633052826, 0.10854299366474152`, 
           0.6699828505516052, 0.25817278772592545`, 1.6968544721603394`, 
           0.1601264476776123, -0.15354223549365997`, 1.2466367483139038`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0527382418513298, -0.002565630478784442, 
            0.013535027392208576`, -0.023093562573194504`, 
            0.03460090234875679, 
            0.022587891668081284`, -0.020358432084321976`, 
            0.0023875823244452477`, -0.037198226898908615`, \
-0.011613314971327782`, -0.02620788663625717, -0.03354761749505997}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {6, 8}, {-1, -5}, {7, -6}, {
            9, -7}, {-3, -8}, {10, -9}, {-2, -10}, {-4, 11}, {-11, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 285, 284, 9, 5, 285, 286, 12, 8}], 
          "NumericalThresholds" -> {-0.4162716120481491, -1.1830604672431946`,
            0.4231622815132141, -0.9497449100017548, 0.10854299366474152`, 
           0.6700158715248108, 1.6968544721603394`, -0.03439049515873194, 
           0.24446164816617966`, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.04682336375117302, -0.004289638716727495, 
            0.02598896250128746, -0.024181386455893517`, 
            0.01555592194199562, -0.014603855088353157`, 
            0.002063730964437127, -0.03571029752492905, \
-0.012976149097084999`, 0.006704941391944885, -0.03128529340028763}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 5}, {-3, 9}, {7, -6}, {
            8, -7}, {10, -8}, {-2, -9}, {-5, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 286, 286, 5, 285, 7, 286, 287, 7}], 
          "NumericalThresholds" -> {-0.4162716120481491, -1.1830604672431946`,
            0.5959504842758179, -0.9608926475048065, 0.6700158715248108, 
           0.9432089030742645, -0.016751891002058983`, 1.440826177597046, 
           0.2648470997810364, 0.15563595294952393`}, "LeafValues" -> 
          RawArray["Real32",{0.04495042935013771, -0.015806708484888077`, 
            0.024757077917456627`, -0.019908031448721886`, 
            0.01430832501500845, 
            0.003652118379250169, -0.02644599787890911, \
-0.0022529270499944687`, -0.035228025168180466`, 
            0.006050319876521826, -0.008092383854091167}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 9}, {
            7, -6}, {-4, 8}, {-2, 10}, {-7, -9}, {-5, -10}, {-8, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 9, 9, 286, 6, 286, 284, 206}], 
          "NumericalThresholds" -> {
           0.25391924381256104`, -1.0523850321769714`, 0.7065409123897552, 
           0.0766388289630413, 0.10854299366474152`, 0.6699828505516052, 
           0.25817278772592545`, 1.3851943016052246`, 0.1601264476776123, 
           0.0012387987226247787`}, "LeafValues" -> 
          RawArray["Real32",{0.03163886070251465, -0.002152624074369669, 
            0.011960119009017944`, -0.027432193979620934`, 
            0.049251314252614975`, 
            0.020726215094327927`, -0.018094340339303017`, 
            0.0013522329973056912`, -0.03136822581291199, \
-0.01039862260222435, -0.020293736830353737`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {6, 8}, {-1, -5}, {7, -6}, {
            9, -7}, {-3, -8}, {10, -9}, {-2, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 286, 284, 5, 285, 7, 286, 12, 6}], 
          "NumericalThresholds" -> {-0.4162716120481491, -1.1830604672431946`,
            0.5959504842758179, -0.9497449100017548, 0.6700158715248108, 
           0.9432089030742645, -0.01675202138721943, 1.440826177597046, 
           0.24446164816617966`, 0.33590804040431976`}, "LeafValues" -> 
          RawArray["Real32",{0.04164392873644829, -0.014993064105510712`, 
            0.023155899718403816`, -0.018267091363668442`, 
            0.013740547001361847`, 
            0.0033998077269643545`, -0.0244168471544981, \
-0.002123321406543255, -0.032564178109169006`, 
            0.005664869677275419, -0.007610728032886982}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 9}, {
            7, -6}, {-4, 8}, {-2, 10}, {-7, -9}, {-5, -10}, {-8, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 285, 9, 284, 6, 7, 285, 12, 8}], 
          "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.0014353522274177521`, 
           0.14249727129936218`, -0.9497449100017548, -0.22340591996908188`, \
-0.016751746647059917`, 1.6968544721603394`, 
           0.24446164816617966`, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.03997816890478134, 0.0036358472425490618`, 
            0.022229664027690887`, -0.020453160628676414`, \
-0.007960285991430283, 
            0.013190925121307373`, -0.012793679721653461`, \
-0.0038950114976614714`, -0.0308266319334507, 
            0.0054382747039198875`, -0.026373350992798805`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {8, -5}, {-3, 
            9}, {-2, 7}, {-7, -8}, {10, -9}, {-6, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 9, 9, 286, 6, 284, 286, 9, 206, 
            10}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.0523850321769714`, 0.7065409123897552, 
           0.0766388289630413, 0.10854299366474152`, 0.3368961960077286, 
           0.25817278772592545`, 0.1601264476776123, 
           1.4955399632453918`, -0.025604428723454475`, 
           0.0010977291967719793`, -0.4969720095396042}, "LeafValues" -> 
          RawArray["Real32",{0.027659142389893532`, -0.00018542101315688342`, 
            0.010548354126513004`, -0.02551938220858574, 
            0.044499531388282776`, 
            0.01905563287436962, -0.017391525208950043`, 
            0.0004614648933056742, -0.009191598743200302, \
-0.028954174369573593`, -0.008725822903215885, -0.016768386587500572`, \
-0.02080516517162323}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {6, 9}, {-1, -5}, {7, -6}, {8,
             10}, {-3, -8}, {-2, -9}, {11, -10}, {-7, -11}, {-4, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 286, 286, 285, 9, 8, 284, 5, 6, 2}],
           
          "NumericalThresholds" -> {-0.4162716120481491, -1.1830604672431946`,
            0.5959504842758179, -0.9608926475048065, -0.018267418490722775`, 
           0.07663994655013084, -0.1474270075559616, -0.13446780294179916`, 
           0.6475160419940948, 0.3196902573108673, 0.4229576140642166}, 
          "LeafValues" -> 
          RawArray["Real32",{0.03704039752483368, 0.003147299401462078, 
            0.02031709998846054, -0.018310271203517914`, 
            0.012082096189260483`, -0.0138338478282094, -0.01381464209407568, \
-0.030505433678627014`, -0.002441376680508256, -0.022315464913845062`, 
            0.004402873571962118, -0.00936794001609087}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 10}, {8, -6}, {
            7, -7}, {-4, 9}, {-2, 11}, {-8, -10}, {-5, -11}, {-9, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 286, 284, 5, 285, 7, 286, 1, 6}], 
          "NumericalThresholds" -> {-0.4162716120481491, -1.1830604672431946`,
            0.5959504842758179, -0.9497449100017548, 0.6700158715248108, 
           0.9432089030742645, -0.01675202138721943, 1.440826177597046, 
           0.6105588376522064, 0.33590804040431976`}, "LeafValues" -> 
          RawArray["Real32",{0.035558778792619705`, -0.013067817315459251`, 
            0.019781893119215965`, -0.01548041868954897, 0.003831510664895177,
             0.0031631358433514833`, -0.020678654313087463`, \
-0.001461327658034861, -0.02808806486427784, 
            0.011297916993498802`, -0.00655968626961112}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 9}, {
            7, -6}, {-4, 8}, {-2, 10}, {-7, -9}, {-5, -10}, {-8, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 285, 9, 286, 6, 286, 285, 287, 8}], 
          
          "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.0014353522274177521`, 
           0.14249727129936218`, -0.9608926475048065, -0.20733126252889633`, 
           0.18048234283924103`, 1.6968544721603394`, 
           0.2648470997810364, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.03413642942905426, 0.002729394705966115, 
            0.018870506435632706`, -0.017293382436037064`, \
-0.006212863139808178, 
            0.011035427451133728`, -0.0029173200018703938`, \
-0.011680861935019493`, -0.02656896598637104, 
            0.003523904364556074, -0.022794248536229134`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {8, -5}, {-3, 
            9}, {-2, 7}, {-7, -8}, {10, -9}, {-6, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 285, 284, 12, 8, 286, 286, 206, 
            5}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.7065409123897552, -0.7209027409553528, 
           0.16575540602207184`, -0.7552154362201691, -0.09138473868370056, 
           1.5267543196678162`, -0.03439049515873194, 0.0012387987226247787`, 
           0.2680231034755707}, "LeafValues" -> 
          RawArray["Real32",{0.032770972698926926`, 0.0017642509192228317`, 
            0.019558845087885857`, -0.021086065098643303`, 
            0.01299666240811348, -0.013762861490249634`, 
            0.010562133975327015`, -0.0023436094634234905`, \
-0.025539802387356758`, -0.006408275570720434, -0.015715155750513077`, \
-0.007768294308334589}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 8}, {-3, 6}, {9, 
            11}, {-5, 7}, {-7, -8}, {
            10, -9}, {-2, -10}, {-4, -11}, {-6, -12}}], "NominalSplits" -> {},
           "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 9, 286, 9, 7, 6, 286, 4, 3}], 
          "NumericalThresholds" -> {
           0.25391924381256104`, -1.0523850321769714`, 0.9432089030742645, 
           0.0766388289630413, 0.7322269976139069, 
           0.10854299366474152`, -0.016751746647059917`, 0.25817278772592545`,
            1.440826177597046, -0.36254484951496124`, 0.346250981092453}, 
          "LeafValues" -> 
          RawArray["Real32",{0.02187780849635601, -0.008610490709543228, 
            0.008433138951659203, -0.01592116430401802, 
            0.03796983137726784, -0.014576331712305546`, 
            0.01670370250940323, -0.004427685402333736, \
-0.0006329640746116638, -0.02510058879852295, 
            0.0028927952516824007`, -0.020570777356624603`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 6}, {5, 9}, {-1, -5}, {7, -6}, {
            8, -7}, {-2, 10}, {-3, -9}, {11, -10}, {-8, -11}, {-4, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 285, 9, 284, 284, 2, 285, 6, 8}], 
          "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.018267418490722775`, 
           0.14249727129936218`, -0.9497449100017548, -0.13446780294179916`, 
           0.42295779287815094`, 1.6968544721603394`, 
           0.319690078496933, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.030363062396645546`, 0.0028396565467119217`, 
            0.017096996307373047`, -0.01520498376339674, \
-0.005229473579674959, 
            0.01011815294623375, -0.0029955527279525995`, \
-0.010293154045939445`, -0.023771602660417557`, 
            0.00327471224591136, -0.02006610855460167}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {8, -5}, {-3, 
            9}, {-2, 7}, {-7, -8}, {10, -9}, {-6, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 9, 286, 286, 3, 5, 9, 7, 8, 6, 5, 6}], 
          "NumericalThresholds" -> {-0.4162716120481491, 0.14249702543020248`,
            0.5959504842758179, -1.0297549366950989`, 0.1615876778960228, 
           0.6700158715248108, 
           0.07663994655013084, -0.01675202138721943, -0.1474270075559616, 
           0.319690078496933, 0.6475160419940948, 0.33590804040431976`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.011453074403107166`, -0.010995067656040192`, 
            0.034951213747262955`, -0.014080438762903214`, 
            0.009026091545820236, 0.024106070399284363`, 
            0.0029251426458358765`, -0.010341845452785492`, \
-0.0008516247035004199, -0.0248049758374691, 
            0.0006866735639050603, -0.01762332394719124, \
-0.0054918089881539345`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {6, 7}, {5, 10}, {-1, -6}, {
            8, -7}, {9, -8}, {-2, 12}, {-4, 
            11}, {-5, -11}, {-10, -12}, {-9, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 285, 9, 285, 12, 286, 286, 7, 8, 286, 3}], 
          "NumericalThresholds" -> {0.25391924381256104`, -0.6619202196598053,
            0.14044712483882904`, 0.9432089030742645, 0.06249310448765755, 
           0.7322269976139069, -0.6348131000995636, 
           0.13390668481588364`, -0.3688681572675705, 1.440826177597046, 
           0.346250981092453}, "LeafValues" -> 
          RawArray["Real32",{0.02536419965326786, -0.010898856446146965`, 
            0.0087883984670043, 0.03924039751291275, -0.01389420684427023, 
            0.011029182933270931`, -0.012889633886516094`, 
            0.0007087191916070879, -0.0000849301359266974, \
-0.0031645691487938166`, -0.022505220025777817`, -0.01831674389541149}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, 7}, {5, -4}, {6, 10}, {-1, -6}, {
            8, -7}, {-3, -8}, {9, -9}, {-2, -10}, {11, -11}, {-5, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 286, 285, 9, 284, 284, 6, 287, 285, 8}], 
          "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.018267418490722775`, 
           0.14249727129936218`, -0.9497449100017548, -0.13446780294179916`, 
           0.319690078496933, 0.26793232560157776`, 
           1.6968544721603394`, -0.09138400852680206}, "LeafValues" -> 
          RawArray["Real32",{0.027288788929581642`, 0.0027002720162272453`, 
            0.015210169367492199`, -0.01340943481773138, \
-0.004457518924027681, 0.008895507082343102, -0.001387851545587182, 
            0.0023605343885719776`, -0.00809001736342907, \
-0.021180380135774612`, -0.01799359917640686}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {9, -5}, {-3, 
            7}, {-2, 8}, {-6, -8}, {-7, -9}, {10, -10}, {-4, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 9, 285, 6, 9, 286, 7, 6, 286, 206, 6, 
            287}], "NumericalThresholds" -> {-0.4162716120481491, 
           0.14249702543020248`, -0.0014353522274177521`, 0.319690078496933, 
           0.14249727129936218`, -0.7382787466049194, -0.06890776008367538, \
-0.20733018219470978`, 0.1435685008764267, 
           0.001291881431825459, -0.08570945635437965, -1.017726480960846}, 
          "LeafValues" -> 
          RawArray["Real32",{0.012240773066878319`, 0.0017312141135334969`, 
            0.03184039890766144, -0.01623121090233326, 
            0.0003667585551738739, -0.004279218148440123, 
            0.004871753975749016, 
            0.02169850841164589, -0.0024088937789201736`, \
-0.009532866068184376, -0.011299981735646725`, -0.016469234600663185`, \
-0.02143094129860401}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {6, -5}, {10, -6}, {
            7, -7}, {-1, -8}, {-2, 9}, {-9, -10}, {12, 
            11}, {-11, -12}, {-4, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 285, 286, 3, 7, 284, 286, 4, 3}],
           "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.9432089030742645, -0.7209027409553528, 0.7322269976139069, 
           0.16158821433782578`, -0.016751746647059917`, -0.8635501265525818, 
           1.440826177597046, -0.36254484951496124`, 0.346250981092453}, 
          "LeafValues" -> 
          RawArray["Real32",{0.025378204882144928`, -0.0072789243422448635`, 
            0.01502289529889822, -0.01209544762969017, 
            0.00600550277158618, -0.011401474475860596`, 
            0.009892275556921959, -0.0035919344518333673`, \
-0.0020674108527600765`, -0.020179782062768936`, 
            0.0032760347239673138`, -0.016281038522720337`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 9}, {-3, 6}, {7, -6}, {
            8, -7}, {-2, 10}, {-5, -9}, {11, -10}, {-8, -11}, {-4, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 9, 285, 6, 9, 286, 7, 284, 285, 206, 9, 
            6}], "NumericalThresholds" -> {-0.4162716120481491, 
           0.14249702543020248`, -0.018267418490722775`, 0.319690078496933, 
           0.14249727129936218`, -0.7382787466049194, -0.06890776008367538, 
           0.16575540602207184`, -0.41093386709690094`, 0.001291881431825459, 
           0.04753355123102665, -0.08570945635437965}, "LeafValues" -> 
          RawArray["Real32",{0.01115952804684639, 0.004125080071389675, 
            0.029989449307322502`, -0.01494479738175869, 
            0.00003423900488996878, -0.003870337503030896, 
            0.0044507295824587345`, 
            0.020029442384839058`, -0.007172171492129564, \
-0.0029472513124346733`, -0.010308805853128433`, -0.020285770297050476`, \
-0.015197058208286762`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {6, -5}, {10, -6}, {
            7, -7}, {-1, -8}, {9, -9}, {-2, -10}, {11, 
            12}, {-4, -12}, {-11, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 285, 285, 2, 3, 10, 284, 287, 284, 6, 
            12}], "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.9432089030742645, -0.7209027409553528, -0.23376742750406265`, 
           0.16158821433782578`, -0.49697159230709076`, -0.8635501265525818, \
-0.8236958384513855, 0.16575540602207184`, -0.15354132652282715`, 
           0.2444620504975319}, "LeafValues" -> 
          RawArray["Real32",{0.023603422567248344`, -0.01104982290416956, 
            0.013867465779185295`, -0.010161257348954678`, 
            0.0054370746947824955`, -0.002863661153241992, 
            0.009298224002122879, -0.0035814668517559767`, \
-0.0023078646045178175`, -0.01919693313539028, -0.009745200164616108, \
-0.015281218104064465`, 0.002051916439086199}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 9}, {-3, 6}, {-2, 7}, {
            8, -7}, {12, 10}, {-5, -9}, {
            11, -10}, {-8, -11}, {-4, -12}, {-6, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 9, 285, 6, 9, 286, 4, 4, 284, 2, 206, 7, 
            284}], "NumericalThresholds" -> {-0.4162716120481491, 
           0.14249702543020248`, -0.018267418490722775`, 0.319690078496933, 
           0.14249727129936218`, -0.7382787466049194, 0.13570620864629745`, 
           0.13570549339056015`, -0.1381092444062233, 0.4229577034711838, 
           0.001291881431825459, -0.06890607252717018, 0.9531287252902985}, 
          "LeafValues" -> 
          RawArray["Real32",{0.018825965002179146`, 0.0029278346337378025`, 
            0.028257640078663826`, -0.018296895548701286`, \
-0.00027027653413824737`, -0.0034970284905284643`, 0.0040540508925914764`, 
            0.02044682949781418, 
            0.003426365088671446, -0.0015563976485282183`, \
-0.00809071771800518, -0.009029213339090347, -0.013312157243490219`, \
-0.01368588488548994}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {9, 5}, {6, -5}, {11, -6}, {
            7, -7}, {8, -8}, {-1, -9}, {-2, 10}, {-10, -11}, {12, 
            13}, {-4, -13}, {-12, -14}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 286, 286, 285, 7, 3, 9, 8, 12, 286, 5}], 
          "NumericalThresholds" -> {
           0.25391924381256104`, -1.1830604672431946`, 
           0.5959504842758179, -0.7209027409553528, -0.016751746647059917`, 
           0.16158821433782578`, 0.07663994655013084, -0.1474270075559616, 
           0.24446192383766174`, -0.7097128331661224, 0.6475160419940948}, 
          "LeafValues" -> 
          RawArray["Real32",{0.021974558010697365`, -0.00693260133266449, 
            0.012836731970310211`, -0.009910915978252888, 
            0.004874358884990215, -0.003993534483015537, 
            0.00869719497859478, -0.00693165697157383, -0.01903403364121914, 
            0.0035473874304443598`, -0.0025433204136788845`, \
-0.012782207690179348`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {-2, 9}, {
            10, -7}, {8, -8}, {-4, 11}, {-6, -10}, {-5, -11}, {-9, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 9, 285, 6, 9, 286, 8, 6, 286, 206, 7, 
            6}], "NumericalThresholds" -> {-0.4162716120481491, 
           0.14249702543020248`, -0.018267418490722775`, 0.319690078496933, 
           0.14249727129936218`, -0.7382787466049194, -0.5667977035045624, \
-0.20733018219470978`, 0.1435685008764267, 
           0.001291881431825459, -0.06890607252717018, -0.08570945635437965}, 
          "LeafValues" -> 
          RawArray["Real32",{0.018856417387723923`, 0.0018509970977902412`, 
            0.02663658931851387, -0.01709354668855667, \
-0.0005873703630641103, -0.003179380903020501, 0.003742583328858018, 
            0.009853328578174114, -0.0014318812172859907`, \
-0.008143175393342972, -0.00857919454574585, -0.012303904630243778`, \
-0.012979515828192234`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {6, -5}, {10, -6}, {
            7, -7}, {-1, -8}, {-2, 9}, {-9, -10}, {11, 
            12}, {-4, -12}, {-11, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 284, 9, 285, 3, 8, 286, 7, 287, 4, 9}], 
          "NumericalThresholds" -> {0.25391924381256104`, -0.9828693270683289,
            0.14044597744941711`, 0.9432089030742645, 
           0.1615876778960228, -0.09138483554124832, 
           0.7122723460197449, -0.016751746647059917`, -0.8236958384513855, \
-0.36254484951496124`, -0.2501365840435028}, "LeafValues" -> 
          RawArray["Real32",{0.0049087549559772015`, -0.006063060835003853, 
            0.008610314689576626, 
            0.030909229069948196`, -0.013531223870813847`, 
            0.015576310455799103`, 
            0.00012750711175613105`, -0.008937904611229897, \
-0.002807626035064459, -0.016815321519970894`, 
            0.0036229537799954414`, -0.008783695288002491}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, 6}, {5, -4}, {7, 
            9}, {-1, -6}, {-3, -7}, {8, -8}, {-2, 10}, {
            11, -10}, {-9, -11}, {-5, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 9, 284, 6, 9, 7, 285, 10, 6, 285, 3}], 
          "NumericalThresholds" -> {-0.6348131000995636, 0.14044731110334396`,
            0.31597021222114563`, 0.319690078496933, 
           0.1424972265958786, -0.06890776008367538, -0.5822700560092926, \
-0.49697108566761017`, -0.08570945635437965, 0.9437532722949982, 
           0.3462507873773575}, "LeafValues" -> 
          RawArray["Real32",{0.007663089316338301, 0.005747917108237743, 
            
            0.027217594906687737`, -0.0050978451035916805`, \
-0.0008603519527241588, -0.0015469144564121962`, 0.01620587520301342, 
            0.0007297068368643522, -0.006069640163332224, \
-0.011669422499835491`, -0.012186660431325436`, -0.015998734161257744`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {7, 5}, {6, -5}, {
            9, -6}, {-1, -7}, {-2, 8}, {-8, -9}, {10, 
            11}, {-4, -11}, {-10, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{284, 284, 9, 8, 12, 9, 1, 285, 287, 6, 8, 1}],
           "NumericalThresholds" -> {-0.8752311170101166, 
           0.16575540602207184`, 0.14044597744941711`, -0.5667977035045624, 
           0.06249292381107807, 0.1424972265958786, 
           0.6105587184429169, -0.03858592174947262, -0.8236958384513855, \
-0.15354223549365997`, -0.09138473868370056, -0.09831124544143677}, 
          "LeafValues" -> 
          RawArray["Real32",{0.017015676945447922`, 
            0.0013504542876034975`, -0.0059006731025874615`, 
            0.02710624225437641, 
            0.012066042050719261`, -0.001498262514360249, \
-0.001485037850216031, 
            0.007913446985185146, -0.005805769003927708, \
-0.014481261372566223`, -0.012668834067881107`, 
            0.0012644317466765642`, -0.0044146873988211155`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 6}, {4, -4}, {-1, 5}, {-5, -6}, {
            8, -7}, {12, 11}, {-3, 9}, {
            10, -10}, {-9, -11}, {-8, -12}, {-2, -13}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 284, 9, 8, 9, 285, 285, 6, 206, 287, 
            284}], "NumericalThresholds" -> {-0.937636524438858, 
           0.16575540602207184`, 0.14044597744941711`, -0.5667977035045624, 
           0.1424972265958786, -0.36325328052043915`, -0.03858592174947262, \
-0.08571010082960129, 0.001291881431825459, -1.017726480960846, 
           0.9531287252902985}, "LeafValues" -> 
          RawArray["Real32",{0.016539007425308228`, 
            0.006826526019722223, -0.0056646461598575115`, 
            0.02709665708243847, 
            0.00436678109690547, -0.0014256363501772285`, \
-0.0031028203666210175`, -0.010759731754660606`, 
            0.0007999244844540954, -0.0065834419801831245`, \
-0.016280094161629677`, -0.010720067657530308`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {7, -6}, {
            8, -7}, {-3, 9}, {-2, -9}, {10, 11}, {-8, -11}, {-10, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{284, 284, 9, 3, 9, 285, 286, 285, 206, 1, 287,
             284}], "NumericalThresholds" -> {-0.9497449100017548, 
           0.16575540602207184`, 0.14044597744941711`, 0.161588154733181, 
           0.1424972265958786, -0.6698897182941437, -0.03439049515873194, \
-0.03858592174947262, 0.001291881431825459, 
           0.6105587184429169, -1.017726480960846, 0.9531287252902985}, 
          "LeafValues" -> 
          RawArray["Real32",{0.005535408388823271, 
            0.0073186904191970825`, -0.005438060034066439, 
            0.02674689143896103, 
            0.015192775055766106`, -0.0013686108868569136`, \
-0.0009123323834501207, -0.004987262189388275, -0.01032934244722128, \
-0.006320104002952576, 
            0.004129968583583832, -0.015628891065716743`, \
-0.01029126439243555}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
            8, -6}, {-2, 7}, {10, -8}, {-3, 9}, {11, 
            12}, {-7, -11}, {-9, -12}, {-10, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{284, 284, 9, 3, 9, 285, 286, 10, 286, 10, 3}],
           "NumericalThresholds" -> {-0.9497449100017548, 
           0.16575540602207184`, 0.14044597744941711`, 0.161588154733181, 
           
           0.1424972265958786, -0.6698897182941437, -0.03439049515873194, \
-0.4969724863767624, 1.440826177597046, -0.4969712048768997, 
           0.16158821433782578`}, "LeafValues" -> 
          RawArray["Real32",{0.0053139920346438885`, 
            0.007025942672044039, -0.01383498590439558, 0.025677014142274857`,
             0.01458506379276514, -0.0013138664653524756`, \
-0.0010983895044773817`, -0.004787771496921778, -0.005025187507271767, \
-0.013037332333624363`, -0.010455331765115261`, 0.003950340207666159}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
            8, -6}, {-2, 7}, {11, -8}, {-3, 9}, {
            10, -10}, {-9, -11}, {-7, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 284, 9, 3, 9, 285, 287, 285, 8, 7, 5}], 
          "NumericalThresholds" -> {-0.9608926475048065, 0.16575540602207184`,
            0.14044597744941711`, 0.161588154733181, 
           0.1424972265958786, -0.36325328052043915`, 0.26196232438087463`, 
           1.6968544721603394`, -0.09138400852680206, -0.01675202138721943, 
           0.6475155055522919}, "LeafValues" -> 
          RawArray["Real32",{0.00396690983325243, 
            0.006641723681241274, -0.008067755028605461, 0.02455679140985012, 
            0.01538518164306879, -0.0012613118160516024`, \
-0.002862283494323492, 
            0.0005570646026171744, -0.013136197812855244`, \
-0.009319582022726536, -0.0031718402169644833`, -0.011978298425674438`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {8, -6}, {
            7, -7}, {-2, -8}, {9, -9}, {10, 11}, {-3, -11}, {-10, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{285, 9, 286, 6, 285, 2, 2, 1, 1, 287, 10}], 
          "NumericalThresholds" -> {-0.6940266788005829, 
           0.14044712483882904`, -0.19795507192611694`, -0.15354061871767044`,
            0.9437532722949982, 0.4229579418897629, -0.23376742750406265`, 
           0.6105587184429169, 
           0.6105596125125885, -1.064170777797699, -0.49697186052799225`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.013005707412958145`, -0.0011289817048236728`, 
            0.024890726432204247`, -0.007228639908134937, 
            0.0015783511335030198`, -0.007712706923484802, \
-0.009424847550690174, 0.002197238616645336, 0.007302477955818176, 
            0.0009233967284671962, -0.012704606167972088`, \
-0.0030417745001614094`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {-1, -5}, {6, 10}, {
            7, -7}, {-4, 11}, {-2, 9}, {-9, -10}, {-6, -11}, {-8, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{284, 284, 9, 8, 9, 1, 6, 2, 209, 11, 5, 12}], 
          "NumericalThresholds" -> {-0.9497449100017548, 0.31597021222114563`,
            0.14044597744941711`, -0.36886800825595856`, 0.1424972265958786, 
           0.6105586588382721, 0.25817278772592545`, 0.42295821011066437`, 
           0.2693440392613411, -1.0373250842094421`, 0.26802466809749603`, 
           0.2444620355963707}, "LeafValues" -> 
          RawArray["Real32",{
            0.012806905433535576`, -0.002017051912844181, \
-0.008356202393770218, 0.022953208535909653`, 
            0.004171937704086304, -0.0010886144591495395`, 
            0.00629998417571187, -0.00010453037975821644`, \
-0.005375009961426258, -0.004265707451850176, -0.007141741458326578, 
            0.0033311897423118353`, -0.013178043998777866`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {9, -6}, {
            8, 7}, {-7, -8}, {11, -9}, {10, -10}, {
            12, -11}, {-2, -12}, {-3, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 284, 9, 3, 9, 3, 9, 6, 7, 4, 3}], 
          "NumericalThresholds" -> {-0.9608926475048065, 0.31597021222114563`,
            0.14044597744941711`, 0.161588154733181, -0.19499916583299637`, 
           0.161587655544281, 
           0.1424972265958786, -0.08570945635437965, -0.24246317893266678`, \
-0.3625444918870926, 0.3462507873773575}, "LeafValues" -> 
          RawArray["Real32",{
            0.003257020842283964, -0.003416661871597171, \
-0.009891507215797901, 0.02195383608341217, 0.0141029367223382, 
            0.00876346044242382, -0.0027075749821960926`, \
-0.0010450698900967836`, -0.008257935754954815, -0.0036114254035055637`, 
            0.0023221212904900312`, -0.012505769729614258`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 7}, {4, -4}, {-1, -5}, {-2, 
            6}, {-6, 10}, {8, -8}, {9, 11}, {-3, -10}, {-7, -11}, {-9, -12}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{284, 284, 9, 8, 9, 285, 1, 2, 209, 11, 12}], 
          "NumericalThresholds" -> {-0.9497449100017548, 0.31597021222114563`,
            0.14044597744941711`, -0.36886800825595856`, 
           0.1424972265958786, -0.6698897182941437, 0.6105587184429169, 
           0.4229578971862793, 0.2693440392613411, -1.0373250842094421`, 
           0.24446211010217667`}, "LeafValues" -> 
          RawArray["Real32",{0.01200141292065382, 
            0.0058332281187176704`, -0.007831508293747902, 
            0.02120927721261978, 
            0.0037388515193015337`, -0.0010032670106738806`, 
            0.0006527657969854772, 
            0.002853091573342681, -0.005536037031561136, \
-0.0038176653906702995`, -0.006534838117659092, -0.012380456551909447`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
            9, -6}, {-2, 7}, {8, -8}, {-7, -9}, {10, -10}, {
            11, -11}, {-3, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 284, 9, 12, 9, 3, 9, 6, 7, 4, 3}], 
          "NumericalThresholds" -> {-0.9608926475048065, 0.31597021222114563`,
            0.14044597744941711`, 0.06249310448765755, -0.19499916583299637`, 
           0.161587655544281, 
           0.1424972265958786, -0.08570945635437965, -0.24246317893266678`, \
-0.3625444918870926, 0.3462507873773575}, "LeafValues" -> 
          RawArray["Real32",{
            0.012517029419541359`, -0.003239154815673828, \
-0.009150516241788864, 0.020268313586711884`, 0.0020875856280326843`, 
            0.008295128121972084, -0.0025816969573497772`, \
-0.0009631363791413605, -0.0076237334869802, -0.003191074589267373, 
            0.002100220415741205, -0.01166424062103033}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 7}, {4, -4}, {-1, -5}, {-2, 
            6}, {-6, 10}, {8, -8}, {9, 11}, {-3, -10}, {-7, -11}, {-9, -12}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{285, 9, 286, 6, 285, 286, 2, 284, 1, 1, 8, 
            8}], "NumericalThresholds" -> {-0.6940266788005829, 
           0.14044712483882904`, -0.23859985172748566`, -0.15354061871767044`,
            0.9757143557071686, 0.6880344152450562, 0.4229577034711838, 
           1.5782559514045715`, 0.6105587184429169, 
           0.6105596125125885, -0.09138467162847519, -0.09218428656458855}, 
          "LeafValues" -> 
          RawArray["Real32",{0.011193232610821724`, -0.0006990619003772736, 
            0.021088819950819016`, -0.0029274870175868273`, 
            0.0003456679987721145, -0.01143303606659174, \
-0.004121537320315838, -0.00679197208955884, -0.005711851641535759, 
            0.007568173110485077, 
            0.000014357741747517139`, -0.008549846708774567, 
            0.0015649116830900311`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {9, 5}, {-1, -5}, {6, 8}, {7,
             11}, {12, -8}, {-6, -9}, {-2, 
            10}, {-10, -11}, {-7, -12}, {-4, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{284, 285, 9, 8, 287, 9, 9, 286, 287, 6, 6}], 
          "NumericalThresholds" -> {-0.9497449100017548, 0.13926654309034348`,
            0.14044597744941711`, -0.36886800825595856`, 0.08064055442810059, 
           0.07663994655013084, 
           0.1404469758272171, -0.03439049515873194, -0.8236958384513855, \
-0.08570945635437965, -0.15354179590940475`}, "LeafValues" -> 
          RawArray["Real32",{0.01091195922344923, 
            0.006244966294616461, -0.0033996121492236853`, 
            0.018957071006298065`, 0.003155891317874193, 
            0.0002444564597681165, -0.0028059748001396656`, 
            0.0020445529371500015`, -0.0071835583075881, \
-0.010996395722031593`, -0.009940803982317448, 0.0012294304324313998`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 6}, {4, -4}, {-1, -5}, {11, 7}, {
            9, -7}, {8, -8}, {-6, -9}, {10, -10}, {-3, -11}, {-2, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{285, 9, 286, 6, 285, 284, 286, 2, 1, 1, 8, 
            8}], "NumericalThresholds" -> {-0.6940266788005829, 
           0.14044712483882904`, -0.23859985172748566`, -0.15354092419147491`,
            0.9757143557071686, 1.5782559514045715`, 0.6880344152450562, 
           0.4229577034711838, 0.6105587184429169, 
           0.6105596125125885, -0.09138467162847519, -0.09218428656458855}, 
          "LeafValues" -> 
          RawArray["Real32",{0.010726479813456535`, -0.0007684599841013551, 
            0.019656183198094368`, -0.0026853589806705713`, 
            0.0003442330053076148, -0.010698613710701466`, \
-0.005224265158176422, -0.0036750957369804382`, -0.0063986340537667274`, 
            0.007128879427909851, -0.00010576008935458958`, \
-0.007909594103693962, 0.0015534471021965146`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {9, 5}, {-1, -5}, {7, 
            6}, {-6, -7}, {8, 11}, {12, -9}, {-2, 
            10}, {-10, -11}, {-8, -12}, {-4, -13}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{284, 285, 9, 3, 287, 6, 9, 4, 287, 6, 10}], 
          "NumericalThresholds" -> {-0.9497449100017548, 0.13926654309034348`,
            0.14044597744941711`, 0.1615876778960228, 
           0.9126317501068115, -0.20733018219470978`, 
           0.07663994655013084, -0.36254434287548065`, -0.8236958384513855, \
-0.08570945635437965, 0.4368876963853836}, "LeafValues" -> 
          RawArray["Real32",{0.001585956197232008, 
            0.004853337537497282, -0.0029976305086165667`, 
            0.017600441351532936`, 
            0.009212586097419262, -0.004648383241146803, \
-0.003229635301977396, -0.002538390224799514, 
            0.0038877876941114664`, -0.010272806510329247`, \
-0.009303403086960316, -0.0013681690907105803`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 7}, {4, -4}, {-1, -5}, {
            6, -6}, {-2, 8}, {9, -8}, {-7, 11}, {
            10, -10}, {-3, -11}, {-9, -12}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{285, 9, 286, 12, 285, 284, 207, 2, 286, 1, 
            1}], "NumericalThresholds" -> {-0.6940266788005829, 
           0.14044712483882904`, -0.23859985172748566`, 0.06249310448765755, 
           0.9757143557071686, 1.5782559514045715`, 9.999999682655224*^-21, 
           0.4229577034711838, 0.9133468270301819, 0.6105587184429169, 
           0.6105596125125885}, "LeafValues" -> 
          RawArray["Real32",{0.011872575618326664`, -0.0007661311537958682, 
            0.01835513673722744, 0.0008847928838804364, 
            0.0013552738819271326`, -0.01001485250890255, \
-0.004776692483574152, -0.006808450911194086, -0.006751073058694601, \
-0.005535102915018797, 0.00668244156986475, -0.0002677008742466569}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {10, 5}, {-1, -5}, {7, 
            6}, {-6, -7}, {8, -8}, {9, -9}, {-4, -10}, {-2, 11}, {-11, -12}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{286, 285, 9, 3, 5, 287, 3, 12, 285, 207, 9, 
            287}], "NumericalThresholds" -> {-0.9608926475048065, \
-0.04242449998855591, 0.14044597744941711`, 0.161588154733181, 
           0.6700164675712585, 0.6432357430458069, 0.48694829642772675`, 
           0.062494492158293724`, 1.6968544721603394`, 
           9.999999682655224*^-21, -0.19499994814395905`, \
-0.7455524802207947}, "LeafValues" -> 
          RawArray["Real32",{
            0.0016282853903248906`, -0.0003812994109466672, \
-0.006670435890555382, 0.016281627118587494`, 0.01152716763317585, 
            0.006355076562613249, -0.00544462027028203, \
-0.0023260987363755703`, 
            0.006285473238676786, -0.009381663985550404, \
-0.008206426165997982, 0.0006626269896514714, -0.003969637677073479}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {5, 9}, {4, -4}, {-1, -5}, {6, -6}, {
            7, -7}, {8, -8}, {-2, -9}, {10, -10}, {11, -11}, {-3, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]]}, "ClassNumber" -> 
      1, "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f1f6f7)" -> 
           Association[
            "Type" -> "NominalVector", "Weight" -> 3, 
             "SetSize" -> {5, 10, 3}], "(f8(f2f3f4f5))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
              "], "Type" -> "NumericalVector"]], "Output" -> 
         Association[
          "((f1f6f7)(f8(f2f3f4f5)))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 8.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f6f7)" -> 
               Association[
                "Type" -> "NominalVector", "Weight" -> 3, 
                 "SetSize" -> {5, 10, 3}]], "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10], 
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "Output" -> 
             Association[
              "(f1f6f7)" -> 
               Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0., 0.}, {0.8276937007904053, 
                1.684451937675476, 0.14223997294902802`, 
                0.33267807960510254`}, {0.6105592250823975, 
                0.6981538534164429, 0.16158781945705414`, 
                0.1357058584690094}, {-0.31701499223709106`, 
                0.21509666740894318`, 
                0.10612281411886215`, -0.02909098193049431}, \
{-0.0983114242553711, 0.42295780777931213`, 
                0.48694905638694763`, -0.36254504323005676`}, {
                0.5284631848335266, -0.23376767337322235`, 0.3462507426738739,
                 0.636563777923584}}], 
               RawArray["Real32",{{0., 0., 0., 0., 
                0.}, {-0.07989419251680374, -0.7561284899711609, \
-0.24246390163898468`, -0.14742642641067505`, 0.047534264624118805`}, {
                0.4415503740310669, -0.15354129672050476`, \
-0.3151618540287018, -0.5667984485626221, -0.4819013476371765}, \
{-0.4973995089530945, 0.3196905851364136, -0.06890679895877838, 
                0.17588235437870026`, 0.07663919776678085}, {
                0.647515594959259, 0.38926857709884644`, 
                0.6601542830467224, -0.011586727574467659`, \
-0.25013700127601624`}, {-0.09734635800123215, 
                0.1966550052165985, -0.38033875823020935`, 
                0.20388638973236084`, 
                0.14044658839702606`}, {-0.28058937191963196`, \
-0.0857095867395401, -0.016751863062381744`, -0.36886894702911377`, \
-0.02560511790215969}, {0.8730828762054443, -0.6591068506240845, 
                0.8588672876358032, -0.091384656727314, -0.1949993371963501}, \
{0.0629168450832367, -0.20733048021793365`, 
                0.13390646874904633`, -0.5733866095542908, \
-0.3011435568332672}, {0.26802393794059753`, 0.3359086811542511, 
                0.15563660860061646`, 0.173941969871521, 
                0.14249752461910248`}, {
                0.6700165867805481, -0.22340668737888336`, \
-0.09891430288553238, -0.09218427538871765, 0.2854697108268738}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.4969717562198639, -1.0373255014419556`, 
                0.24446187913417816`}, {
                0.5489273071289062, -0.25098317861557007`, 
                0.06249380111694336}, {
                0.436887264251709, -0.04003623127937317, \
-0.7552163600921631}}]}, "Version" -> {12.2, 0}, "ID" -> 255423140624039359]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f6f7)" -> 
               Association["Weight" -> 3, "Type" -> "NumericalVector"], 
               "(f8(f2f3f4f5))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
                  "], "Type" -> "NumericalVector"]], "Spans" -> {
               Span[1, 12], 
               Span[13, 287]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f6f7)(f8(f2f3f4f5)))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQBxFgcMGeVnSx1J3KiVZ5o/QoPUqP0qP0KD1Kj9I0pyHt
jw84aQDmbZ+u
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 4286702454314542507]], 
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f6f7)(f8(f2f3f4f5)))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQBxFgcMGeVnSx1J3KiVZ5o/QoPUqP0qP0KD1Kj9I0pyHt
jw84aQDmbZ+u
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 1826009284769702442, "Output" -> 
             Association[
              "((f1f6f7)(f8(f2f3f4f5)))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 8.]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 8.], "Key" -> 
             "((f1f6f7)(f8(f2f3f4f5)))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, {4.5296498003350045`}}, 
      "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 500, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.04, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 15, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association[
         "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[64817], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 1.8365558003297235`, "PreprocessingTime" -> 
      0.1438575`6.6094775022228776, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[4.2187602052909705`, 0.042922206662601], 
         "StandardDeviation" -> 
         Around[2.553143894963805, 0.49864451791452274`], "EvaluationTime" -> 
         0.00006635119509224949, "TestSize" -> 60, "ModelMemory" -> 173680, 
         "ModelUtility" -> -1.6687979374517061`, "TrainingSize" -> 240, 
         "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 2284856, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[4.2187602052909705`, 0.030350583394615577`]}, 
         "StandardDeviationHistory" -> {
           Around[2.553143894963805, 0.3525949200188559]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 500, "LearningRate" -> 
           0.04, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> "MeanSquaredError"}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.603692860815107, 0.014922858870716656`], 
              "StandardDeviation" -> 
              Around[6.341079117087336, 0.34459816403946864`], 
              "EvaluationTime" -> 0.000020640644637609093`, "TestSize" -> 290,
               "ModelMemory" -> 63744, "ModelUtility" -> -2.5510109958608598`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 184048, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.603692860815107, 0.010552054702173571`]}, 
              "StandardDeviationHistory" -> {
                Around[6.341079117087336, 0.24366769857674256`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.667327645809342, 0.0246847415391973], 
              "StandardDeviation" -> 
              Around[6.251707144295453, 0.37000431292225927`], 
              "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 250,
               "ModelMemory" -> 65792, "ModelUtility" -> -2.5377739391495377`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 544552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.667327645809342, 0.017454748134203665`]}, 
              "StandardDeviationHistory" -> {
                Around[6.251707144295453, 0.2616325587355988]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020660194799564414`, "ModelMemory" -> 
             65792, "StandardDeviation" -> 
             Around[6.251707144295453, 0.37000431292225927`], 
             "TrainingMemory" -> 544552, "TrainingTime" -> 
             0.06013604989177507], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.9667181067134885`, 0.25629129918519544`], 
              "StandardDeviation" -> 
              Around[5.96115907738313, 0.4069853378698616], "EvaluationTime" -> 
              0.000012589254117941663`, "TestSize" -> 200, "ModelMemory" -> 
              59200, "ModelUtility" -> -2.4919789195765896`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              154312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.9667181067134885`, 0.18122531561296196`]}, 
              "StandardDeviationHistory" -> {
                Around[5.96115907738313, 0.2877820922512773]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.676906939002361, 0.1372458651377339], 
              "StandardDeviation" -> 
              Around[3.5569245550143314`, 0.5002868666909706], 
              "EvaluationTime" -> 0.000012589254117941663`, "TestSize" -> 100,
               "ModelMemory" -> 59264, "ModelUtility" -> -1.989789993499029, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              428344, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.676906939002361, 0.09704748192870602]}, 
              "StandardDeviationHistory" -> {
                Around[3.5569245550143314`, 0.35375623597575556`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.464380937535439, 0.1402894773284657], 
              "StandardDeviation" -> 
              Around[2.8667711495528567`, 0.4845927150922294], 
              "EvaluationTime" -> 0.000020982090196569435`, "TestSize" -> 60, 
              "ModelMemory" -> 59264, "ModelUtility" -> -1.7795868142342637`, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 1733528, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.464380937535439, 0.0991996407480745]}, 
              "StandardDeviationHistory" -> {
                Around[2.8667711495528567`, 0.342658794955316]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020982090196569435`, "ModelMemory" -> 
             59264, "StandardDeviation" -> 
             Around[2.8667711495528567`, 0.4845927150922294], 
             "TrainingMemory" -> 1733528, "TrainingTime" -> 
             0.028325821765368752`], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.1679545053396874`, 0.13419221682645138`], 
              "StandardDeviation" -> 
              Around[4.77094570491098, 0.23288867564691962`], 
              "EvaluationTime" -> 0.00004026831150426176, "TestSize" -> 390, 
              "ModelMemory" -> 150640., "ModelUtility" -> -2.265414174482961, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.010863084705980556`, 
              "TrainingMemory" -> 234170.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[3.2737190371016576`, 0.24566193043429593`], 
                Around[3.0621899735777167`, 0.08769666665786062]}, 
              "StandardDeviationHistory" -> {
                Around[4.819925680880529, 0.493673604450249], 
                Around[4.72196572894143, 0.2565988089382738]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.574848760395754, 0.0821197677148696], 
              "StandardDeviation" -> 
              Around[3.2625102942577726`, 0.28309990501231813`], 
              "EvaluationTime" -> 0.00004449768428495327, "TestSize" -> 250, 
              "ModelMemory" -> 150640, "ModelUtility" -> -1.8928569751416573`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 458952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.574848760395754, 0.05806744462064841]}, 
              "StandardDeviationHistory" -> {
                Around[3.2625102942577726`, 0.2001818625874776]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.416847103524785, 0.17248942998046585`], 
              "StandardDeviation" -> 
              Around[2.7816083219551566`, 0.4909154705105077], 
              "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
              "ModelMemory" -> 162352, "ModelUtility" -> -1.7508723832039284`,
               "TrainingSize" -> 240, "TrainingTime" -> 0.015848931924611134`,
               "TrainingMemory" -> 1578064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.416847103524785, 0.12196844562218957`]}, 
              "StandardDeviationHistory" -> {
                Around[2.7816083219551566`, 0.3471296581873646]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
             162352, "StandardDeviation" -> 
             Around[2.7816083219551566`, 0.4909154705105077], 
             "TrainingMemory" -> 1578064, "TrainingTime" -> 
             0.030674249611744475`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.728772742120058, 0.3047119608636234], 
              "StandardDeviation" -> 
              Around[4.481152395071433, 0.33339651837135503`], 
              "EvaluationTime" -> 0.000017024325020992374`, "TestSize" -> 490,
               "ModelMemory" -> 83440., "ModelUtility" -> -2.207802995523786, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.006854143078948891, 
              "TrainingMemory" -> 186632., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.9798259753207756`, 0.31664206797896965`], 
                Around[3.4777195089193405`, 0.20602651388468268`]}, 
              "StandardDeviationHistory" -> {
                Around[4.741099312700334, 0.33350107558747394`], 
                Around[4.221205477442532, 0.2676926184244405]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.5622152618128737`, 0.07919599448282498], 
              "StandardDeviation" -> 
              Around[3.283015531896099, 0.31456973123881304`], 
              "EvaluationTime" -> 0.000017714847186865565`, "TestSize" -> 250,
               "ModelMemory" -> 174528, 
              "ModelUtility" -> -1.9008993088929018`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
              569888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.5622152618128737`, 0.05600002474161794]}, 
              "StandardDeviationHistory" -> {
                Around[3.283015531896099, 0.22243439011499444`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4237367892681094`, 0.16685645664357082`], 
              "StandardDeviation" -> 
              Around[3.052482813127871, 0.4800277270692235], "EvaluationTime" -> 
              0.00003325437191614798, "TestSize" -> 60, "ModelMemory" -> 
              613440, "ModelUtility" -> -1.8400886047190919`, "TrainingSize" -> 
              240, "TrainingTime" -> 0.01, "TrainingMemory" -> 3182232, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.4237367892681094`, 0.11798533197742808`]}, 
              "StandardDeviationHistory" -> {
                Around[3.052482813127871, 0.3394308609682131]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             613440, "StandardDeviation" -> 
             Around[3.052482813127871, 0.4800277270692235], "TrainingMemory" -> 
             3182232, "TrainingTime" -> 0.01935414307894889], "Index" -> 4], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.8341861606584375`*^12, 7.958731742047273*^11], 
              "StandardDeviation" -> 
              Around[4.540862232203866, 0.6209690488732129], "EvaluationTime" -> 
              0.000025118864315095795`, "TestSize" -> 100, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.2332518350666417`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3400096, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.8341861606584375`*^12, 5.627673184446251*^11]}, 
              "StandardDeviationHistory" -> {
                Around[4.540862232203866, 0.43909142536520945`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.8888272343839444`*^11, 2.816622509635939*^10], 
              "StandardDeviation" -> 
              Around[3.4760383663989605`, 0.2605663203011925], 
              "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 250,
               "ModelMemory" -> 66184, "ModelUtility" -> -1.9539261011125157`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3694048, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.8888272343839444`*^11, 1.9916528766062443`*^10]}, 
              "StandardDeviationHistory" -> {
                Around[3.4760383663989605`, 0.18424821203379915`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.4816783254042933`, 0.04945155462011469], 
              "StandardDeviation" -> 
              Around[5.427536508915213, 1.1755108429428536`], 
              "EvaluationTime" -> 0.00004186477385849299, "TestSize" -> 60, 
              "ModelMemory" -> 66184, "ModelUtility" -> -2.4270419853172083`, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              5017656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.4816783254042933`, 0.03496752961210004]}, 
              "StandardDeviationHistory" -> {
                Around[5.427536508915213, 0.8312116884032064]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004186477385849299, "ModelMemory" -> 
             66184, "StandardDeviation" -> 
             Around[5.427536508915213, 1.1755108429428536`], "TrainingMemory" -> 
             5017656, "TrainingTime" -> 0.0225], "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[294.9025780972431, 82.81234781571403], 
              "StandardDeviation" -> 
              Around[4.557542219981791, 0.622051153000735], "EvaluationTime" -> 
              0.00001995262314968879, "TestSize" -> 100, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.2368671956125645`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3400032, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[294.9025780972431, 58.55717270647037]}, 
              "StandardDeviationHistory" -> {
                Around[4.557542219981791, 0.43985658853173026`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[32.97976324926369, 8.522667684609925], 
              "StandardDeviation" -> 
              Around[3.755832082432725, 0.47957053840118147`], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 100,
               "ModelMemory" -> 66184, "ModelUtility" -> -2.041678588901454, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3693960, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[32.97976324926369, 6.026436113587129]}, 
              "StandardDeviationHistory" -> {
                Around[3.755832082432725, 0.339107579760759]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.4574463184268254`, 0.024160348321055052`], 
              "StandardDeviation" -> 
              Around[4.099610543896325, 0.6637367415271548], "EvaluationTime" -> 
              0.00003325437191614798, "TestSize" -> 60, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.1359112547700696`, "TrainingSize" -> 
              240, "TrainingTime" -> 0.01, "TrainingMemory" -> 5017656, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.4574463184268254`, 0.017083946133647044`]}, 
              "StandardDeviationHistory" -> {
                Around[4.099610543896325, 0.4693327508565138]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             66184, "StandardDeviation" -> 
             Around[4.099610543896325, 0.6637367415271548], "TrainingMemory" -> 
             5017656, "TrainingTime" -> 0.0225], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.8007550530463005`*^6, 523860.07602162677`], 
              "StandardDeviation" -> 
              Around[4.514387777313556, 0.41206006452491106`], 
              "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 200, 
              "ModelMemory" -> 66184, "ModelUtility" -> -2.218512345993873, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3399968, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.8007550530463005`*^6, 370425.01214779256`]}, 
              "StandardDeviationHistory" -> {
                Around[4.514387777313556, 0.29137046588173093`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[189642.25017201345`, 28280.465059389306`], 
              "StandardDeviation" -> 
              Around[3.4759473091380046`, 0.26056275428419456`], 
              "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 250, 
              "ModelMemory" -> 66184, "ModelUtility" -> -1.953900091497248, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3693960, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[189642.25017201345`, 19997.308618603394`]}, 
              "StandardDeviationHistory" -> {
                Around[3.4759473091380046`, 0.1842456904789981]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.4850086764216606`, 0.020666880731624496`], 
              "StandardDeviation" -> 
              Around[4.31501029393972, 0.4682816008020856], "EvaluationTime" -> 
              0.00003325437191614798, "TestSize" -> 60, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.176724284350055, "TrainingSize" -> 
              240, "TrainingTime" -> 0.01, "TrainingMemory" -> 5017656, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.4850086764216606`, 0.014613691511305277`]}, 
              "StandardDeviationHistory" -> {
                Around[4.31501029393972, 0.3311250954320465]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             66184, "StandardDeviation" -> 
             Around[4.31501029393972, 0.4682816008020856], "TrainingMemory" -> 
             5017656, "TrainingTime" -> 0.0225], "Index" -> 7], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.5993575756337757`, 0.027585098557294192`], 
              "StandardDeviation" -> 
              Around[6.344458961014312, 0.6497018996992524], "EvaluationTime" -> 
              0.00001995262314968879, "TestSize" -> 100, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.561007819794175, "TrainingSize" -> 
              10, "TrainingTime" -> 0.01, "TrainingMemory" -> 3400032, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.5993575756337757`, 0.01950561024956197]}, 
              "StandardDeviationHistory" -> {
                Around[6.344458961014312, 0.4594086190271235]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.669733375591315, 0.03710119367091776], 
              "StandardDeviation" -> 
              Around[6.322562871592576, 0.6739647162134927], "EvaluationTime" -> 
              0.000025118864315095795`, "TestSize" -> 100, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.5583719049662825`, "TrainingSize" -> 
              50, "TrainingTime" -> 0.01, "TrainingMemory" -> 3693960, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.669733375591315, 0.026234505634821367`]}, 
              "StandardDeviationHistory" -> {
                Around[6.322562871592576, 0.47656502111502774`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[5.376284397240425, 0.0906117034535513], 
              "StandardDeviation" -> 
              Around[6.079171311504136, 0.6543258956904736], "EvaluationTime" -> 
              0.00003325437191614798, "TestSize" -> 60, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.5193187677271305`, "TrainingSize" -> 
              240, "TrainingTime" -> 0.01, "TrainingMemory" -> 5017592, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.376284397240425, 0.06407214996687062]}, 
              "StandardDeviationHistory" -> {
                Around[6.079171311504136, 0.4626782779486954]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             66184, "StandardDeviation" -> 
             Around[6.079171311504136, 0.6543258956904736], "TrainingMemory" -> 
             5017592, "TrainingTime" -> 0.0225], "Index" -> 8], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.600107020668857, 0.01455328078215314], 
              "StandardDeviation" -> 
              Around[6.355636588551879, 0.3298791385633287], "EvaluationTime" -> 
              0.000020640644637609093`, "TestSize" -> 290, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.5528212244245, "TrainingSize" -> 10,
               "TrainingTime" -> 0.01, "TrainingMemory" -> 3400032, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.600107020668857, 0.010290723529572346`]}, 
              "StandardDeviationHistory" -> {
                Around[6.355636588551879, 0.23325977585010643`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.672058429475752, 0.03715855717490904], 
              "StandardDeviation" -> 
              Around[6.333415621289782, 0.6743393559098528], "EvaluationTime" -> 
              0.000025118864315095795`, "TestSize" -> 100, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.5600627583129025`, "TrainingSize" -> 
              50, "TrainingTime" -> 0.01, "TrainingMemory" -> 3693960, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.672058429475752, 0.02627506775748622]}, 
              "StandardDeviationHistory" -> {
                Around[6.333415621289782, 0.47682993138482566`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[5.3896252426950415`, 0.09116881700746685], 
              "StandardDeviation" -> 
              Around[6.1528912721808355`, 0.6609402117412884], 
              "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60, 
              "ModelMemory" -> 66184, "ModelUtility" -> -2.53133045730632, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              5017592, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.3896252426950415`, 0.06446608873873524]}, 
              "StandardDeviationHistory" -> {
                Around[6.1528912721808355`, 0.46735530568113753`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             66184, "StandardDeviation" -> 
             Around[6.1528912721808355`, 0.6609402117412884], 
             "TrainingMemory" -> 5017592, "TrainingTime" -> 0.0225], "Index" -> 
           9], Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.583511956536043, 0.7443031540400995], 
              "StandardDeviation" -> 
              Around[4.687353678859782, 0.41529327986430614`], 
              "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 200, 
              "ModelMemory" -> 66184, "ModelUtility" -> -2.255584724860932, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3400096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.583511956536043, 0.5263018074802898]}, 
              "StandardDeviationHistory" -> {
                Around[4.687353678859782, 0.29365669437325354`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.687585387070843, 0.09144796516252246], 
              "StandardDeviation" -> 
              Around[3.5029492315237793`, 0.26220380855464054`], 
              "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 250, 
              "ModelMemory" -> 66184, "ModelUtility" -> -1.9616167463545366`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3693960, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.687585387070843, 0.06466347629213079]}, 
              "StandardDeviationHistory" -> {
                Around[3.5029492315237793`, 0.1854060910819256]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.5429659427571822`, 0.02207856109026382], 
              "StandardDeviation" -> 
              Around[3.883872677843947, 0.6090136456794036], "EvaluationTime" -> 
              0.00003325437191614798, "TestSize" -> 60, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.0808642029349618`, "TrainingSize" -> 
              240, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              5017656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.5429659427571822`, 0.015611900265767]}, 
              "StandardDeviationHistory" -> {
                Around[3.883872677843947, 0.43063767869504765`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
             66184, "StandardDeviation" -> 
             Around[3.883872677843947, 0.6090136456794036], "TrainingMemory" -> 
             5017656, "TrainingTime" -> 0.025736567647427086`], "Index" -> 
           10], Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 500], "LearningRate" -> 
             Association["Value" -> 0.04], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.78366699652732, 0.011818174574117808`], 
              "StandardDeviation" -> 
              Around[3.304723638407115, 0.3466851502714484], "EvaluationTime" -> 
              0.0000501187233627272, "TestSize" -> 200, "ModelMemory" -> 
              162568, "ModelUtility" -> -1.9092714711447587`, "TrainingSize" -> 
              50, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              578392, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.78366699652732, 0.00835671138260514]}, 
              "StandardDeviationHistory" -> {
                Around[3.304723638407115, 0.2451434206936184]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.2187602052909705`, 0.042922206662601], 
              "StandardDeviation" -> 
              Around[2.553143894963805, 0.49864451791452274`], 
              "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60, 
              "ModelMemory" -> 173680, "ModelUtility" -> -1.6687979374517061`,
               "TrainingSize" -> 240, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 2284856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.2187602052909705`, 0.030350583394615577`]}, 
              "StandardDeviationHistory" -> {
                Around[2.553143894963805, 0.3525949200188559]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.6033825041458667`, 0.014930648716289987`], 
              "StandardDeviation" -> 
              Around[6.341079117087336, 0.34459816403946864`], 
              "EvaluationTime" -> 0.000020640644637609093`, "TestSize" -> 290,
               "ModelMemory" -> 63744, "ModelUtility" -> -2.5510109958608598`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 186416, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.6033825041458667`, 0.01055756295480287]}, 
              "StandardDeviationHistory" -> {
                Around[6.341079117087336, 0.24366769857674256`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020640644637609093`, "ModelMemory" -> 
             63744, "StandardDeviation" -> 
             Around[6.341079117087336, 0.34459816403946864`], 
             "TrainingMemory" -> 186416, "TrainingTime" -> 
             0.08735751282918311], "Index" -> 11], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[7.245615955712585*^6, 1.106272351437258*^6], 
              "StandardDeviation" -> 
              Around[3.50276896913839, 0.26779233861026275`], 
              "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 250, 
              "ModelMemory" -> 66184, "ModelUtility" -> -1.9618803798974547`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              3693496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[7.245615955712585*^6, 782252.6815404725]}, 
              "StandardDeviationHistory" -> {
                Around[3.50276896913839, 0.1893577785811209]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.4549767662600086`, 0.027377634491376705`], 
              "StandardDeviation" -> 
              Around[4.72269273147915, 0.6605174787748479], "EvaluationTime" -> 
              0.00003325437191614798, "TestSize" -> 60, "ModelMemory" -> 
              66184, "ModelUtility" -> -2.2731191248181517`, "TrainingSize" -> 
              240, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              5017656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.4549767662600086`, 0.019358911001699182`]}, 
              "StandardDeviationHistory" -> {
                Around[4.72269273147915, 0.4670563883339364]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.61653261065539*^8, 3.882905640286126*^7], 
              "StandardDeviation" -> 
              Around[4.683785078553041, 0.33928380789231494`], 
              "EvaluationTime" -> 0.000020640644637609093`, "TestSize" -> 290,
               "ModelMemory" -> 66184, "ModelUtility" -> -2.25164219195258, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 3406840, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.61653261065539*^8, 2.7456289089538127`*^7]}, 
              "StandardDeviationHistory" -> {
                Around[4.683785078553041, 0.23990988130744975`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020640644637609093`, "ModelMemory" -> 
             66184, "StandardDeviation" -> 
             Around[4.683785078553041, 0.33928380789231494`], 
             "TrainingMemory" -> 3406840, "TrainingTime" -> 
             0.12943215116604914`], "Index" -> 12]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LinearRegression", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 12], 
        Association[]], "MaxTrainingSize" -> 300, 
      "PreprocessorEvaluationTime" -> 3.569140625*^-6, "PreprocessorMemory" -> 
      118520, "InputDimension" -> 278, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8229282319264381`17.334971134217728*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.19599999999999995`, 
          "ElapsedTimes" -> 0.29797959999999996`, "ExperimentCounts" -> 14], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.2908714, "ExperimentCounts" -> 12], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.38801459999999993`, "ExperimentCounts" -> 11]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           8718539460336612740], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {140.}, "ID" -> 
           5330523246654450449], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {72.}, "ID" -> 
           5227176333101167944], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2408.}, "ID" -> 
           5596007189629378955], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
           2638574294534422359], "f6" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {71}, "ID" -> 
           5604019906672533564], "f7" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7446114396074216018], "f8" -> 
         Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"chevrolet vega (sw)"}, "ID" -> 3206511614197282240]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.3335319, 
      "MaxTrainingMemory" -> 6694080, "DataMemory" -> 102576, 
      "FunctionMemory" -> 499624, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 21, 20, 30, 32.4599721`9.263923044084517}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.822949832506837*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"4d48fbf4-c338-4113-825a-a18b1ea52a82"]
}, Open  ]],

Cell["\:68c0\:67e5\:6240\:6709\:7684\:7279\:5f81\:5c5e\:6027\:662f\:5426\:548c\
\:6211\:4eec\:6307\:5b9a\:7684\:4e00\:81f4", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.814287409937262*^9, 3.814287426013052*^9}, {
   3.8229497837412834`*^9, 
   3.8229498272386065`*^9}},ExpressionUUID->"6b83c683-82b7-442c-ae04-\
b2144f7996df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"pWithF", ",", " ", "FeatureTypes"}], "]"}]], "Input",
 CellChangeTimes->{{3.814108509138549*^9, 3.8141085139639597`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"ec12139f-cb71-482b-ad0b-dc0670b8dcfb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"f1\"\>", "\[Rule]", "\<\"Nominal\"\>"}], ",", 
   RowBox[{"\<\"f2\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f3\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f4\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f5\"\>", "\[Rule]", "\<\"Numerical\"\>"}], ",", 
   RowBox[{"\<\"f6\"\>", "\[Rule]", "\<\"Nominal\"\>"}], ",", 
   RowBox[{"\<\"f7\"\>", "\[Rule]", "\<\"Nominal\"\>"}], ",", 
   RowBox[{"\<\"f8\"\>", "\[Rule]", "\<\"Text\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.822949834514844*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"a10af8bd-29b1-44e3-bc40-323409488426"]
}, Open  ]],

Cell["\<\
\:5728\:6d4b\:8bd5\:96c6\:4e0a\:8fdb\:4e00\:6b65\:68c0\:9a8c\
\>", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.8142874325621767`*^9, 3.814287437712812*^9}, {
   3.8229498482189093`*^9, 
   3.8229498555898128`*^9}},ExpressionUUID->"253c0bea-5a92-47da-8b1d-\
72723522b8da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pmWithF", " ", "=", " ", 
  RowBox[{"PredictorMeasurements", "[", 
   RowBox[{"pWithF", ",", "testing"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.814105215569031*^9, 3.814105220496064*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"0ea7244f-78d7-4d9e-a189-d97b8923675b"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Predictor method"], 
                   TextCell["Predictor method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "GradientBoostedTrees",ExpressionUUID->
                 "21d5d5bf-7d04-4903-83b9-7940c2371b74"],
                TextCell["GradientBoostedTrees"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "98"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Standard deviation"], 
                   TextCell["Standard deviation"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"8.4576077697002833844`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.4886767482753886505`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "7.4802542731495060835`3.", "\", \"", 
                   "9.4349612662510615735`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 7.4802542731495060835`3., 
                   ", ", 9.4349612662510615735`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                    "\"Standard deviation of testset values\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Standard deviation of testset values", 
                    "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"5.9381640228005352355`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3958581497837001528`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "5.1464477232331349299`3.", "\", \"", 
                   "6.7298803223679355412`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 5.1464477232331349299`3., 
                   ", ", 6.7298803223679355412`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["R-squared"], 
                   TextCell["R-squared"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   RowBox[{"-", "1.0285732858904101938`3."}], 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3588281135257704868`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "1.7462295129419511674`3."}], "\", \"", 
                   RowBox[{"-", "0.3109170588388692202`3."}], "\"]\""}, 
                  "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -1.7462295129419511674`3.,
                    ", ", -0.3109170588388692202`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"4.3104104117977888322`3.", 
                   StyleBox[
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0051074216007220841`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "4.3001955685963446641`3.", "\", \"", 
                   "4.3206252549992330003`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 4.3001955685963446641`3., 
                   ", ", 4.3206252549992330003`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.83`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.7`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[{{{}, {
                    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.011000000000000001`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxdlHtMU2cYxg9uVYTOcknIWHaJW8qMQbJyaE97ekqf00LrFi4OTBiK1tXB
ahwKc0osuNWMy+LUxaxhK2ygbkF0pMiqXJxmjowFFKOyCVTHYI10DhYYCbvI
plnJ+c5p2JecP3753vd93tt3Vtt35xU/QlGUPfRFhL5loW//bE1PchmNksUT
ZJBzvvCF+mcMaPCETiIvMbV4wGOmz9aTMGPEtcHFY8Tt8XXfdxUZBP8WE56M
2WmNz9QKXMJh8KZNvUulIfYctitiX/sxQWQWgZifm4+1aIX4l4FsamJtyg2W
cAbUFmpk8gmDYC83Y2+Ou0o1qSMMzMQEfd4mkq/HhF/XrJg4OaAR/CkO7bbh
HdU1apJPSO+a7Mhuj1rwz9JCP7ply+lBmtRLY2LVyA/vUaxgn8Rj6hWT/Jd8
huRrwP3flSuiuglnGWHLVh/RPWQEPZcJZVf8if27dCQecP7xjcorZSyxt+Iv
9vUFSxvJJ6gHWxv7kesk0SvJADvVyw7lkX4mWcDF+o+bDmhBLx5fJlY2vrTt
WbtGYNqE08yUrFUl1psu9UPQs6BxsKDCMckJ9nsyEOgutpV3Eb0gkGBrkH3p
46T6ls8cn0k+mirkXwjcePWE/IFV1Gegj/z36TvTRM/Fo1n9zUi5X036z+DP
DQcb5j4j9jQwvcnZdGkzQ1gPa+3zMaeUDLFnMe78afv+PLG/OuTO+t6X7VWT
+AzS8gPyrRcZqb7cN8wHxmlS32GzlL9gb166L4d5tLrnL2+d4Eg/gQvJtbc0
uQZpXhd8l9Z/kkX2x29aGl/OI6r/7heclcyzkIfXkhSdEG8g9fDQHzqxbuwd
su9BA1ISnYULDrK/LqA1EG+OOKiV3s++1M6jVYks0QPo0edMqspwv8p6GzsP
GUi/9gBjD5Y9VucR+2VExfLZsvlMDdkvDgU71pbzBWlkPuno7/v7uiWSvOcS
HSxx7Z+f09EkvhZjvS9G1dPivQbW+3c6H+VU0jyiv1p90/wxiUenwe2dNta8
Rd6HR4Xf1my+lVIRfl9FmzYuOBTifPQ4+/ZA3odvisyDoVpWdZaKbMS5OPvZ
4TiRDZi13s6e14b93dvqpjbIxfhaOLylbc58kRmp/wKbpH0X5/nuwM57czXi
vREe/8WOl6vJPCgziqvcFmMqK/mvTBhWPrVPJ7G5qK/++rdhPuP0OCIrReaX
7k8o3hJ9Cv/TNyM6/YMmVUQaYR1GMXT1YXeqdM+4qmtzlGL9LJI60k85GJqw
Bn9cHWqPymak+IqM0qGOgMgmNNz9NMffppb6194jo+79E2bxfyawBXN2r7bk
TDje+kpFXTMrMgfFsa+/67KH5/UfIgYpZg==
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.438182444762308`, 23.9}}]},
                    RowBox[{"{", 
                    RowBox[{"19.438182444762308`", ",", "23.9`"}], "}"}]],
                    Annotation[#, {19.438182444762308`, 23.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.123385450269147`, 34.2}}]},
                    RowBox[{"{", 
                    RowBox[{"29.123385450269147`", ",", "34.2`"}], "}"}]],
                    Annotation[#, {29.123385450269147`, 34.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.123385450269147`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"29.123385450269147`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {29.123385450269147`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.930034242517586`, 31.8}}]},
                    RowBox[{"{", 
                    RowBox[{"31.930034242517586`", ",", "31.8`"}], "}"}]],
                    Annotation[#, {31.930034242517586`, 31.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.362179945659456`, 37.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.362179945659456`", ",", "37.3`"}], "}"}]],
                    Annotation[#, {29.362179945659456`, 37.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.269825423849497`, 28.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.269825423849497`", ",", "28.4`"}], "}"}]],
                    Annotation[#, {24.269825423849497`, 28.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.19308789815277, 28.8}}]},
                    RowBox[{"{", 
                    RowBox[{"22.19308789815277`", ",", "28.8`"}], "}"}]],
                    Annotation[#, {22.19308789815277, 28.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.089300398030343`, 26.8}}]},
                    RowBox[{"{", 
                    RowBox[{"22.089300398030343`", ",", "26.8`"}], "}"}]],
                    Annotation[#, {22.089300398030343`, 26.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.65065955395483, 33.5}}]},
                    RowBox[{"{", 
                    RowBox[{"24.65065955395483`", ",", "33.5`"}], "}"}]],
                    Annotation[#, {24.65065955395483, 33.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.813204459846293`, 41.5}}]},
                    RowBox[{"{", 
                    RowBox[{"26.813204459846293`", ",", "41.5`"}], "}"}]],
                    Annotation[#, {26.813204459846293`, 41.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.105069577757792`, 38.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.105069577757792`", ",", "38.1`"}], "}"}]],
                    Annotation[#, {29.105069577757792`, 38.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.895286356170306`, 32.1}}]},
                    RowBox[{"{", 
                    RowBox[{"25.895286356170306`", ",", "32.1`"}], "}"}]],
                    Annotation[#, {25.895286356170306`, 32.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 37.2}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "37.2`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 37.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.787641526935577`, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.787641526935577`", ",", "28.`"}], "}"}]],
                    Annotation[#, {22.787641526935577`, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.521551718556733`, 26.4}}]},
                    RowBox[{"{", 
                    RowBox[{"21.521551718556733`", ",", "26.4`"}], "}"}]],
                    Annotation[#, {21.521551718556733`, 26.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.599358381192253`, 24.3}}]},
                    RowBox[{"{", 
                    RowBox[{"21.599358381192253`", ",", "24.3`"}], "}"}]],
                    Annotation[#, {21.599358381192253`, 24.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.799459300433437`, 19.1}}]},
                    RowBox[{"{", 
                    RowBox[{"19.799459300433437`", ",", "19.1`"}], "}"}]],
                    Annotation[#, {19.799459300433437`, 19.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.00208788156931, 34.3}}]},
                    RowBox[{"{", 
                    RowBox[{"26.00208788156931`", ",", "34.3`"}], "}"}]],
                    Annotation[#, {26.00208788156931, 34.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.327744260976864`, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.327744260976864`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {23.327744260976864`, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.718903013957036`, 31.3}}]},
                    RowBox[{"{", 
                    RowBox[{"23.718903013957036`", ",", "31.3`"}], "}"}]],
                    Annotation[#, {23.718903013957036`, 31.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.99306566764187, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.99306566764187`", ",", "37.`"}], "}"}]],
                    Annotation[#, {23.99306566764187, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.432740798636985`, 32.2}}]},
                    RowBox[{"{", 
                    RowBox[{"25.432740798636985`", ",", "32.2`"}], "}"}]],
                    Annotation[#, {25.432740798636985`, 32.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.440584500342727`, 46.6}}]},
                    RowBox[{"{", 
                    RowBox[{"26.440584500342727`", ",", "46.6`"}], "}"}]],
                    Annotation[#, {26.440584500342727`, 46.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.672958040430753`, 27.9}}]},
                    RowBox[{"{", 
                    RowBox[{"21.672958040430753`", ",", "27.9`"}], "}"}]],
                    Annotation[#, {21.672958040430753`, 27.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.63477462938156, 40.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.63477462938156`", ",", "40.8`"}], "}"}]],
                    Annotation[#, {26.63477462938156, 40.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.323520348154695`, 44.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.323520348154695`", ",", "44.3`"}], "}"}]],
                    Annotation[#, {29.323520348154695`, 44.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.489297917361213`, 43.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.489297917361213`", ",", "43.4`"}], "}"}]],
                    Annotation[#, {24.489297917361213`, 43.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.383337038244495`, 36.4}}]},
                    RowBox[{"{", 
                    RowBox[{"22.383337038244495`", ",", "36.4`"}], "}"}]],
                    Annotation[#, {22.383337038244495`, 36.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.193970079118717`, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.193970079118717`", ",", "30.`"}], "}"}]],
                    Annotation[#, {22.193970079118717`, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 44.6}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "44.6`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 44.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.896125277457582`, 40.9}}]},
                    RowBox[{"{", 
                    RowBox[{"28.896125277457582`", ",", "40.9`"}], "}"}]],
                    Annotation[#, {28.896125277457582`, 40.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.71657367928936, 33.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.71657367928936`", ",", "33.8`"}], "}"}]],
                    Annotation[#, {26.71657367928936, 33.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.701935148418748`, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"28.701935148418748`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {28.701935148418748`, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.55537311009359, 32.7}}]},
                    RowBox[{"{", 
                    RowBox[{"18.55537311009359`", ",", "32.7`"}], "}"}]],
                    Annotation[#, {18.55537311009359, 32.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.281204976463243`, 23.7}}]},
                    RowBox[{"{", 
                    RowBox[{"24.281204976463243`", ",", "23.7`"}], "}"}]],
                    Annotation[#, {24.281204976463243`, 23.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.92131227162484, 35.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.92131227162484`", ",", "35.`"}], "}"}]],
                    Annotation[#, {22.92131227162484, 35.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.84939335314777, 23.6}}]},
                    RowBox[{"{", 
                    RowBox[{"21.84939335314777`", ",", "23.6`"}], "}"}]],
                    Annotation[#, {21.84939335314777, 23.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.640405327388144`, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.640405327388144`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {24.640405327388144`, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.358362107154715`, 27.2}}]},
                    RowBox[{"{", 
                    RowBox[{"23.358362107154715`", ",", "27.2`"}], "}"}]],
                    Annotation[#, {23.358362107154715`, 27.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.147080430650274`, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"23.147080430650274`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {23.147080430650274`, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.32216476613655, 25.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.32216476613655`", ",", "25.8`"}], "}"}]],
                    Annotation[#, {23.32216476613655, 25.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.45711587088527, 23.5}}]},
                    RowBox[{"{", 
                    RowBox[{"21.45711587088527`", ",", "23.5`"}], "}"}]],
                    Annotation[#, {21.45711587088527, 23.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.73581009412301, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.73581009412301`", ",", "30.`"}], "}"}]],
                    Annotation[#, {23.73581009412301, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.202628926239694`, 39.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.202628926239694`", ",", "39.1`"}], "}"}]],
                    Annotation[#, {29.202628926239694`, 39.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.701935148418748`, 39.}}]},
                    RowBox[{"{", 
                    RowBox[{"28.701935148418748`", ",", "39.`"}], "}"}]],
                    Annotation[#, {28.701935148418748`, 39.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.105069577757792`, 35.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.105069577757792`", ",", "35.1`"}], "}"}]],
                    Annotation[#, {29.105069577757792`, 35.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.87644582720955, 32.3}}]},
                    RowBox[{"{", 
                    RowBox[{"28.87644582720955`", ",", "32.3`"}], "}"}]],
                    Annotation[#, {28.87644582720955, 32.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.309430451638697`, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.309430451638697`", ",", "37.`"}], "}"}]],
                    Annotation[#, {29.309430451638697`, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.299259706796626`, 37.7}}]},
                    RowBox[{"{", 
                    RowBox[{"29.299259706796626`", ",", "37.7`"}], "}"}]],
                    Annotation[#, {29.299259706796626`, 37.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.202628926239694`, 34.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.202628926239694`", ",", "34.1`"}], "}"}]],
                    Annotation[#, {29.202628926239694`, 34.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.278269523005328`, 34.7}}]},
                    RowBox[{"{", 
                    RowBox[{"25.278269523005328`", ",", "34.7`"}], "}"}]],
                    Annotation[#, {25.278269523005328`, 34.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.074555107922315`, 34.4}}]},
                    RowBox[{"{", 
                    RowBox[{"29.074555107922315`", ",", "34.4`"}], "}"}]],
                    Annotation[#, {29.074555107922315`, 34.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.49946866220328, 29.9}}]},
                    RowBox[{"{", 
                    RowBox[{"24.49946866220328`", ",", "29.9`"}], "}"}]],
                    Annotation[#, {24.49946866220328, 29.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.41007003050725, 33.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.41007003050725`", ",", "33.`"}], "}"}]],
                    Annotation[#, {26.41007003050725, 33.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.503925506930187`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"24.503925506930187`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {24.503925506930187`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.09955684612438, 33.7}}]},
                    RowBox[{"{", 
                    RowBox[{"26.09955684612438`", ",", "33.7`"}], "}"}]],
                    Annotation[#, {26.09955684612438, 33.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.481220372916322`, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.481220372916322`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {24.481220372916322`, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.240397847201564`, 32.9}}]},
                    RowBox[{"{", 
                    RowBox[{"23.240397847201564`", ",", "32.9`"}], "}"}]],
                    Annotation[#, {23.240397847201564`, 32.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.599716962080368`, 31.6}}]},
                    RowBox[{"{", 
                    RowBox[{"23.599716962080368`", ",", "31.6`"}], "}"}]],
                    Annotation[#, {23.599716962080368`, 31.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.27326112590387, 28.1}}]},
                    RowBox[{"{", 
                    RowBox[{"22.27326112590387`", ",", "28.1`"}], "}"}]],
                    Annotation[#, {22.27326112590387, 28.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.340842316488615`, 30.7}}]},
                    RowBox[{"{", 
                    RowBox[{"20.340842316488615`", ",", "30.7`"}], "}"}]],
                    Annotation[#, {20.340842316488615`, 30.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.032330511317724`, 25.4}}]},
                    RowBox[{"{", 
                    RowBox[{"19.032330511317724`", ",", "25.4`"}], "}"}]],
                    Annotation[#, {19.032330511317724`, 25.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.225412647954975`, 24.2}}]},
                    RowBox[{"{", 
                    RowBox[{"19.225412647954975`", ",", "24.2`"}], "}"}]],
                    Annotation[#, {19.225412647954975`, 24.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.201508181579687`, 22.4}}]},
                    RowBox[{"{", 
                    RowBox[{"19.201508181579687`", ",", "22.4`"}], "}"}]],
                    Annotation[#, {19.201508181579687`, 22.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{17.234446934418227`, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"17.234446934418227`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {17.234446934418227`, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.59478480409147, 20.2}}]},
                    RowBox[{"{", 
                    RowBox[{"20.59478480409147`", ",", "20.2`"}], "}"}]],
                    Annotation[#, {20.59478480409147, 20.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.455158228911912`, 17.6}}]},
                    RowBox[{"{", 
                    RowBox[{"19.455158228911912`", ",", "17.6`"}], "}"}]],
                    Annotation[#, {19.455158228911912`, 17.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.46555837131102, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.46555837131102`", ",", "28.`"}], "}"}]],
                    Annotation[#, {22.46555837131102, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.06019558486365, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.06019558486365`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.06019558486365, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.44756047648724, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.44756047648724`", ",", "34.`"}], "}"}]],
                    Annotation[#, {23.44756047648724, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.428559222724484`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.428559222724484`", ",", "31.`"}], "}"}]],
                    Annotation[#, {23.428559222724484`, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.07358839411127, 29.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.07358839411127`", ",", "29.`"}], "}"}]],
                    Annotation[#, {23.07358839411127, 29.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.2224777849114, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.2224777849114`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.2224777849114, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.04810968213185, 24.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.04810968213185`", ",", "24.`"}], "}"}]],
                    Annotation[#, {22.04810968213185, 24.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.326090599801688`, 23.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.326090599801688`", ",", "23.`"}], "}"}]],
                    Annotation[#, {22.326090599801688`, 23.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.074555107922315`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.074555107922315`", ",", "36.`"}], "}"}]],
                    Annotation[#, {29.074555107922315`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "37.`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.523222471537803`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.523222471537803`", ",", "31.`"}], "}"}]],
                    Annotation[#, {29.523222471537803`, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.516871555906253`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.516871555906253`", ",", "38.`"}], "}"}]],
                    Annotation[#, {26.516871555906253`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.196278010608143`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.196278010608143`", ",", "36.`"}], "}"}]],
                    Annotation[#, {26.196278010608143`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.461382260100468`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.461382260100468`", ",", "36.`"}], "}"}]],
                    Annotation[#, {25.461382260100468`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.768792555984202`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.768792555984202`", ",", "36.`"}], "}"}]],
                    Annotation[#, {25.768792555984202`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.480597054930207`, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.480597054930207`", ",", "34.`"}], "}"}]],
                    Annotation[#, {25.480597054930207`, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.309430451638697`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.309430451638697`", ",", "38.`"}], "}"}]],
                    Annotation[#, {29.309430451638697`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "32.`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.523222471537803`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.523222471537803`", ",", "38.`"}], "}"}]],
                    Annotation[#, {29.523222471537803`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.004663381549147`, 25.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.004663381549147`", ",", "25.`"}], "}"}]],
                    Annotation[#, {20.004663381549147`, 25.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.722637881118175`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"18.722637881118175`", ",", "38.`"}], "}"}]],
                    Annotation[#, {18.722637881118175`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.14572945341953, 26.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.14572945341953`", ",", "26.`"}], "}"}]],
                    Annotation[#, {23.14572945341953, 26.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.216440632634793`, 22.}}]},
                    RowBox[{"{", 
                    RowBox[{"19.216440632634793`", ",", "22.`"}], "}"}]],
                    Annotation[#, {19.216440632634793`, 22.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.300944317783394`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.300944317783394`", ",", "32.`"}], "}"}]],
                    Annotation[#, {23.300944317783394`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.885525848079904`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.885525848079904`", ",", "36.`"}], "}"}]],
                    Annotation[#, {23.885525848079904`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.675190843151178`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"21.675190843151178`", ",", "27.`"}], "}"}]],
                    Annotation[#, {21.675190843151178`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.98400879039553, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"21.98400879039553`", ",", "27.`"}], "}"}]],
                    Annotation[#, {21.98400879039553, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.00208788156931, 44.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.00208788156931`", ",", "44.`"}], "}"}]],
                    Annotation[#, {26.00208788156931, 44.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.665622274947, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.665622274947`", ",", "32.`"}], "}"}]],
                    Annotation[#, {23.665622274947, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.228996697692565`, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.228996697692565`", ",", "28.`"}], "}"}]],
                    Annotation[#, {23.228996697692565`, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.385616704720686`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.385616704720686`", ",", "31.`"}], "}"}]],
                    
                    Annotation[#, {23.385616704720686`, 31.}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                    TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxWswEwAcAPBROo8Zk0hqxa4Ut2yKeUTzaJyMQi8Xd3MN43byiijncuVx
dnV0HC1O8qgrrdvZpHWn3eE89mFnx8lJM22dzrHYuDOt+tD//+F3P6/M/GSe
NYFA4Pz1b/vtIEFsrT/r/1Vb/fqbQtxkOpFZ2IhrjW7Xnotw+YaJtSHGBWtS
1445PKfIM6PiAB2eyn1mM52Fz+qdyxnuDHjIIVi7+BFvpSZfTkkPgOXjmuUS
4hlY5kYV/HiHGw1zh+y5Z2H/z9XKdVIgHMlcLPZ5j7eEiSMduUHwiC5gT7QN
E1572Dce3oOnS5oG9KnBcFcNvVmzhdNWokT1fSGwhBXXu30lFCZHWHqkW7hk
3G+K2hsG08x2um/x5+Cf8vTjHDPeXfCSX/k6HGYqRS8sCREwUWZvRd/Fh2J9
U8Wd52FGFmWm3IsF9+YvuRrL8LoEC6dlAheuz3iQqZHwY9LJnNW7+K5FJTZM
4MLBoAaldxRcF7PJVRXj1fF+Q8wRvMP9SHfJ4WjYZzC7fl6Aq44KrD1GcX3a
ZHHlwRh4x6mLz+bjjIZAw/dhfHr+WNFblwtwy6/RmoQ8/Ea1jpKowGv0GeLS
/Wx41qVRXZaHN5EpG52fcE499SmNFAufmtCOPeHhBQtmo6cMvzU8R64dxK92
SWmbH/BQ/m3elBzfa9Sq7ynwZuKkZEGJy8NaCzqW8X7KHaGDDu+0SnlVqscf
jRE1SSt4UkrVJcI6vpSb7c/dwdWcmItKMz5G98oO+Y2/MX1pJ1vFwSUPEkmK
fXgOz8/3tC2eFmfLbrPDI0iK+4VEnG5ob/3qiFPVFQPxTrib7LpK6ozbtgWu
ervgfwDrcyIb
                    "]]},
                    Annotation[#, "Charting`Private`Tag$114415#1"]& ]}, {}}},
                 Axes->{False, False},
                 AxesLabel->{None, None},
                 AxesOrigin->{15.766169281139138`, 15.766169281139138`},
                 DisplayFunction->Identity,
                 Frame->{{True, False}, {True, False}},
                 FrameLabel->{{
                    FormBox["\"actual value\"", TraditionalForm], None}, {
                    FormBox["\"predicted value\"", TraditionalForm], None}},
                 FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
                 GridLines->{Automatic, Automatic},
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.5], 
                   AbsoluteThickness[1], 
                   AbsoluteDashing[{1, 2}]],
                 ImageSize->250,
                 
                 Method->{
                  "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                   True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                 
                 PlotRange->{{15.766169281139138`, 48.141691535943046`}, {
                  15.766169281139138`, 48.141691535943046`}},
                 PlotRangeClipping->True,
                 PlotRangePadding->{{0, 0}, {0, 0}},
                 Ticks->{Automatic, Automatic}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  PredictorMeasurementsObject[
   Association["Model" -> PredictorFunction[
      Association[
      "ExampleNumber" -> 300, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal"], "f2" -> 
              Association["Type" -> "Numerical"], "f3" -> 
              Association["Type" -> "Numerical"], "f4" -> 
              Association["Type" -> "Numerical"], "f5" -> 
              Association["Type" -> "Numerical"], "f6" -> 
              Association["Type" -> "Nominal"], "f7" -> 
              Association["Type" -> "Nominal"], "f8" -> 
              Association["Type" -> "Text"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Text", "Weight" -> 1]], "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 8]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Nominal", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Nominal", "Nominal", "Text"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
            Association[
             "(f1f6f7)" -> 
              Association["Type" -> "NominalVector", "Weight" -> 3], 
              "(f8(f2f3f4f5))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
                 "], "Type" -> "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f2f3f4f5)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 4], 
                  "(f1f6f7)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f2" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f2f3f4f5)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                    "Version" -> {12.2, 0}, "ID" -> 2755195742605412028]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                    "f6" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                    "f7" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f6f7)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Version" -> {12.2, 0}, "ID" -> 6934654164466035284]]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
                  "(f1f6f7)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3], 
                  "(f2f3f4f5)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                "Output" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1], 
                  "(f1f6f7)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3], 
                  "(f2f3f4f5)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {12.2, 0}, "ID" -> 
                    4678014907749892316]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f6f7)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "VectorLength" -> 3, "Output" -> 
                    Association[
                    "(f1f6f7)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Type" -> "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                    7351931382004160556]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f2f3f4f5)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 300, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {214.705, 111.98993288590604`, 3133., 
                    15.262333333333336`}, "Method" -> "Naive", "VectorLength" -> 
                    4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {214.705, 111.98993288590604`, 3133., 
                    15.262333333333322`}, 
                    "StandardDeviation" -> {108.9054198605377, 
                    40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{-0.5306709807604901, 
                    0.25230863508782236`}, {-0.5351249422563389, \
-0.03321775270110001}, {-0.5074118227833019, 0.4680021859993132}, {
                    0.41780719052402193`, 0.8462924361386394}}, "Processor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {214.705, 111.98993288590604`, 3133., 
                    15.262333333333322`}, 
                    "StandardDeviation" -> {108.9054198605377, 
                    40.12135631633348, 882.9886446985981, 
                    2.7367281966286785`}, "Output" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 
                    1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0123118, "MaxTrainingMemory" -> 
                    175616, "DataMemory" -> 43408, "FunctionMemory" -> 21888, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 2, 21, 20, 30, 31.1574563`9.246136899179366}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 4, "Output" -> 
                    Association[
                    "(f2f3f4f5)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                    "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                    5572308242481007021]]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f2f3f4f5)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                "Mean" -> {214.705, 111.75981830454292`, 3133., 
                 15.262333333333322`}, 
                "StandardDeviation" -> {108.9054198605377, 40.25014047607277, 
                 882.9886446985981, 2.7367281966286785`}, "Output" -> 
                Association[
                 "(f2f3f4f5)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                "Version" -> {12.2, 0}, "ID" -> 5352178567683931546]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 4900972772377279668, "Output" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 7285476586811196156, "Output" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["TextToNominalSequence", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Tokens" -> {{
                  " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                   "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{",
                    "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                  ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                   ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                  "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                "Version" -> {12.2, 0}, "ID" -> 1577059603555340345, "Output" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                MachineLearning`SortedHashAssociation[
                  Association["KeyHashes" -> CompressedData["
1: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
                    "], "Values" -> None, "DefaultValue" -> -1, 
                   "HashFunction" -> 
                   Function[{
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12.2, 0}]], 
                "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGDgBxIx7ItmSbsKOuz4p2ex0YTF4cbUhKg1F8TgtMLyvX8q
nJkdREO37t6YLQQXh+mD8Wf5Nf56zCXi0G2Uemd2ggBcPUwc3Vx0eXQ+zHwY
H51GN6/13/JYeQE+DPegqyOWhvkDXRyXe9H9jx5OxLpnvfSa7Ze8+XHaT4iG
uIsJbh96uMTP7+8MkeHEsA/dfbj4uPwBEz/48dhW0WJ2h4mPi6udvrOT7H70
cEQPb/T0RWp8oqcvdHWzr3H/XGbKjdNduPTBwplQ+MDCG+Z+Yv1ByF5c+Qtd
H658S2w+Q0/3L1ObbZ88wyw3CKUjQukKnQ8LN3TzbRtaS5f948EZPrjM4yx4
ObevhQOnP2HmovsbF5+8fCqEQcP8gct8XOUCuv9RzWUimC5v7ln7XS8q2579
rupBo9L/9jD51+YbE//pMxKdPtHjCT194vIXrvhFT2/o8UJsPsFlPro9uOoR
QvkCl3uJTY/o7iO2XEavX2DlO7npFWYeoXQIs++xwMWThycwE13vwtwHALj8
4gE=
                 "], "Version" -> {12.2, 0}, "ID" -> 2494702381911828557, 
                "Output" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f6f7)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]], 
                "Index" -> {
                  Association[3 -> 1, 4 -> 2, 5 -> 3, 6 -> 4, 8 -> 5], 
                  Association[
                  70 -> 1, 71 -> 2, 72 -> 3, 73 -> 4, 74 -> 5, 75 -> 6, 76 -> 
                   7, 77 -> 8, 78 -> 9, 79 -> 10], 
                  Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
                "Version" -> {12.2, 0}, "ID" -> 2619506389077579970, "Output" -> 
                Association[
                 "(f1f6f7)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f8" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "(f2f3f4f5)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 4]], 
                "Spans" -> {
                  Span[1, 271], 
                  Span[272, 275]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f8(f2f3f4f5))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0},
                 "ID" -> 706551971336912087]]}, "Invertibility" -> 
            "Impossible", "StructurePreserving" -> True, "Missing" -> 
            "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Numerical"]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 1916512723103570139]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {20.799}, 
                "StandardDeviation" -> {6.274889029563264}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 2901205138368446714]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Version" -> {12.2, 0}, "ID" -> 2965090389962885354]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "Key" -> "f1", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (20.799 + 6.274889029563264 #& ), 
         "ProcessorFunction" -> (-3.314640291168245 + 
          0.15936536810270902` #& ), "Name" -> "value", 
         "Quantiles" -> {-1.8803519782438636`, 3.554007074058514}], 
       "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
         Association[
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
       Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
       "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 286, 284, 6, 286, 285, 286, 
               206}], "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.7065409123897552, -0.9608926475048065, 0.24158983677625656`, 
              0.25817278772592545`, 
              1.3851943016052246`, -0.36325328052043915`, 0.647684782743454, 
              0.0012387987226247787`}, "LeafValues" -> 
             RawArray["Real32",{0.07130782306194305, 0.0006618510233238339, 
               0.039143990725278854`, -0.04219968616962433, 
               0.02300974540412426, -0.01666768454015255, 
               0.008928383700549603, -0.04892336577177048, \
-0.009991917759180069, -0.02699567936360836, -0.03337171673774719}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {8, 
               9}, {-5, -7}, {10, -8}, {-2, -9}, {-6, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 286, 284, 6, 286, 206, 285, 
               286, 10}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.7065409123897552, -0.9608926475048065, 0.31597021222114563`, 
              0.25817278772592545`, 1.4955399632453918`, 
              0.0010977291967719793`, -0.36325328052043915`, 
              0.647684782743454, -0.4969720095396042}, "LeafValues" -> 
             RawArray["Real32",{0.06728283315896988, -0.0015154173597693443`, 
               0.03640555590391159, -0.043574072420597076`, 
               0.020916679874062538`, -0.017528079450130463`, 
               0.007398572750389576, -0.049771375954151154`, \
-0.03204888477921486, -0.010766616091132164`, -0.027088526636362076`, \
-0.03682376816868782}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {9, 
               10}, {-5, -7}, {8, -8}, {-4, 
               11}, {-2, -10}, {-6, -11}, {-9, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 286, 284, 6, 286, 286, 286, 
               206}], "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.7065409123897552, -0.9608926475048065, 0.1601264476776123, 
              0.25817278772592545`, 1.3851943016052246`, -0.03439049515873194,
               0.647684782743454, 0.0012387987226247787`}, "LeafValues" -> 
             RawArray["Real32",{0.06459151953458786, 0.0016034747241064906`, 
               0.03494933247566223, -0.04004329815506935, 
               0.02008001320064068, -0.015651972964406013`, 
               0.007102630101144314, -0.04624462500214577, \
-0.010756786912679672`, -0.026004986837506294`, -0.03182791918516159}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {8, 
               9}, {-5, -7}, {10, -8}, {-2, -9}, {-6, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 286, 284, 9, 286, 8, 285, 5, 
               206, 2}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.7065409123897552, -0.9608926475048065, 0.24158983677625656`, 
              0.10854299366474152`, 
              1.4955399632453918`, -0.09138473868370056, \
-0.36325328052043915`, 0.2680231034755707, 
              0.0010977291967719793`, -0.23376770317554474`}, "LeafValues" -> 
             RawArray["Real32",{0.06200785934925079, -0.0004172183107584715, 
               0.03355136141180992, -0.04016736522316933, 
               0.016847137361764908`, -0.025139259174466133`, 
               0.023528775200247765`, -0.045930735766887665`, 
               0.0029260546434670687`, -0.009918665513396263, \
-0.01576114445924759, -0.0340181328356266, -0.029366953298449516`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {9, 
               10}, {8, -7}, {11, -8}, {-5, -9}, {-2, -10}, {-6, -11}, {-4, 
               12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 286, 284, 9, 286, 6, 286, 286,
                206, 10}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.0523850321769714`, 
              0.7065409123897552, -1.1830604672431946`, 0.1601264476776123, 
              0.10854299366474152`, 1.4955399632453918`, 
              0.25817278772592545`, -0.03439049515873194, 0.647684782743454, 
              0.0010977291967719793`, -0.4969720095396042}, "LeafValues" -> 
             RawArray["Real32",{0.05952754616737366, 0.0016320360591635108`, 
               0.016751479357481003`, -0.03856067359447479, 
               0.036954425275325775`, -0.0143195278942585, 
               0.026184752583503723`, -0.04409350827336311, 
               0.004234560299664736, -0.010024783201515675`, \
-0.024184290319681168`, -0.028148816898465157`, -0.03270086646080017}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 6}, {5, 7}, {-1, -5}, {9, 
               10}, {8, -7}, {11, -8}, {-3, -9}, {-2, -10}, {-6, -11}, {-4, 
               12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 285, 286, 9, 284, 285, 286, 6, 
               8}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.4231622815132141, -0.9608926475048065, 
              0.10854299366474152`, 0.1601264476776123, -0.41093386709690094`,
               1.4955399632453918`, 0.3196902573108673, -0.09138400852680206},
              "LeafValues" -> 
             RawArray["Real32",{0.05714644491672516, 0.00487247109413147, 
               0.031122542917728424`, -0.030011039227247238`, 
               0.01816178858280182, -0.01868937350809574, \
-0.014797979965806007`, -0.008240296505391598, -0.04294357821345329, 
               0.008965933695435524, -0.037085261195898056`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 5}, {-3, 9}, {
               8, -6}, {7, -7}, {-2, -8}, {10, -9}, {-5, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 284, 284, 9, 285, 6, 286, 2, 
               5, 8}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.0523850321769714`, 
              0.7065409123897552, -1.133621633052826, 0.31597021222114563`, 
              0.10854299366474152`, 1.1039468050003052`, 0.25817278772592545`,
               1.440826177597046, 0.4229576140642166, 
              0.2680231034755707, -0.09138400852680206}, "LeafValues" -> 
             RawArray["Real32",{0.059145066887140274`, -0.0007039817865006626,
                0.015378274954855442`, -0.025526484474539757`, 
               0.03922683373093605, -0.022638503462076187`, 
               0.024594364687800407`, -0.0335254892706871, 
               0.0035710055381059647`, -0.04312201589345932, \
-0.009261640720069408, -0.01386964786797762, -0.031715963035821915`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 6}, {5, 7}, {-1, -5}, {10, 
               11}, {8, -7}, {12, 
               9}, {-3, -9}, {-8, -10}, {-2, -11}, {-6, -12}, {-4, -13}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 285, 284, 9, 5, 285, 286, 12, 
               8}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.4231622815132141, -0.9497449100017548, 
              0.10854299366474152`, 0.6700158715248108, 
              1.6968544721603394`, -0.03439049515873194, 
              0.24446164816617966`, -0.09138400852680206}, "LeafValues" -> 
             RawArray["Real32",{0.05279698967933655, -0.004781960975378752, 
               0.029056211933493614`, -0.02735268510878086, 
               0.01751549169421196, -0.017080014571547508`, 
               0.002078095218166709, -0.04016498476266861, \
-0.014440737664699554`, 0.007967147044837475, -0.03492142632603645}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 5}, {-3, 9}, {
               7, -6}, {8, -7}, {10, -8}, {-2, -9}, {-5, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 286, 286, 284, 285, 285, 286, 7, 
               6}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.5959504842758179, -0.9608926475048065, 
              0.1601264476776123, 0.9432089030742645, -0.37488171458244324`, 
              1.440826177597046, -0.01675202138721943, 0.3196902573108673}, 
             "LeafValues" -> 
             RawArray["Real32",{0.05068511143326759, 0.004858496133238077, 
               0.02775195986032486, -0.022471647709608078`, 
               0.01618117094039917, -0.019198114052414894`, \
-0.0299861840903759, -0.007087133824825287, -0.0393703430891037, \
-0.009014715440571308, 0.007577721495181322}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 10}, {7, 
               9}, {-4, 8}, {-2, -8}, {-7, -9}, {-6, -10}, {-5, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 284, 9, 286, 6, 285, 284, 6, 
               284}], "NumericalThresholds" -> {
              0.25391924381256104`, -1.0523850321769714`, 
              0.7065409123897552, -1.133621633052826, 0.10854299366474152`, 
              0.6699828505516052, 0.25817278772592545`, 1.6968544721603394`, 
              0.1601264476776123, -0.15354223549365997`, 1.2466367483139038`},
              "LeafValues" -> 
             RawArray["Real32",{0.0527382418513298, -0.002565630478784442, 
               0.013535027392208576`, -0.023093562573194504`, 
               0.03460090234875679, 
               0.022587891668081284`, -0.020358432084321976`, 
               0.0023875823244452477`, -0.037198226898908615`, \
-0.011613314971327782`, -0.02620788663625717, -0.03354761749505997}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 5}, {6, 8}, {-1, -5}, {
               7, -6}, {9, -7}, {-3, -8}, {10, -9}, {-2, -10}, {-4, 
               11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 285, 284, 9, 5, 285, 286, 12, 
               8}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.4231622815132141, -0.9497449100017548, 
              0.10854299366474152`, 0.6700158715248108, 
              1.6968544721603394`, -0.03439049515873194, 
              0.24446164816617966`, -0.09138400852680206}, "LeafValues" -> 
             RawArray["Real32",{0.04682336375117302, -0.004289638716727495, 
               0.02598896250128746, -0.024181386455893517`, 
               0.01555592194199562, -0.014603855088353157`, 
               0.002063730964437127, -0.03571029752492905, \
-0.012976149097084999`, 0.006704941391944885, -0.03128529340028763}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 5}, {-3, 9}, {
               7, -6}, {8, -7}, {10, -8}, {-2, -9}, {-5, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 286, 286, 5, 285, 7, 286, 287, 
               7}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.5959504842758179, -0.9608926475048065, 
              0.6700158715248108, 0.9432089030742645, -0.016751891002058983`, 
              1.440826177597046, 0.2648470997810364, 0.15563595294952393`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.04495042935013771, -0.015806708484888077`, 
               0.024757077917456627`, -0.019908031448721886`, 
               0.01430832501500845, 
               0.003652118379250169, -0.02644599787890911, \
-0.0022529270499944687`, -0.035228025168180466`, 
               0.006050319876521826, -0.008092383854091167}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 9}, {
               7, -6}, {-4, 8}, {-2, 10}, {-7, -9}, {-5, -10}, {-8, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 9, 9, 286, 6, 286, 284, 206}],
              "NumericalThresholds" -> {
              0.25391924381256104`, -1.0523850321769714`, 0.7065409123897552, 
              0.0766388289630413, 0.10854299366474152`, 0.6699828505516052, 
              0.25817278772592545`, 1.3851943016052246`, 0.1601264476776123, 
              0.0012387987226247787`}, "LeafValues" -> 
             RawArray["Real32",{0.03163886070251465, -0.002152624074369669, 
               0.011960119009017944`, -0.027432193979620934`, 
               0.049251314252614975`, 
               0.020726215094327927`, -0.018094340339303017`, 
               0.0013522329973056912`, -0.03136822581291199, \
-0.01039862260222435, -0.020293736830353737`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 5}, {6, 8}, {-1, -5}, {
               7, -6}, {9, -7}, {-3, -8}, {10, -9}, {-2, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 286, 284, 5, 285, 7, 286, 12, 
               6}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.5959504842758179, -0.9497449100017548, 
              0.6700158715248108, 0.9432089030742645, -0.01675202138721943, 
              1.440826177597046, 0.24446164816617966`, 0.33590804040431976`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.04164392873644829, -0.014993064105510712`, 
               0.023155899718403816`, -0.018267091363668442`, 
               0.013740547001361847`, 
               0.0033998077269643545`, -0.0244168471544981, \
-0.002123321406543255, -0.032564178109169006`, 
               0.005664869677275419, -0.007610728032886982}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 9}, {
               7, -6}, {-4, 8}, {-2, 10}, {-7, -9}, {-5, -10}, {-8, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 285, 9, 284, 6, 7, 285, 12, 8}], 
             "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.0014353522274177521`, 
              0.14249727129936218`, -0.9497449100017548, \
-0.22340591996908188`, -0.016751746647059917`, 1.6968544721603394`, 
              0.24446164816617966`, -0.09138400852680206}, "LeafValues" -> 
             RawArray["Real32",{0.03997816890478134, 0.0036358472425490618`, 
               0.022229664027690887`, -0.020453160628676414`, \
-0.007960285991430283, 
               0.013190925121307373`, -0.012793679721653461`, \
-0.0038950114976614714`, -0.0308266319334507, 
               0.0054382747039198875`, -0.026373350992798805`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {8, -5}, {-3, 
               9}, {-2, 7}, {-7, -8}, {10, -9}, {-6, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 9, 9, 286, 6, 284, 286, 9, 
               206, 10}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.0523850321769714`, 0.7065409123897552, 
              0.0766388289630413, 0.10854299366474152`, 0.3368961960077286, 
              0.25817278772592545`, 0.1601264476776123, 
              1.4955399632453918`, -0.025604428723454475`, 
              0.0010977291967719793`, -0.4969720095396042}, "LeafValues" -> 
             RawArray["Real32",{
               0.027659142389893532`, -0.00018542101315688342`, 
               0.010548354126513004`, -0.02551938220858574, 
               0.044499531388282776`, 
               0.01905563287436962, -0.017391525208950043`, 
               0.0004614648933056742, -0.009191598743200302, \
-0.028954174369573593`, -0.008725822903215885, -0.016768386587500572`, \
-0.02080516517162323}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 5}, {6, 9}, {-1, -5}, {
               7, -6}, {8, 10}, {-3, -8}, {-2, -9}, {11, -10}, {-7, -11}, {-4,
                12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 286, 286, 285, 9, 8, 284, 5, 6, 
               2}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 
              0.5959504842758179, -0.9608926475048065, -0.018267418490722775`,
               0.07663994655013084, -0.1474270075559616, \
-0.13446780294179916`, 0.6475160419940948, 0.3196902573108673, 
              0.4229576140642166}, "LeafValues" -> 
             RawArray["Real32",{0.03704039752483368, 0.003147299401462078, 
               0.02031709998846054, -0.018310271203517914`, 
               0.012082096189260483`, -0.0138338478282094, \
-0.01381464209407568, -0.030505433678627014`, -0.002441376680508256, \
-0.022315464913845062`, 0.004402873571962118, -0.00936794001609087}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 10}, {
               8, -6}, {7, -7}, {-4, 9}, {-2, 
               11}, {-8, -10}, {-5, -11}, {-9, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 286, 284, 5, 285, 7, 286, 1, 6}],
              "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, 0.5959504842758179, -0.9497449100017548, 
              0.6700158715248108, 0.9432089030742645, -0.01675202138721943, 
              1.440826177597046, 0.6105588376522064, 0.33590804040431976`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.035558778792619705`, -0.013067817315459251`,
                0.019781893119215965`, -0.01548041868954897, 
               0.003831510664895177, 
               0.0031631358433514833`, -0.020678654313087463`, \
-0.001461327658034861, -0.02808806486427784, 
               0.011297916993498802`, -0.00655968626961112}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-3, 9}, {
               7, -6}, {-4, 8}, {-2, 10}, {-7, -9}, {-5, -10}, {-8, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 285, 9, 286, 6, 286, 285, 287, 
               8}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.0014353522274177521`, 
              0.14249727129936218`, -0.9608926475048065, \
-0.20733126252889633`, 0.18048234283924103`, 1.6968544721603394`, 
              0.2648470997810364, -0.09138400852680206}, "LeafValues" -> 
             RawArray["Real32",{0.03413642942905426, 0.002729394705966115, 
               0.018870506435632706`, -0.017293382436037064`, \
-0.006212863139808178, 
               0.011035427451133728`, -0.0029173200018703938`, \
-0.011680861935019493`, -0.02656896598637104, 
               0.003523904364556074, -0.022794248536229134`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {8, -5}, {-3, 
               9}, {-2, 7}, {-7, -8}, {10, -9}, {-6, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 285, 284, 12, 8, 286, 286, 
               206, 5}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.7065409123897552, -0.7209027409553528, 
              0.16575540602207184`, -0.7552154362201691, -0.09138473868370056,
               1.5267543196678162`, -0.03439049515873194, 
              0.0012387987226247787`, 0.2680231034755707}, "LeafValues" -> 
             RawArray["Real32",{0.032770972698926926`, 0.0017642509192228317`,
                0.019558845087885857`, -0.021086065098643303`, 
               0.01299666240811348, -0.013762861490249634`, 
               0.010562133975327015`, -0.0023436094634234905`, \
-0.025539802387356758`, -0.006408275570720434, -0.015715155750513077`, \
-0.007768294308334589}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 8}, {-3, 6}, {9, 
               11}, {-5, 7}, {-7, -8}, {
               10, -9}, {-2, -10}, {-4, -11}, {-6, -12}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 9, 286, 9, 7, 6, 286, 4, 3}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.0523850321769714`, 0.9432089030742645, 
              0.0766388289630413, 0.7322269976139069, 
              0.10854299366474152`, -0.016751746647059917`, 
              0.25817278772592545`, 1.440826177597046, -0.36254484951496124`, 
              0.346250981092453}, "LeafValues" -> 
             RawArray["Real32",{0.02187780849635601, -0.008610490709543228, 
               0.008433138951659203, -0.01592116430401802, 
               0.03796983137726784, -0.014576331712305546`, 
               0.01670370250940323, -0.004427685402333736, \
-0.0006329640746116638, -0.02510058879852295, 
               0.0028927952516824007`, -0.020570777356624603`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 6}, {5, 9}, {-1, -5}, {
               7, -6}, {8, -7}, {-2, 10}, {-3, -9}, {
               11, -10}, {-8, -11}, {-4, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 285, 9, 284, 284, 2, 285, 6, 8}],
              "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.018267418490722775`, 
              0.14249727129936218`, -0.9497449100017548, \
-0.13446780294179916`, 0.42295779287815094`, 1.6968544721603394`, 
              0.319690078496933, -0.09138400852680206}, "LeafValues" -> 
             RawArray["Real32",{0.030363062396645546`, 0.0028396565467119217`,
                0.017096996307373047`, -0.01520498376339674, \
-0.005229473579674959, 
               0.01011815294623375, -0.0029955527279525995`, \
-0.010293154045939445`, -0.023771602660417557`, 
               0.00327471224591136, -0.02006610855460167}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {8, -5}, {-3, 
               9}, {-2, 7}, {-7, -8}, {10, -9}, {-6, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 9, 286, 286, 3, 5, 9, 7, 8, 6, 5, 6}],
              "NumericalThresholds" -> {-0.4162716120481491, 
              0.14249702543020248`, 0.5959504842758179, -1.0297549366950989`, 
              0.1615876778960228, 0.6700158715248108, 
              0.07663994655013084, -0.01675202138721943, -0.1474270075559616, 
              0.319690078496933, 0.6475160419940948, 0.33590804040431976`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.011453074403107166`, -0.010995067656040192`,
                0.034951213747262955`, -0.014080438762903214`, 
               0.009026091545820236, 0.024106070399284363`, 
               0.0029251426458358765`, -0.010341845452785492`, \
-0.0008516247035004199, -0.0248049758374691, 
               0.0006866735639050603, -0.01762332394719124, \
-0.0054918089881539345`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {6, 7}, {5, 
               10}, {-1, -6}, {8, -7}, {9, -8}, {-2, 12}, {-4, 
               11}, {-5, -11}, {-10, -12}, {-9, -13}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 285, 9, 285, 12, 286, 286, 7, 8, 286, 
               3}], "NumericalThresholds" -> {
              0.25391924381256104`, -0.6619202196598053, 0.14044712483882904`,
               0.9432089030742645, 0.06249310448765755, 
              0.7322269976139069, -0.6348131000995636, 
              0.13390668481588364`, -0.3688681572675705, 1.440826177597046, 
              0.346250981092453}, "LeafValues" -> 
             RawArray["Real32",{0.02536419965326786, -0.010898856446146965`, 
               0.0087883984670043, 0.03924039751291275, -0.01389420684427023, 
               0.011029182933270931`, -0.012889633886516094`, 
               0.0007087191916070879, -0.0000849301359266974, \
-0.0031645691487938166`, -0.022505220025777817`, -0.01831674389541149}], 
             "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, 7}, {5, -4}, {6, 
               10}, {-1, -6}, {8, -7}, {-3, -8}, {9, -9}, {-2, -10}, {
               11, -11}, {-5, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1,
              "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 286, 285, 9, 284, 284, 6, 287, 285, 
               8}], "NumericalThresholds" -> {-0.4162716120481491, \
-1.1830604672431946`, -0.018267418490722775`, 
              0.14249727129936218`, -0.9497449100017548, \
-0.13446780294179916`, 0.319690078496933, 0.26793232560157776`, 
              1.6968544721603394`, -0.09138400852680206}, "LeafValues" -> 
             RawArray["Real32",{0.027288788929581642`, 0.0027002720162272453`,
                0.015210169367492199`, -0.01340943481773138, \
-0.004457518924027681, 0.008895507082343102, -0.001387851545587182, 
               0.0023605343885719776`, -0.00809001736342907, \
-0.021180380135774612`, -0.01799359917640686}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 5}, {6, 4}, {9, -5}, {-3, 
               7}, {-2, 8}, {-6, -8}, {-7, -9}, {10, -10}, {-4, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 9, 285, 6, 9, 286, 7, 6, 286, 206, 6, 
               287}], "NumericalThresholds" -> {-0.4162716120481491, 
              0.14249702543020248`, -0.0014353522274177521`, 
              0.319690078496933, 
              0.14249727129936218`, -0.7382787466049194, \
-0.06890776008367538, -0.20733018219470978`, 0.1435685008764267, 
              0.001291881431825459, -0.08570945635437965, -1.017726480960846},
              "LeafValues" -> 
             RawArray["Real32",{0.012240773066878319`, 0.0017312141135334969`,
                0.03184039890766144, -0.01623121090233326, 
               0.0003667585551738739, -0.004279218148440123, 
               0.004871753975749016, 
               0.02169850841164589, -0.0024088937789201736`, \
-0.009532866068184376, -0.011299981735646725`, -0.016469234600663185`, \
-0.02143094129860401}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {6, -5}, {
               10, -6}, {7, -7}, {-1, -8}, {-2, 9}, {-9, -10}, {12, 
               11}, {-11, -12}, {-4, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 285, 286, 3, 7, 284, 286, 4, 
               3}], "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.9432089030742645, -0.7209027409553528, 0.7322269976139069, 
              0.16158821433782578`, -0.016751746647059917`, \
-0.8635501265525818, 1.440826177597046, -0.36254484951496124`, 
              0.346250981092453}, "LeafValues" -> 
             RawArray["Real32",{
               0.025378204882144928`, -0.0072789243422448635`, 
               0.01502289529889822, -0.01209544762969017, 
               0.00600550277158618, -0.011401474475860596`, 
               0.009892275556921959, -0.0035919344518333673`, \
-0.0020674108527600765`, -0.020179782062768936`, 
               0.0032760347239673138`, -0.016281038522720337`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 9}, {-3, 6}, {
               7, -6}, {8, -7}, {-2, 10}, {-5, -9}, {
               11, -10}, {-8, -11}, {-4, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 9, 285, 6, 9, 286, 7, 284, 285, 206, 
               9, 6}], 
             "NumericalThresholds" -> {-0.4162716120481491, 
              0.14249702543020248`, -0.018267418490722775`, 0.319690078496933,
               0.14249727129936218`, -0.7382787466049194, \
-0.06890776008367538, 0.16575540602207184`, -0.41093386709690094`, 
              0.001291881431825459, 
              0.04753355123102665, -0.08570945635437965}, "LeafValues" -> 
             RawArray["Real32",{0.01115952804684639, 0.004125080071389675, 
               0.029989449307322502`, -0.01494479738175869, 
               0.00003423900488996878, -0.003870337503030896, 
               0.0044507295824587345`, 
               0.020029442384839058`, -0.007172171492129564, \
-0.0029472513124346733`, -0.010308805853128433`, -0.020285770297050476`, \
-0.015197058208286762`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {6, -5}, {
               10, -6}, {7, -7}, {-1, -8}, {9, -9}, {-2, -10}, {11, 
               12}, {-4, -12}, {-11, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 285, 285, 2, 3, 10, 284, 287, 284, 
               6, 12}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.9432089030742645, -0.7209027409553528, -0.23376742750406265`, 
              0.16158821433782578`, -0.49697159230709076`, \
-0.8635501265525818, -0.8236958384513855, 
              0.16575540602207184`, -0.15354132652282715`, 
              0.2444620504975319}, "LeafValues" -> 
             RawArray["Real32",{0.023603422567248344`, -0.01104982290416956, 
               0.013867465779185295`, -0.010161257348954678`, 
               0.0054370746947824955`, -0.002863661153241992, 
               0.009298224002122879, -0.0035814668517559767`, \
-0.0023078646045178175`, -0.01919693313539028, -0.009745200164616108, \
-0.015281218104064465`, 0.002051916439086199}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 9}, {-3, 6}, {-2, 
               7}, {8, -7}, {12, 10}, {-5, -9}, {
               11, -10}, {-8, -11}, {-4, -12}, {-6, -13}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 9, 285, 6, 9, 286, 4, 4, 284, 2, 206, 
               7, 284}], 
             "NumericalThresholds" -> {-0.4162716120481491, 
              0.14249702543020248`, -0.018267418490722775`, 0.319690078496933,
               0.14249727129936218`, -0.7382787466049194, 
              0.13570620864629745`, 0.13570549339056015`, -0.1381092444062233,
               0.4229577034711838, 0.001291881431825459, -0.06890607252717018,
               0.9531287252902985}, "LeafValues" -> 
             RawArray["Real32",{0.018825965002179146`, 0.0029278346337378025`,
                0.028257640078663826`, -0.018296895548701286`, \
-0.00027027653413824737`, -0.0034970284905284643`, 0.0040540508925914764`, 
               0.02044682949781418, 
               0.003426365088671446, -0.0015563976485282183`, \
-0.00809071771800518, -0.009029213339090347, -0.013312157243490219`, \
-0.01368588488548994}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {9, 5}, {6, -5}, {
               11, -6}, {7, -7}, {8, -8}, {-1, -9}, {-2, 10}, {-10, -11}, {12,
                13}, {-4, -13}, {-12, -14}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 286, 286, 285, 7, 3, 9, 8, 12, 286, 5}],
              "NumericalThresholds" -> {
              0.25391924381256104`, -1.1830604672431946`, 
              0.5959504842758179, -0.7209027409553528, -0.016751746647059917`,
               0.16158821433782578`, 0.07663994655013084, -0.1474270075559616,
               0.24446192383766174`, -0.7097128331661224, 0.6475160419940948},
              "LeafValues" -> 
             RawArray["Real32",{0.021974558010697365`, -0.00693260133266449, 
               0.012836731970310211`, -0.009910915978252888, 
               0.004874358884990215, -0.003993534483015537, 
               0.00869719497859478, -0.00693165697157383, \
-0.01903403364121914, 
               0.0035473874304443598`, -0.0025433204136788845`, \
-0.012782207690179348`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 7}, {-3, 6}, {-2, 
               9}, {10, -7}, {8, -8}, {-4, 
               11}, {-6, -10}, {-5, -11}, {-9, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 9, 285, 6, 9, 286, 8, 6, 286, 206, 7, 
               6}], "NumericalThresholds" -> {-0.4162716120481491, 
              0.14249702543020248`, -0.018267418490722775`, 0.319690078496933,
               0.14249727129936218`, -0.7382787466049194, \
-0.5667977035045624, -0.20733018219470978`, 0.1435685008764267, 
              0.001291881431825459, -0.06890607252717018, \
-0.08570945635437965}, "LeafValues" -> 
             RawArray["Real32",{0.018856417387723923`, 0.0018509970977902412`,
                0.02663658931851387, -0.01709354668855667, \
-0.0005873703630641103, -0.003179380903020501, 0.003742583328858018, 
               0.009853328578174114, -0.0014318812172859907`, \
-0.008143175393342972, -0.00857919454574585, -0.012303904630243778`, \
-0.012979515828192234`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {6, -5}, {
               10, -6}, {7, -7}, {-1, -8}, {-2, 9}, {-9, -10}, {11, 
               12}, {-4, -12}, {-11, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 284, 9, 285, 3, 8, 286, 7, 287, 4, 9}], 
             "NumericalThresholds" -> {
              0.25391924381256104`, -0.9828693270683289, 0.14044597744941711`,
               0.9432089030742645, 0.1615876778960228, -0.09138483554124832, 
              0.7122723460197449, -0.016751746647059917`, \
-0.8236958384513855, -0.36254484951496124`, -0.2501365840435028}, 
             "LeafValues" -> 
             RawArray["Real32",{0.0049087549559772015`, -0.006063060835003853,
                0.008610314689576626, 
               0.030909229069948196`, -0.013531223870813847`, 
               0.015576310455799103`, 
               0.00012750711175613105`, -0.008937904611229897, \
-0.002807626035064459, -0.016815321519970894`, 
               0.0036229537799954414`, -0.008783695288002491}], "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, 6}, {5, -4}, {7, 
               9}, {-1, -6}, {-3, -7}, {8, -8}, {-2, 10}, {
               11, -10}, {-9, -11}, {-5, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 9, 284, 6, 9, 7, 285, 10, 6, 285, 3}],
              "NumericalThresholds" -> {-0.6348131000995636, 
              0.14044731110334396`, 0.31597021222114563`, 0.319690078496933, 
              0.1424972265958786, -0.06890776008367538, -0.5822700560092926, \
-0.49697108566761017`, -0.08570945635437965, 0.9437532722949982, 
              0.3462507873773575}, "LeafValues" -> 
             RawArray["Real32",{0.007663089316338301, 0.005747917108237743, 
               0.027217594906687737`, -0.0050978451035916805`, \
-0.0008603519527241588, -0.0015469144564121962`, 0.01620587520301342, 
               0.0007297068368643522, -0.006069640163332224, \
-0.011669422499835491`, -0.012186660431325436`, -0.015998734161257744`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {7, 5}, {6, -5}, {
               9, -6}, {-1, -7}, {-2, 8}, {-8, -9}, {10, 
               11}, {-4, -11}, {-10, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{284, 284, 9, 8, 12, 9, 1, 285, 287, 6, 8, 
               1}], "NumericalThresholds" -> {-0.8752311170101166, 
              0.16575540602207184`, 0.14044597744941711`, -0.5667977035045624,
               0.06249292381107807, 0.1424972265958786, 
              0.6105587184429169, -0.03858592174947262, -0.8236958384513855, \
-0.15354223549365997`, -0.09138473868370056, -0.09831124544143677}, 
             "LeafValues" -> 
             RawArray["Real32",{0.017015676945447922`, 
               0.0013504542876034975`, -0.0059006731025874615`, 
               0.02710624225437641, 
               0.012066042050719261`, -0.001498262514360249, \
-0.001485037850216031, 
               0.007913446985185146, -0.005805769003927708, \
-0.014481261372566223`, -0.012668834067881107`, 
               0.0012644317466765642`, -0.0044146873988211155`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 6}, {4, -4}, {-1, 
               5}, {-5, -6}, {8, -7}, {12, 11}, {-3, 9}, {
               10, -10}, {-9, -11}, {-8, -12}, {-2, -13}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 284, 9, 8, 9, 285, 285, 6, 206, 287, 
               284}], "NumericalThresholds" -> {-0.937636524438858, 
              0.16575540602207184`, 0.14044597744941711`, -0.5667977035045624,
               0.1424972265958786, -0.36325328052043915`, \
-0.03858592174947262, -0.08571010082960129, 
              0.001291881431825459, -1.017726480960846, 0.9531287252902985}, 
             "LeafValues" -> 
             RawArray["Real32",{0.016539007425308228`, 
               0.006826526019722223, -0.0056646461598575115`, 
               0.02709665708243847, 
               0.00436678109690547, -0.0014256363501772285`, \
-0.0031028203666210175`, -0.010759731754660606`, 
               0.0007999244844540954, -0.0065834419801831245`, \
-0.016280094161629677`, -0.010720067657530308`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
               7, -6}, {8, -7}, {-3, 9}, {-2, -9}, {10, 
               11}, {-8, -11}, {-10, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{284, 284, 9, 3, 9, 285, 286, 285, 206, 1, 
               287, 284}], 
             "NumericalThresholds" -> {-0.9497449100017548, 
              0.16575540602207184`, 0.14044597744941711`, 0.161588154733181, 
              0.1424972265958786, -0.6698897182941437, -0.03439049515873194, \
-0.03858592174947262, 0.001291881431825459, 
              0.6105587184429169, -1.017726480960846, 0.9531287252902985}, 
             "LeafValues" -> 
             RawArray["Real32",{0.005535408388823271, 
               0.0073186904191970825`, -0.005438060034066439, 
               0.02674689143896103, 
               0.015192775055766106`, -0.0013686108868569136`, \
-0.0009123323834501207, -0.004987262189388275, -0.01032934244722128, \
-0.006320104002952576, 
               0.004129968583583832, -0.015628891065716743`, \
-0.01029126439243555}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
               8, -6}, {-2, 7}, {10, -8}, {-3, 9}, {11, 
               12}, {-7, -11}, {-9, -12}, {-10, -13}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{284, 284, 9, 3, 9, 285, 286, 10, 286, 10, 
               3}], "NumericalThresholds" -> {-0.9497449100017548, 
              0.16575540602207184`, 0.14044597744941711`, 0.161588154733181, 
              0.1424972265958786, -0.6698897182941437, -0.03439049515873194, \
-0.4969724863767624, 1.440826177597046, -0.4969712048768997, 
              0.16158821433782578`}, "LeafValues" -> 
             RawArray["Real32",{0.0053139920346438885`, 
               0.007025942672044039, -0.01383498590439558, 
               0.025677014142274857`, 
               0.01458506379276514, -0.0013138664653524756`, \
-0.0010983895044773817`, -0.004787771496921778, -0.005025187507271767, \
-0.013037332333624363`, -0.010455331765115261`, 0.003950340207666159}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
               8, -6}, {-2, 7}, {11, -8}, {-3, 9}, {
               10, -10}, {-9, -11}, {-7, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 284, 9, 3, 9, 285, 287, 285, 8, 7, 
               5}], "NumericalThresholds" -> {-0.9608926475048065, 
              0.16575540602207184`, 0.14044597744941711`, 0.161588154733181, 
              0.1424972265958786, -0.36325328052043915`, 0.26196232438087463`,
               1.6968544721603394`, -0.09138400852680206, \
-0.01675202138721943, 0.6475155055522919}, "LeafValues" -> 
             RawArray["Real32",{0.00396690983325243, 
               0.006641723681241274, -0.008067755028605461, 
               0.02455679140985012, 
               0.01538518164306879, -0.0012613118160516024`, \
-0.002862283494323492, 
               0.0005570646026171744, -0.013136197812855244`, \
-0.009319582022726536, -0.0031718402169644833`, -0.011978298425674438`}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
               8, -6}, {7, -7}, {-2, -8}, {9, -9}, {10, 
               11}, {-3, -11}, {-10, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{285, 9, 286, 6, 285, 2, 2, 1, 1, 287, 10}],
              "NumericalThresholds" -> {-0.6940266788005829, 
              0.14044712483882904`, -0.19795507192611694`, \
-0.15354061871767044`, 0.9437532722949982, 
              0.4229579418897629, -0.23376742750406265`, 0.6105587184429169, 
              0.6105596125125885, -1.064170777797699, -0.49697186052799225`}, 
             "LeafValues" -> 
             RawArray["Real32",{
               0.013005707412958145`, -0.0011289817048236728`, 
               0.024890726432204247`, -0.007228639908134937, 
               0.0015783511335030198`, -0.007712706923484802, \
-0.009424847550690174, 0.002197238616645336, 0.007302477955818176, 
               0.0009233967284671962, -0.012704606167972088`, \
-0.0030417745001614094`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {8, 5}, {-1, -5}, {6, 
               10}, {7, -7}, {-4, 11}, {-2, 
               9}, {-9, -10}, {-6, -11}, {-8, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{284, 284, 9, 8, 9, 1, 6, 2, 209, 11, 5, 
               12}], "NumericalThresholds" -> {-0.9497449100017548, 
              0.31597021222114563`, 
              0.14044597744941711`, -0.36886800825595856`, 0.1424972265958786,
               0.6105586588382721, 0.25817278772592545`, 0.42295821011066437`,
               0.2693440392613411, -1.0373250842094421`, 0.26802466809749603`,
               0.2444620355963707}, "LeafValues" -> 
             RawArray["Real32",{
               0.012806905433535576`, -0.002017051912844181, \
-0.008356202393770218, 0.022953208535909653`, 
               0.004171937704086304, -0.0010886144591495395`, 
               0.00629998417571187, -0.00010453037975821644`, \
-0.005375009961426258, -0.004265707451850176, -0.007141741458326578, 
               0.0033311897423118353`, -0.013178043998777866`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
               9, -6}, {8, 7}, {-7, -8}, {11, -9}, {10, -10}, {
               12, -11}, {-2, -12}, {-3, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 284, 9, 3, 9, 3, 9, 6, 7, 4, 3}], 
             "NumericalThresholds" -> {-0.9608926475048065, 
              0.31597021222114563`, 0.14044597744941711`, 
              0.161588154733181, -0.19499916583299637`, 0.161587655544281, 
              0.1424972265958786, -0.08570945635437965, \
-0.24246317893266678`, -0.3625444918870926, 0.3462507873773575}, "LeafValues" -> 
             RawArray["Real32",{
               0.003257020842283964, -0.003416661871597171, \
-0.009891507215797901, 0.02195383608341217, 0.0141029367223382, 
               0.00876346044242382, -0.0027075749821960926`, \
-0.0010450698900967836`, -0.008257935754954815, -0.0036114254035055637`, 
               0.0023221212904900312`, -0.012505769729614258`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {5, 7}, {4, -4}, {-1, -5}, {-2, 
               6}, {-6, 10}, {8, -8}, {9, 
               11}, {-3, -10}, {-7, -11}, {-9, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{284, 284, 9, 8, 9, 285, 1, 2, 209, 11, 
               12}], "NumericalThresholds" -> {-0.9497449100017548, 
              0.31597021222114563`, 
              0.14044597744941711`, -0.36886800825595856`, 
              0.1424972265958786, -0.6698897182941437, 0.6105587184429169, 
              0.4229578971862793, 0.2693440392613411, -1.0373250842094421`, 
              0.24446211010217667`}, "LeafValues" -> 
             RawArray["Real32",{0.01200141292065382, 
               0.0058332281187176704`, -0.007831508293747902, 
               0.02120927721261978, 
               0.0037388515193015337`, -0.0010032670106738806`, 
               0.0006527657969854772, 
               0.002853091573342681, -0.005536037031561136, \
-0.0038176653906702995`, -0.006534838117659092, -0.012380456551909447`}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {6, 5}, {4, -4}, {-1, -5}, {
               9, -6}, {-2, 7}, {8, -8}, {-7, -9}, {10, -10}, {
               11, -11}, {-3, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1,
              "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 284, 9, 12, 9, 3, 9, 6, 7, 4, 3}], 
             "NumericalThresholds" -> {-0.9608926475048065, 
              0.31597021222114563`, 0.14044597744941711`, 
              0.06249310448765755, -0.19499916583299637`, 0.161587655544281, 
              0.1424972265958786, -0.08570945635437965, \
-0.24246317893266678`, -0.3625444918870926, 0.3462507873773575}, "LeafValues" -> 
             RawArray["Real32",{
               0.012517029419541359`, -0.003239154815673828, \
-0.009150516241788864, 0.020268313586711884`, 0.0020875856280326843`, 
               0.008295128121972084, -0.0025816969573497772`, \
-0.0009631363791413605, -0.0076237334869802, -0.003191074589267373, 
               0.002100220415741205, -0.01166424062103033}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {5, 7}, {4, -4}, {-1, -5}, {-2, 
               6}, {-6, 10}, {8, -8}, {9, 
               11}, {-3, -10}, {-7, -11}, {-9, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{285, 9, 286, 6, 285, 286, 2, 284, 1, 1, 8, 
               8}], "NumericalThresholds" -> {-0.6940266788005829, 
              0.14044712483882904`, -0.23859985172748566`, \
-0.15354061871767044`, 0.9757143557071686, 0.6880344152450562, 
              0.4229577034711838, 1.5782559514045715`, 0.6105587184429169, 
              0.6105596125125885, -0.09138467162847519, -0.09218428656458855},
              "LeafValues" -> 
             RawArray["Real32",{0.011193232610821724`, -0.0006990619003772736,
                0.021088819950819016`, -0.0029274870175868273`, 
               0.0003456679987721145, -0.01143303606659174, \
-0.004121537320315838, -0.00679197208955884, -0.005711851641535759, 
               0.007568173110485077, 
               0.000014357741747517139`, -0.008549846708774567, 
               0.0015649116830900311`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {9, 5}, {-1, -5}, {6, 
               8}, {7, 11}, {12, -8}, {-6, -9}, {-2, 
               10}, {-10, -11}, {-7, -12}, {-4, -13}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{284, 285, 9, 8, 287, 9, 9, 286, 287, 6, 
               6}], "NumericalThresholds" -> {-0.9497449100017548, 
              0.13926654309034348`, 
              0.14044597744941711`, -0.36886800825595856`, 
              0.08064055442810059, 0.07663994655013084, 
              0.1404469758272171, -0.03439049515873194, -0.8236958384513855, \
-0.08570945635437965, -0.15354179590940475`}, "LeafValues" -> 
             RawArray["Real32",{0.01091195922344923, 
               0.006244966294616461, -0.0033996121492236853`, 
               0.018957071006298065`, 0.003155891317874193, 
               0.0002444564597681165, -0.0028059748001396656`, 
               0.0020445529371500015`, -0.0071835583075881, \
-0.010996395722031593`, -0.009940803982317448, 0.0012294304324313998`}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {5, 6}, {4, -4}, {-1, -5}, {11, 
               7}, {9, -7}, {8, -8}, {-6, -9}, {
               10, -10}, {-3, -11}, {-2, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{285, 9, 286, 6, 285, 284, 286, 2, 1, 1, 8, 
               8}], "NumericalThresholds" -> {-0.6940266788005829, 
              0.14044712483882904`, -0.23859985172748566`, \
-0.15354092419147491`, 0.9757143557071686, 1.5782559514045715`, 
              0.6880344152450562, 0.4229577034711838, 0.6105587184429169, 
              0.6105596125125885, -0.09138467162847519, -0.09218428656458855},
              "LeafValues" -> 
             RawArray["Real32",{0.010726479813456535`, -0.0007684599841013551,
                0.019656183198094368`, -0.0026853589806705713`, 
               0.0003442330053076148, -0.010698613710701466`, \
-0.005224265158176422, -0.0036750957369804382`, -0.0063986340537667274`, 
               0.007128879427909851, -0.00010576008935458958`, \
-0.007909594103693962, 0.0015534471021965146`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {9, 5}, {-1, -5}, {7, 
               6}, {-6, -7}, {8, 11}, {12, -9}, {-2, 
               10}, {-10, -11}, {-8, -12}, {-4, -13}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{284, 285, 9, 3, 287, 6, 9, 4, 287, 6, 10}],
              "NumericalThresholds" -> {-0.9497449100017548, 
              0.13926654309034348`, 0.14044597744941711`, 0.1615876778960228, 
              0.9126317501068115, -0.20733018219470978`, 
              0.07663994655013084, -0.36254434287548065`, \
-0.8236958384513855, -0.08570945635437965, 0.4368876963853836}, "LeafValues" -> 
             RawArray["Real32",{0.001585956197232008, 
               0.004853337537497282, -0.0029976305086165667`, 
               0.017600441351532936`, 
               0.009212586097419262, -0.004648383241146803, \
-0.003229635301977396, -0.002538390224799514, 
               0.0038877876941114664`, -0.010272806510329247`, \
-0.009303403086960316, -0.0013681690907105803`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {5, 7}, {4, -4}, {-1, -5}, {
               6, -6}, {-2, 8}, {9, -8}, {-7, 11}, {
               10, -10}, {-3, -11}, {-9, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{285, 9, 286, 12, 285, 284, 207, 2, 286, 1, 
               1}], "NumericalThresholds" -> {-0.6940266788005829, 
              0.14044712483882904`, -0.23859985172748566`, 
              0.06249310448765755, 0.9757143557071686, 1.5782559514045715`, 
              9.999999682655224*^-21, 0.4229577034711838, 0.9133468270301819, 
              0.6105587184429169, 0.6105596125125885}, "LeafValues" -> 
             RawArray["Real32",{0.011872575618326664`, -0.0007661311537958682,
                0.01835513673722744, 0.0008847928838804364, 
               0.0013552738819271326`, -0.01001485250890255, \
-0.004776692483574152, -0.006808450911194086, -0.006751073058694601, \
-0.005535102915018797, 0.00668244156986475, -0.0002677008742466569}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {10, 5}, {-1, -5}, {7, 
               6}, {-6, -7}, {8, -8}, {9, -9}, {-4, -10}, {-2, 
               11}, {-11, -12}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{286, 285, 9, 3, 5, 287, 3, 12, 285, 207, 9,
                287}], 
             "NumericalThresholds" -> {-0.9608926475048065, \
-0.04242449998855591, 0.14044597744941711`, 0.161588154733181, 
              0.6700164675712585, 0.6432357430458069, 0.48694829642772675`, 
              0.062494492158293724`, 1.6968544721603394`, 
              9.999999682655224*^-21, -0.19499994814395905`, \
-0.7455524802207947}, "LeafValues" -> 
             RawArray["Real32",{
               0.0016282853903248906`, -0.0003812994109466672, \
-0.006670435890555382, 0.016281627118587494`, 0.01152716763317585, 
               0.006355076562613249, -0.00544462027028203, \
-0.0023260987363755703`, 
               0.006285473238676786, -0.009381663985550404, \
-0.008206426165997982, 0.0006626269896514714, -0.003969637677073479}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {5, 9}, {4, -4}, {-1, -5}, {
               6, -6}, {7, -7}, {8, -8}, {-2, -9}, {10, -10}, {11, -11}, {-3, 
               12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]]}, 
         "ClassNumber" -> 1, "IterationsNumber" -> 50, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "(f1f6f7)" -> 
              Association[
               "Type" -> "NominalVector", "Weight" -> 3, 
                "SetSize" -> {5, 10, 3}], "(f8(f2f3f4f5))" -> 
              Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
                 "], "Type" -> "NumericalVector"]], "Output" -> 
            Association[
             "((f1f6f7)(f8(f2f3f4f5)))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 8.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["EmbedNominalVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f6f7)" -> 
                  Association[
                   "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {5, 10, 3}]], "Index" -> {
                  Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10], 
                  Association[1 -> 1, 2 -> 2, 3 -> 3]}, "Output" -> 
                Association[
                 "(f1f6f7)" -> 
                  Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 0., 0.}, {0.8276937007904053, 
                   1.684451937675476, 0.14223997294902802`, 
                   0.33267807960510254`}, {0.6105592250823975, 
                   0.6981538534164429, 0.16158781945705414`, 
                   0.1357058584690094}, {-0.31701499223709106`, 
                   0.21509666740894318`, 
                   0.10612281411886215`, -0.02909098193049431}, \
{-0.0983114242553711, 0.42295780777931213`, 
                   0.48694905638694763`, -0.36254504323005676`}, {
                   0.5284631848335266, -0.23376767337322235`, 
                   0.3462507426738739, 0.636563777923584}}], 
                  RawArray["Real32",{{0., 0., 0., 0., 
                   0.}, {-0.07989419251680374, -0.7561284899711609, \
-0.24246390163898468`, -0.14742642641067505`, 0.047534264624118805`}, {
                   0.4415503740310669, -0.15354129672050476`, \
-0.3151618540287018, -0.5667984485626221, -0.4819013476371765}, \
{-0.4973995089530945, 0.3196905851364136, -0.06890679895877838, 
                   0.17588235437870026`, 0.07663919776678085}, {
                   0.647515594959259, 0.38926857709884644`, 
                   
                   0.6601542830467224, -0.011586727574467659`, \
-0.25013700127601624`}, {-0.09734635800123215, 
                   0.1966550052165985, -0.38033875823020935`, 
                   0.20388638973236084`, 
                   0.14044658839702606`}, {-0.28058937191963196`, \
-0.0857095867395401, -0.016751863062381744`, -0.36886894702911377`, \
-0.02560511790215969}, {0.8730828762054443, -0.6591068506240845, 
                   0.8588672876358032, -0.091384656727314, \
-0.1949993371963501}, {0.0629168450832367, -0.20733048021793365`, 
                   0.13390646874904633`, -0.5733866095542908, \
-0.3011435568332672}, {0.26802393794059753`, 0.3359086811542511, 
                   0.15563660860061646`, 0.173941969871521, 
                   0.14249752461910248`}, {
                   0.6700165867805481, -0.22340668737888336`, \
-0.09891430288553238, -0.09218427538871765, 0.2854697108268738}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.4969717562198639, -1.0373255014419556`, 
                   0.24446187913417816`}, {
                   0.5489273071289062, -0.25098317861557007`, 
                   0.06249380111694336}, {
                   0.436887264251709, -0.04003623127937317, \
-0.7552163600921631}}]}, "Version" -> {12.2, 0}, "ID" -> 255423140624039359]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f6f7)" -> 
                  Association["Weight" -> 3, "Type" -> "NumericalVector"], 
                  "(f8(f2f3f4f5))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGAQBhLFUncqJ1rl2Y/So/QoPUqP0qP0KD1K05pmAIMPOGkA
XCmS7g==
                    "], "Type" -> "NumericalVector"]], "Spans" -> {
                  Span[1, 12], 
                  Span[13, 287]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> 
                Association[
                 "((f1f6f7)(f8(f2f3f4f5)))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQBxFgcMGeVnSx1J3KiVZ5o/QoPUqP0qP0KD1Kj9I0pyHt
jw84aQDmbZ+u
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0},
                 "ID" -> 4286702454314542507]], 
              MachineLearning`MLProcessor["DensifyNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f6f7)(f8(f2f3f4f5)))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGCQBxFgcMGeVnSx1J3KiVZ5o/QoPUqP0qP0KD1Kj9I0pyHt
jw84aQDmbZ+u
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0},
                 "ID" -> 1826009284769702442, "Output" -> 
                Association[
                 "((f1f6f7)(f8(f2f3f4f5)))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 8.]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 8.], "Key" -> 
                "((f1f6f7)(f8(f2f3f4f5)))", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], 
         "DistributionData" -> {NormalDistribution, {4.5296498003350045`}}, 
         "Calibrator" -> None, "Method" -> "GradientBoostedTrees", 
         "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> 
         Association[
          "BoostingMethod" -> 
           Association["Value" -> "Gradient", "Options" -> Association[]], 
           MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "LeavesNumber" -> 
           Association["Value" -> 500, "Options" -> Association[]], 
           "LearningRate" -> 
           Association["Value" -> 0.04, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "MaxBinNumber" -> 
           Association["Value" -> 255, "Options" -> Association[]], 
           "ThreadNumber" -> 
           Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
           Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
           Association["Value" -> 15, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFrequency" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "MinGainToSplit" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "LossFunction" -> 
           Association[
            "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[64817], "TrainingFunction" -> Predict, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 1.8365558003297235`, "PreprocessingTime" -> 
         0.1438575`6.6094775022228776, "LossName" -> "StandardDeviation", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[4.2187602052909705`, 0.042922206662601], 
            "StandardDeviation" -> 
            Around[2.553143894963805, 0.49864451791452274`], "EvaluationTime" -> 
            0.00006635119509224949, "TestSize" -> 60, "ModelMemory" -> 173680,
             "ModelUtility" -> -1.6687979374517061`, "TrainingSize" -> 240, 
            "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
            2284856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[4.2187602052909705`, 0.030350583394615577`]}, 
            "StandardDeviationHistory" -> {
              Around[2.553143894963805, 0.3525949200188559]}, 
            "Configuration" -> {
             "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
              MaxTrainingRounds -> 50, "LeavesNumber" -> 500, "LearningRate" -> 
              0.04, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
              "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
              "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
              "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
              "L1Regularization" -> 0, "L2Regularization" -> 0, 
              "LossFunction" -> "MeanSquaredError"}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
             "TrainingTime", "TrainingMemory", "ExperimentCount", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 17]}], 
           Association[]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 13], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.603692860815107, 0.014922858870716656`], 
                 "StandardDeviation" -> 
                 Around[6.341079117087336, 0.34459816403946864`], 
                 "EvaluationTime" -> 0.000020640644637609093`, "TestSize" -> 
                 290, "ModelMemory" -> 63744, 
                 "ModelUtility" -> -2.5510109958608598`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 184048, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.603692860815107, 0.010552054702173571`]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.341079117087336, 0.24366769857674256`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.667327645809342, 0.0246847415391973], 
                 "StandardDeviation" -> 
                 Around[6.251707144295453, 0.37000431292225927`], 
                 "EvaluationTime" -> 0.000020660194799564414`, "TestSize" -> 
                 250, "ModelMemory" -> 65792, 
                 "ModelUtility" -> -2.5377739391495377`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 544552, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.667327645809342, 0.017454748134203665`]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.251707144295453, 0.2616325587355988]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020660194799564414`, "ModelMemory" -> 
                65792, "StandardDeviation" -> 
                Around[6.251707144295453, 0.37000431292225927`], 
                "TrainingMemory" -> 544552, "TrainingTime" -> 
                0.06013604989177507], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.9667181067134885`, 0.25629129918519544`], 
                 "StandardDeviation" -> 
                 Around[5.96115907738313, 0.4069853378698616], 
                 "EvaluationTime" -> 0.000012589254117941663`, "TestSize" -> 
                 200, "ModelMemory" -> 59200, 
                 "ModelUtility" -> -2.4919789195765896`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 154312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.9667181067134885`, 0.18122531561296196`]}, 
                 "StandardDeviationHistory" -> {
                   Around[5.96115907738313, 0.2877820922512773]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.676906939002361, 0.1372458651377339], 
                 "StandardDeviation" -> 
                 Around[3.5569245550143314`, 0.5002868666909706], 
                 "EvaluationTime" -> 0.000012589254117941663`, "TestSize" -> 
                 100, "ModelMemory" -> 59264, 
                 "ModelUtility" -> -1.989789993499029, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 428344, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.676906939002361, 0.09704748192870602]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.5569245550143314`, 0.35375623597575556`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.464380937535439, 0.1402894773284657], 
                 "StandardDeviation" -> 
                 Around[2.8667711495528567`, 0.4845927150922294], 
                 "EvaluationTime" -> 0.000020982090196569435`, "TestSize" -> 
                 60, "ModelMemory" -> 59264, 
                 "ModelUtility" -> -1.7795868142342637`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 1733528, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.464380937535439, 0.0991996407480745]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.8667711495528567`, 0.342658794955316]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020982090196569435`, "ModelMemory" -> 
                59264, "StandardDeviation" -> 
                Around[2.8667711495528567`, 0.4845927150922294], 
                "TrainingMemory" -> 1733528, "TrainingTime" -> 
                0.028325821765368752`], "Index" -> 2], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.1679545053396874`, 0.13419221682645138`], 
                 "StandardDeviation" -> 
                 Around[4.77094570491098, 0.23288867564691962`], 
                 "EvaluationTime" -> 0.00004026831150426176, "TestSize" -> 
                 390, "ModelMemory" -> 150640., 
                 "ModelUtility" -> -2.265414174482961, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.010863084705980556`, "TrainingMemory" -> 
                 234170.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.2737190371016576`, 0.24566193043429593`], 
                   Around[3.0621899735777167`, 0.08769666665786062]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.819925680880529, 0.493673604450249], 
                   Around[4.72196572894143, 0.2565988089382738]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.574848760395754, 0.0821197677148696], 
                 "StandardDeviation" -> 
                 Around[3.2625102942577726`, 0.28309990501231813`], 
                 "EvaluationTime" -> 0.00004449768428495327, "TestSize" -> 
                 250, "ModelMemory" -> 150640, 
                 "ModelUtility" -> -1.8928569751416573`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 458952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.574848760395754, 0.05806744462064841]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.2625102942577726`, 0.2001818625874776]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.416847103524785, 0.17248942998046585`], 
                 "StandardDeviation" -> 
                 Around[2.7816083219551566`, 0.4909154705105077], 
                 "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60,
                  "ModelMemory" -> 162352, 
                 "ModelUtility" -> -1.7508723832039284`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.015848931924611134`, 
                 "TrainingMemory" -> 1578064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.416847103524785, 0.12196844562218957`]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.7816083219551566`, 0.3471296581873646]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006635119509224949, "ModelMemory" -> 
                162352, "StandardDeviation" -> 
                Around[2.7816083219551566`, 0.4909154705105077], 
                "TrainingMemory" -> 1578064, "TrainingTime" -> 
                0.030674249611744475`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.728772742120058, 0.3047119608636234], 
                 "StandardDeviation" -> 
                 Around[4.481152395071433, 0.33339651837135503`], 
                 "EvaluationTime" -> 0.000017024325020992374`, "TestSize" -> 
                 490, "ModelMemory" -> 83440., 
                 "ModelUtility" -> -2.207802995523786, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.006854143078948891, "TrainingMemory" -> 
                 186632., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.9798259753207756`, 0.31664206797896965`], 
                   Around[3.4777195089193405`, 0.20602651388468268`]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.741099312700334, 0.33350107558747394`], 
                   Around[4.221205477442532, 0.2676926184244405]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.5622152618128737`, 0.07919599448282498], 
                 "StandardDeviation" -> 
                 Around[3.283015531896099, 0.31456973123881304`], 
                 "EvaluationTime" -> 0.000017714847186865565`, "TestSize" -> 
                 250, "ModelMemory" -> 174528, 
                 "ModelUtility" -> -1.9008993088929018`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 569888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.5622152618128737`, 0.05600002474161794]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.283015531896099, 0.22243439011499444`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.4237367892681094`, 0.16685645664357082`], 
                 "StandardDeviation" -> 
                 Around[3.052482813127871, 0.4800277270692235], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 613440, 
                 "ModelUtility" -> -1.8400886047190919`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 3182232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.4237367892681094`, 0.11798533197742808`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.052482813127871, 0.3394308609682131]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                613440, "StandardDeviation" -> 
                Around[3.052482813127871, 0.4800277270692235], 
                "TrainingMemory" -> 3182232, "TrainingTime" -> 
                0.01935414307894889], "Index" -> 4], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.8341861606584375`*^12, 7.958731742047273*^11], 
                 "StandardDeviation" -> 
                 Around[4.540862232203866, 0.6209690488732129], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 100, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.2332518350666417`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3400096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.8341861606584375`*^12, 5.627673184446251*^11]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.540862232203866, 0.43909142536520945`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.8888272343839444`*^11, 2.816622509635939*^10], 
                 "StandardDeviation" -> 
                 Around[3.4760383663989605`, 0.2605663203011925], 
                 "EvaluationTime" -> 0.000022301671289595483`, "TestSize" -> 
                 250, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -1.9539261011125157`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3694048, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8888272343839444`*^11, 1.9916528766062443`*^10]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.4760383663989605`, 0.18424821203379915`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.4816783254042933`, 0.04945155462011469], 
                 "StandardDeviation" -> 
                 Around[5.427536508915213, 1.1755108429428536`], 
                 "EvaluationTime" -> 0.00004186477385849299, "TestSize" -> 60,
                  "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.4270419853172083`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 5017656, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.4816783254042933`, 0.03496752961210004]}, 
                 "StandardDeviationHistory" -> {
                   Around[5.427536508915213, 0.8312116884032064]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004186477385849299, "ModelMemory" -> 
                66184, "StandardDeviation" -> 
                Around[5.427536508915213, 1.1755108429428536`], 
                "TrainingMemory" -> 5017656, "TrainingTime" -> 0.0225], 
              "Index" -> 5], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[294.9025780972431, 82.81234781571403], 
                 "StandardDeviation" -> 
                 Around[4.557542219981791, 0.622051153000735], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.2368671956125645`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3400032, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[294.9025780972431, 58.55717270647037]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.557542219981791, 0.43985658853173026`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[32.97976324926369, 8.522667684609925], 
                 "StandardDeviation" -> 
                 Around[3.755832082432725, 0.47957053840118147`], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 100, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.041678588901454, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3693960, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[32.97976324926369, 6.026436113587129]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.755832082432725, 0.339107579760759]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.4574463184268254`, 0.024160348321055052`], 
                 "StandardDeviation" -> 
                 Around[4.099610543896325, 0.6637367415271548], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.1359112547700696`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 5017656, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.4574463184268254`, 0.017083946133647044`]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.099610543896325, 0.4693327508565138]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                66184, "StandardDeviation" -> 
                Around[4.099610543896325, 0.6637367415271548], 
                "TrainingMemory" -> 5017656, "TrainingTime" -> 0.0225], 
              "Index" -> 6], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.8007550530463005`*^6, 523860.07602162677`], 
                 "StandardDeviation" -> 
                 Around[4.514387777313556, 0.41206006452491106`], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 200, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.218512345993873, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3399968, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.8007550530463005`*^6, 370425.01214779256`]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.514387777313556, 0.29137046588173093`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[189642.25017201345`, 28280.465059389306`], 
                 "StandardDeviation" -> 
                 Around[3.4759473091380046`, 0.26056275428419456`], 
                 "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 
                 250, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -1.953900091497248, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3693960, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[189642.25017201345`, 19997.308618603394`]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.4759473091380046`, 0.1842456904789981]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.4850086764216606`, 0.020666880731624496`], 
                 "StandardDeviation" -> 
                 Around[4.31501029393972, 0.4682816008020856], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.176724284350055, "TrainingSize" -> 240, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 5017656, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.4850086764216606`, 0.014613691511305277`]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.31501029393972, 0.3311250954320465]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                66184, "StandardDeviation" -> 
                Around[4.31501029393972, 0.4682816008020856], 
                "TrainingMemory" -> 5017656, "TrainingTime" -> 0.0225], 
              "Index" -> 7], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.5993575756337757`, 0.027585098557294192`], 
                 "StandardDeviation" -> 
                 Around[6.344458961014312, 0.6497018996992524], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.561007819794175, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3400032, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.5993575756337757`, 0.01950561024956197]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.344458961014312, 0.4594086190271235]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.669733375591315, 0.03710119367091776], 
                 "StandardDeviation" -> 
                 Around[6.322562871592576, 0.6739647162134927], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 100, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.5583719049662825`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3693960, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.669733375591315, 0.026234505634821367`]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.322562871592576, 0.47656502111502774`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[5.376284397240425, 0.0906117034535513], 
                 "StandardDeviation" -> 
                 Around[6.079171311504136, 0.6543258956904736], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.5193187677271305`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.01, "TrainingMemory" -> 5017592, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.376284397240425, 0.06407214996687062]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.079171311504136, 0.4626782779486954]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                66184, "StandardDeviation" -> 
                Around[6.079171311504136, 0.6543258956904736], 
                "TrainingMemory" -> 5017592, "TrainingTime" -> 0.0225], 
              "Index" -> 8], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.600107020668857, 0.01455328078215314], 
                 "StandardDeviation" -> 
                 Around[6.355636588551879, 0.3298791385633287], 
                 "EvaluationTime" -> 0.000020640644637609093`, "TestSize" -> 
                 290, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.5528212244245, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3400032, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.600107020668857, 0.010290723529572346`]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.355636588551879, 0.23325977585010643`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.672058429475752, 0.03715855717490904], 
                 "StandardDeviation" -> 
                 Around[6.333415621289782, 0.6743393559098528], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 100, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.5600627583129025`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3693960, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.672058429475752, 0.02627506775748622]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.333415621289782, 0.47682993138482566`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[5.3896252426950415`, 0.09116881700746685], 
                 "StandardDeviation" -> 
                 Around[6.1528912721808355`, 0.6609402117412884], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 66184, "ModelUtility" -> -2.53133045730632,
                  "TrainingSize" -> 240, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 5017592, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[5.3896252426950415`, 0.06446608873873524]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.1528912721808355`, 0.46735530568113753`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                66184, "StandardDeviation" -> 
                Around[6.1528912721808355`, 0.6609402117412884], 
                "TrainingMemory" -> 5017592, "TrainingTime" -> 0.0225], 
              "Index" -> 9], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[5.583511956536043, 0.7443031540400995], 
                 "StandardDeviation" -> 
                 Around[4.687353678859782, 0.41529327986430614`], 
                 "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 
                 200, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.255584724860932, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 3400096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.583511956536043, 0.5263018074802898]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.687353678859782, 0.29365669437325354`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.687585387070843, 0.09144796516252246], 
                 "StandardDeviation" -> 
                 Around[3.5029492315237793`, 0.26220380855464054`], 
                 "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 
                 250, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -1.9616167463545366`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3693960, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.687585387070843, 0.06466347629213079]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.5029492315237793`, 0.1854060910819256]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.5429659427571822`, 0.02207856109026382], 
                 "StandardDeviation" -> 
                 Around[3.883872677843947, 0.6090136456794036], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.0808642029349618`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 5017656, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.5429659427571822`, 0.015611900265767]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.883872677843947, 0.43063767869504765`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003325437191614798, "ModelMemory" -> 
                66184, "StandardDeviation" -> 
                Around[3.883872677843947, 0.6090136456794036], 
                "TrainingMemory" -> 5017656, "TrainingTime" -> 
                0.025736567647427086`], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 500], "LearningRate" -> 
                Association["Value" -> 0.04], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.78366699652732, 0.011818174574117808`], 
                 "StandardDeviation" -> 
                 Around[3.304723638407115, 0.3466851502714484], 
                 "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 200,
                  "ModelMemory" -> 162568, 
                 "ModelUtility" -> -1.9092714711447587`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 578392, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.78366699652732, 0.00835671138260514]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.304723638407115, 0.2451434206936184]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.2187602052909705`, 0.042922206662601], 
                 "StandardDeviation" -> 
                 Around[2.553143894963805, 0.49864451791452274`], 
                 "EvaluationTime" -> 0.00006635119509224949, "TestSize" -> 60,
                  "ModelMemory" -> 173680, 
                 "ModelUtility" -> -1.6687979374517061`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 2284856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.2187602052909705`, 0.030350583394615577`]}, 
                 "StandardDeviationHistory" -> {
                   Around[2.553143894963805, 0.3525949200188559]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.6033825041458667`, 0.014930648716289987`], 
                 "StandardDeviation" -> 
                 Around[6.341079117087336, 0.34459816403946864`], 
                 "EvaluationTime" -> 0.000020640644637609093`, "TestSize" -> 
                 290, "ModelMemory" -> 63744, 
                 "ModelUtility" -> -2.5510109958608598`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 186416, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.6033825041458667`, 0.01055756295480287]}, 
                 "StandardDeviationHistory" -> {
                   Around[6.341079117087336, 0.24366769857674256`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020640644637609093`, "ModelMemory" -> 
                63744, "StandardDeviation" -> 
                Around[6.341079117087336, 0.34459816403946864`], 
                "TrainingMemory" -> 186416, "TrainingTime" -> 
                0.08735751282918311], "Index" -> 11], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[7.245615955712585*^6, 1.106272351437258*^6], 
                 "StandardDeviation" -> 
                 Around[3.50276896913839, 0.26779233861026275`], 
                 "EvaluationTime" -> 0.00002394314777962655, "TestSize" -> 
                 250, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -1.9618803798974547`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 3693496, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[7.245615955712585*^6, 782252.6815404725]}, 
                 "StandardDeviationHistory" -> {
                   Around[3.50276896913839, 0.1893577785811209]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.4549767662600086`, 0.027377634491376705`], 
                 "StandardDeviation" -> 
                 Around[4.72269273147915, 0.6605174787748479], 
                 "EvaluationTime" -> 0.00003325437191614798, "TestSize" -> 60,
                  "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.2731191248181517`, "TrainingSize" -> 
                 240, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 5017656, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.4549767662600086`, 0.019358911001699182`]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.72269273147915, 0.4670563883339364]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.61653261065539*^8, 3.882905640286126*^7], 
                 "StandardDeviation" -> 
                 Around[4.683785078553041, 0.33928380789231494`], 
                 "EvaluationTime" -> 0.000020640644637609093`, "TestSize" -> 
                 290, "ModelMemory" -> 66184, 
                 "ModelUtility" -> -2.25164219195258, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 3406840, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.61653261065539*^8, 2.7456289089538127`*^7]}, 
                 "StandardDeviationHistory" -> {
                   Around[4.683785078553041, 0.23990988130744975`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020640644637609093`, "ModelMemory" -> 
                66184, "StandardDeviation" -> 
                Around[4.683785078553041, 0.33928380789231494`], 
                "TrainingMemory" -> 3406840, "TrainingTime" -> 
                0.12943215116604914`], "Index" -> 12]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LinearRegression", 
                "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 12], 
           Association[]], "MaxTrainingSize" -> 300, 
         "PreprocessorEvaluationTime" -> 3.569140625*^-6, 
         "PreprocessorMemory" -> 118520, "InputDimension" -> 278, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8229282319264381`17.334971134217728*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.19599999999999995`, 
             "ElapsedTimes" -> 0.29797959999999996`, "ExperimentCounts" -> 
             14], 
            Association[
            "TrainingSizes" -> 50, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
             0.2908714, "ExperimentCounts" -> 12], 
            Association[
            "TrainingSizes" -> 240, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.38801459999999993`, "ExperimentCounts" -> 11]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[]]], "AnomalyDetector" -> None, "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
              8718539460336612740], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {140.}, "ID" -> 
              5330523246654450449], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {72.}, "ID" -> 
              5227176333101167944], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2408.}, "ID" -> 
              5596007189629378955], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
              2638574294534422359], "f6" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {71}, "ID" -> 
              5604019906672533564], "f7" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              7446114396074216018], "f8" -> 
            Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {"chevrolet vega (sw)"}, "ID" -> 
              3206511614197282240]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 1.3335319, 
         "MaxTrainingMemory" -> 6694080, "DataMemory" -> 102576, 
         "FunctionMemory" -> 499624, "LanguageVersion" -> {12.2, 0}, "Date" -> 
         DateObject[{2021, 2, 21, 20, 30, 32.4599721`9.263923044084517}, 
           "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        8, 260., 90., 3420., 22.2, 79, 1, 
         "oldsmobile cutlass salon brougham"}, {
        4, 105., 70., 2200., 13.2, 79, 1, "plymouth horizon"}, {
        4, 105., 70., 2150., 14.9, 79, 1, "plymouth horizon tc3"}, {
        4, 85., 65., 2020., 19.2, 79, 3, "datsun 210"}, {
        4, 91., 69., 2130., 14.7, 79, 2, "fiat strada custom"}, {
        4, 151., 90., 2670., 16., 79, 1, "buick skylark limited"}, {
        6, 173., 115., 2595., 11.3, 79, 1, "chevrolet citation"}, {
        6, 173., 115., 2700., 12.9, 79, 1, "oldsmobile omega brougham"}, {
        4, 151., 90., 2556., 13.2, 79, 1, "pontiac phoenix"}, {
        4, 98., 76., 2144., 14.7, 80, 2, "vw rabbit"}, {
        4, 89., 60., 1968., 18.8, 80, 3, "toyota corolla tercel"}, {
        4, 98., 70., 2120., 15.5, 80, 1, "chevrolet chevette"}, {
        4, 86., 65., 2019., 16.4, 80, 3, "datsun 310"}, {
        4, 151., 90., 2678., 16.5, 80, 1, "chevrolet citation"}, {
        4, 140., 88., 2870., 18.1, 80, 1, "ford fairmont"}, {
        4, 151., 90., 3003., 20.1, 80, 1, "amc concord"}, {
        6, 225., 90., 3381., 18.7, 80, 1, "dodge aspen"}, {
        4, 97., 78., 2188., 15.8, 80, 2, "audi 4000"}, {
        4, 134., 90., 2711., 15.5, 80, 3, "toyota corona liftback"}, {
        4, 120., 75., 2542., 17.5, 80, 3, "mazda 626"}, {
        4, 119., 92., 2434., 15., 80, 3, "datsun 510 hatchback"}, {
        4, 108., 75., 2265., 15.2, 80, 3, "toyota corolla"}, {
        4, 86., 65., 2110., 17.9, 80, 3, "mazda glc"}, {
        4, 156., 105., 2800., 14.4, 80, 1, "dodge colt"}, {
        4, 85., 65., 2110., 19.2, 80, 3, "datsun 210"}, {
        4, 90., 48., 2085., 21.7, 80, 2, "vw rabbit c (diesel)"}, {
        4, 90., 48., 2335., 23.7, 80, 2, "vw dasher (diesel)"}, {
        5, 121., 67., 2950., 19.9, 80, 2, "audi 5000s (diesel)"}, {
        4, 146., 67., 3250., 21.8, 80, 2, "mercedes-benz 240d"}, {
        4, 91., 67., 1850., 13.8, 80, 3, "honda civic 1500 gl"}, {4, 85., 
         Missing[], 1835., 17.3, 80, 2, "renault lecar deluxe"}, {
        4, 97., 67., 2145., 18., 80, 3, "subaru dl"}, {
        4, 89., 62., 1845., 15.3, 80, 2, "vokswagen rabbit"}, {
        6, 168., 132., 2910., 11.4, 80, 3, "datsun 280-zx"}, {
        3, 70., 100., 2420., 12.5, 80, 3, "mazda rx-7 gs"}, {
        4, 122., 88., 2500., 15.1, 80, 2, "triumph tr7 coupe"}, {4, 140., 
         Missing[], 2905., 14.3, 80, 1, "ford mustang cobra"}, {
        4, 107., 72., 2290., 17., 80, 3, "honda accord"}, {
        4, 135., 84., 2490., 15.7, 81, 1, "plymouth reliant"}, {
        4, 151., 84., 2635., 16.4, 81, 1, "buick skylark"}, {
        4, 156., 92., 2620., 14.4, 81, 1, "dodge aries wagon (sw)"}, {
        6, 173., 110., 2725., 12.6, 81, 1, "chevrolet citation"}, {
        4, 135., 84., 2385., 12.9, 81, 1, "plymouth reliant"}, {
        4, 79., 58., 1755., 16.9, 81, 3, "toyota starlet"}, {
        4, 86., 64., 1875., 16.4, 81, 1, "plymouth champ"}, {
        4, 81., 60., 1760., 16.1, 81, 3, "honda civic 1300"}, {
        4, 97., 67., 2065., 17.8, 81, 3, "subaru"}, {
        4, 85., 65., 1975., 19.4, 81, 3, "datsun 210 mpg"}, {
        4, 89., 62., 2050., 17.3, 81, 3, "toyota tercel"}, {
        4, 91., 68., 1985., 16., 81, 3, "mazda glc 4"}, {
        4, 105., 63., 2215., 14.9, 81, 1, "plymouth horizon 4"}, {
        4, 98., 65., 2045., 16.2, 81, 1, "ford escort 4w"}, {
        4, 98., 65., 2380., 20.7, 81, 1, "ford escort 2h"}, {
        4, 105., 74., 2190., 14.2, 81, 2, "volkswagen jetta"}, {4, 100., 
         Missing[], 2320., 15.8, 81, 2, "renault 18i"}, {
        4, 107., 75., 2210., 14.4, 81, 3, "honda prelude"}, {
        4, 108., 75., 2350., 16.8, 81, 3, "toyota corolla"}, {
        4, 119., 100., 2615., 14.8, 81, 3, "datsun 200sx"}, {
        4, 120., 74., 2635., 18.3, 81, 3, "mazda 626"}, {
        4, 141., 80., 3230., 20.4, 81, 2, "peugeot 505s turbo diesel"}, {
        6, 145., 76., 3160., 19.6, 81, 2, "volvo diesel"}, {
        6, 168., 116., 2900., 12.6, 81, 3, "toyota cressida"}, {
        6, 146., 120., 2930., 13.8, 81, 3, "datsun 810 maxima"}, {
        6, 231., 110., 3415., 15.8, 81, 1, "buick century"}, {
        8, 350., 105., 3725., 19., 81, 1, "oldsmobile cutlass ls"}, {
        6, 200., 88., 3060., 17.1, 81, 1, "ford granada gl"}, {
        6, 225., 85., 3465., 16.6, 81, 1, "chrysler lebaron salon"}, {
        4, 112., 88., 2605., 19.6, 82, 1, "chevrolet cavalier"}, {
        4, 112., 88., 2640., 18.6, 82, 1, "chevrolet cavalier wagon"}, {
        4, 112., 88., 2395., 18., 82, 1, "chevrolet cavalier 2-door"}, {
        4, 112., 85., 2575., 16.2, 82, 1, "pontiac j2000 se hatchback"}, {
        4, 135., 84., 2525., 16., 82, 1, "dodge aries se"}, {
        4, 151., 90., 2735., 18., 82, 1, "pontiac phoenix"}, {
        4, 140., 92., 2865., 16.4, 82, 1, "ford fairmont futura"}, {4, 151., 
         Missing[], 3035., 20.5, 82, 1, "amc concord dl"}, {
        4, 105., 74., 1980., 15.3, 82, 2, "volkswagen rabbit l"}, {
        4, 91., 68., 2025., 18.2, 82, 3, "mazda glc custom l"}, {
        4, 91., 68., 1970., 17.6, 82, 3, "mazda glc custom"}, {
        4, 105., 63., 2125., 14.7, 82, 1, "plymouth horizon miser"}, {
        4, 98., 70., 2125., 17.3, 82, 1, "mercury lynx l"}, {
        4, 120., 88., 2160., 14.5, 82, 3, "nissan stanza xe"}, {
        4, 107., 75., 2205., 14.5, 82, 3, "honda accord"}, {
        4, 108., 70., 2245, 16.9, 82, 3, "toyota corolla"}, {
        4, 91., 67., 1965., 15., 82, 3, "honda civic"}, {
        4, 91., 67., 1965., 15.7, 82, 3, "honda civic (auto)"}, {
        4, 91., 67., 1995., 16.2, 82, 3, "datsun 310 gx"}, {
        6, 181., 110., 2945., 16.4, 82, 1, "buick century limited"}, {
        6, 262., 85., 3015., 17., 82, 1, 
         "oldsmobile cutlass ciera (diesel)"}, {
        4, 156., 92., 2585., 14.5, 82, 1, "chrysler lebaron medallion"}, {
        6, 232., 112., 2835, 14.7, 82, 1, "ford granada l"}, {
        4, 144., 96., 2665., 13.9, 82, 3, "toyota celica gt"}, {
        4, 135., 84., 2370., 13., 82, 1, "dodge charger 2.2"}, {
        4, 151., 90., 2950., 17.3, 82, 1, "chevrolet camaro"}, {
        4, 140., 86., 2790., 15.6, 82, 1, "ford mustang gl"}, {
        4, 97., 52., 2130., 24.6, 82, 2, "vw pickup"}, {
        4, 135., 84., 2295., 11.6, 82, 1, "dodge rampage"}, {
        4, 120., 79., 2625., 18.6, 82, 1, "ford ranger"}, {
        4, 119., 82., 2720., 19.4, 82, 1, "chevy s-10"}}, 
      "Output" -> CompressedData["
1:eJxlkrFtwzAQRZneC7hMk96QYUmWZB0px2lSpXNrwG5deIEMoAWUAbJAFsgA
zgBZQHPE8j0SIHOA8MH7/+7zjno8nN+OD8aYw+07TTHm8jHcYm7FTCFWfq5T
tHLnP53iqSbvca36bwG3mp91oGjfwSlvavqslX8t8M00/+R9G/hW694dOiH/
ovqxot+W+p1kU3w9K2bed0Md/AX9KMHv3n8v1Of4Wu6f0w8+q8gzx7VEn8d+
fUeeffSWe0o8169jX/jtLT7oxwa9hPfROonvdfH7btlXzTwb9lSiLzivwhya
X3JehPdSrED+D8O7mCbhC9DvwYU547ou5v+hTXSSnMvkzH9oVone96sS3CU6
P2crf4wl3CI=
       "]], "Predictions" -> CompressedData["
1:eJxdkmlIVHEUxcdoytRygyGjBQtNwqTx+d7/zXNenrRmLFJLA1u0sTFrpMwx
KmnUUnIJo0IaLLXcCrdk1Cy3kkoy3MKyXKYybdAWjTHBFi2l+eJ86MPlcuHc
y49zj7MyNjjKQiAQKE11diKt0V1NIfDBvk3Za3hzN7YqGkVGH7wd2vi6PozH
SrtjcsdtLLpeKegTYgaRtvaH34sYGOw+FmSVsAgQDG/weMmBlgn6R1fwOB2o
TRSPSmC0+1Sry+fx1W3xcHE7gypFX3RqGg3DC+Hl2Bwa3gPh4eVdFIaX9b+5
KOAwttfX5nMIwfR3l8VWDQSKAPqyZI5A3aF3ajshwYPle1w61Bx+cUdnZJU0
uHT768nFHLixFq4nmIfUXl/om8RiSd6OiLVKBuVkTFhm4p3nyOsKjVeNSmFo
iFLE1XMQKXKF92qlWGQsNLpf8cTLQ0U2s3IW3pZ/V78bZ1BAP+2P09P4uSsl
d/I2i/H9mvzmAwTy9PV2pS4EQ5oPkWeDCYImai8JT9PwCjHYHHxkmo/7JQ1R
vPn+vC9l2qknB4elaHJP72WCeDTVNvvf3Mmb9VZtI3elcgl0MldrkSMP78yi
jYPnWXg4afbNqDiUGRz9LFJYnPGsu5LoxIEaWOcrTmChbsmry+QJBmcXLM3I
IYhfNKGe2sYgNHpD3JZQL7S1/u6WWVKQOVTduS+hMNiy3SqboiCffle3UCqG
9UPnV343vKDVjfuknaLwze1Ar0c8g7D9e2ZUtgTV59qDr50kIIKSZXUxBPcd
lNV9DgQT8rcBUyyBNiJjbJcNA5UuplITwpj5532/0H7sy2Qajxz9o5rdqRyi
ErUyH08OS0R9LqvOSOAX1prd/UyCCk2OyjJBYvbn/33rzVfzxRZeGEBP51yD
J0hyanqg6Q+uNZtLVYTCj86eKqsAAtutMT01BoLckVuBelNOqhqFgi9/aHPO
JpU69kgFgX+CbUYBZ9JnPX5eryT4B1EATz0=
     "], "Distributions" -> {
      NormalDistribution[19.438182444762308`, 28.423049839885547`], 
      NormalDistribution[29.123385450269147`, 28.423049839885547`], 
      NormalDistribution[29.123385450269147`, 28.423049839885547`], 
      NormalDistribution[31.930034242517586`, 28.423049839885547`], 
      NormalDistribution[29.362179945659456`, 28.423049839885547`], 
      NormalDistribution[24.269825423849497`, 28.423049839885547`], 
      NormalDistribution[22.19308789815277, 28.423049839885547`], 
      NormalDistribution[22.089300398030343`, 28.423049839885547`], 
      NormalDistribution[24.65065955395483, 28.423049839885547`], 
      NormalDistribution[26.813204459846293`, 28.423049839885547`], 
      NormalDistribution[29.105069577757792`, 28.423049839885547`], 
      NormalDistribution[25.895286356170306`, 28.423049839885547`], 
      NormalDistribution[29.619853252094735`, 28.423049839885547`], 
      NormalDistribution[22.787641526935577`, 28.423049839885547`], 
      NormalDistribution[21.521551718556733`, 28.423049839885547`], 
      NormalDistribution[21.599358381192253`, 28.423049839885547`], 
      NormalDistribution[19.799459300433437`, 28.423049839885547`], 
      NormalDistribution[26.00208788156931, 28.423049839885547`], 
      NormalDistribution[23.327744260976864`, 28.423049839885547`], 
      NormalDistribution[23.718903013957036`, 28.423049839885547`], 
      NormalDistribution[23.99306566764187, 28.423049839885547`], 
      NormalDistribution[25.432740798636985`, 28.423049839885547`], 
      NormalDistribution[26.440584500342727`, 28.423049839885547`], 
      NormalDistribution[21.672958040430753`, 28.423049839885547`], 
      NormalDistribution[26.63477462938156, 28.423049839885547`], 
      NormalDistribution[29.323520348154695`, 28.423049839885547`], 
      NormalDistribution[24.489297917361213`, 28.423049839885547`], 
      NormalDistribution[22.383337038244495`, 28.423049839885547`], 
      NormalDistribution[22.193970079118717`, 28.423049839885547`], 
      NormalDistribution[29.619853252094735`, 28.423049839885547`], 
      NormalDistribution[28.896125277457582`, 28.423049839885547`], 
      NormalDistribution[26.71657367928936, 28.423049839885547`], 
      NormalDistribution[28.701935148418748`, 28.423049839885547`], 
      NormalDistribution[18.55537311009359, 28.423049839885547`], 
      NormalDistribution[24.281204976463243`, 28.423049839885547`], 
      NormalDistribution[22.92131227162484, 28.423049839885547`], 
      NormalDistribution[21.84939335314777, 28.423049839885547`], 
      NormalDistribution[24.640405327388144`, 28.423049839885547`], 
      NormalDistribution[23.358362107154715`, 28.423049839885547`], 
      NormalDistribution[23.147080430650274`, 28.423049839885547`], 
      NormalDistribution[23.32216476613655, 28.423049839885547`], 
      NormalDistribution[21.45711587088527, 28.423049839885547`], 
      NormalDistribution[23.73581009412301, 28.423049839885547`], 
      NormalDistribution[29.202628926239694`, 28.423049839885547`], 
      NormalDistribution[28.701935148418748`, 28.423049839885547`], 
      NormalDistribution[29.105069577757792`, 28.423049839885547`], 
      NormalDistribution[28.87644582720955, 28.423049839885547`], 
      NormalDistribution[29.309430451638697`, 28.423049839885547`], 
      NormalDistribution[29.299259706796626`, 28.423049839885547`], 
      NormalDistribution[29.202628926239694`, 28.423049839885547`], 
      NormalDistribution[25.278269523005328`, 28.423049839885547`], 
      NormalDistribution[29.074555107922315`, 28.423049839885547`], 
      NormalDistribution[24.49946866220328, 28.423049839885547`], 
      NormalDistribution[26.41007003050725, 28.423049839885547`], 
      NormalDistribution[24.503925506930187`, 28.423049839885547`], 
      NormalDistribution[26.09955684612438, 28.423049839885547`], 
      NormalDistribution[24.481220372916322`, 28.423049839885547`], 
      NormalDistribution[23.240397847201564`, 28.423049839885547`], 
      NormalDistribution[23.599716962080368`, 28.423049839885547`], 
      NormalDistribution[22.27326112590387, 28.423049839885547`], 
      NormalDistribution[20.340842316488615`, 28.423049839885547`], 
      NormalDistribution[19.032330511317724`, 28.423049839885547`], 
      NormalDistribution[19.225412647954975`, 28.423049839885547`], 
      NormalDistribution[19.201508181579687`, 28.423049839885547`], 
      NormalDistribution[17.234446934418227`, 28.423049839885547`], 
      NormalDistribution[20.59478480409147, 28.423049839885547`], 
      NormalDistribution[19.455158228911912`, 28.423049839885547`], 
      NormalDistribution[22.46555837131102, 28.423049839885547`], 
      NormalDistribution[23.06019558486365, 28.423049839885547`], 
      NormalDistribution[23.44756047648724, 28.423049839885547`], 
      NormalDistribution[23.428559222724484`, 28.423049839885547`], 
      NormalDistribution[23.07358839411127, 28.423049839885547`], 
      NormalDistribution[23.2224777849114, 28.423049839885547`], 
      NormalDistribution[22.04810968213185, 28.423049839885547`], 
      NormalDistribution[22.326090599801688`, 28.423049839885547`], 
      NormalDistribution[29.074555107922315`, 28.423049839885547`], 
      NormalDistribution[29.619853252094735`, 28.423049839885547`], 
      NormalDistribution[29.523222471537803`, 28.423049839885547`], 
      NormalDistribution[26.516871555906253`, 28.423049839885547`], 
      NormalDistribution[26.196278010608143`, 28.423049839885547`], 
      NormalDistribution[25.461382260100468`, 28.423049839885547`], 
      NormalDistribution[25.768792555984202`, 28.423049839885547`], 
      NormalDistribution[25.480597054930207`, 28.423049839885547`], 
      NormalDistribution[29.309430451638697`, 28.423049839885547`], 
      NormalDistribution[29.619853252094735`, 28.423049839885547`], 
      NormalDistribution[29.523222471537803`, 28.423049839885547`], 
      NormalDistribution[20.004663381549147`, 28.423049839885547`], 
      NormalDistribution[18.722637881118175`, 28.423049839885547`], 
      NormalDistribution[23.14572945341953, 28.423049839885547`], 
      NormalDistribution[19.216440632634793`, 28.423049839885547`], 
      NormalDistribution[23.300944317783394`, 28.423049839885547`], 
      NormalDistribution[23.885525848079904`, 28.423049839885547`], 
      NormalDistribution[21.675190843151178`, 28.423049839885547`], 
      NormalDistribution[21.98400879039553, 28.423049839885547`], 
      NormalDistribution[26.00208788156931, 28.423049839885547`], 
      NormalDistribution[23.665622274947, 28.423049839885547`], 
      NormalDistribution[23.228996697692565`, 28.423049839885547`], 
      NormalDistribution[23.385616704720686`, 28.423049839885547`]}, 
    "Modes" -> CompressedData["
1:eJxdkmlIVHEUxcdoytRygyGjBQtNwqTx+d7/zXNenrRmLFJLA1u0sTFrpMwx
KmnUUnIJo0IaLLXcCrdk1Cy3kkoy3MKyXKYybdAWjTHBFi2l+eJ86MPlcuHc
y49zj7MyNjjKQiAQKE11diKt0V1NIfDBvk3Za3hzN7YqGkVGH7wd2vi6PozH
SrtjcsdtLLpeKegTYgaRtvaH34sYGOw+FmSVsAgQDG/weMmBlgn6R1fwOB2o
TRSPSmC0+1Sry+fx1W3xcHE7gypFX3RqGg3DC+Hl2Bwa3gPh4eVdFIaX9b+5
KOAwttfX5nMIwfR3l8VWDQSKAPqyZI5A3aF3ajshwYPle1w61Bx+cUdnZJU0
uHT768nFHLixFq4nmIfUXl/om8RiSd6OiLVKBuVkTFhm4p3nyOsKjVeNSmFo
iFLE1XMQKXKF92qlWGQsNLpf8cTLQ0U2s3IW3pZ/V78bZ1BAP+2P09P4uSsl
d/I2i/H9mvzmAwTy9PV2pS4EQ5oPkWeDCYImai8JT9PwCjHYHHxkmo/7JQ1R
vPn+vC9l2qknB4elaHJP72WCeDTVNvvf3Mmb9VZtI3elcgl0MldrkSMP78yi
jYPnWXg4afbNqDiUGRz9LFJYnPGsu5LoxIEaWOcrTmChbsmry+QJBmcXLM3I
IYhfNKGe2sYgNHpD3JZQL7S1/u6WWVKQOVTduS+hMNiy3SqboiCffle3UCqG
9UPnV343vKDVjfuknaLwze1Ar0c8g7D9e2ZUtgTV59qDr50kIIKSZXUxBPcd
lNV9DgQT8rcBUyyBNiJjbJcNA5UuplITwpj5532/0H7sy2Qajxz9o5rdqRyi
ErUyH08OS0R9LqvOSOAX1prd/UyCCk2OyjJBYvbn/33rzVfzxRZeGEBP51yD
J0hyanqg6Q+uNZtLVYTCj86eKqsAAtutMT01BoLckVuBelNOqhqFgi9/aHPO
JpU69kgFgX+CbUYBZ9JnPX5eryT4B1EATz0=
     "], "Weights" -> SparseArray[Automatic, {98}, 1., {1, {{0, 0}, {}}, {}}],
     "BatchEvaluationTime" -> 0.0005855132653061224, "SingleEvaluationTime" -> 
    0.00583535, "Version" -> {12.2, 0}]]]], "Output",
 CellChangeTimes->{3.822949871693742*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"e10bcfeb-8046-4e38-98eb-16a90e6adff3"]
}, Open  ]],

Cell["\:9884\:6d4b\:5668\:6027\:80fd\:62a5\:544a", "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.8142874461842937`*^9, 3.8142874520340033`*^9}, {
   3.8229498652797823`*^9, 
   3.82294986825845*^9}},ExpressionUUID->"6960287b-9608-458c-99c3-\
f9c6bf34f5ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pmWithF", "[", "\"\<Report\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8141052261513233`*^9, 3.8141052551572733`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"0ab7cd43-c95f-4898-a7a8-44b10fc6cfad"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Predictor Measurements\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Predictor method"], 
                  TextCell["Predictor method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "GradientBoostedTrees",ExpressionUUID->
                "530c1804-4554-478d-85bc-548529c6cc1e"],
               TextCell["GradientBoostedTrees"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of test examples"], 
                  TextCell["Number of test examples"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "98"},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Standard deviation"], 
                  TextCell["Standard deviation"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"8.4576077697002833844`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.4886767482753886505`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "7.4802542731495060835`3.",
                   "\", \"", "9.4349612662510615735`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 7.4802542731495060835`3., 
                  ", ", 9.4349612662510615735`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Standard deviation baseline"], 
                    TextCell["Standard deviation baseline"]], 
                   "\"Standard deviation of testset values\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Standard deviation of testset values", 
                   "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"5.9381640228005352355`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3958581497837001528`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "5.1464477232331349299`3.",
                   "\", \"", "6.7298803223679355412`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                Row[{
                 "95% confidence interval: [", 5.1464477232331349299`3., ", ",
                   6.7298803223679355412`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["R-squared"], 
                  TextCell["R-squared"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{
                  RowBox[{"-", "1.0285732858904101938`3."}], 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3588281135257704868`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                TemplateBox[{"\"95% confidence interval: [\"", 
                  RowBox[{"-", "1.7462295129419511674`3."}], "\", \"", 
                  RowBox[{"-", "0.3109170588388692202`3."}], "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", -1.7462295129419511674`3., 
                  ", ", -0.3109170588388692202`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Mean cross entropy"], 
                  TextCell["Mean cross entropy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"4.3104104117977888322`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0051074216007220841`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "4.3001955685963446641`3.",
                   "\", \"", "4.3206252549992330003`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 4.3001955685963446641`3., 
                  ", ", 4.3206252549992330003`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"5.83`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.7`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}], "examples per millisecond", 
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              ItemBox[
               GraphicsBox[{{{}, {
                   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
                    0.011000000000000001`], AbsoluteThickness[1.6], 
                    GeometricTransformationBox[InsetBox[
                    FormBox[
                    StyleBox[
                    GraphicsBox[
                    {RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
                    1.], CircleBox[{0, 0}, Offset[{1.8, 1.8}, {0., 0.}]]}],
                    StripOnInput->False,
                    GraphicsBoxOptions->{DefaultBaseStyle->Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}],
                    TraditionalForm], {0., 0.}], CompressedData["
1:eJxdlHtMU2cYxg9uVYTOcknIWHaJW8qMQbJyaE97ekqf00LrFi4OTBiK1tXB
ahwKc0osuNWMy+LUxaxhK2ygbkF0pMiqXJxmjowFFKOyCVTHYI10DhYYCbvI
plnJ+c5p2JecP3753vd93tt3Vtt35xU/QlGUPfRFhL5loW//bE1PchmNksUT
ZJBzvvCF+mcMaPCETiIvMbV4wGOmz9aTMGPEtcHFY8Tt8XXfdxUZBP8WE56M
2WmNz9QKXMJh8KZNvUulIfYctitiX/sxQWQWgZifm4+1aIX4l4FsamJtyg2W
cAbUFmpk8gmDYC83Y2+Ou0o1qSMMzMQEfd4mkq/HhF/XrJg4OaAR/CkO7bbh
HdU1apJPSO+a7Mhuj1rwz9JCP7ply+lBmtRLY2LVyA/vUaxgn8Rj6hWT/Jd8
huRrwP3flSuiuglnGWHLVh/RPWQEPZcJZVf8if27dCQecP7xjcorZSyxt+Iv
9vUFSxvJJ6gHWxv7kesk0SvJADvVyw7lkX4mWcDF+o+bDmhBLx5fJlY2vrTt
WbtGYNqE08yUrFUl1psu9UPQs6BxsKDCMckJ9nsyEOgutpV3Eb0gkGBrkH3p
46T6ls8cn0k+mirkXwjcePWE/IFV1Gegj/z36TvTRM/Fo1n9zUi5X036z+DP
DQcb5j4j9jQwvcnZdGkzQ1gPa+3zMaeUDLFnMe78afv+PLG/OuTO+t6X7VWT
+AzS8gPyrRcZqb7cN8wHxmlS32GzlL9gb166L4d5tLrnL2+d4Eg/gQvJtbc0
uQZpXhd8l9Z/kkX2x29aGl/OI6r/7heclcyzkIfXkhSdEG8g9fDQHzqxbuwd
su9BA1ISnYULDrK/LqA1EG+OOKiV3s++1M6jVYks0QPo0edMqspwv8p6GzsP
GUi/9gBjD5Y9VucR+2VExfLZsvlMDdkvDgU71pbzBWlkPuno7/v7uiWSvOcS
HSxx7Z+f09EkvhZjvS9G1dPivQbW+3c6H+VU0jyiv1p90/wxiUenwe2dNta8
Rd6HR4Xf1my+lVIRfl9FmzYuOBTifPQ4+/ZA3odvisyDoVpWdZaKbMS5OPvZ
4TiRDZi13s6e14b93dvqpjbIxfhaOLylbc58kRmp/wKbpH0X5/nuwM57czXi
vREe/8WOl6vJPCgziqvcFmMqK/mvTBhWPrVPJ7G5qK/++rdhPuP0OCIrReaX
7k8o3hJ9Cv/TNyM6/YMmVUQaYR1GMXT1YXeqdM+4qmtzlGL9LJI60k85GJqw
Bn9cHWqPymak+IqM0qGOgMgmNNz9NMffppb6194jo+79E2bxfyawBXN2r7bk
TDje+kpFXTMrMgfFsa+/67KH5/UfIgYpZg==
                    "]]}, {
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.438182444762308`, 23.9}}]},
                    RowBox[{"{", 
                    RowBox[{"19.438182444762308`", ",", "23.9`"}], "}"}]],
                    Annotation[#, {19.438182444762308`, 23.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.123385450269147`, 34.2}}]},
                    RowBox[{"{", 
                    RowBox[{"29.123385450269147`", ",", "34.2`"}], "}"}]],
                    Annotation[#, {29.123385450269147`, 34.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.123385450269147`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"29.123385450269147`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {29.123385450269147`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{31.930034242517586`, 31.8}}]},
                    RowBox[{"{", 
                    RowBox[{"31.930034242517586`", ",", "31.8`"}], "}"}]],
                    Annotation[#, {31.930034242517586`, 31.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.362179945659456`, 37.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.362179945659456`", ",", "37.3`"}], "}"}]],
                    Annotation[#, {29.362179945659456`, 37.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.269825423849497`, 28.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.269825423849497`", ",", "28.4`"}], "}"}]],
                    Annotation[#, {24.269825423849497`, 28.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.19308789815277, 28.8}}]},
                    RowBox[{"{", 
                    RowBox[{"22.19308789815277`", ",", "28.8`"}], "}"}]],
                    Annotation[#, {22.19308789815277, 28.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.089300398030343`, 26.8}}]},
                    RowBox[{"{", 
                    RowBox[{"22.089300398030343`", ",", "26.8`"}], "}"}]],
                    Annotation[#, {22.089300398030343`, 26.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.65065955395483, 33.5}}]},
                    RowBox[{"{", 
                    RowBox[{"24.65065955395483`", ",", "33.5`"}], "}"}]],
                    Annotation[#, {24.65065955395483, 33.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.813204459846293`, 41.5}}]},
                    RowBox[{"{", 
                    RowBox[{"26.813204459846293`", ",", "41.5`"}], "}"}]],
                    Annotation[#, {26.813204459846293`, 41.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.105069577757792`, 38.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.105069577757792`", ",", "38.1`"}], "}"}]],
                    Annotation[#, {29.105069577757792`, 38.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.895286356170306`, 32.1}}]},
                    RowBox[{"{", 
                    RowBox[{"25.895286356170306`", ",", "32.1`"}], "}"}]],
                    Annotation[#, {25.895286356170306`, 32.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 37.2}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "37.2`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 37.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.787641526935577`, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.787641526935577`", ",", "28.`"}], "}"}]],
                    Annotation[#, {22.787641526935577`, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.521551718556733`, 26.4}}]},
                    RowBox[{"{", 
                    RowBox[{"21.521551718556733`", ",", "26.4`"}], "}"}]],
                    Annotation[#, {21.521551718556733`, 26.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.599358381192253`, 24.3}}]},
                    RowBox[{"{", 
                    RowBox[{"21.599358381192253`", ",", "24.3`"}], "}"}]],
                    Annotation[#, {21.599358381192253`, 24.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.799459300433437`, 19.1}}]},
                    RowBox[{"{", 
                    RowBox[{"19.799459300433437`", ",", "19.1`"}], "}"}]],
                    Annotation[#, {19.799459300433437`, 19.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.00208788156931, 34.3}}]},
                    RowBox[{"{", 
                    RowBox[{"26.00208788156931`", ",", "34.3`"}], "}"}]],
                    Annotation[#, {26.00208788156931, 34.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.327744260976864`, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.327744260976864`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {23.327744260976864`, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.718903013957036`, 31.3}}]},
                    RowBox[{"{", 
                    RowBox[{"23.718903013957036`", ",", "31.3`"}], "}"}]],
                    Annotation[#, {23.718903013957036`, 31.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.99306566764187, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.99306566764187`", ",", "37.`"}], "}"}]],
                    Annotation[#, {23.99306566764187, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.432740798636985`, 32.2}}]},
                    RowBox[{"{", 
                    RowBox[{"25.432740798636985`", ",", "32.2`"}], "}"}]],
                    Annotation[#, {25.432740798636985`, 32.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.440584500342727`, 46.6}}]},
                    RowBox[{"{", 
                    RowBox[{"26.440584500342727`", ",", "46.6`"}], "}"}]],
                    Annotation[#, {26.440584500342727`, 46.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.672958040430753`, 27.9}}]},
                    RowBox[{"{", 
                    RowBox[{"21.672958040430753`", ",", "27.9`"}], "}"}]],
                    Annotation[#, {21.672958040430753`, 27.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.63477462938156, 40.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.63477462938156`", ",", "40.8`"}], "}"}]],
                    Annotation[#, {26.63477462938156, 40.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.323520348154695`, 44.3}}]},
                    RowBox[{"{", 
                    RowBox[{"29.323520348154695`", ",", "44.3`"}], "}"}]],
                    Annotation[#, {29.323520348154695`, 44.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.489297917361213`, 43.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.489297917361213`", ",", "43.4`"}], "}"}]],
                    Annotation[#, {24.489297917361213`, 43.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.383337038244495`, 36.4}}]},
                    RowBox[{"{", 
                    RowBox[{"22.383337038244495`", ",", "36.4`"}], "}"}]],
                    Annotation[#, {22.383337038244495`, 36.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.193970079118717`, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.193970079118717`", ",", "30.`"}], "}"}]],
                    Annotation[#, {22.193970079118717`, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 44.6}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "44.6`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 44.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.896125277457582`, 40.9}}]},
                    RowBox[{"{", 
                    RowBox[{"28.896125277457582`", ",", "40.9`"}], "}"}]],
                    Annotation[#, {28.896125277457582`, 40.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.71657367928936, 33.8}}]},
                    RowBox[{"{", 
                    RowBox[{"26.71657367928936`", ",", "33.8`"}], "}"}]],
                    Annotation[#, {26.71657367928936, 33.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.701935148418748`, 29.8}}]},
                    RowBox[{"{", 
                    RowBox[{"28.701935148418748`", ",", "29.8`"}], "}"}]],
                    Annotation[#, {28.701935148418748`, 29.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.55537311009359, 32.7}}]},
                    RowBox[{"{", 
                    RowBox[{"18.55537311009359`", ",", "32.7`"}], "}"}]],
                    Annotation[#, {18.55537311009359, 32.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.281204976463243`, 23.7}}]},
                    RowBox[{"{", 
                    RowBox[{"24.281204976463243`", ",", "23.7`"}], "}"}]],
                    Annotation[#, {24.281204976463243`, 23.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.92131227162484, 35.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.92131227162484`", ",", "35.`"}], "}"}]],
                    Annotation[#, {22.92131227162484, 35.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.84939335314777, 23.6}}]},
                    RowBox[{"{", 
                    RowBox[{"21.84939335314777`", ",", "23.6`"}], "}"}]],
                    Annotation[#, {21.84939335314777, 23.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.640405327388144`, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.640405327388144`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {24.640405327388144`, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.358362107154715`, 27.2}}]},
                    RowBox[{"{", 
                    RowBox[{"23.358362107154715`", ",", "27.2`"}], "}"}]],
                    Annotation[#, {23.358362107154715`, 27.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.147080430650274`, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"23.147080430650274`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {23.147080430650274`, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.32216476613655, 25.8}}]},
                    RowBox[{"{", 
                    RowBox[{"23.32216476613655`", ",", "25.8`"}], "}"}]],
                    Annotation[#, {23.32216476613655, 25.8}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.45711587088527, 23.5}}]},
                    RowBox[{"{", 
                    RowBox[{"21.45711587088527`", ",", "23.5`"}], "}"}]],
                    Annotation[#, {21.45711587088527, 23.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.73581009412301, 30.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.73581009412301`", ",", "30.`"}], "}"}]],
                    Annotation[#, {23.73581009412301, 30.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.202628926239694`, 39.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.202628926239694`", ",", "39.1`"}], "}"}]],
                    Annotation[#, {29.202628926239694`, 39.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.701935148418748`, 39.}}]},
                    RowBox[{"{", 
                    RowBox[{"28.701935148418748`", ",", "39.`"}], "}"}]],
                    Annotation[#, {28.701935148418748`, 39.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.105069577757792`, 35.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.105069577757792`", ",", "35.1`"}], "}"}]],
                    Annotation[#, {29.105069577757792`, 35.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{28.87644582720955, 32.3}}]},
                    RowBox[{"{", 
                    RowBox[{"28.87644582720955`", ",", "32.3`"}], "}"}]],
                    Annotation[#, {28.87644582720955, 32.3}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.309430451638697`, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.309430451638697`", ",", "37.`"}], "}"}]],
                    Annotation[#, {29.309430451638697`, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.299259706796626`, 37.7}}]},
                    RowBox[{"{", 
                    RowBox[{"29.299259706796626`", ",", "37.7`"}], "}"}]],
                    Annotation[#, {29.299259706796626`, 37.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.202628926239694`, 34.1}}]},
                    RowBox[{"{", 
                    RowBox[{"29.202628926239694`", ",", "34.1`"}], "}"}]],
                    Annotation[#, {29.202628926239694`, 34.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.278269523005328`, 34.7}}]},
                    RowBox[{"{", 
                    RowBox[{"25.278269523005328`", ",", "34.7`"}], "}"}]],
                    Annotation[#, {25.278269523005328`, 34.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.074555107922315`, 34.4}}]},
                    RowBox[{"{", 
                    RowBox[{"29.074555107922315`", ",", "34.4`"}], "}"}]],
                    Annotation[#, {29.074555107922315`, 34.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.49946866220328, 29.9}}]},
                    RowBox[{"{", 
                    RowBox[{"24.49946866220328`", ",", "29.9`"}], "}"}]],
                    Annotation[#, {24.49946866220328, 29.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.41007003050725, 33.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.41007003050725`", ",", "33.`"}], "}"}]],
                    Annotation[#, {26.41007003050725, 33.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.503925506930187`, 34.5}}]},
                    RowBox[{"{", 
                    RowBox[{"24.503925506930187`", ",", "34.5`"}], "}"}]],
                    Annotation[#, {24.503925506930187`, 34.5}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.09955684612438, 33.7}}]},
                    RowBox[{"{", 
                    RowBox[{"26.09955684612438`", ",", "33.7`"}], "}"}]],
                    Annotation[#, {26.09955684612438, 33.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{24.481220372916322`, 32.4}}]},
                    RowBox[{"{", 
                    RowBox[{"24.481220372916322`", ",", "32.4`"}], "}"}]],
                    Annotation[#, {24.481220372916322`, 32.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.240397847201564`, 32.9}}]},
                    RowBox[{"{", 
                    RowBox[{"23.240397847201564`", ",", "32.9`"}], "}"}]],
                    Annotation[#, {23.240397847201564`, 32.9}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.599716962080368`, 31.6}}]},
                    RowBox[{"{", 
                    RowBox[{"23.599716962080368`", ",", "31.6`"}], "}"}]],
                    Annotation[#, {23.599716962080368`, 31.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.27326112590387, 28.1}}]},
                    RowBox[{"{", 
                    RowBox[{"22.27326112590387`", ",", "28.1`"}], "}"}]],
                    Annotation[#, {22.27326112590387, 28.1}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.340842316488615`, 30.7}}]},
                    RowBox[{"{", 
                    RowBox[{"20.340842316488615`", ",", "30.7`"}], "}"}]],
                    Annotation[#, {20.340842316488615`, 30.7}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.032330511317724`, 25.4}}]},
                    RowBox[{"{", 
                    RowBox[{"19.032330511317724`", ",", "25.4`"}], "}"}]],
                    Annotation[#, {19.032330511317724`, 25.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.225412647954975`, 24.2}}]},
                    RowBox[{"{", 
                    RowBox[{"19.225412647954975`", ",", "24.2`"}], "}"}]],
                    Annotation[#, {19.225412647954975`, 24.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.201508181579687`, 22.4}}]},
                    RowBox[{"{", 
                    RowBox[{"19.201508181579687`", ",", "22.4`"}], "}"}]],
                    Annotation[#, {19.201508181579687`, 22.4}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{17.234446934418227`, 26.6}}]},
                    RowBox[{"{", 
                    RowBox[{"17.234446934418227`", ",", "26.6`"}], "}"}]],
                    Annotation[#, {17.234446934418227`, 26.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.59478480409147, 20.2}}]},
                    RowBox[{"{", 
                    RowBox[{"20.59478480409147`", ",", "20.2`"}], "}"}]],
                    Annotation[#, {20.59478480409147, 20.2}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.455158228911912`, 17.6}}]},
                    RowBox[{"{", 
                    RowBox[{"19.455158228911912`", ",", "17.6`"}], "}"}]],
                    Annotation[#, {19.455158228911912`, 17.6}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.46555837131102, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.46555837131102`", ",", "28.`"}], "}"}]],
                    Annotation[#, {22.46555837131102, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.06019558486365, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.06019558486365`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.06019558486365, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.44756047648724, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.44756047648724`", ",", "34.`"}], "}"}]],
                    Annotation[#, {23.44756047648724, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.428559222724484`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.428559222724484`", ",", "31.`"}], "}"}]],
                    Annotation[#, {23.428559222724484`, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.07358839411127, 29.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.07358839411127`", ",", "29.`"}], "}"}]],
                    Annotation[#, {23.07358839411127, 29.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.2224777849114, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.2224777849114`", ",", "27.`"}], "}"}]],
                    Annotation[#, {23.2224777849114, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.04810968213185, 24.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.04810968213185`", ",", "24.`"}], "}"}]],
                    Annotation[#, {22.04810968213185, 24.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{22.326090599801688`, 23.}}]},
                    RowBox[{"{", 
                    RowBox[{"22.326090599801688`", ",", "23.`"}], "}"}]],
                    Annotation[#, {22.326090599801688`, 23.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.074555107922315`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.074555107922315`", ",", "36.`"}], "}"}]],
                    Annotation[#, {29.074555107922315`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 37.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "37.`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 37.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.523222471537803`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.523222471537803`", ",", "31.`"}], "}"}]],
                    Annotation[#, {29.523222471537803`, 31.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.516871555906253`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.516871555906253`", ",", "38.`"}], "}"}]],
                    Annotation[#, {26.516871555906253`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.196278010608143`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.196278010608143`", ",", "36.`"}], "}"}]],
                    Annotation[#, {26.196278010608143`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.461382260100468`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.461382260100468`", ",", "36.`"}], "}"}]],
                    Annotation[#, {25.461382260100468`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.768792555984202`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.768792555984202`", ",", "36.`"}], "}"}]],
                    Annotation[#, {25.768792555984202`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{25.480597054930207`, 34.}}]},
                    RowBox[{"{", 
                    RowBox[{"25.480597054930207`", ",", "34.`"}], "}"}]],
                    Annotation[#, {25.480597054930207`, 34.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.309430451638697`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.309430451638697`", ",", "38.`"}], "}"}]],
                    Annotation[#, {29.309430451638697`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.619853252094735`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.619853252094735`", ",", "32.`"}], "}"}]],
                    Annotation[#, {29.619853252094735`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{29.523222471537803`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"29.523222471537803`", ",", "38.`"}], "}"}]],
                    Annotation[#, {29.523222471537803`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{20.004663381549147`, 25.}}]},
                    RowBox[{"{", 
                    RowBox[{"20.004663381549147`", ",", "25.`"}], "}"}]],
                    Annotation[#, {20.004663381549147`, 25.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{18.722637881118175`, 38.}}]},
                    RowBox[{"{", 
                    RowBox[{"18.722637881118175`", ",", "38.`"}], "}"}]],
                    Annotation[#, {18.722637881118175`, 38.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.14572945341953, 26.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.14572945341953`", ",", "26.`"}], "}"}]],
                    Annotation[#, {23.14572945341953, 26.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{19.216440632634793`, 22.}}]},
                    RowBox[{"{", 
                    RowBox[{"19.216440632634793`", ",", "22.`"}], "}"}]],
                    Annotation[#, {19.216440632634793`, 22.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.300944317783394`, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.300944317783394`", ",", "32.`"}], "}"}]],
                    Annotation[#, {23.300944317783394`, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.885525848079904`, 36.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.885525848079904`", ",", "36.`"}], "}"}]],
                    Annotation[#, {23.885525848079904`, 36.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.675190843151178`, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"21.675190843151178`", ",", "27.`"}], "}"}]],
                    Annotation[#, {21.675190843151178`, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{21.98400879039553, 27.}}]},
                    RowBox[{"{", 
                    RowBox[{"21.98400879039553`", ",", "27.`"}], "}"}]],
                    Annotation[#, {21.98400879039553, 27.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{26.00208788156931, 44.}}]},
                    RowBox[{"{", 
                    RowBox[{"26.00208788156931`", ",", "44.`"}], "}"}]],
                    Annotation[#, {26.00208788156931, 44.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.665622274947, 32.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.665622274947`", ",", "32.`"}], "}"}]],
                    Annotation[#, {23.665622274947, 32.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.228996697692565`, 28.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.228996697692565`", ",", "28.`"}], "}"}]],
                    Annotation[#, {23.228996697692565`, 28.}, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    {Opacity[0.], PointBox[{{23.385616704720686`, 31.}}]},
                    RowBox[{"{", 
                    RowBox[{"23.385616704720686`", ",", "31.`"}], "}"}]],
                    
                    Annotation[#, {23.385616704720686`, 31.}, 
                    "Tooltip"]& ]}}, {{}, {}}}, {{{}, {}, 
                   TagBox[
                    {GrayLevel[0.2], AbsoluteThickness[1.], Opacity[0.5], 
                    AbsoluteDashing[{2, 4}], LineBox[CompressedData["
1:eJxFxWswEwAcAPBROo8Zk0hqxa4Ut2yKeUTzaJyMQi8Xd3MN43byiijncuVx
dnV0HC1O8qgrrdvZpHWn3eE89mFnx8lJM22dzrHYuDOt+tD//+F3P6/M/GSe
NYFA4Pz1b/vtIEFsrT/r/1Vb/fqbQtxkOpFZ2IhrjW7Xnotw+YaJtSHGBWtS
1445PKfIM6PiAB2eyn1mM52Fz+qdyxnuDHjIIVi7+BFvpSZfTkkPgOXjmuUS
4hlY5kYV/HiHGw1zh+y5Z2H/z9XKdVIgHMlcLPZ5j7eEiSMduUHwiC5gT7QN
E1572Dce3oOnS5oG9KnBcFcNvVmzhdNWokT1fSGwhBXXu30lFCZHWHqkW7hk
3G+K2hsG08x2um/x5+Cf8vTjHDPeXfCSX/k6HGYqRS8sCREwUWZvRd/Fh2J9
U8Wd52FGFmWm3IsF9+YvuRrL8LoEC6dlAheuz3iQqZHwY9LJnNW7+K5FJTZM
4MLBoAaldxRcF7PJVRXj1fF+Q8wRvMP9SHfJ4WjYZzC7fl6Aq44KrD1GcX3a
ZHHlwRh4x6mLz+bjjIZAw/dhfHr+WNFblwtwy6/RmoQ8/Ea1jpKowGv0GeLS
/Wx41qVRXZaHN5EpG52fcE499SmNFAufmtCOPeHhBQtmo6cMvzU8R64dxK92
SWmbH/BQ/m3elBzfa9Sq7ynwZuKkZEGJy8NaCzqW8X7KHaGDDu+0SnlVqscf
jRE1SSt4UkrVJcI6vpSb7c/dwdWcmItKMz5G98oO+Y2/MX1pJ1vFwSUPEkmK
fXgOz8/3tC2eFmfLbrPDI0iK+4VEnG5ob/3qiFPVFQPxTrib7LpK6ozbtgWu
ervgfwDrcyIb
                    "]]},
                    Annotation[#, "Charting`Private`Tag$115179#1"]& ]}, {}}},
                Axes->{False, False},
                AxesLabel->{None, None},
                AxesOrigin->{15.766169281139138`, 15.766169281139138`},
                DisplayFunction->Identity,
                Frame->{{True, False}, {True, False}},
                FrameLabel->{{
                   FormBox["\"actual value\"", TraditionalForm], None}, {
                   FormBox["\"predicted value\"", TraditionalForm], None}},
                FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
                GridLines->{Automatic, Automatic},
                GridLinesStyle->Directive[
                  GrayLevel[0.5, 0.5], 
                  AbsoluteThickness[1], 
                  AbsoluteDashing[{1, 2}]],
                ImageSize->250,
                
                Method->{
                 "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True,
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}},
                
                PlotRange->{{15.766169281139138`, 48.141691535943046`}, {
                 15.766169281139138`, 48.141691535943046`}},
                PlotRangeClipping->True,
                PlotRangePadding->{{0, 0}, {0, 0}},
                Ticks->{Automatic, Automatic}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.8229498769775805`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"af270a0b-c925-4d7a-ae03-5b172e0bd782"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5b9a\:5236\:9884\:6d4b\:5668", "Section",
 CellChangeTimes->{{3.7674848370034037`*^9, 3.767484837578887*^9}, {
  3.7675265197325068`*^9, 3.7675265276438503`*^9}, {3.8141134878436337`*^9, 
  3.814113493197124*^9}, {3.814114200917263*^9, 3.814114206046277*^9}, {
  3.814187881966103*^9, 3.814187885706417*^9}, {3.814214823748493*^9, 
  3.814214828987865*^9}, {3.822949972832326*^9, 
  3.8229499752145452`*^9}},ExpressionUUID->"2226d9d2-64cc-46c4-b0bf-\
fbfacfc88b1c"],

Cell[CellGroupData[{

Cell["\:9884\:6d4b\:5668\:53ef\:7528\:7b97\:6cd5", "Subsection",
 CellChangeTimes->{{3.7674848370034037`*^9, 3.767484837578887*^9}, {
  3.7675265197325068`*^9, 3.7675265276438503`*^9}, {3.8141134878436337`*^9, 
  3.814113493197124*^9}, {3.814114200917263*^9, 3.814114206046277*^9}, {
  3.814187881966103*^9, 3.814187885706417*^9}, {3.814214823748493*^9, 
  3.814214826436385*^9}, {3.822950016863845*^9, 
  3.8229500194672546`*^9}},ExpressionUUID->"37cc4671-d433-4d6a-843e-\
04e97c9f34a9"],

Cell[TextData[{
 "\:901a\:8fc7\:6539\:53d8 ",
 StyleBox[ButtonBox["Method",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Method"],
  FontWeight->"Bold"],
 " \:9009\:9879\:66f4\:6362\:7b97\:6cd5"
}], "Text",
 CellChangeTimes->{{3.814114283265462*^9, 3.814114295158824*^9}, 
   3.814287461465719*^9, {3.822950024814289*^9, 
   3.82295004074562*^9}},ExpressionUUID->"e9c4662d-692a-4905-b512-\
6133a8db15ac"],

Cell[TextData[StyleBox[ButtonBox["DecisionTree",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/language/ref/method/DecisionTree.html"], 
   None},
 ButtonNote->
  "http://reference.wolfram.com/language/ref/method/DecisionTree.html"],
 FontWeight->"Plain"]], "Item",
 CellChangeTimes->{{3.767526548602433*^9, 3.767526556061431*^9}, {
  3.823451651478298*^9, 
  3.823451670318406*^9}},ExpressionUUID->"a08c353a-0bcb-4993-910a-\
78d4d701dd07"],

Cell[TextData[StyleBox[ButtonBox["GradientBoostedTrees",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/language/ref/method/GradientBoostedTrees.\
html"], None},
 ButtonNote->
  "http://reference.wolfram.com/language/ref/method/GradientBoostedTrees.\
html"],
 FontWeight->"Plain"]], "Item",
 CellChangeTimes->{{3.767526567083296*^9, 3.7675265689629107`*^9}, 
   3.814113560586523*^9, {3.82345195398355*^9, 
   3.8234519539845467`*^9}},ExpressionUUID->"d4e980fb-729b-48a0-ac00-\
3bfa5798df4d"],

Cell[TextData[StyleBox[ButtonBox["LinearRegression",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/language/ref/method/LinearRegression.\
html"], None},
 ButtonNote->
  "http://reference.wolfram.com/language/ref/method/LinearRegression.html"],
 FontWeight->"Plain"]], "Item",
 CellChangeTimes->{{3.7675265384181833`*^9, 3.767526541060274*^9}, {
  3.8234519784477453`*^9, 
  3.823451978448743*^9}},ExpressionUUID->"9b85f205-3b6b-44dc-b04c-\
e05c0a4578d4"],

Cell[TextData[StyleBox[ButtonBox["NearestNeighbors",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/language/ref/method/NearestNeighbors.\
html"], None},
 ButtonNote->
  "http://reference.wolfram.com/language/ref/method/NearestNeighbors.html"],
 FontWeight->"Plain"]], "Item",
 CellChangeTimes->{{3.76752654333858*^9, 3.7675265465035954`*^9}, {
  3.8234519942700186`*^9, 
  3.8234519942720137`*^9}},ExpressionUUID->"e4bae39f-aefd-4b6c-94a5-\
60ead6badbd4"],

Cell[TextData[StyleBox[ButtonBox["NeuralNetwork",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/language/ref/method/NeuralNetwork.html"],
    None},
 ButtonNote->
  "http://reference.wolfram.com/language/ref/method/NeuralNetwork.html"],
 FontWeight->"Plain"]], "Item",
 CellChangeTimes->{{3.767526569913059*^9, 3.767526576567363*^9}, {
  3.8234520290642157`*^9, 
  3.82345202906621*^9}},ExpressionUUID->"a6579185-7f48-4f09-902a-\
060bf7ca139c"],

Cell[TextData[StyleBox[ButtonBox["RandomForest",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/language/ref/method/RandomForest.html"], 
   None},
 ButtonNote->
  "http://reference.wolfram.com/language/ref/method/RandomForest.html"],
 FontWeight->"Plain"]], "Item",
 CellChangeTimes->{{3.767526579227069*^9, 3.767526582125113*^9}, {
  3.8234519172758875`*^9, 
  3.823451917277882*^9}},ExpressionUUID->"dd541d5f-f0e2-47cd-b2cb-\
c4ab0b3f72e7"],

Cell[TextData[StyleBox[ButtonBox["GaussianProcess",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://reference.wolfram.com/language/ref/method/GaussianProcess.\
html"], None},
 ButtonNote->
  "http://reference.wolfram.com/language/ref/method/GaussianProcess.html"],
 FontWeight->"Plain"]], "Item",
 CellChangeTimes->{{3.7675265847395563`*^9, 3.7675265875250397`*^9}, {
  3.8234520588261514`*^9, 
  3.8234520588271484`*^9}},ExpressionUUID->"87e578df-d713-4509-9842-\
15fc41133943"],

Cell["\:4ea7\:751f\:4e00\:4e9b\:8bad\:7ec3\:6570\:636e", "Text",
 CellChangeTimes->{{3.767486724839448*^9, 3.767486855689809*^9}, {
  3.767487441389111*^9, 3.767487443989415*^9}, {3.767487478412405*^9, 
  3.767487485923401*^9}, {3.82295005248817*^9, 
  3.822950061019289*^9}},ExpressionUUID->"78600a2c-fca2-4f29-9d75-\
6c7cadb4fc55"],

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"n", "\[Rule]", 
     RowBox[{"Sin", "[", "n", "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"a30d7c18-da80-444c-ad11-6f6b5a18d428"],

Cell["\:7528\:968f\:673a\:68ee\:6797\:6765\:8bad\:7ec3", "Text",
 CellChangeTimes->{{3.767486724839448*^9, 3.767486855689809*^9}, {
  3.767487441389111*^9, 3.767487443989415*^9}, {3.767487478412405*^9, 
  3.7674875249950237`*^9}, {3.822950069155505*^9, 
  3.822950074377904*^9}},ExpressionUUID->"80c729fc-d1c1-4d2c-bac9-\
7b9a26ca8841"],

Cell[BoxData[
 RowBox[{"randomforest", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", " ", "\"\<RandomForest\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"669250d8-bc18-4377-9b6c-63cfd133cc18"],

Cell["\:7528 Gaussian Process \:6765\:8bad\:7ec3", "Text",
 CellChangeTimes->{{3.767486724839448*^9, 3.767486855689809*^9}, {
  3.767487441389111*^9, 3.767487443989415*^9}, {3.767487478412405*^9, 
  3.7674875375334187`*^9}, {3.8229500858111067`*^9, 
  3.822950094308921*^9}},ExpressionUUID->"b5f4d7af-04fa-4818-b8e7-\
831186fd149c"],

Cell[BoxData[
 RowBox[{"gaussianprocess", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", " ", "\"\<GaussianProcess\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"bb94ceda-bf43-4374-9cda-be0063449cea"],

Cell["\:6bd4\:8f83\:4e24\:79cd\:65b9\:6cd5\:5f97\:7ed3\:679c", "Text",
 CellChangeTimes->{{3.767487542779801*^9, 3.767487548370131*^9}, 
   3.767526204544402*^9, {3.767526610067647*^9, 3.7675266135068502`*^9}, {
   3.767527007973991*^9, 3.767527008347425*^9}, {3.8229501024623613`*^9, 
   3.822950112905899*^9}},ExpressionUUID->"b91f5b12-6d5b-48f4-8f4c-\
5ee30ba2545e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"randomforest", "[", "x", "]"}], ",", " ", 
     RowBox[{"gaussianprocess", "[", "x", "]"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"Exclusions", "\[Rule]", "None"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Red", ",", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Point", "[", 
         RowBox[{"{", 
          RowBox[{"#", ",", 
           RowBox[{"Sin", "[", "#", "]"}]}], "}"}], "]"}], "&"}], "/@", 
       RowBox[{"Range", "[", "10", "]"}]}]}], "}"}]}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<RandomForest\>\"", ",", "\"\<GaussianExpress\>\""}], 
     "}"}]}]}], "]"}]], "Input",ExpressionUUID->"06e5d5fd-5eec-4050-9d2a-\
734778f7b6fd"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJxFzn8w1Hkcx/HvbVn2dtdubFixWEqRUfTjNLJfOtpF56a2n5yU/Bojo1TT
lcrvHxEaP/dQWToVm9XeXA2HExv9Ii5HfpMdbK3dnfWrsHf3x33ef7zmOY//
Xlanow+GEDAMK/x3/7VPdWA7hik551RkgbDtA0eq/zjrBzL4iT19psQIfJcb
4yW3At8K6S53cVByKIWvF69o+zjhd/L8e/eB9/UfYZw/AV70HUiuTgWLmk8u
TErAplXhH47RVMjJ2TF/vIoABwQmJopZamQnh3xeYQ/Ybn9c3Dt/DbLVqRAx
+eMccn32WoOk5kXkCirRuezWV+QJro+cyVhBZiflCPOLV5GjRmVxfD8t/Clj
VacTMPx/W65tLZ6kgicjIlLdmeB2M9drsyzww079C6U24MyEsUgfO/DZnZLT
S44YLlnxS89cKOMsYtq9Yi9w/GseM+IncF7wSGdfBvj+l9gU7lOwUX6NxC3u
G+RkR9n4Dg8CMiUzzULdugZ5OuT2MbGDDvJyzhKXqwLTG4JcRiRE5Nltom32
dF3kt5VfbS9Fgt2Cyq3Ni8EiU57FcynYu8OpbGs3WHbJzLxgCLzDL3fQewKc
sIlYop0Cd6387C9R6OLsGULhxb1/NbHez5pGaMBHnJ6buJL1kLOyC4xobLAl
1fsC7T24LmOlh5ZGQrYibHG5TiEjy+brBcqLFOS5MMOKLi0VuRoryYqPpyE7
Ek32nx0A9+t436gxpSMTZetlV83peL1qTK9O1tvkJB3z8bUEB96vEW+wBmek
XDaWbwSPe62bSLcH79F9INq8HTyT2ucZ6goW6OkNCfeDv5LCyBaB4ACy1EUQ
C1Y7Opeye8Fp/LvYo93rkE8GiNoaPoP9y8uGdZ4YIO+jWQuHDQ2R7a/+GvZ7
LNi7/CLp4z1weLvnI3onWJn7rMf/A/iSv8Py/Ulw3wFv6eUp8B48LMdXbogf
3pnEtxV3NZU4JZ2wUIBXbe7ZqJXgFtLA08J5cIqCcWDvMrggfrm0x4CBXMn4
qIjYAp67fn4w8CbYU054eegzOOfGYaFbxXpk0YPmT7lHjZDVdP0MM1Nj5Bnh
26PjseCxXdkbqzrB7KhkvmYAfEZ4JRGfAic1zgtCFeDK/pi6TA14V5hj450F
sFTzqaPuC/hIwsP3bStgGS18rA8zwfEbjsKONe844Vf5nBgmWD6Fl5KcwMo/
mcf3BIPnBGpGZB54uqC2FZsDD90+G1twmIkczWN1t5BMkW3dahM3vQFnqC44
30zcgNz8Hf/QsV1myGaNjBcBi2BrAsnldI05sl/SyGpZDAt5U9t0y+BmC+Su
YspCwiA4tMV3ongcvDKT2Vk7BeZqqz0b5OA8wzf1LxTgEdvP23tUYDtXatWw
xgKn9mR3/2bZxamWeuEpmCWyx2zK1lIiOBrX1XllAC7JTR1aZIHnndNu8XeD
f+xN49T6gR9/azxmGwfW51Qm3HkIHpbWRdtRrZCLil7nTUeBq3iYy5Z2cG1c
OuXuKPiZ2GDUaAncsKrJ26EFN/r8zTuow0bmnOPanNIDNxc9W40mg7Gt6sgF
Cti9ya7/mj4bl/iMrvn+yltOwsFgLyId3DL5y5OsdWDp9SDzDnPwS+bG1LV2
4JSY1qi6o2CPjmB+UDK4okV0XDkMNhmY0TPDrZHHu/Hd7QIwP+OmyZk34Db3
3iWtFvwPFq2hGw==
           "]]}, Annotation[#, "Charting`Private`Tag$495357#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1: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
           "]]}, 
         Annotation[#, "Charting`Private`Tag$495357#2"]& ]}}, {}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0]], 
         PointBox[{{1., 0.8414709848078965}, {2., 0.9092974268256817}, {3., 
          0.1411200080598672}, {4., -0.7568024953079282}, {
          5., -0.9589242746631385}, {6., -0.27941549819892586`}, {7., 
          0.6569865987187891}, {8., 0.9893582466233818}, {9., 
          0.4121184852417566}, {10., -0.5440211108893698}}]}}, {{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0]]}, {}}, {{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0]]}, {}}}, {{}, {}}}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {1., 0}, FrameTicks -> {{Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {1., 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{1, 10}, {-0.9863152524929317, 0.9984747362227674}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"RandomForest\"", "\"GaussianProcess\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",ExpressionU\
UID->"65aeb562-5da1-4d93-8c0d-d0f6e49d9520"]
}, Open  ]],

Cell[TextData[StyleBox["\:6bd4\:8f83\:4e24\:79cd\:8bad\:7ec3\:65b9\:6cd5\:7684\
\:5dee\:5f02", "Text"]], "Text",
 CellChangeTimes->{{3.767487542779801*^9, 3.767487563633298*^9}, 
   3.767526206637783*^9, {3.767526624147252*^9, 3.767526626643156*^9}, {
   3.767527014643314*^9, 3.767527015115937*^9}, {3.8235088426302814`*^9, 
   3.823508860512617*^9}},ExpressionUUID->"9b7e84ae-53f9-44ee-bbfc-\
19e720487f8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Information", "[", 
     RowBox[{"#1", ",", "\"\<TrainingTime\>\""}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"{", 
   RowBox[{"randomforest", ",", "gaussianprocess"}], "}"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"2e304db7-0499-4fb5-a898-7dc259a696f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6027\:80fd\:76ee\:6807", "Subsection",
 CellChangeTimes->{{3.81411426110534*^9, 3.8141142669094763`*^9}, {
   3.814185640597773*^9, 3.814185652779811*^9}, 3.8141879167833967`*^9, 
   3.8142148351551228`*^9, {3.8229501275010667`*^9, 
   3.8229501300423727`*^9}},ExpressionUUID->"6e6bcca5-8edd-4269-80de-\
39ac8ca67049"],

Cell[TextData[{
 "\:9488\:5bf9 ",
 StyleBox["TrainingSpeed", "Input",
  FontFamily->"Times New Roman",
  FontWeight->"Normal"],
 StyleBox[" \:4f18\:5316", "Input",
  FontFamily->"Microsoft YaHei",
  FontWeight->"Normal"]
}], "Text",
 CellChangeTimes->{{3.767487542779801*^9, 3.767487563633298*^9}, {
   3.767487686282613*^9, 3.767487721328601*^9}, {3.767487903602045*^9, 
   3.7674879052971373`*^9}, {3.767488143466709*^9, 3.767488157460495*^9}, {
   3.767526654116688*^9, 3.76752665438013*^9}, {3.8229501338875947`*^9, 
   3.822950163695857*^9}, 
   3.8229502586864986`*^9},ExpressionUUID->"89ad362d-78fc-4a3d-9336-\
1230805f1015"],

Cell[BoxData[
 RowBox[{"p1", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"data", ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<TrainingSpeed\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"e525f5cf-4b4c-4059-b84d-97962dabff3f"],

Cell[TextData[{
 "\:9488\:5bf9 ",
 StyleBox["Quality", "Input",
  FontFamily->"Times New Roman",
  FontWeight->"Normal"],
 StyleBox[" \:4f18\:5316", "Input",
  FontFamily->"Microsoft YaHei",
  FontWeight->"Normal"]
}], "Text",
 CellChangeTimes->{{3.767487542779801*^9, 3.767487563633298*^9}, {
   3.767487686282613*^9, 3.767487721328601*^9}, {3.767487903602045*^9, 
   3.7674879052971373`*^9}, {3.767488143466709*^9, 3.767488157460495*^9}, {
   3.767526654116688*^9, 3.76752665438013*^9}, {3.8229501338875947`*^9, 
   3.822950163695857*^9}, 3.8229502134020834`*^9, 
   3.822950261015855*^9},ExpressionUUID->"dde50315-e9b4-4519-84a3-\
323e9106833a"],

Cell[BoxData[
 RowBox[{"p2", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"data", ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"384312ef-353d-4679-b968-1332c3209638"],

Cell["\:6bd4\:8f83\:4e24\:79cd\:8bad\:7ec3\:65b9\:5f0f\:7684\:8017\:65f6", \
"Text",
 CellChangeTimes->{{3.767487542779801*^9, 3.767487563633298*^9}, {
  3.767487686282613*^9, 3.767487721328601*^9}, {3.767487903602045*^9, 
  3.7674879052971373`*^9}, {3.767488143466709*^9, 3.767488157460495*^9}, {
  3.767488192788989*^9, 3.767488220986294*^9}, {3.8229502239059505`*^9, 
  3.8229502361224513`*^9}},ExpressionUUID->"a1957cef-9b69-4559-ba1d-\
1166575bd374"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Information", "[", 
     RowBox[{"#1", ",", "\"\<TrainingTime\>\""}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"{", 
   RowBox[{"p1", ",", "p2"}], "}"}]}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"dfad4fb9-6f34-41b3-91ed-abbdfde8d4bc"],

Cell["\:68c0\:67e5\:7f3a\:7701\:60c5\:51b5\:4e0b\:7684\:9884\:6d4b\:5668\:8bad\
\:7ec3\:8017\:65f6", "Text",
 CellChangeTimes->{{3.767487542779801*^9, 3.767487563633298*^9}, {
  3.767487686282613*^9, 3.767487721328601*^9}, {3.767487903602045*^9, 
  3.7674879052971373`*^9}, {3.767488143466709*^9, 3.767488157460495*^9}, {
  3.767488192788989*^9, 3.767488220986294*^9}, {3.7674882578573313`*^9, 
  3.767488269448854*^9}, {3.8229502462952185`*^9, 3.8229502527762275`*^9}, {
  3.8229503335618334`*^9, 
  3.822950337090168*^9}},ExpressionUUID->"c3a45f9b-1a47-4263-bc53-\
c4d2d060f016"],

Cell[BoxData[
 RowBox[{"p3", "=", 
  RowBox[{"Predict", "[", "data", "]"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"73403138-a6ab-495d-9c73-65af78f88b97"],

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"p3", ",", "\"\<TrainingTime\>\""}], "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"4bc86968-91e2-4067-9ccf-a689cef2aa51"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5e8f\:5217\:9884\:6d4b", "Section",
 CellChangeTimes->{{3.705643294958967*^9, 3.705643299504012*^9}, {
   3.705645424639019*^9, 3.705645427371448*^9}, {3.705662019917488*^9, 
   3.7056620234040947`*^9}, {3.705750674720435*^9, 3.705750675674073*^9}, {
   3.813318542500795*^9, 3.8133185463652573`*^9}, 3.8140995536603613`*^9, {
   3.8229503581498384`*^9, 
   3.822950362884699*^9}},ExpressionUUID->"c0a2988f-171c-4b5f-a25b-\
78e5f330dc4a"],

Cell[TextData[{
 StyleBox[ButtonBox["SequencePredict",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SequencePredict"],
  FontWeight->"Bold"],
 " \:51fd\:6570\:7528\:6765\:9884\:6d4b\:79bb\:6563\:6570\:5217\:7684\:4e0b\
\:4e00\:9879"
}], "Text",
 CellChangeTimes->{{3.705815077028956*^9, 3.7058151283024*^9}, {
   3.813318552301173*^9, 3.81331855317323*^9}, 3.814287499015153*^9, {
   3.814287541776084*^9, 3.8142876036734877`*^9}, {3.8229503892419047`*^9, 
   3.822950420762002*^9}},ExpressionUUID->"d868a029-b0a1-481c-a68a-\
244a72898ff9"],

Cell[TextData[{
 "\:4ea7\:751f ",
 StyleBox[ButtonBox["SequencePredictorFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SequencePredictorFunction"],
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{{3.814285487055746*^9, 3.8142855116872597`*^9}, {
   3.814286160708074*^9, 3.8142862048254433`*^9}, {3.814286474567862*^9, 
   3.8142865243132267`*^9}, {3.814286718952166*^9, 3.814286732731657*^9}, 
   3.8142868143708687`*^9, {3.8142876179829693`*^9, 3.814287631669866*^9}, 
   3.8229504295902777`*^9},ExpressionUUID->"3b42c074-2541-42ea-a331-\
4f21c0f5dd49"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"spf", "=", 
  RowBox[{"SequencePredict", "[", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "2", ",", "3", ",", 
      "4", ",", "1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "2", ",", 
      "3", ",", "4", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7056605955543833`*^9, 3.7056606147364893`*^9}, {
  3.70582561786087*^9, 3.705825635180519*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"8c908438-39ec-4c23-abc1-e7622d7e3750"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SequencePredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{
                Thickness[0.002], {{
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   499.}, {1., 499.}, {1., 500.001}, {0., 500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    499.}, {500.001, 499.}, {500.001, 500.001}, {499., 
                   500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   0.}, {1., 0.}, {1., 1.}, {0., 1.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    0.}, {500.001, 0.}, {500.001, 1.}, {499., 1.}}}]}}, {{
                  FaceForm[{
                    RGBColor[0.604, 0.604, 0.604], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{72., 
                   426.}, {150., 426.}, {150., 348.}, {72., 348.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{347.,
                    288.}, {425., 288.}, {425., 210.}, {347., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{130.55, 132.031}, {
                   91.46900000000002, 132.031}, {91.46900000000002, 
                   92.95000000000002}, {130.55, 92.95000000000002}}, {{72., 
                   152.}, {150., 152.}, {150., 74.}, {72., 74.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   268.03099999999995`}, {228.46900000000002`, 
                   268.03099999999995`}, {228.46900000000002`, 
                   228.94999999999996`}, {267.55, 228.94999999999996`}}, {{
                   209., 288.}, {287., 288.}, {287., 210.}, {209., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   405.03099999999995`}, {228.46900000000002`, 
                   405.03099999999995`}, {228.46900000000002`, 
                   365.94999999999993`}, {267.55, 365.94999999999993`}}, {{
                   209., 425.}, {287., 425.}, {287., 347.}, {209., 347.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{155., 250.}, {155., 225.147}, {134.853, 205.}, {
                   110., 205.}, {85.147, 205.}, {65., 225.147}, {65., 250.}, {
                   65., 274.853}, {85.147, 295.}, {110., 295.}, {134.853, 
                   295.}, {155., 274.853}, {155., 250.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0GChUOYPpBlYMhxxqZqEllcD6YDih1OP89+PHS
uZVwPpgWqIDzwfqaylD1O0DVwcx3gJqzthJV/kMVXD+Mj2I+kA+zH0U/zH1I
7kfhL6h0OPxVI6b/D4IPpjdAxd9UwPko9gH5tlzXFxcYl6PqbyhDNR/IB6tz
LkeVn1AG1w/jo5gP5MPsR9EPcx+S+wFHkGkl
                   "]]}}, {{
                  FaceForm[{
                    RGBColor[0.267, 0.267, 0.267], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk21IU2EUx5eI2NLsTVYULBMLE5GsD2UZf6P8oCJqZrrNud1tllqIxu7L
JExULN+QihQblGKi5dLENLWiF0RKxA0xS/ElE83SFSJSJtXzeGn70IfLc3/c
/3nOOf9zrg+TGWdwkUgkh8lDz1rfztWiRzysQwnzQbnxiMZW7evd3H/Mm4ny
qhKtOYstMcEczrxsqIs2K3HsWdwtHy2Hm8tuKVVWpagv5bC9wyYZd1OhnRwu
bRxOpWV+LwxVIcCwYypxmkM6wTdXVBgdzrsULuMRm1HNme0quKwvlusiebwj
6bvzk/ExUdZhu8zjD03soUYM1d3jcZsjBVnUoLJ9r3iwWTs9J7UpYj0TPN5v
WQwb8NCI8Qvkvtn0gGWjk0N8I3Ly55xMKCiqSgvVxZ7frVYee+RLFxJkDOJp
n5U8FINPP23TMSDZvDZoeBQERdVLmxis0IDNPPYaXardbQyuyXV2RTPnYLvi
xPHP2U52J+3ZA4lfRYWKwXYGddSwKVa8P58BtTHKzCJNkpnneppBr3/I9T4F
C0vJ6HmJNwPadqecxf6+Tb1db7U4d5IYu2JEvTTcz2h28ppe0INU+7heyoKo
n5QV6NF/f2AoIZQFvb6nUS/2V8hiZeHriyM2PQSacJKFl/lgbdtPvVhvJIfx
G6RgfwOIu+XGLk70L8wAWq63P+9gaqfkm5Mr7v44MFMmwJo6NJs+p0c4XZR1
JoyECokNR/UoN5LBGU2om3i+0VymE/fBYkLVGEnYwji4uZ3J/VCpdfCaf8sa
0HXMqDHBM6upZDRVI86n2ITgmYd+08Mp4jyzTViigVNqMT7WhDvUCKla/L7X
BLpGXmeT0UQH+kvACH2pUYl+9QrIJusVuKoExfliAQ/omaEEXWdZtAALjRtR
iPN0F7CLyCviFeK8unk00g9jSfj3v5VGfHE91J+Ev8kFnlk=
                    "], {{397.24569999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 73.5373}, {397.24569999999994`, 
                    73.5373}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk3swVFEcx3ckGqEHUpNq5FFRKdNMD8m3l5EalRBr19prNdlr995L6zH+
iPQwFWOmB2kV2hFFykykZFKDRgkZ8ogkeaWmMVIM6dx2Wn/0x51zP+d8f+f3
O7/zPdYU4x2qJxAItpCPH3NsyibPWbNoaPYbdnLzgTre/vlZa8V/HKMmyqRA
hP7slWbvUcC3Mk/jpQ7E2dtHa51zFLg8ZiBJbwjEncJWSdS4Ava9iTfqDETo
u7j6q4mHEnvDmO9nXEXwyCQb5ikh2rVjoC1ehLxTh/dlmjI4TGdEq7+JMHuh
uVt1FIMWkv5JohgvHqxX3upgMF0cN3LfOAiHeJ0Fi+vRpKDCIPCyVc4soril
Jt1SCbY/9b5qfZBF68KRnfXGwfjob1naKGbR0i93HFPN8DYbz7jEwRkm5HQg
XQqRoup3MVisXDEa7mdJwYc/pyELYVP5J/MQCpKog8sXZTE47XQg16iAwmhZ
+/mpWQzsVXoZcxopmLlVv3+4Q6njkNfi/S+rFDpeQI733oX069wZYVMJpe2H
Jly7fyKFSNu06dTF4QgTMAn6RyikHDlhm3aFRuGFjuMCCwoqkl6+gobDq/k1
j2ulqEt629XdLEeukbudSj3Df/WxMtQYul73/SEHUT9KPi3DQGnRrH4hDdpx
LK0zXwbmDQkYojH8bKuNZ6MM5HZbNmWHI4mUVz4u09YbrUDXJVLwmlBo1u62
+uKj1PZvZyhMKjZcc3BmdMy3UyBhdZya9Wtj3xTx17HmfvmgDO68UTgO7a6x
/nkuMqSoyMV95qD5UGGqTg5Bx7uESPdlEUjvJAnvUzouKqFOtqVJdfy3f2PB
IK44RC+IgAlXcKHjWDCIG+bNneDg3HfPrvedRHufPRxG+cCeIG18JYebdXfq
m42CtOtXOfA2mndUjIIJMkOT+vifbBF4md9mDhHEXusmib8JDk+wuMuPNHkP
S3r8LStYFPJx7UJovGAmjWFhReSpPkLwNi1zZJHPL3QG4N97u+g5pL+pLgB/
AIGeoHU=
                    "], {{260.24569999999994`, 52.252300000000005`}, {
                    231.20369999999997`, 52.252300000000005`}, {
                    231.20369999999997`, 73.5373}, {260.24569999999994`, 
                    73.5373}}}]}}}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Background -> GrayLevel[0.94], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{
                Thickness[0.002], {{
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   499.}, {1., 499.}, {1., 500.001}, {0., 500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    499.}, {500.001, 499.}, {500.001, 500.001}, {499., 
                   500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   0.}, {1., 0.}, {1., 1.}, {0., 1.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    0.}, {500.001, 0.}, {500.001, 1.}, {499., 1.}}}]}}, {{
                  FaceForm[{
                    RGBColor[0.604, 0.604, 0.604], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{72., 
                   426.}, {150., 426.}, {150., 348.}, {72., 348.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{347.,
                    288.}, {425., 288.}, {425., 210.}, {347., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{130.55, 132.031}, {
                   91.46900000000002, 132.031}, {91.46900000000002, 
                   92.95000000000002}, {130.55, 92.95000000000002}}, {{72., 
                   152.}, {150., 152.}, {150., 74.}, {72., 74.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   268.03099999999995`}, {228.46900000000002`, 
                   268.03099999999995`}, {228.46900000000002`, 
                   228.94999999999996`}, {267.55, 228.94999999999996`}}, {{
                   209., 288.}, {287., 288.}, {287., 210.}, {209., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   405.03099999999995`}, {228.46900000000002`, 
                   405.03099999999995`}, {228.46900000000002`, 
                   365.94999999999993`}, {267.55, 365.94999999999993`}}, {{
                   209., 425.}, {287., 425.}, {287., 347.}, {209., 347.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{155., 250.}, {155., 225.147}, {134.853, 205.}, {
                   110., 205.}, {85.147, 205.}, {65., 225.147}, {65., 250.}, {
                   65., 274.853}, {85.147, 295.}, {110., 295.}, {134.853, 
                   295.}, {155., 274.853}, {155., 250.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0GChUOYPpBlYMhxxqZqEllcD6YDih1OP89+PHS
uZVwPpgWqIDzwfqaylD1O0DVwcx3gJqzthJV/kMVXD+Mj2I+kA+zH0U/zH1I
7kfhL6h0OPxVI6b/D4IPpjdAxd9UwPko9gH5tlzXFxcYl6PqbyhDNR/IB6tz
LkeVn1AG1w/jo5gP5MPsR9EPcx+S+wFHkGkl
                   "]]}}, {{
                  FaceForm[{
                    RGBColor[0.267, 0.267, 0.267], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk21IU2EUx5eI2NLsTVYULBMLE5GsD2UZf6P8oCJqZrrNud1tllqIxu7L
JExULN+QihQblGKi5dLENLWiF0RKxA0xS/ElE83SFSJSJtXzeGn70IfLc3/c
/3nOOf9zrg+TGWdwkUgkh8lDz1rfztWiRzysQwnzQbnxiMZW7evd3H/Mm4ny
qhKtOYstMcEczrxsqIs2K3HsWdwtHy2Hm8tuKVVWpagv5bC9wyYZd1OhnRwu
bRxOpWV+LwxVIcCwYypxmkM6wTdXVBgdzrsULuMRm1HNme0quKwvlusiebwj
6bvzk/ExUdZhu8zjD03soUYM1d3jcZsjBVnUoLJ9r3iwWTs9J7UpYj0TPN5v
WQwb8NCI8Qvkvtn0gGWjk0N8I3Ly55xMKCiqSgvVxZ7frVYee+RLFxJkDOJp
n5U8FINPP23TMSDZvDZoeBQERdVLmxis0IDNPPYaXardbQyuyXV2RTPnYLvi
xPHP2U52J+3ZA4lfRYWKwXYGddSwKVa8P58BtTHKzCJNkpnneppBr3/I9T4F
C0vJ6HmJNwPadqecxf6+Tb1db7U4d5IYu2JEvTTcz2h28ppe0INU+7heyoKo
n5QV6NF/f2AoIZQFvb6nUS/2V8hiZeHriyM2PQSacJKFl/lgbdtPvVhvJIfx
G6RgfwOIu+XGLk70L8wAWq63P+9gaqfkm5Mr7v44MFMmwJo6NJs+p0c4XZR1
JoyECokNR/UoN5LBGU2om3i+0VymE/fBYkLVGEnYwji4uZ3J/VCpdfCaf8sa
0HXMqDHBM6upZDRVI86n2ITgmYd+08Mp4jyzTViigVNqMT7WhDvUCKla/L7X
BLpGXmeT0UQH+kvACH2pUYl+9QrIJusVuKoExfliAQ/omaEEXWdZtAALjRtR
iPN0F7CLyCviFeK8unk00g9jSfj3v5VGfHE91J+Ev8kFnlk=
                    "], {{397.24569999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 73.5373}, {397.24569999999994`, 
                    73.5373}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk3swVFEcx3ckGqEHUpNq5FFRKdNMD8m3l5EalRBr19prNdlr995L6zH+
iPQwFWOmB2kV2hFFykykZFKDRgkZ8ogkeaWmMVIM6dx2Wn/0x51zP+d8f+f3
O7/zPdYU4x2qJxAItpCPH3NsyibPWbNoaPYbdnLzgTre/vlZa8V/HKMmyqRA
hP7slWbvUcC3Mk/jpQ7E2dtHa51zFLg8ZiBJbwjEncJWSdS4Ava9iTfqDETo
u7j6q4mHEnvDmO9nXEXwyCQb5ikh2rVjoC1ehLxTh/dlmjI4TGdEq7+JMHuh
uVt1FIMWkv5JohgvHqxX3upgMF0cN3LfOAiHeJ0Fi+vRpKDCIPCyVc4soril
Jt1SCbY/9b5qfZBF68KRnfXGwfjob1naKGbR0i93HFPN8DYbz7jEwRkm5HQg
XQqRoup3MVisXDEa7mdJwYc/pyELYVP5J/MQCpKog8sXZTE47XQg16iAwmhZ
+/mpWQzsVXoZcxopmLlVv3+4Q6njkNfi/S+rFDpeQI733oX069wZYVMJpe2H
Jly7fyKFSNu06dTF4QgTMAn6RyikHDlhm3aFRuGFjuMCCwoqkl6+gobDq/k1
j2ulqEt629XdLEeukbudSj3Df/WxMtQYul73/SEHUT9KPi3DQGnRrH4hDdpx
LK0zXwbmDQkYojH8bKuNZ6MM5HZbNmWHI4mUVz4u09YbrUDXJVLwmlBo1u62
+uKj1PZvZyhMKjZcc3BmdMy3UyBhdZya9Wtj3xTx17HmfvmgDO68UTgO7a6x
/nkuMqSoyMV95qD5UGGqTg5Bx7uESPdlEUjvJAnvUzouKqFOtqVJdfy3f2PB
IK44RC+IgAlXcKHjWDCIG+bNneDg3HfPrvedRHufPRxG+cCeIG18JYebdXfq
m42CtOtXOfA2mndUjIIJMkOT+vifbBF4md9mDhHEXusmib8JDk+wuMuPNHkP
S3r8LStYFPJx7UJovGAmjWFhReSpPkLwNi1zZJHPL3QG4N97u+g5pL+pLgB/
AIGeoHU=
                    "], {{260.24569999999994`, 52.252300000000005`}, {
                    231.20369999999997`, 52.252300000000005`}, {
                    231.20369999999997`, 73.5373}, {260.24569999999994`, 
                    73.5373}}}]}}}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Background -> GrayLevel[0.94], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of tokens: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Markov order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SequencePredictorFunction[
   Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association[
        "f1" -> Association["Type" -> "NominalSequence"]], "Output" -> 
       Association["f1" -> Association["Type" -> "NominalSequence"]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"], 
              "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
       "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
       "Missing" -> "Allowed"]], "Processor" -> 
    MachineLearning`MLProcessor["IntegerEncodeNominalSequence", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
       "StructurePreserving" -> True, "Input" -> 
       Association["f1" -> Association["Type" -> "NominalSequence"]], "Index" -> 
       MachineLearning`SortedHashAssociation[
         Association[
         "KeyHashes" -> {1, 2, 3, 4}, "Values" -> None, "DefaultValue" -> -1, 
          "HashFunction" -> 
          Function[{
            MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$}\
, 
            Switch[
            MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$,\
 {
              BlankSequence[String]}, 
             Data`StringHash[
             MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$\
, "Murmur3-64"], 
             PatternTest[
              Blank[], 
              MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
             MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$\
, 
             PatternTest[
              Blank[], 
              MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
             
             Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
              MachineLearning`file163SortedHashAssociation`PackagePrivate`q = {
                 Quotient[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                 Quotient[
                  Mod[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                 Quotient[
                  Mod[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                 Mod[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
              MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
               Transpose[
                 MachineLearning`PackageScope`ToPackedArray[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q], {1, 3, 2}]; 
              MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
               Transpose[
                 Flatten[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q, 1]]; Data`StringHash[
                FromCharacterCode[
                 Abs[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
             Blank[List], 
             Map[Switch[#, 
               Blank[String], 
               Data`StringHash[#, "Murmur3-64"], 
               PatternTest[
                Blank[], Developer`MachineIntegerQ], #, {
                PatternTest[
                 BlankSequence[], Developer`MachineIntegerQ]}, 
               
               Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q = {
                   Quotient[#, 2^48], 
                   Quotient[
                    Mod[#, 2^48], 2^32], 
                   Quotient[
                    Mod[#, 2^32], 2^16], 
                   Mod[#, 2^16]}; 
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
                 Flatten[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                  FromCharacterCode[
                   Abs[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
               Blank[], 
               Data`StringHash[
                StringJoin[
                 ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
              MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.2, 0}]], "Labels" -> {1, 2, 3, 4}, 
       "MissingCode" -> -1, "Version" -> {12.2, 0}, "ID" -> 
       8458842589917173291, "Output" -> 
       Association[
        "f1" -> 
         Association[
          "Type" -> "NominalSequence", "Weight" -> 
           Missing["KeyAbsent", "Weight"]]]]], "PerformanceGoal" -> Automatic,
     "Model" -> Association[
     "Method" -> "Markov", "Order" -> 1, "Smoothing" -> "KneserNey", 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association[
          "Type" -> "NominalSequence", "Weight" -> 
           Missing["KeyAbsent", "Weight"]], "Key" -> "f1", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "TokenNumber" -> 4, "VocabularySize" -> 6, "TokenizationMapping" -> 
      Association[
       0 -> 1, DirectedInfinity[-1] -> 2, DirectedInfinity[1] -> 3, 1 -> 4, 2 -> 
        5, 3 -> 6, 4 -> 7], "UnknownToken" -> 1, "StartToken" -> 2, 
      "StopToken" -> 3, "LogProbabilities" -> 
      Association[
       "1Gram" -> {-1.0791812, 
         0., -0.7781512, -0.60206, -0.7781512, -0.7781512, -0.7781512}, 
        "2Gram" -> SparseArray[
         Automatic, {7, 7}, Missing, {
          1, {{0, 1, 1, 2, 4, 4, 5, 6}, {{5}, {4}, {3}, {4}, {7}, {
            6}}}, {-0.124938734, -0.20411998, -0.7781512, -0.22184873, \
-0.124938734, -0.124938734}}]], "Discounts" -> 
      Association[
       "1Gram" -> Association["D1" -> "0.5", "D2" -> "1", "D3+" -> "1.5"], 
        "2Gram" -> Association["D1" -> "0.5", "D2" -> "1", "D3+" -> "1.5"]], 
      "LogBackoffWeights" -> 
      Association[
       "1Gram" -> {-0.5228787, 0., -0.30103, -0.39794, 
         0., -0.5228787, -0.5228787}], "Indexes" -> 
      Association["1Gram" -> MachineLearning`SortedHashAssociation[
          Association[
          "KeyHashes" -> {-2105771519489905399, 663911524999149538, 
            4072388973597673248, 4170863191335611158, 4528882873966812144, 
            7509189838328008390, 8742360237250934914}, "Values" -> None, 
           "DefaultValue" -> -1, "HashFunction" -> 
           Function[{
             MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$\
}, 
             Switch[
             MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$\
, {
               BlankSequence[String]}, 
              Data`StringHash[
              MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
              MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
              
              Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file163SortedHashAssociation`PackagePrivate`q = {
                  Quotient[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                  Quotient[
                   Mod[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                  Quotient[
                   Mod[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                  Mod[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
               MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  MachineLearning`PackageScope`ToPackedArray[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q], {1, 3, 2}]; 
               MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  Flatten[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q, 1]]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[List], 
              Map[Switch[#, 
                Blank[String], 
                Data`StringHash[#, "Murmur3-64"], 
                PatternTest[
                 Blank[], Developer`MachineIntegerQ], #, {
                 PatternTest[
                  BlankSequence[], Developer`MachineIntegerQ]}, 
                Block[{
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q}, MachineLearning`file163SortedHashAssociation`PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q = Flatten[MachineLearning`file163SortedHashAssociation`PackagePrivate`q]; 
                 Data`StringHash[
                   FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                Blank[], 
                Data`StringHash[
                 StringJoin[
                  ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
               MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.2, 0}]]], "RestLogProbabilities" -> 
      Association[
       "1Gram" -> {-1.2874571, 
         0., -1.1226469, -0.66103786, -0.66103786, -0.66103786, \
-0.66103786}]]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8229506742996473`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"ffd5e3e0-6597-4ba4-9512-33e96d399b4f"]
}, Open  ]],

Cell["\:7528\:5e8f\:5217\:9884\:6d4b\:5668\:4ea7\:751f\:7ed9\:5b9a\:6570\:5217\
\:7684\:7b2c\:4e09\:9879", "Text",
 CellChangeTimes->{{3.8142876360880013`*^9, 3.814287663420291*^9}, {
  3.8229506462775393`*^9, 
  3.822950665111129*^9}},ExpressionUUID->"87b5a914-8de4-4861-82cd-\
bfdf9c6d7acd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"spf", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.705660616841256*^9, 3.7056606218578167`*^9}, 
   3.705825501166688*^9, {3.70582554370253*^9, 3.705825656198223*^9}, {
   3.713097068647105*^9, 3.71309707493445*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"77027a01-bb37-4ca0-8a2f-d2877363ab41"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.822950677293537*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"29622315-e6a5-43a8-b9e0-cd7e6bc8cb21"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:793a\:4f8b: \:50cf\:838e\:58eb\:6bd4\:4e9a\:4e00\:6837\:5199\:4f5c", \
"Subsection",
 CellChangeTimes->{{3.705825761122129*^9, 3.705825764384653*^9}, {
   3.7058260781747437`*^9, 3.705826079298214*^9}, 3.705844533222921*^9, {
   3.814114466814135*^9, 3.8141144767261753`*^9}, {3.8142148443790627`*^9, 
   3.8142148461911583`*^9}, {3.8229506912338386`*^9, 
   3.8229507011295586`*^9}},ExpressionUUID->"b0c8cda3-b14a-47f8-924b-\
f95a33379269"],

Cell["SequencePredict \:51fd\:6570\:53ef\:4ee5\:7528\:6765\:8bad\:7ec3\:5e76\
\:4e14\:4ea7\:751f\:4e00\:4e2a\:7c7b\:4f3c\:838e\:58eb\:6bd4\:4e9a\:5199\:4f5c\
\:98ce\:683c\:7684\:8bcd\:5e8f\:5217", "Text",
 CellChangeTimes->{{3.814287671149836*^9, 3.814287720166601*^9}, {
  3.82295073529646*^9, 
  3.8229507751888466`*^9}},ExpressionUUID->"f45e1ecd-6626-4eff-964a-\
6e54e8fa21c6"],

Cell["\:9009\:53d6\:838e\:58eb\:6bd4\:4e9a\:7684\:4e00\:4e9b\:8457\:4f5c", \
"Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877491965322`*^9}, {3.822950717262423*^9, 
  3.822950724786873*^9}},ExpressionUUID->"f2a5a492-c439-45c5-b006-\
216d533277e3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Othello", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<http://www.gutenberg.org/cache/epub/2267/pg2267.txt\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Hamlet", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<http://www.gutenberg.org/cache/epub/2265/pg2265.txt\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Macbeth", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<http://www.gutenberg.org/cache/epub/2264/pg2264.txt\>\"", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{3.7674651965205812`*^9},
 CellLabel->"In[55]:=",ExpressionUUID->"f095f429-6849-45de-943a-cc8a366f1399"],

Cell["\:628a\:4e09\:4e2a\:8457\:4f5c\:8054\:5408\:8d77\:6765\:53d8\:6210\:4e00\
\:4e2a\:957f\:7bc7", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.81428777018449*^9}, {3.814287817670319*^9, 
  3.814287818130992*^9}, {3.8229507892681518`*^9, 
  3.8229508003394766`*^9}},ExpressionUUID->"6de40f15-c1b8-48ef-ad39-\
af15ef978275"],

Cell[BoxData[
 RowBox[{
  RowBox[{"shakespearesWorks", " ", "=", " ", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
    "Othello", ",", "\"\< \>\"", ",", "Hamlet", ",", " ", "\"\< \>\"", ",", 
     " ", "Macbeth"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8141145135727167`*^9, 3.8141145224678802`*^9}, 
   3.814114561450111*^9, {3.814114597088447*^9, 3.8141146158425083`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"f67edce4-e602-4298-b9ab-7343db234be9"],

Cell["\:8bad\:7ec3\:5e8f\:5217\:9884\:6d4b\:5668", "Text",
 CellChangeTimes->{{3.814287777238456*^9, 3.814287777856691*^9}, {
  3.8229508132423973`*^9, 
  3.822950816803529*^9}},ExpressionUUID->"835dcdd3-f06e-4512-a2dc-\
480b24ffacc6"],

Cell[BoxData[
 RowBox[{"spchar", "=", 
  RowBox[{"SequencePredict", "[", 
   RowBox[{"{", "shakespearesWorks", "}"}], "]"}]}]], "Input",
 CellChangeTimes->{3.814114689270955*^9},
 CellLabel->
  "In[125]:=",ExpressionUUID->"c1c315d4-24a9-4328-8c25-783593017954"],

Cell["\:5728\:838e\:58eb\:6bd4\:4e9a\:98ce\:683c\:7684\:5b57\:7b26\:5e8f\:5217\
\:4e2d\:968f\:673a\:53d6\:6837", "Text",
 CellChangeTimes->{{3.8142877999197063`*^9, 3.8142878059926357`*^9}, {
  3.822950859235368*^9, 
  3.822950895034588*^9}},ExpressionUUID->"64d71647-fd24-45b4-856d-\
c3b01dfbd231"],

Cell[BoxData[
 RowBox[{"spchar", "[", 
  RowBox[{
   RowBox[{"{", "\"\<I\>\"", "}"}], ",", 
   RowBox[{"\"\<RandomNextElement\>\"", "\[Rule]", "100"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.814114774953227*^9, 3.814114775154117*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"e4f33549-4e89-4419-af89-fada18fb2826"],

Cell["\:8bad\:7ec3\:53e6\:5916\:4e00\:4e2a\:5e8f\:5217\:3002\:5176\:4e2d\:6211\
\:4eec\:628a\:5b57\:7b26\:4e32\:770b\:6210\:8bcd\:ff0c\:800c\:4e0d\:662f\:7b80\
\:5355\:7684\:5b57\:7b26\:6570\:7ec4", "Text",
 CellChangeTimes->{{3.8229509065259757`*^9, 
  3.822950941281971*^9}},ExpressionUUID->"32fe782d-d3bf-4cdb-ab04-\
bd9235525bbd"],

Cell[BoxData[
 RowBox[{"spword", "=", 
  RowBox[{"SequencePredict", "[", 
   RowBox[{
    RowBox[{"{", "shakespearesWorks", "}"}], ",", 
    RowBox[{"FeatureExtractor", "\[Rule]", "\"\<SegmentedWords\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{3.814114715240829*^9},
 CellLabel->
  "In[127]:=",ExpressionUUID->"b624885a-9a7b-4bf1-b375-5ae61354f587"],

Cell["\:4ea7\:751f50\:4e2a\:8fde\:7eed\:8bcd\:7ec4\:ff0c\:5e76\:8fde\:6210\
\:53e5\:5b50", "Text",
 CellChangeTimes->{{3.822950980790404*^9, 
  3.8229510034642715`*^9}},ExpressionUUID->"735fc71a-95ef-4f7c-9620-\
2c5b0c2d1f4d"],

Cell[BoxData[
 RowBox[{"spword", "[", 
  RowBox[{"\"\<I\>\"", ",", 
   RowBox[{"\"\<RandomNextElement\>\"", "\[Rule]", "100"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.814114769620689*^9, 3.814114769731378*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"db3afb02-f247-44ee-9181-262ff4f8e40b"],

Cell["\:66f4\:6362\:9a6c\:514b\:6d1b\:592b\:6a21\:578b\:7684\:9636\:5e76\:4e14\
\:91cd\:65b0\:8bad\:7ec3", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.8142878355926943`*^9, 
  3.814287852489221*^9}, {3.822951016055049*^9, 
  3.822951033712781*^9}},ExpressionUUID->"15b264a4-4897-4406-bbde-\
2bdd47216632"],

Cell[BoxData[
 RowBox[{
  RowBox[{"spword", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{
     RowBox[{"{", "shakespearesWorks", "}"}], ",", 
     RowBox[{"FeatureExtractor", "\[Rule]", "\"\<SegmentedWords\>\""}], ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Markov\>\"", ",", 
        RowBox[{"\"\<Order\>\"", "\[Rule]", "5"}]}], "}"}]}]}], "]"}]}], ";", 
  RowBox[{"spword", "[", 
   RowBox[{"\"\<I\>\"", ",", 
    RowBox[{"\"\<RandomNextElement\>\"", "\[Rule]", "100"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.814114923342588*^9, 3.814114929403142*^9}, {
  3.814114968841776*^9, 3.81411498027629*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"56b67978-9b6d-427c-9ccc-db1817171d23"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:8fdb\:9636\:5904\:7406\:6280\:5de7", "Section",
 CellChangeTimes->{{3.705743451867737*^9, 3.705743454679146*^9}, 
   3.7057507051526833`*^9, {3.813318571732585*^9, 3.813318572468532*^9}, {
   3.8229917520867643`*^9, 
   3.822991786428337*^9}},ExpressionUUID->"5b8ed094-bf37-4cf0-979f-\
a7953e0c2ba6"],

Cell[CellGroupData[{

Cell["\:4e0d\:5e73\:8861\:7684\:8f93\:5165\:6570\:636e", "Subsection",
 CellChangeTimes->{{3.705743630126976*^9, 3.705743648326542*^9}, {
  3.705749533421485*^9, 3.705749536333305*^9}, {3.813318574826228*^9, 
  3.813318576748494*^9}, {3.8229917998680973`*^9, 
  3.8229918025291786`*^9}},ExpressionUUID->"93991394-f435-4687-b8f1-\
05e031e29a81"],

Cell["\:6bd4\:65b9\:8bf4\:6570\:636e\:5728\:67d0\:4e9b\:5206\:7c7b\:4e2d\:7684\
\:51fa\:73b0\:9891\:7387\:66f4\:9ad8\:ff0c\:6216\:8005\:6bd4\:91cd\:66f4\:5927\
", "Text",
 CellChangeTimes->{{3.7058446177020493`*^9, 3.70584463409762*^9}, {
  3.7058601559074087`*^9, 3.705860159378747*^9}, {3.813318580996369*^9, 
  3.8133185821482763`*^9}, {3.813319271568437*^9, 3.813319272359579*^9}, {
  3.81428792739072*^9, 3.814287927681295*^9}, {3.8229918232739515`*^9, 
  3.822991864517356*^9}},ExpressionUUID->"946b7121-0428-47c7-af1c-\
b933e7cdc15d"],

Cell["\:4f8b\:5982\:548c\:7537\:6027\:76f8\:5173\:6570\:636e\:8fdc\:591a\:4e8e\
\:5973\:6027\:76f8\:5173\:6570\:636e", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.814288177274498*^9, 
  3.8142882224421043`*^9}, {3.8229918782649827`*^9, 
  3.822991925979808*^9}},ExpressionUUID->"df277b31-63e0-4592-bfa7-\
1f74e668b0c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1.82", "\[Rule]", "\"\<male\>\""}], ",", 
     RowBox[{"1.90", "\[Rule]", "\"\<male\>\""}], ",", 
     RowBox[{"1.75", "\[Rule]", "\"\<male\>\""}], ",", 
     RowBox[{"1.55", "\[Rule]", "\"\<male\>\""}], ",", 
     RowBox[{"1.6", "\[Rule]", "\"\<female\>\""}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7057494835479603`*^9, 3.705749484857708*^9}, {
  3.7057495422302313`*^9, 3.705749716382155*^9}, {3.705826235307289*^9, 
  3.705826249777027*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"0d61efec-f3c0-490f-a60c-e9799720d02e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"female\"", "\"male\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"female\"", "\"male\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 5, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2729918768343498454]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 5, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.724}, "Method" -> "Naive", "VectorLength" -> 
                   1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.724}, 
                   "StandardDeviation" -> {0.13154466921924526`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{1.}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.724}, 
                    "StandardDeviation" -> {0.13154466921924526`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 1, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0088884, "MaxTrainingMemory" -> 105296, 
                  "DataMemory" -> 176, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 3, 1, 14, 8, 52.9852994`9.476730240041606}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             1606623927450839390]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {1.724}, "StandardDeviation" -> {0.13154466921924526`},
              "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7146872191784791279]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2886196550494335253]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["female" -> 1, "male" -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.2, 0}, "ID" -> 2624103930176666827, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4047776997762384043]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "female" -> 0.2857142857142857, "male" -> 0.7142857142857142]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> RawArray["Real32",{{-0.000018922377421404235`}}], 
           "Biases" -> RawArray["Real32",{-0.000029999249818501994`}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 1, 
           "$InputDimensions" -> {1}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.2.14", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"]], "Calibrator" -> None, "Method" -> 
      "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 100000., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[120561], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.0931685`6.42081409695993, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.6219890460222987, 0.08361061286561298],
          "Accuracy" -> Around[0.5248810640738216, 0.21860232491570009`], 
         "EvaluationTime" -> 0.0002435315030625059, "TestSize" -> 4, 
         "ModelMemory" -> 9224., "ModelUtility" -> -0.2448457005934248, 
         "TrainingSize" -> 4, "TrainingTime" -> 0.006117234781878422, 
         "TrainingMemory" -> 67782.40000000001, "ExperimentCount" -> 4, 
         "MeanCrossEntropyHistory" -> {
           Around[0.6219928675762183, 0.1672217677664721], 
           Around[0.6219860505684469, 0.16722080079302643`], 
           Around[0.6219918439651775, 0.16722162255274017`], 
           Around[0.6219854219793519, 0.16722071164313768`]}, 
         "AccuracyHistory" -> {
           Around[0.2748810640738217, 0.27488106407382173`], 
           Around[0.7748810640738215, 0.4337269502226554], 
           Around[0.2748810640738217, 0.27488106407382173`], 
           Around[0.7748810640738215, 0.4337269502226554]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           100000., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 5], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7290875456416602, 0.1632108995889692], "Accuracy" -> 
              Around[0.4415477307404883, 0.24339105290971425`], 
              "EvaluationTime" -> 0.00029881670102519236`, "TestSize" -> 3, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.4209852109163734, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.008971641173621406, 
              "TrainingMemory" -> 70708., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371745180657439, 0.29064736533974855`], 
                Around[0.5371062688075003, 0.17646891322580613`], 
                Around[0.8129818500517367, 0.2711119342133629]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00029881670102519236`, "MeanCrossEntropy" -> 
             Around[0.7290875456416602, 0.1632108995889692], "ModelMemory" -> 
             9224., "TrainingMemory" -> 70708., "TrainingTime" -> 
             0.009420223232302476], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6213380111648259, 0.14961231149257295`], "Accuracy" -> 
              Around[0.5248810640738216, 0.21860232491570009`], 
              "EvaluationTime" -> 0.0009474929275034177, "TestSize" -> 4, 
              "ModelMemory" -> 15200., 
              "ModelUtility" -> -0.26430388732172505`, "TrainingSize" -> 4, 
              "TrainingTime" -> 0.006050033223096088, "TrainingMemory" -> 
              59161.600000000006`, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8966420587459568, 0.34121321281371647`], 
                Around[0.46409166468880136`, 0.21308223978085103`], 
                Around[0.6605266565357439, 0.17685097726236193`], 
                Around[0.46409166468880136`, 0.21308223978085103`]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0009474929275034177, "MeanCrossEntropy" -> 
             Around[0.6213380111648259, 0.14961231149257295`], "ModelMemory" -> 
             15200., "TrainingMemory" -> 59161.600000000006`, "TrainingTime" -> 
             0.006352534884250893], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6367118660359773, 0.1289881148572582], "Accuracy" -> 
              Around[0.6498810640738215, 0.22336691445218843`], 
              "EvaluationTime" -> 0.0002810837070001902, "TestSize" -> 4, 
              "ModelMemory" -> 6192., "ModelUtility" -> -0.28142819363110305`,
               "TrainingSize" -> 4, "TrainingTime" -> 0.00480571221012517, 
              "TrainingMemory" -> 75092.8, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8966420587459567, 0.34121321281371636`], 
                Around[0.5500684684659841, 0.17240554988054635`], 
                Around[0.5500684684659841, 0.17240554988054635`], 
                Around[0.5500684684659841, 0.17240554988054635`]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.7748810640738215, 0.4337269502226554]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002810837070001902, "MeanCrossEntropy" -> 
             Around[0.6367118660359773, 0.1289881148572582], "ModelMemory" -> 
             6192., "TrainingMemory" -> 75092.8, "TrainingTime" -> 
             0.005045997820631428], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7224863320329085, 0.116626234915201], "Accuracy" -> 
              Around[0.3998810640738217, 0.19451883512760226`], 
              "EvaluationTime" -> 0.0024085616082014393`, "TestSize" -> 4, 
              "ModelMemory" -> 94812.8, "ModelUtility" -> -0.4883239847332893,
               "TrainingSize" -> 4, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 145956.80000000002`, "ExperimentCount" -> 4,
               "MeanCrossEntropyHistory" -> {
                Around[0.8966420587459567, 0.34121321281371636`], 
                Around[0.6219889865789292, 0.16722121722449923`], 
                Around[0.6577641974890978, 0.17589751032201073`], 
                Around[0.7135500853176502, 0.20171742258845218`]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.2748810640738217, 0.27488106407382173`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0024085616082014393`, "MeanCrossEntropy" -> 
             Around[0.7224863320329085, 0.116626234915201], "ModelMemory" -> 
             94812.8, "TrainingMemory" -> 145956.80000000002`, "TrainingTime" -> 
             0.01321871682383875], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7700047445483927, 0.23190175696235363`], "Accuracy" -> 
              Around[0.5248810640738216, 0.21860232491570009`], 
              "EvaluationTime" -> 0.0002223162960391746, "TestSize" -> 4, 
              "ModelMemory" -> 6352., "ModelUtility" -> -0.49027943315465106`,
               "TrainingSize" -> 4, "TrainingTime" -> 0.0029021211687048592`, 
              "TrainingMemory" -> 56404.8, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2990015368544818`, 0.72001776990158], 
                Around[0.47814795035303886`, 0.2045226970789622], 
                Around[0.8247215406330114, 0.2805010021998128], 
                Around[0.47814795035303886`, 0.2045226970789622]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002223162960391746, "MeanCrossEntropy" -> 
             Around[0.7700047445483927, 0.23190175696235363`], "ModelMemory" -> 
             6352., "TrainingMemory" -> 56404.8, "TrainingTime" -> 
             0.0030472272271401023`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6220016620342568, 0.096546256855137], "Accuracy" -> 
              Around[0.4415477307404883, 0.24339105290971425`], 
              "EvaluationTime" -> 0.00023827304023744044`, "TestSize" -> 3, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.24890773210932537`,
               "TrainingSize" -> 4, "TrainingTime" -> 0.006069150116147545, 
              "TrainingMemory" -> 67928., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6220277938561368, 0.16722672623284293`], 
                Around[0.6219596332642408, 0.16721705614485974`], 
                Around[0.6220175589823927, 0.16722527245259364`]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00023827304023744044`, "MeanCrossEntropy" -> 
             Around[0.6220016620342568, 0.096546256855137], "ModelMemory" -> 
             9224., "TrainingMemory" -> 67928., "TrainingTime" -> 
             0.006372607621954922], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.7960255988423148`, 0.7071459136863998], "Accuracy" -> 
              Around[0.4415477307404883, 0.24339105290971425`], 
              "EvaluationTime" -> 0.0002124418344104054, "TestSize" -> 3, 
              "ModelMemory" -> 9224., "ModelUtility" -> -1.3545237450549925`, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 74604., "ExperimentCount" -> 3, 
              "MeanCrossEntropyHistory" -> {
                Around[2.154120511966762, 1.5646317207048894`], 
                Around[0.4833277950181946, 0.20152404709432128`], 
                Around[2.750628489541988, 2.158714701894748]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002124418344104054, "MeanCrossEntropy" -> 
             Around[1.7960255988423148`, 0.7071459136863998], "ModelMemory" -> 
             9224., "TrainingMemory" -> 74604., "TrainingTime" -> 
             0.01664137852084169], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6219890460222987, 0.08361061286561298], "Accuracy" -> 
              Around[0.5248810640738216, 0.21860232491570009`], 
              "EvaluationTime" -> 0.0002435315030625059, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.2448457005934248, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.006117234781878422, 
              "TrainingMemory" -> 67782.40000000001, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6219928675762183, 0.1672217677664721], 
                Around[0.6219860505684469, 0.16722080079302643`], 
                Around[0.6219918439651775, 0.16722162255274017`], 
                Around[0.6219854219793519, 0.16722071164313768`]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002435315030625059, "MeanCrossEntropy" -> 
             Around[0.6219890460222987, 0.08361061286561298], "ModelMemory" -> 
             9224., "TrainingMemory" -> 67782.40000000001, "TrainingTime" -> 
             0.006423096520972343], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6247419695831467, 0.08655925451428564], "Accuracy" -> 
              Around[0.5248810640738216, 0.21860232491570009`], 
              "EvaluationTime" -> 0.00023052367848932993`, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.25006547343017327`,
               "TrainingSize" -> 4, "TrainingTime" -> 0.007616540566754638, 
              "TrainingMemory" -> 69137.6, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6578762871274496, 0.1759354545279624], 
                Around[0.5986555397663823, 0.16553088716966138`], 
                Around[0.649008374675559, 0.17313217512287643`], 
                Around[0.5934276767631955, 0.16560123719028663`]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00023052367848932993`, "MeanCrossEntropy" -> 
             Around[0.6247419695831467, 0.08655925451428564], "ModelMemory" -> 
             9224., "TrainingMemory" -> 69137.6, "TrainingTime" -> 
             0.00799736759509237], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6219952182957332, 0.08361142448328471], "Accuracy" -> 
              Around[0.5248810640738216, 0.21860232491570009`], 
              "EvaluationTime" -> 0.0002098587138277019, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.24485558465163526`,
               "TrainingSize" -> 4, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 68212.8, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6223767894925762, 0.1672766653913414], 
                Around[0.6216961307954242, 0.16717992860623454`], 
                Around[0.6222745645480598, 0.1672619637569632], 
                Around[0.6216333883468727, 0.16717114819298756`]}, 
              "AccuracyHistory" -> {
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554], 
                Around[0.2748810640738217, 0.27488106407382173`], 
                Around[0.7748810640738215, 0.4337269502226554]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002098587138277019, "MeanCrossEntropy" -> 
             Around[0.6219952182957332, 0.08361142448328471], "ModelMemory" -> 
             9224., "TrainingMemory" -> 68212.8, "TrainingTime" -> 
             0.0066250521170420264`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 5, "PreprocessorEvaluationTime" -> 
      5.971875*^-6, "PreprocessorMemory" -> 37264, "InputDimension" -> 1, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.5982695885852574,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8235965330945283`17.335047048314443*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 4, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.4019651000000001, "ExperimentCounts" -> 37]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.9}, "ID" -> 
           7806654962102425149]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.6350757, 
      "MaxTrainingMemory" -> 457200, "DataMemory" -> 600, "FunctionMemory" -> 
      163704, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 1, 14, 8, 53.6083415`9.48180721611383}, "Instant", 
        "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.822991917617465*^9, 3.822991929520607*^9}, 
   3.8236181336385555`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"114e5be5-1ca6-4354-9490-32a5c4f1591d"]
}, Open  ]],

Cell["\:4ee5\:4e0b\:66f4\:4e3a\:5408\:7406\:7684\:8f93\:51fa\:5e94\:4e3a\:5973\
\:6027", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.8142883981653843`*^9, 
  3.8142884143536177`*^9}, {3.822991947186056*^9, 
  3.8229919779298024`*^9}},ExpressionUUID->"6674abb5-f283-4c03-843e-\
433b88611a5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "[", "1.6", "]"}]], "Input",
 CellChangeTimes->{3.7058261559581547`*^9},
 CellLabel->"In[70]:=",ExpressionUUID->"272b9773-e92e-45c9-b06b-44ec19b12c6e"],

Cell[BoxData["\<\"male\"\>"], "Output",
 CellChangeTimes->{3.822991931380181*^9, 3.8236181428154283`*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"022e3cbb-fa82-4a53-a5a1-fed06f0691d7"]
}, Open  ]],

Cell["\:5f53\:7279\:5f81\:4ece1\:52302\:53d8\:6362\:7684\:65f6\:5019\:ff0c\
\:8f93\:51fa\:4e3a\:5973\:6027\:7684\:6982\:7387", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.8142884287875032`*^9, 
  3.814288435233223*^9}, {3.8142885490857477`*^9, 3.814288586422419*^9}, {
  3.8229920102237315`*^9, 
  3.8229920310629163`*^9}},ExpressionUUID->"b40c5180-e6b7-4644-a870-\
d49a5771c78b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"cf", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", "\"\<female\>\""}], "}"}]}], "]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.705826176743689*^9, 3.705826221423785*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"d20837d0-2749-4c32-a29d-048f88ecdef2"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwdznk41HkcB/Bx5VgR60iyrrSodTyLXTo+Y2LSwUb1iMeq1WppLaHd2pQj
N5W2azeRbXkUHjl2nVGG1jjGzbo22jIxhvwYZsyY8d3vtz8+z+d5Pc/7eT9v
06AIn2B5Go3miY98h3OXlGg0Cug9rMnttNdQICfKdZWjgEYNjRLr3I52SpSn
gLVpdoBYUBX23QYlChg+2m3ElWuB7epqFLgPBZUT26Xuu26gQ8HBcYUE4h0P
1XU/t6Tg2LS7GbEZ5+G2M0coCEHt31pgd6pdSc56TEFW42K7ObZYc8plaZUC
/vGjB82wP+be2NvgsQhNfrv6TbBncgSJB/IW4S6f4WKMzTD8z2gTtQh5vkmN
Rti+l9PE9/cvwRNvrslWbL/SaPPM3CWwruFkbsF+XTD9qGp+Cd4I57UMyJ44
3aB8NwHcf2lzUR+bZ8z5qeOuAFLCisS62Dk3W0dPcAUwH1d8VQdbbepSbPGu
ZfA27eRrY8tkNRccry3DfI7FOS3sEsnTysS3y5BamDeoic1k83Y5O69AtuHv
dA3sYP9SA8v0FeCeHWOrY9N7rZ3HJlfAxsPB9iPsPHX70r/thFCK2BWq2PU7
FoPOpwlhp3uMjgo2a8vKmYwJIZgL/4rdgO3Zm/Bi1EYEPgmWikrYd0La/OaS
RRCX/SxUAfsU+1ePL4dFMHU9bVYOe7OwOJm/fRVYc+NRNOxM5YuKQVdWYc+f
udUyNAmJk13DWt2rEOwqapRgf5H9ai7JQgwZ/KxkEfbwNvsjJ2PEkB/mGLCM
Lf1xo0p0pxis//AKXcT+tyhf7qCZBMoEhU7vsV0Lmr/yj5bAI3GUCx/7VrjF
XF+zBDL+OeQ5g/3QkNGhbrAGET2nTbjYtlnT0vjQNWi5vGD1BjuGy4ysbVoD
HWa9YAL7sLyti5W2FIZaVgXj2GoL/t5yQVLI2OymMEr2P6cX59RKYXd6d/8Q
dsKxMt9IVRkEPuWM9GO7dA0zVb+RQeyCal4P9qSuW5JKjQxuKx87z8FWtXDW
c1VeB71Brfh27Pd6M7zdgetwr0HjcCv2iR5j7aiydUj3i/NqwS7zfZCmgdYh
vEt6sgmb1dxLDz+O4OjXdfaNJL98w1O5EEHhI55zPXZrN8Mu4jGCNv6TncQO
RULt4ScIZhxDjIk1AwNHCksQWHa8U/yQZ392mlmBoGTpbU8dtuMDzsXkBgSV
+yaCibUZagUKAwiecft/qcWO3/o85ftBBK9sbyURvxdGhg4MIZD+7H2BuL1k
1CZ/BMFejd6AD3ndojrGBAKWU9enxAsz+3sSeAjYqezGGuyAlrUK3iyC6b6U
cuKO3LI73nMIVLYy84kLffT9TRcQHCh/mUYc2PBuqmkZQecI6ygx514221KI
gG+WwCR2ifQqvilCsPEHujOx7vbqiFMSBF5yLz4hvko769O2hiD8UKwWMTVm
5GgnQ5B1d4/ih/6qPv3f1hGUT0qF1aQ/K1mCEII+qwYe8f9ZNpd8
       "]]},
     Annotation[#, "Charting`Private`Tag$141481#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1., 0.49998257470784063`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{1, 2}, {0.49998257470784063`, 0.5000185365920302}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8229919852151527`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"82b49d5e-a9a5-46fa-8ae9-7fe37f9499dc"]
}, Open  ]],

Cell["\:7ed9\:5b9a\:7279\:5f81\:8f93\:5165\:ff0c\:4e24\:4e2a\:88ab\:6807\:8bb0\
\:7684\:7c7b\:7684\:5404\:81ea\:7684\:6982\:7387", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.8142886108798523`*^9, 
  3.814288625774963*^9}, {3.8229927272678623`*^9, 
  3.8229927546854095`*^9}},ExpressionUUID->"4ba3f3f5-1a97-463c-a127-\
88099166d0fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "[", 
  RowBox[{"1.6", ",", "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.705749636597021*^9, 3.70574965245862*^9}, {
  3.7057497220412416`*^9, 3.705749730568437*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"f71600bc-69b3-4552-ba6e-1425ebf1762e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"female\"\>", "\[Rule]", "0.49999695946136885`"}], ",", 
   RowBox[{"\<\"male\"\>", "\[Rule]", "0.5000030405386311`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8229920464402847`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"bc571e25-016b-4750-aae8-d5cb959172bf"]
}, Open  ]],

Cell[TextData[{
 "\:901a\:8fc7 ",
 StyleBox[ButtonBox["ClassPriors",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ClassPriors"],
  FontWeight->"Bold"],
 " \:52a0\:5165\:663e\:5f0f\:5148\:9a8c\:6761\:4ef6\:ff08\:72ec\:7acb\:4e8e\
\:4efb\:4f55\:5df2\:7ecf\:7ed9\:5b9a\:7684\:8bad\:7ec3\:6570\:636e\:ff09"
}], "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.81428865187545*^9, 
  3.814288671095181*^9}, {3.814288751314254*^9, 3.8142888099973783`*^9}, {
  3.822992335648137*^9, 
  3.8229923694276066`*^9}},ExpressionUUID->"48891e75-9aa1-40f1-877f-\
ca2d344ad735"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "[", 
  RowBox[{"1.6", ",", "\"\<Probabilities\>\"", ",", 
   RowBox[{"ClassPriors", "\[Rule]", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<male\>\"", "\[Rule]", "0.5"}], ",", 
      RowBox[{"\"\<female\>\"", "\[Rule]", "0.5"}]}], "|>"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.705749739220832*^9, 3.705749771948379*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"24f692ed-17a0-4c32-8fa6-040414193442"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"female\"\>", "\[Rule]", "0.7142832322068936`"}], ",", 
   RowBox[{"\<\"male\"\>", "\[Rule]", "0.28571676779310645`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.822992372296322*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"7de24a44-2d40-4d70-afea-302751954d56"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:4e0d\:5e73\:8861\:7684\:8f93\:51fa\:95ee\:9898", "Subsection",
 CellChangeTimes->{{3.705743630126976*^9, 3.70574365227661*^9}, {
  3.705749986354512*^9, 3.7057499910890408`*^9}, {3.813318590643944*^9, 
  3.813318591259727*^9}, {3.822992791354517*^9, 
  3.8229927936624727`*^9}},ExpressionUUID->"8b911427-be86-4d91-93dc-\
0a2741ceb2e2"],

Cell["\:4e00\:4e9b\:60c5\:51b5\:4e0b\:6700\:53ef\:80fd\:7684\:8f93\:51fa\:4e0d\
\:4e00\:5b9a\:662f\:6700\:597d\:7684\:8f93\:51fa", "Text",
 CellChangeTimes->{{3.705844650834077*^9, 3.7058446726822767`*^9}, {
  3.813318594716259*^9, 3.8133185984917097`*^9}, {3.814288795651588*^9, 
  3.8142887960214376`*^9}, {3.8229944558753233`*^9, 
  3.822994470711243*^9}},ExpressionUUID->"c1688868-7e6e-4902-8b02-\
2739d7011f82"],

Cell["\:8bbe\:7f6e\:4e00\:4e2a\:5408\:7406\:5e73\:8861\:7684\:57f9\:8bad\:96c6\
\:ff0c\:5305\:62ec\:6765\:81ea\:5065\:5eb7\:548c\:75be\:75c5\:5206\:7c7b\:7684\
\:6837\:672c", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.81428865187545*^9, 
  3.814288671095181*^9}, {3.814288751314254*^9, 3.814288789744266*^9}, {
  3.814288837770892*^9, 3.8142888453530903`*^9}, {3.814288938245544*^9, 
  3.8142889559855537`*^9}, {3.822994520527157*^9, 
  3.8229945318073215`*^9}},ExpressionUUID->"d05bf371-6560-41ee-afa6-\
b1a0a986aca6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "\"\<healthy\>\""}], ",", 
     RowBox[{"2", "\[Rule]", "\"\<diseased\>\""}], ",", 
     RowBox[{"3", "\[Rule]", "\"\<healthy\>\""}], ",", 
     RowBox[{"4", "\[Rule]", "\"\<diseased\>\""}], ",", 
     RowBox[{"5", "\[Rule]", "\"\<diseased\>\""}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[59]:=",
 CellID->1648532844,ExpressionUUID->"fe41d395-548c-408b-ac32-840dadd31782"],

Cell["\:8bad\:7ec3\:5206\:7c7b\:5668", "Text",
 CellChangeTimes->{{3.767524139000601*^9, 3.7675241436253843`*^9}, {
  3.814287730303247*^9, 3.8142877393472958`*^9}, {3.81428865187545*^9, 
  3.814288671095181*^9}, {3.814288751314254*^9, 3.814288789744266*^9}, {
  3.8142889614878893`*^9, 3.814288964198625*^9}, {3.822994540930085*^9, 
  3.822994542668679*^9}},ExpressionUUID->"0e19e88f-f4ac-41e3-ae7d-\
e4baa1f98391"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", "trainingset", "]"}]}]], "Input",
 CellLabel->"In[60]:=",
 CellID->1080564650,ExpressionUUID->"d79758b2-9e51-41be-8596-43a678e70429"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"diseased\"", "\"healthy\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"diseased\"", "\"healthy\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 5, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2729918768343498454]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 5, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {3.}, "Method" -> "Naive", "VectorLength" -> 1, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {3.}, 
                   "StandardDeviation" -> {1.4142135623730951`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{1.}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {3.}, 
                    "StandardDeviation" -> {1.4142135623730951`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 1, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0084002, "MaxTrainingMemory" -> 105472, 
                  "DataMemory" -> 176, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 3, 1, 10, 43, 8.5442985`8.684251379617637}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             1606623927450839390]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Mean" -> {3.}, 
             "StandardDeviation" -> {1.4142135623730951`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7146872191784791279]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 2886196550494335253]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["diseased" -> 1, "healthy" -> 2]}, "MissingCode" -> 
             0, "Version" -> {12.2, 0}, "ID" -> 2624103930176666827, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4047776997762384043]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "diseased" -> 0.5714285714285714, "healthy" -> 0.42857142857142855`]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> RawArray["Real32",{{0.000027993366529699415`}}], 
           "Biases" -> RawArray["Real32",{9.999749636335764*^-6}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 1, 
           "$InputDimensions" -> {1}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.2.14", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"]], "Calibrator" -> None, "Method" -> 
      "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 100000., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[112721], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.0897811`6.404729915579691, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.6854682152546436, 0.08277511677659204],
          "Accuracy" -> Around[0.5025729186410323, 0.21126489009924343`], 
         "EvaluationTime" -> 0.0002098587138277019, "TestSize" -> 4, 
         "ModelMemory" -> 9224., "ModelUtility" -> -0.3393598253206963, 
         "TrainingSize" -> 4, "TrainingTime" -> 0.00630957344480193, 
         "TrainingMemory" -> 67891.2, "ExperimentCount" -> 4, 
         "MeanCrossEntropyHistory" -> {
           Around[0.6854654249785684, 0.16555019038305488`], 
           Around[0.6854660370923487, 0.16555019983975366`], 
           Around[0.6854704064844572, 0.16555026740930734`], 
           Around[0.6854709924631999, 0.16555027647982137`]}, 
         "AccuracyHistory" -> {
           Around[0.7525729186410322, 0.4330203458387765], 
           Around[0.7525729186410322, 0.4330203458387765], 
           Around[0.25257291864103226`, 0.2525729186410324], 
           Around[0.25257291864103226`, 0.2525729186410324]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           100000., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 5], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.718741658478229, 0.11884209921039497`], "Accuracy" -> 
              Around[0.5025729186410323, 0.21126489009924343`], 
              "EvaluationTime" -> 0.0002565393276356819, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.3954298091705112, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.008354625877794251, 
              "TrainingMemory" -> 89312., "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5905891212884499, 0.18953395565726508`], 
                Around[0.624552991895331, 0.1755153692397383], 
                Around[0.8051056757246972, 0.2057488080477785], 
                Around[0.854718845004438, 0.23857756837694946`]}, 
              "AccuracyHistory" -> {
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002565393276356819, "MeanCrossEntropy" -> 
             Around[0.718741658478229, 0.11884209921039497`], "ModelMemory" -> 
             9224., "TrainingMemory" -> 89312., "TrainingTime" -> 
             0.008772357171683964], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9681645205721839, 0.1988282802327002], "Accuracy" -> 
              Around[0.25257291864103226`, 0.1262864593205162], 
              "EvaluationTime" -> 0.0006376775003584265, "TestSize" -> 4, 
              "ModelMemory" -> 15200., "ModelUtility" -> -0.701048077832765, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.005530952779684404, 
              "TrainingMemory" -> 66224., "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6854678736653401, 0.16555022822700807`], 
                Around[0.6854678736653401, 0.16555022822700807`], 
                Around[1.2167806430931225`, 0.5589456260663228], 
                Around[1.2849416918649328`, 0.6243755005787543]}, 
              "AccuracyHistory" -> {
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006376775003584265, "MeanCrossEntropy" -> 
             Around[0.9681645205721839, 0.1988282802327002], "ModelMemory" -> 
             15200., "TrainingMemory" -> 66224., "TrainingTime" -> 
             0.005807500418668624], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7541311417070969, 0.1019101767302267], "Accuracy" -> 
              Around[0.25257291864103226`, 0.1262864593205162], 
              "EvaluationTime" -> 0.0002016513313775466, "TestSize" -> 4, 
              "ModelMemory" -> 6217.6, "ModelUtility" -> -0.4376279057645738, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.00480571221012517, 
              "TrainingMemory" -> 77203.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6854678736653401, 0.16555022822700807`], 
                Around[0.6854678736653401, 0.16555022822700807`], 
                Around[0.7868341506923813, 0.19545062978761021`], 
                Around[0.8587546688053264, 0.241500185830868]}, 
              "AccuracyHistory" -> {
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002016513313775466, "MeanCrossEntropy" -> 
             Around[0.7541311417070969, 0.1019101767302267], "ModelMemory" -> 
             6217.6, "TrainingMemory" -> 77203.2, "TrainingTime" -> 
             0.005045997820631428], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7655569131994033, 0.09407970226552838], "Accuracy" -> 
              Around[0.25257291864103226`, 0.1262864593205162], 
              "EvaluationTime" -> 0.001995262314968879, "TestSize" -> 4, 
              "ModelMemory" -> 96996.8, "ModelUtility" -> -0.5198138703956628,
               "TrainingSize" -> 4, "TrainingTime" -> 0.012071403294353335`, 
              "TrainingMemory" -> 157179.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7818834938683362, 0.19286382063464164`], 
                Around[0.7722669236613872, 0.18810987261425346`], 
                Around[0.7868341506923813, 0.19545062978761021`], 
                Around[0.7212430845755085, 0.16991143672772718`]}, 
              "AccuracyHistory" -> {
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.001995262314968879, "MeanCrossEntropy" -> 
             Around[0.7655569131994033, 0.09407970226552838], "ModelMemory" -> 
             96996.8, "TrainingMemory" -> 157179.2, "TrainingTime" -> 
             0.012674973459071], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8800625804909885, 0.16255566741763575`], "Accuracy" -> 
              Around[0.25257291864103226`, 0.1262864593205162], 
              "EvaluationTime" -> 0.0002716722520895166, "TestSize" -> 4, 
              "ModelMemory" -> 6352., "ModelUtility" -> -0.6016621705562369, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.0027720429229730996`, 
              "TrainingMemory" -> 56460.8, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6854678736653401, 0.16555022822700807`], 
                Around[0.6854678736653401, 0.16555022822700807`], 
                Around[1.1891936288009064`, 0.532658762776426], 
                Around[0.9601209458323676, 0.3228734813162561]}, 
              "AccuracyHistory" -> {
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002716722520895166, "MeanCrossEntropy" -> 
             Around[0.8800625804909885, 0.16255566741763575`], "ModelMemory" -> 
             6352., "TrainingMemory" -> 56460.8, "TrainingTime" -> 
             0.0029106450691217547`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6854712896166664, 0.0827751427448434], "Accuracy" -> 
              Around[0.5025729186410323, 0.21126489009924343`], 
              "EvaluationTime" -> 0.00022019119615851592`, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.3393642223297857, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.006443976562366599, 
              "TrainingMemory" -> 67796.8, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6854433900542286, 0.1655498514668193], 
                Around[0.6854495114241492, 0.16554994532465453`], 
                Around[0.6854931984439772, 0.16555062174006976`], 
                Around[0.685499058544311, 0.1655507133499637]}, 
              "AccuracyHistory" -> {
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022019119615851592`, "MeanCrossEntropy" -> 
             Around[0.6854712896166664, 0.0827751427448434], "ModelMemory" -> 
             9224., "TrainingMemory" -> 67796.8, "TrainingTime" -> 
             0.006766175390484929], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.168779380994497, 0.9430568301068071], "Accuracy" -> 
              Around[0.5025729186410323, 0.21126489009924343`], 
              "EvaluationTime" -> 0.00022286653840087792`, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -1.550704002122155, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.011105542178190143`, 
              "TrainingMemory" -> 72076.8, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5378098181622372, 0.22012232600350326`], 
                Around[0.5850177824638445, 0.19230923232245425`], 
                Around[3.5686792026189367`, 2.890514686907922], 
                Around[3.9836107207329703`, 3.304850690293383]}, 
              "AccuracyHistory" -> {
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00022286653840087792`, "MeanCrossEntropy" -> 
             Around[2.168779380994497, 0.9430568301068071], "ModelMemory" -> 
             9224., "TrainingMemory" -> 72076.8, "TrainingTime" -> 
             0.011660819287099649`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6854682152546436, 0.08277511677659204], "Accuracy" -> 
              Around[0.5025729186410323, 0.21126489009924343`], 
              "EvaluationTime" -> 0.0002098587138277019, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.3393598253206963, 
              "TrainingSize" -> 4, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 67891.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6854654249785684, 0.16555019038305488`], 
                Around[0.6854660370923487, 0.16555019983975366`], 
                Around[0.6854704064844572, 0.16555026740930734`], 
                Around[0.6854709924631999, 0.16555027647982137`]}, 
              "AccuracyHistory" -> {
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002098587138277019, "MeanCrossEntropy" -> 
             Around[0.6854682152546436, 0.08277511677659204], "ModelMemory" -> 
             9224., "TrainingMemory" -> 67891.2, "TrainingTime" -> 
             0.0066250521170420264`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6888856626433633, 0.08448036314070746], "Accuracy" -> 
              Around[0.5025729186410323, 0.21126489009924343`], 
              "EvaluationTime" -> 0.0002565393276356819, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.34469939794559734`,
               "TrainingSize" -> 4, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 68744., "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6641736609178736, 0.16658722950065616`], 
                Around[0.6703070645182114, 0.16600937281531994`], 
                Around[0.707526314767112, 0.16735107384103093`], 
                Around[0.713535610370256, 0.16834004203520217`]}, 
              "AccuracyHistory" -> {
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002565393276356819, "MeanCrossEntropy" -> 
             Around[0.6888856626433633, 0.08448036314070746], "ModelMemory" -> 
             9224., "TrainingMemory" -> 68744., "TrainingTime" -> 
             0.0066250521170420264`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.685502038898137, 0.08277559989921943], "Accuracy" -> 
              Around[0.5025729186410323, 0.21126489009924343`], 
              "EvaluationTime" -> 0.0002462068453048679, "TestSize" -> 4, 
              "ModelMemory" -> 9224., "ModelUtility" -> -0.33940817837218207`,
               "TrainingSize" -> 4, "TrainingTime" -> 0.005790493001390246, 
              "TrainingMemory" -> 68139.2, "ExperimentCount" -> 4, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6852233628300216, 0.16554662808123696`], 
                Around[0.6852845995429476, 0.16554749583306078`], 
                Around[0.6857207806820717, 0.1655543318522304], 
                Around[0.685779412537507, 0.16555533835414663`]}, 
              "AccuracyHistory" -> {
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.7525729186410322, 0.4330203458387765], 
                Around[0.25257291864103226`, 0.2525729186410324], 
                Around[0.25257291864103226`, 0.2525729186410324]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002462068453048679, "MeanCrossEntropy" -> 
             Around[0.685502038898137, 0.08277559989921943], "ModelMemory" -> 
             9224., "TrainingMemory" -> 68139.2, "TrainingTime" -> 
             0.006080017651459759], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 4], 
              TypeSystem`Vector[TypeSystem`AnyType, 4]}], 1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 5, "PreprocessorEvaluationTime" -> 
      4.325390625*^-6, "PreprocessorMemory" -> 37264, "InputDimension" -> 1, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6829081047004717,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.823584188634226`17.335045646194843*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 4, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.41002749999999993`, "ExperimentCounts" -> 40]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           7806654962102425149]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.620753, 
      "MaxTrainingMemory" -> 560568, "DataMemory" -> 624, "FunctionMemory" -> 
      163736, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 1, 10, 43, 9.1441097`8.713716392172081}, "Instant",
         "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8236057891741223`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"dd5db72e-bf93-4c2a-899b-01bdd740680a"]
}, Open  ]],

Cell["\:5bf9\:4e8e\:4e00\:4e2a\:65b0\:793a\:4f8b\:ff0c\:9884\:6d4b\:6700\:6709\
\:53ef\:80fd\:7684\:7c7b", "Text",
 CellChangeTimes->{3.8229945633553705`*^9},
 CellID->510916105,ExpressionUUID->"600dbea8-44d0-4877-a0a8-21de9b0de8f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "[", 
  RowBox[{"1.5", ",", " ", "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8236073484594107`*^9, 3.823607348678397*^9}},
 CellLabel->"In[66]:=",
 CellID->391508067,ExpressionUUID->"aee7a88c-b77e-4a66-81ff-25a11d7be9db"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"diseased\"\>", "\[Rule]", "0.4999950770751712`"}], ",", 
   RowBox[{"\<\"healthy\"\>", "\[Rule]", "0.5000049229248288`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.823605791064129*^9, 3.8236073509879103`*^9, 
  3.823608001517685*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"57700d2c-a060-403c-80ae-eb0df7cc079d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "[", "1.5", "]"}]], "Input",
 CellChangeTimes->{{3.8236073535720005`*^9, 3.823607353748005*^9}},
 CellLabel->"In[67]:=",
 CellID->1327356029,ExpressionUUID->"d4fe862b-2bf1-437f-9df4-1901e1e31e85"],

Cell[BoxData["\<\"healthy\"\>"], "Output",
 CellChangeTimes->{3.823605794764262*^9, 3.823607354732875*^9, 
  3.8236080035378737`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"5630455e-d8a8-4bda-bfa2-c5b734577b43"]
}, Open  ]],

Cell["\:8bbe\:7f6e\:51b3\:5b9a\:6548\:7528\:ff0c\:4ee5\:60e9\:7f5a\:5bf9\
\[OpenCurlyDoubleQuote]diseased\[CloseCurlyDoubleQuote]\:7684\:8bef\:5206\
\:7c7b:", "Text",
 CellChangeTimes->{{3.8133186071473827`*^9, 3.813318607403582*^9}, {
  3.813320469876441*^9, 3.8133204790471077`*^9}, {3.8229946033480206`*^9, 
  3.8229946251774044`*^9}},
 CellID->2062261006,ExpressionUUID->"35a11264-e160-449e-9561-c640a646595c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "[", 
  RowBox[{"2.5", ",", 
   RowBox[{"UtilityFunction", "\[Rule]", " ", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<healthy\>\"", "\[Rule]", " ", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<healthy\>\"", "\[Rule]", " ", "1"}], ",", " ", 
         RowBox[{"\"\<diseased\>\"", "\[Rule]", " ", "0"}]}], "|>"}]}], ",", 
      RowBox[{"\"\<diseased\>\"", "\[Rule]", " ", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<healthy\>\"", "\[Rule]", " ", 
          RowBox[{"-", "1"}]}], ",", 
         RowBox[{"\"\<diseased\>\"", "\[Rule]", "1"}]}], "|>"}]}]}], 
     "|>"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.705826311122443*^9, 3.7058263186136*^9}},
 CellLabel->"In[68]:=",
 CellID->86712585,ExpressionUUID->"0d8cfcbf-ef6b-4ca3-8354-86efb666fd8f"],

Cell[BoxData["\<\"diseased\"\>"], "Output",
 CellChangeTimes->{3.823605811444008*^9, 3.8236080060198812`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"fd385b4c-e1ff-477f-b6f9-1d1b13419a6b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:793a\:4f8b: \:53ef\:98df\:7528\:8611\:83c7\:548c\:6709\:6bd2\:8611\
\:83c7\:7684\:5206\:7c7b", "Subsection",
 CellChangeTimes->{{3.8141164036373*^9, 3.814116412119974*^9}, {
  3.8142148682426577`*^9, 3.814214869805265*^9}, {3.822994652791996*^9, 
  3.8229946683647895`*^9}},ExpressionUUID->"a78197aa-121a-4fc3-9417-\
1c5ed143aec0"],

Cell["\:5728\:6839\:636e\:67d0\:4e9b\:7279\:5f81\:5c06\:8611\:83c7\:5f52\:7c7b\
\:4e3a\[CloseCurlyDoubleQuote]\:6709\:6bd2\[CloseCurlyDoubleQuote]\:548c\
\[CloseCurlyDoubleQuote]\:53ef\:98df\:7528\[CloseCurlyDoubleQuote]\:7684\:793a\
\:4f8b\:4efb\:52a1\:4e2d\:ff0c\:53ef\:4ee5\:63a2\:8ba8\:6548\:7528\:503c\:548c\
\:7c7b\:4f18\:5148\:7ea7\:7684\:6709\:7528\:6027.", "Text",
 CellChangeTimes->{{3.814289013631461*^9, 3.8142891173145847`*^9}, {
  3.822994708064863*^9, 
  3.8229947243304462`*^9}},ExpressionUUID->"20f29da7-ea73-4ce4-b06f-\
ebdef356d001"],

Cell["\:5bfc\:5165\:8611\:83c7\:79cd\:7c7b\:7684\:8bad\:7ec3\:96c6\:548c\:6d4b\
\:8bd5\:96c6\:6570\:636e", "Text",
 CellChangeTimes->{{3.82300239643764*^9, 3.823002416436262*^9}},
 CellID->1602878693,ExpressionUUID->"c658c11f-834b-4838-8b35-35f4ffdf936d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", " ", "=", " ", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Mushroom\>\""}], "}"}], 
     ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[71]:=",
 CellID->1547325283,ExpressionUUID->"09c98951-ec34-4688-bc49-2ae6debfb067"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testset", " ", "=", " ", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Mushroom\>\""}], "}"}], 
     ",", "\"\<TestData\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[72]:=",
 CellID->2016549858,ExpressionUUID->"33e6d667-bd28-4900-a645-181a1ec1bc9e"],

Cell["\<\
\:5728\:90e8\:5206\:8bad\:7ec3\:96c6\:6570\:636e\:4e0a\:8bad\:7ec3\:5206\:7c7b\
\:5668\
\>", "Text",
 CellChangeTimes->{{3.823002459699484*^9, 3.823002480231656*^9}},
 CellID->566546452,ExpressionUUID->"1b811c46-fc36-4b2f-a2f6-85f09673409d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"trainingset", ",", "100"}], "]"}], "]"}]}]], "Input",
 CellLabel->"In[73]:=",
 CellID->3727966,ExpressionUUID->"1bb7dfff-7f5b-4c47-bd4a-ac0d9f74b54d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "22", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Boolean\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Boolean", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"edible\"", "\"poisonous\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "22", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Boolean\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Boolean", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"edible\"", "\"poisonous\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["100", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 100, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal"], "f2" -> 
           Association["Type" -> "Nominal"], "f3" -> 
           Association["Type" -> "Nominal"], "f4" -> 
           Association["Type" -> "Boolean"], "f5" -> 
           Association["Type" -> "Nominal"], "f6" -> 
           Association["Type" -> "Nominal"], "f7" -> 
           Association["Type" -> "Nominal"], "f8" -> 
           Association["Type" -> "Nominal"], "f9" -> 
           Association["Type" -> "Nominal"], "f10" -> 
           Association["Type" -> "Nominal"], "f11" -> 
           Association["Type" -> "Nominal"], "f12" -> 
           Association["Type" -> "Nominal"], "f13" -> 
           Association["Type" -> "Nominal"], "f14" -> 
           Association["Type" -> "Nominal"], "f15" -> 
           Association["Type" -> "Nominal"], "f16" -> 
           Association["Type" -> "Nominal"], "f17" -> 
           Association["Type" -> "Nominal"], "f18" -> 
           Association["Type" -> "Nominal"], "f19" -> 
           Association["Type" -> "Nominal"], "f20" -> 
           Association["Type" -> "Nominal"], "f21" -> 
           Association["Type" -> "Nominal"], "f22" -> 
           Association["Type" -> "Nominal"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 22]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Boolean", "Nominal", 
                  "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal", "Nominal"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "f4" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
           "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
           Association["Type" -> "NominalVector", "Weight" -> 21]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 21], "f4" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f10" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f12" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f13" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f14" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f15" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f16" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f17" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f18" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f19" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f20" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f21" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f22" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 21]], 
                 "Version" -> {12.2, 0}, "ID" -> 4654925660995303041]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "BooleanVector", "Weight" -> 1]], 
                 "Version" -> {12.2, 0}, "ID" -> 901064396041800030]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 3383727115810853667, "Output" -> 
             Association[
              "f4" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4610704678921353227, "Output" -> 
             Association[
              "f4" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f4" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 21]], 
             "Output" -> 
             Association[
              "f4" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 21]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 100, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.41000000000000003`}, "Method" -> "Naive", 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.41000000000000003`}, 
                    "StandardDeviation" -> {0.4918333050943175}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.41000000000000003`}, 
                    "StandardDeviation" -> {0.4918333050943175}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 1, "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "Method" -> 
                    "Linear"], "PerformanceGoal" -> Automatic, 
                    "Invertibility" -> "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0079362, "MaxTrainingMemory" -> 
                    107336, "DataMemory" -> 944, "FunctionMemory" -> 21504, 
                    "LanguageVersion" -> {12.2, 0}, "Date" -> 
                    DateObject[{
                    2021, 3, 1, 14, 16, 5.6849678`8.507302984682923}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f4" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                 "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
                 7126152747542561562]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 21]], 
                 "VectorLength" -> 21, "Output" -> 
                 Association[
                  "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 21]], 
                 "Type" -> "NominalVector", "Version" -> {12.2, 0}, "ID" -> 
                 3253219777314550137]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.41000000000000003`}, 
             "StandardDeviation" -> {0.4918333050943175}, "Output" -> 
             Association[
              "f4" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 1461530028767190833]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 21]], 
             "Index" -> {
               Association[
               "bell" -> 1, "convex" -> 2, "flat" -> 3, "knobbed" -> 4], 
               Association["fibrous" -> 1, "scaly" -> 2, "smooth" -> 3], 
               Association[
               "brown" -> 1, "buff" -> 2, "gray" -> 3, "green" -> 4, "pink" -> 
                5, "red" -> 6, "white" -> 7, "yellow" -> 8], 
               Association[
               "almond" -> 1, "anise" -> 2, "creosote" -> 3, "fishy" -> 4, 
                "foul" -> 5, "none" -> 6, "pungent" -> 7, "spicy" -> 8], 
               Association["attached" -> 1, "free" -> 2], 
               Association["close" -> 1, "crowded" -> 2], 
               Association["broad" -> 1, "narrow" -> 2], 
               Association[
               "black" -> 1, "brown" -> 2, "buff" -> 3, "chocolate" -> 4, 
                "gray" -> 5, "orange" -> 6, "pink" -> 7, "purple" -> 8, "red" -> 
                9, "white" -> 10, "yellow" -> 11], 
               Association["enlarging" -> 1, "tapering" -> 2], 
               Association[
               "bulbous" -> 1, "club" -> 2, "equal" -> 3, "rooted" -> 4], 
               Association["fibrous" -> 1, "silky" -> 2, "smooth" -> 3], 
               Association[
               "fibrous" -> 1, "scaly" -> 2, "silky" -> 3, "smooth" -> 4], 
               Association[
               "brown" -> 1, "buff" -> 2, "gray" -> 3, "orange" -> 4, "pink" -> 
                5, "red" -> 6, "white" -> 7], 
               Association[
               "brown" -> 1, "buff" -> 2, "gray" -> 3, "orange" -> 4, "pink" -> 
                5, "red" -> 6, "white" -> 7, "yellow" -> 8], 
               Association["partial" -> 1], 
               Association["brown" -> 1, "orange" -> 2, "white" -> 3], 
               Association["one" -> 1, "two" -> 2], 
               Association[
               "evanescent" -> 1, "flaring" -> 2, "large" -> 3, "pendant" -> 
                4], 
               Association[
               "black" -> 1, "brown" -> 2, "buff" -> 3, "chocolate" -> 4, 
                "green" -> 5, "white" -> 6], 
               Association[
               "abundant" -> 1, "clustered" -> 2, "numerous" -> 3, 
                "scattered" -> 4, "several" -> 5, "solitary" -> 6], 
               Association[
               "grasses" -> 1, "leaves" -> 2, "meadows" -> 3, "paths" -> 4, 
                "urban" -> 5, "waste" -> 6, "woods" -> 7]}, "MissingCode" -> 
             0, "Version" -> {12.2, 0}, "ID" -> 1036657677154609114, "Output" -> 
             Association[
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 21]]]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 14111402000870112]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["edible" -> 1, "poisonous" -> 2]}, "MissingCode" -> 
             0, "Version" -> {12.2, 0}, "ID" -> 2679119642341790783, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 7544847649283220122]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["edible" -> 0.5, "poisonous" -> 0.5]], "LabelSplitter" -> 
    MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{1.0782999992370605`, 0.08584713190793991, 
             0.36703673005104065`, -0.13609035313129425`, 0.8632965683937073, 
             1.7720394134521484`, -1.0627219676971436`, -1.495322346687317, 
             0.43692904710769653`, 2.9047656059265137`, 0.8105023503303528, 
             0.8222916722297668, 0.05362552031874657, 1.4768036603927612`, 
             2.005786418914795, -0.22473059594631195`, -0.8703135848045349, 
             2.638761520385742, -1.4397432804107666`, -1.2691091299057007`, 
             2.621366024017334, -0.1988680064678192, 
             0.6395464539527893, -1.0847992897033691`, -2.0696098804473877`, \
-0.23593157529830933`, 0.28009849786758423`, 0.5737680196762085, 
             1.058828592300415, -1.2168174982070923`, 
             1.8086926937103271`, -0.12096893787384033`, 0.21390458941459656`,
              1.302721381187439, 0.5121936798095703, 
             1.121848702430725, -1.0482267141342163`, -0.8516590595245361, \
-1.4446035623550415`, -0.47325941920280457`, 
             0.3551262617111206, -0.9477292895317078, -1.5081247091293335`, 
             1.0745015144348145`, -0.8176391124725342, -0.7709366679191589, \
-0.0915009155869484, -0.2923848330974579, 0.15334691107273102`, 
             0.2241940200328827, -0.3711462616920471, 
             0.5468441843986511, -1.6928825378417969`, -0.3595181405544281, 
             2.5038201808929443`, -0.004914978053420782, 1.662405252456665, 
             0.634769082069397, -1.9162161350250244`, 0.8535269498825073, 
             3.748185873031616, -0.2676263451576233, -0.15313586592674255`, \
-2.189324140548706, -0.6269050240516663, -2.311781644821167, \
-0.2585618495941162}}], "Biases" -> RawArray["Real32",{0.8760932087898254}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 67, 
           "$InputDimensions" -> {67}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{67}, NeuralNetworks`AtomT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.2.14", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
           Association[
            "Type" -> "NominalVector", "Weight" -> 21, 
             "SetSize" -> {4, 3, 8, 8, 2, 2, 2, 11, 2, 4, 3, 4, 7, 8, 1, 3, 2,
               4, 6, 6, 7}], "f4" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
         Association[
          "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwZoCBD/axJRddxWOvjNKjNJgGAI5l5Xk=
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association[
                "Type" -> "NominalVector", "Weight" -> 21, 
                 "SetSize" -> {4, 3, 8, 8, 2, 2, 2, 11, 2, 4, 3, 4, 7, 8, 1, 
                  3, 2, 4, 6, 6, 7}]], "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4], 
               Association[1 -> 1, 2 -> 2, 3 -> 3], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[1 -> 1, 2 -> 2], 
               Association[1 -> 1, 2 -> 2], 
               Association[1 -> 1, 2 -> 2], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11], 
               Association[1 -> 1, 2 -> 2], 
               Association[0 -> 1, 1 -> 2, 2 -> 3, 3 -> 4, 4 -> 5], 
               Association[1 -> 1, 2 -> 2, 3 -> 3], 
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                8], 
               Association[1 -> 1], 
               Association[1 -> 1, 2 -> 2, 3 -> 3], 
               Association[1 -> 1, 2 -> 2], 
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4], 
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6], 
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7]}, 
             "Output" -> 
             Association[
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association["Weight" -> 21, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0.}, {
                0.013731935992836952`, -0.24923434853553772`, \
-0.5505850315093994}, {-1.12935471534729, 
                0.4404851496219635, -0.18512693047523499`}, {
                0.32351812720298767`, 0.10058354586362839`, 
                0.3319113552570343}, {
                0.30864953994750977`, -0.3444800078868866, 
                0.35431450605392456`}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.4765690863132477, -0.02717818319797516, \
-0.2390558123588562}, {
                0.7502398490905762, -0.22287552058696747`, \
-0.4989398419857025}, {-0.06898732483386993, -0.6520888805389404, \
-0.16248971223831177`}}], 
               RawArray["Real32",{{0., 0., 0., 
                0.}, {-0.9863853454589844, -0.3224374055862427, \
-0.2952466607093811, -0.44793128967285156`}, {-0.146711528301239, \
-0.1483258157968521, -0.3641401529312134, -0.12023741751909256`}, \
{-0.579461932182312, 
                0.49469953775405884`, -0.11532150208950043`, \
-0.09291672706604004}, {-0.4522570073604584, -0.24766679108142853`, 
                0.18032965064048767`, 0.6387925148010254}, {
                0.06991254538297653, -0.3669626712799072, \
-0.18490660190582275`, 
                0.9271635413169861}, {-0.3389245271682739, -1.044395089149475,
                 0.10884341597557068`, 
                0.7258490920066833}, {-0.14274810254573822`, \
-0.3309776186943054, -0.6651098132133484, -0.5592933893203735}, {
                1.62744140625, -0.8896763920783997, 0.3966422379016876, 
                1.0863161087036133`}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {0.7407039403915405, 
                0.3639560341835022, -0.3830776810646057, \
-0.7682049870491028}, {0.023181790485978127`, 
                0.2691000998020172, -0.09559690207242966, 
                0.5019465684890747}, {-0.7156519889831543, 
                0.04434332996606827, 
                0.11797679215669632`, -0.5931338667869568}, \
{-0.40099194645881653`, 0.11197790503501892`, -0.3006253242492676, 
                0.023351604118943214`}, {0.14406724274158478`, 
                0.3159816861152649, 
                0.3594934940338135, -0.30906400084495544`}, \
{-0.4142184257507324, 0.057803235948085785`, 
                0.5589078068733215, -0.037445519119501114`}, \
{-0.19559966027736664`, -0.3235160708427429, -0.2823933959007263, 
                0.3579932153224945}, {-1.4487470388412476`, 
                0.5895384550094604, 0.23112237453460693`, 
                0.3339035212993622}}], 
               RawArray["Real32",{{0., 
                0.}, {-0.19703711569309235`, -1.111520767211914}, \
{-0.5686179995536804, -0.3735387623310089}}], 
               RawArray["Real32",{{0., 
                0.}, {-1.7640399932861328`, -0.5079624652862549}, \
{-0.20128406584262848`, -0.8794780969619751}}], 
               RawArray["Real32",{{0., 0.}, {-0.5385873913764954, 
                1.0506410598754883`}, {
                0.23872415721416473`, -0.6077234745025635}}], 
               RawArray["Real32",{{0., 0., 0., 0., 0.}, {
                
                0.2862964868545532, -0.017280740663409233`, \
-0.11935226619243622`, -0.33752068877220154`, -0.11762373894453049`}, {
                0.19608548283576965`, 
                0.18422698974609375`, -0.5939633250236511, 
                0.09965188056230545, 0.18386490643024445`}, {
                0.14654210209846497`, -0.9507156610488892, 0.3840227723121643,
                 0.8844805955886841, 
                0.39350998401641846`}, {-0.0538916252553463, 
                0.2716839611530304, 0.08445870131254196, 0.03487343341112137, 
                0.09279461950063705}, {
                0.14531224966049194`, -0.13241879642009735`, \
-0.48264071345329285`, -0.2216813862323761, 0.5043408274650574}, {
                0.3611615300178528, 
                0.6367954611778259, -0.611023485660553, -0.08224774152040482, \
-0.676134467124939}, {
                0.6378441452980042, -0.025748668238520622`, \
-0.24945995211601257`, -0.12175104022026062`, -0.3751320242881775}, \
{-0.0231458842754364, 0.28735268115997314`, 0.19466502964496613`, 
                0.40567031502723694`, 
                0.18981364369392395`}, {-0.511268138885498, 
                0.09086320549249649, 
                0.07632998377084732, -0.08811765909194946, 
                0.3201862573623657}, {-0.19244514405727386`, \
-1.0564122200012207`, 0.2367444932460785, -0.05736968666315079, 
                0.4148608148097992}, {0.38628068566322327`, 
                0.24382399022579193`, -0.31464841961860657`, \
-0.575719952583313, 0.32764267921447754`}}], 
               RawArray["Real32",{{0., 
                0.}, {-0.31900495290756226`, -1.3844375610351562`}, {
                0.24243637919425964`, 0.40816277265548706`}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {
                0.2963085472583771, -0.15004880726337433`, \
-0.13809247314929962`, -0.39584529399871826`}, {0.1539577692747116, 
                0.2746923863887787, -0.4896989166736603, 
                0.10360486805438995`}, {-0.3129841387271881, 
                0.4165586829185486, 
                0.35172173380851746`, -0.6495924592018127}, {
                0.32796791195869446`, 
                0.6101838946342468, -0.18055817484855652`, 
                0.7317315340042114}, {
                0.4312216341495514, -0.1012573093175888, -0.8480910062789917, 
                0.4942958354949951}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.8051682114601135, 
                0.9380682110786438, -1.2520617246627808`}, {
                0.04947762191295624, 
                0.17098598182201385`, -0.35197940468788147`}, \
{-0.15192387998104095`, 0.19851469993591309`, 0.1302655041217804}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.09142208844423294, -0.5483243465423584, 
                0.5723569989204407}, {
                0.3248400390148163, -0.12376456707715988`, 
                0.08800631016492844}, {-0.03684605285525322, \
-0.15189814567565918`, 1.1629555225372314`}, {
                0.09464392811059952, -0.5028044581413269, \
-0.020747097209095955`}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {
                0.4396391808986664, -0.49142804741859436`, 
                0.6672597527503967, -0.3564094007015228}, {0.5463234782218933,
                 0.7677404880523682, -0.14424967765808105`, 
                0.47532397508621216`}, {0.06416051834821701, 
                0.16926375031471252`, -0.08663356304168701, \
-0.22668154537677765`}, {-0.5173766016960144, -1.2961512804031372`, 
                0.06385751813650131, 
                0.5063773393630981}, {-0.34387609362602234`, \
-0.36359670758247375`, -0.36171773076057434`, 0.11846935749053955`}, {
                0.38858339190483093`, -0.06825630366802216, 
                0.46419814229011536`, 
                0.356128454208374}, {-0.42398783564567566`, 
                0.10947872698307037`, 
                0.041077882051467896`, -0.18818916380405426`}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {0.49864131212234497`, 
                0.05899287387728691, 0.30042725801467896`, 
                0.24829815328121185`}, {-0.708878755569458, 
                0.03362530097365379, 0.4214819669723511, 
                0.41627904772758484`}, {0.4463576078414917, 
                0.843396008014679, -0.8506965637207031, \
-0.04078526794910431}, {-0.13696308434009552`, -0.5537810325622559, \
-0.4181280732154846, 0.3815282881259918}, {0.14540471136569977`, 
                0.14674247801303864`, -0.6920446157455444, 
                0.45763257145881653`}, {0.3433447778224945, 
                0.2921549379825592, 0.3766978979110718, 
                0.2713452875614166}, {-0.6461035013198853, 
                0.2486361861228943, -0.40128371119499207`, 
                0.17255093157291412`}, {0.6364530920982361, 
                0.30975064635276794`, -0.9992395043373108, \
-0.17678174376487732`}}], RawArray["Real32",{{0.}, {-0.10444971919059753`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.12047649174928665`, 
                0.8332280516624451, -0.8541931509971619}, \
{-0.6651783585548401, -0.26281291246414185`, 0.5913731455802917}, {
                0.3739618957042694, 1.03352689743042, 0.39374077320098877`}}],
                RawArray["Real32",{{0., 0.}, {0.12754370272159576`, 
                0.28555357456207275`}, {0.5595030188560486, 
                0.020168745890259743`}}], 
               RawArray["Real32",{{0., 0., 0.}, {-0.022248243913054466`, 
                1.3659008741378784`, 
                0.34798914194107056`}, {-0.1574733704328537, \
-0.0373372845351696, 0.5741058588027954}, {0.3670111298561096, 
                0.12119750678539276`, 0.01572996936738491}, {
                0.8052828907966614, -0.3438529074192047, 
                0.5115295052528381}}], 
               RawArray["Real32",{{0., 0., 0., 
                0.}, {-0.28032204508781433`, -0.2322569638490677, 
                0.7455509305000305, 0.17997176945209503`}, {
                0.8556214570999146, 
                0.637083113193512, -0.46994122862815857`, \
-0.9281455874443054}, {0.25631842017173767`, 0.09352077543735504, 
                0.5718390941619873, -0.1408403366804123}, {
                0.005518428515642881, -0.943156361579895, 
                0.22094595432281494`, 0.4568311274051666}, {
                0.018617214635014534`, 1.0368000268936157`, 
                0.5756891965866089, -0.4091421961784363}, {
                0.08936924487352371, 0.3188168406486511, 
                0.8143174052238464, -0.1549060195684433}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {0.18753108382225037`, 
                0.22205983102321625`, 0.17449475824832916`, 
                0.7882156372070312}, {-0.16641812026500702`, 
                0.44631335139274597`, 
                0.2983587086200714, -0.09347309172153473}, \
{-0.16680759191513062`, 0.750196635723114, -0.12716369330883026`, 
                0.13410918414592743`}, {-0.30883216857910156`, 
                0.03981472924351692, -0.4735513925552368, 
                0.3624309301376343}, {-0.6598846912384033, \
-0.36886072158813477`, 
                0.5377411246299744, -0.08778632432222366}, \
{-0.4802614152431488, 0.36740046739578247`, -0.6510795950889587, 
                0.06222086772322655}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {0.7378138899803162, 
                0.43938905000686646`, 0.20437851548194885`, 
                0.5166693925857544}, {-0.030683791264891624`, 
                0.59733647108078, 0.5510480403900146, 
                0.0028274874202907085`}, {-0.8068200945854187, \
-0.14027783274650574`, -0.7475586533546448, 
                0.2767949402332306}, {-0.0765722468495369, 
                0.014237349852919579`, -0.3449851870536804, 
                0.803214430809021}, {-0.14415867626667023`, \
-0.4415816366672516, 0.059241365641355515`, -0.5813829302787781}, {
                0.37344610691070557`, -1.0070006847381592`, \
-1.105180025100708, 0.967896044254303}, {0.16812297701835632`, 
                0.29375627636909485`, -0.5362077951431274, 
                0.32353436946868896`}}]}, "Version" -> {12.2, 0}, "ID" -> 
             197514835613747110]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f4" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> 
               Association["Weight" -> 21, "Type" -> "NumericalVector"]], 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 67]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwZoCBD/axJRddxWOvjNKjNJgGAI5l5Xk=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.2, 0}, 
             "ID" -> 1149678994522490868]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association["Info" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGBwAWI38diSi67L7VXKT9oU/npvvywpZf/PwCuj9CgNpgHG
2zRx
                "], "Type" -> "NumericalVector"], "Key" -> 
             "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22))", 
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
             "Missing" -> "Allowed"]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Calibrator" -> None, "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[127857], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1104214`6.494598242625215, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.2288437497299637, 0.06973310300956145],
          "Accuracy" -> Around[0.9285714285714284, 0.04832246898214546], 
         "EvaluationTime" -> 0.00007924465962305563, "TestSize" -> 40, 
         "ModelMemory" -> 49138.666666666664`, "ModelUtility" -> 
         0.7224053523224282, "TrainingSize" -> 80, "TrainingTime" -> 
         0.023396783926626794`, "TrainingMemory" -> 257722.66666666666`, 
         "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
           Around[0.2612087104050099, 0.15948739854583746`], 
           Around[0.1964787890549175, 0.06699584035467405]}, 
         "AccuracyHistory" -> {
           Around[0.9285714285714284, 0.06833829100190332], 
           Around[0.9285714285714284, 0.06833829100190332]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.1, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 100], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6931397499122995, 0.009829637869634653], "Accuracy" -> 
              Around[0.7034883720930226, 0.07051831379704908], 
              "EvaluationTime" -> 0.00002955160507658329, "TestSize" -> 85, 
              "ModelMemory" -> 44360, "ModelUtility" -> -0.3294599648106268, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              122648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6931397499122995, 0.006950603594226752]}, 
              "AccuracyHistory" -> {
                Around[0.7034883720930226, 0.04986397788373428]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6931108226547322, 0.018863945896784844`], "Accuracy" -> 
              Around[0.8333333333333333, 0.06288685479316745], 
              "EvaluationTime" -> 0.00008608414499818506, "TestSize" -> 40, 
              "ModelMemory" -> 49138.666666666664`, 
              "ModelUtility" -> -0.33201466938578916`, "TrainingSize" -> 80, 
              "TrainingTime" -> 0.010863084705980556`, "TrainingMemory" -> 
              217354.66666666666`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.69310517264097, 0.02667764736290514], 
                Around[0.6931164726684944, 0.026677646498092056`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.08893544294348489], 
                Around[0.8333333333333333, 0.08893544294348489]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008608414499818506, "MeanCrossEntropy" -> 
             Around[0.6931108226547322, 0.018863945896784844`], "ModelMemory" -> 
             49138.666666666664`, "TrainingMemory" -> 217354.66666666666`, 
             "TrainingTime" -> 0.020863084705980556`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5855076745597413, 0.20452108468474173`], "Accuracy" -> 
              Around[0.9186046511627897, 0.022620687964203773`], 
              "EvaluationTime" -> 0.00006914125186618266, "TestSize" -> 170, 
              "ModelMemory" -> 52101.33333333333, 
              "ModelUtility" -> -0.2254044450935747, "TrainingSize" -> 15, 
              "TrainingTime" -> 0.011726169411961113`, "TrainingMemory" -> 
              80938.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4895274399428178, 0.2184233521666966], 
                Around[0.6814879091766648, 0.3211028387061097]}, 
              "AccuracyHistory" -> {
                Around[0.9127906976744177, 0.03185667511299312], 
                Around[0.9244186046511617, 0.03005365797668946]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8016199697176482, 0.5304120481480324], "Accuracy" -> 
              Around[0.9047619047619045, 0.05715288059868501], 
              "EvaluationTime" -> 0.00018540701785397197`, "TestSize" -> 40, 
              "ModelMemory" -> 56880., "ModelUtility" -> -0.5963131054382581, 
              "TrainingSize" -> 80, "TrainingTime" -> 0.010863084705980556`, 
              "TrainingMemory" -> 130861.33333333333`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.31916804487819284`, 0.226959781429078], 
                Around[1.2840718945571035`, 0.9235483198695705]}, 
              "AccuracyHistory" -> {
                Around[0.9285714285714284, 0.06833829100190332], 
                Around[0.8809523809523807, 0.07998623140343451]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00018540701785397197`, "MeanCrossEntropy" -> 
             Around[0.8016199697176482, 0.5304120481480324], "ModelMemory" -> 
             56880., "TrainingMemory" -> 130861.33333333333`, "TrainingTime" -> 
             0.022589254117941666`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.744605771801639, 0.12862295140252406`], "Accuracy" -> 
              Around[0.6627906976744181, 0.040358502613674], "EvaluationTime" -> 
              0.000023473674293751515`, "TestSize" -> 170, "ModelMemory" -> 
              41818.666666666664`, "ModelUtility" -> -0.4322154695462337, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 110906.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.6321120565755569, 0.07860972427190746], 
                Around[0.8570994870277211, 0.10243192395651819`]}, 
              "AccuracyHistory" -> {
                Around[0.6802325581395343, 0.050862917352214876`], 
                Around[0.6453488372093019, 0.05209974701643414]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.43427161130866077`, 0.3179610046277097], "Accuracy" -> 
              Around[0.857142857142857, 0.12777912629938665`], 
              "EvaluationTime" -> 0.00009976311574844395, "TestSize" -> 40, 
              "ModelMemory" -> 47301.33333333333, "ModelUtility" -> 
              0.004277206612295248, "TrainingSize" -> 80, "TrainingTime" -> 
              0.01476237265572131, "TrainingMemory" -> 220538.66666666666`, 
              "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.12109559347037072`, 0.05632202581443958], 
                Around[0.7474476291469508, 0.2508937640113809]}, 
              "AccuracyHistory" -> {
                Around[0.976190476190476, 0.052215777504170065`], 
                Around[0.7380952380952378, 0.10141531643452785`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009976311574844395, "MeanCrossEntropy" -> 
             Around[0.43427161130866077`, 0.3179610046277097], "ModelMemory" -> 
             47301.33333333333, "TrainingMemory" -> 220538.66666666666`, 
             "TrainingTime" -> 0.027351626773662978`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3303911114763752, 0.06570130944738008], "Accuracy" -> 
              Around[0.8197674418604642, 0.059910822076937424`], 
              "EvaluationTime" -> 0.000023473674293751515`, "TestSize" -> 85, 
              "ModelMemory" -> 48208, "ModelUtility" -> 0.3753253877719751, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 111944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3303911114763752, 0.04645784144307823]}, 
              "AccuracyHistory" -> {
                Around[0.8197674418604642, 0.04236334855706317]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.31858890046085975`, 0.09718067306698841], "Accuracy" -> 
              Around[0.8809523809523807, 0.1057060136596845], 
              "EvaluationTime" -> 0.0000929236303733145, "TestSize" -> 40, 
              "ModelMemory" -> 90426.66666666666, "ModelUtility" -> 
              0.3914827070050333, "TrainingSize" -> 80, "TrainingTime" -> 
              0.007943282347242814, "TrainingMemory" -> 369224., 
              "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.3982294068770477, 0.149525254993967], 
                Around[0.2389483940446718, 0.06000836625344564]}, 
              "AccuracyHistory" -> {
                Around[0.7857142857142855, 0.09594409522920662], 
                Around[0.976190476190476, 0.052215777504170065`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000929236303733145, "MeanCrossEntropy" -> 
             Around[0.31858890046085975`, 0.09718067306698841], "ModelMemory" -> 
             90426.66666666666, "TrainingMemory" -> 369224., "TrainingTime" -> 
             0.014252855792044744`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6703000327173789, 0.06681475439670621], "Accuracy" -> 
              Around[0.4767441860465112, 0.3671831542157895], 
              "EvaluationTime" -> 0.000050878493126833946`, "TestSize" -> 170,
               "ModelMemory" -> 133498.66666666666`, 
              "ModelUtility" -> -0.31286348637763495`, "TrainingSize" -> 15, 
              "TrainingTime" -> 0.017498166805773083`, "TrainingMemory" -> 
              198544., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7367600487425241, 0.007885833921685634], 
                Around[0.6038400166922337, 0.014042866612375662`]}, 
              "AccuracyHistory" -> {
                Around[0.11046511627906977`, 0.03351609708043438], 
                Around[0.8430232558139527, 0.040231432691205514`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.36578910277922705`, 0.10057950320169023`], "Accuracy" -> 
              Around[0.9047619047619047, 0.08443699624286004], 
              "EvaluationTime" -> 0.00015811388300841897`, "TestSize" -> 40, 
              "ModelMemory" -> 137594.66666666666`, "ModelUtility" -> 
              0.25901014853704785`, "TrainingSize" -> 80, "TrainingTime" -> 
              0.015848931924611134`, "TrainingMemory" -> 266557.3333333333, 
              "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.27396336243853026`, 0.048372876395865794`], 
                Around[0.45761484311992384`, 0.07752944133825898]}, 
              "AccuracyHistory" -> {
                Around[0.976190476190476, 0.052215777504170065`], 
                Around[0.8333333333333333, 0.08893544294348489]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.36578910277922705`, 0.10057950320169023`], 
             "ModelMemory" -> 137594.66666666666`, "TrainingMemory" -> 
             266557.3333333333, "TrainingTime" -> 0.03334709873038422], 
           "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6320920090673758, 0.014219150942254358`], "Accuracy" -> 
              Around[0.8081395348837201, 0.06128587598167084], 
              "EvaluationTime" -> 0.000018645802264248383`, "TestSize" -> 85, 
              "ModelMemory" -> 44360, "ModelUtility" -> -0.2389200192077907, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 145248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6320920090673758, 0.010054458053983143`]}, 
              "AccuracyHistory" -> {
                Around[0.8081395348837201, 0.043335658497597206`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5269645102769946, 0.036550573690991406`], "Accuracy" -> 
              Around[0.8333333333333333, 0.06288685479316745], 
              "EvaluationTime" -> 0.00007924465962305563, "TestSize" -> 40, 
              "ModelMemory" -> 49138.666666666664`, 
              "ModelUtility" -> -0.06630623600406149, "TrainingSize" -> 80, 
              "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
              256101.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5150571042508854, 0.050292899583438855`], 
                Around[0.5388719163031039, 0.04756215939086553]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.08893544294348489], 
                Around[0.8333333333333333, 0.08893544294348489]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007924465962305563, "MeanCrossEntropy" -> 
             Around[0.5269645102769946, 0.036550573690991406`], "ModelMemory" -> 
             49138.666666666664`, "TrainingMemory" -> 256101.3333333333, 
             "TrainingTime" -> 0.032541877267630456`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.361127174462011, 0.07870581723783794], "Accuracy" -> 
              Around[0.866279069767441, 0.05302448543204232], 
              "EvaluationTime" -> 0.000027525628148972695`, "TestSize" -> 170,
               "ModelMemory" -> 45042.666666666664`, "ModelUtility" -> 
              0.2827080173608031, "TrainingSize" -> 15, "TrainingTime" -> 
              0.019952623149688785`, "TrainingMemory" -> 158709.3333333333, 
              "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.29206535927974403`, 0.042203206993188344`], 
                Around[0.43018898964427793`, 0.0844334958918738]}, 
              "AccuracyHistory" -> {
                Around[0.9127906976744177, 0.03185667511299312], 
                Around[0.8197674418604642, 0.04236334855706317]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.25772370633289854`, 0.058814058491483176`], "Accuracy" -> 
              Around[0.9047619047619045, 0.05715288059868501], 
              "EvaluationTime" -> 0.00007924465962305563, "TestSize" -> 40, 
              "ModelMemory" -> 49138.666666666664`, "ModelUtility" -> 
              0.6180853865752077, "TrainingSize" -> 80, "TrainingTime" -> 
              0.023396783926626794`, "TrainingMemory" -> 257725.3333333333, 
              "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.2521997202850592, 0.10839611734818252`], 
                Around[0.2632476923807378, 0.06957919769061244]}, 
              "AccuracyHistory" -> {
                Around[0.9285714285714284, 0.06833829100190332], 
                Around[0.8809523809523807, 0.07998623140343451]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007924465962305563, "MeanCrossEntropy" -> 
             Around[0.25772370633289854`, 0.058814058491483176`], 
             "ModelMemory" -> 49138.666666666664`, "TrainingMemory" -> 
             257725.3333333333, "TrainingTime" -> 0.04334940707631558], 
           "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6930728899495263, 0.009829655240073424], "Accuracy" -> 
              Around[0.7034883720930226, 0.07051831379704908], 
              "EvaluationTime" -> 0.000023473674293751515`, "TestSize" -> 85, 
              "ModelMemory" -> 44360, "ModelUtility" -> -0.3293637723451517, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              123376, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6930728899495263, 0.006950615876981798]}, 
              "AccuracyHistory" -> {
                Around[0.7034883720930226, 0.04986397788373428]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6927276242346104, 0.037728149134213164`], "Accuracy" -> 
              Around[0.8333333333333333, 0.1257737095863349], 
              "EvaluationTime" -> 0.00007924465962305563, "TestSize" -> 20, 
              "ModelMemory" -> 48456, "ModelUtility" -> -0.3368668543412595, 
              "TrainingSize" -> 80, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 218120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6927276242346104, 0.0266778300944195]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.08893544294348489]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007924465962305563, "MeanCrossEntropy" -> 
             Around[0.6927276242346104, 0.037728149134213164`], "ModelMemory" -> 
             48456, "TrainingMemory" -> 218120, "TrainingTime" -> 
             0.025848931924611136`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.27221474903897624`, 0.0963246580781354], "Accuracy" -> 
              Around[0.9127906976744177, 0.04505214199690833], 
              "EvaluationTime" -> 0.000018645802264248383`, "TestSize" -> 85, 
              "ModelMemory" -> 44360, "ModelUtility" -> 0.5396336368361618, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 158272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.27221474903897624`, 0.06811181892252509]}, 
              "AccuracyHistory" -> {
                Around[0.9127906976744177, 0.03185667511299312]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.2288437497299637, 0.06973310300956145], "Accuracy" -> 
              Around[0.9285714285714284, 0.04832246898214546], 
              "EvaluationTime" -> 0.00007924465962305563, "TestSize" -> 40, 
              "ModelMemory" -> 49138.666666666664`, "ModelUtility" -> 
              0.7224053523224282, "TrainingSize" -> 80, "TrainingTime" -> 
              0.023396783926626794`, "TrainingMemory" -> 257722.66666666666`, 
              "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.2612087104050099, 0.15948739854583746`], 
                Around[0.1964787890549175, 0.06699584035467405]}, 
              "AccuracyHistory" -> {
                Around[0.9285714285714284, 0.06833829100190332], 
                Around[0.9285714285714284, 0.06833829100190332]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007924465962305563, "MeanCrossEntropy" -> 
             Around[0.2288437497299637, 0.06973310300956145], "ModelMemory" -> 
             49138.666666666664`, "TrainingMemory" -> 257722.66666666666`, 
             "TrainingTime" -> 0.043349407076315585`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.447157850183685, 0.03266283907710339], "Accuracy" -> 
              Around[0.9011627906976734, 0.047398919048963845`], 
              "EvaluationTime" -> 0.000023473674293751515`, "TestSize" -> 85, 
              "ModelMemory" -> 44360, "ModelUtility" -> 0.0971888624477707, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 158272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.447157850183685, 0.02309611500422476]}, 
              "AccuracyHistory" -> {
                Around[0.9011627906976734, 0.033516097080434556`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3646797950509598, 0.057037288320997775`], "Accuracy" -> 
              Around[0.857142857142857, 0.06406082160768686], 
              "EvaluationTime" -> 0.00007924465962305563, "TestSize" -> 40, 
              "ModelMemory" -> 49138.666666666664`, "ModelUtility" -> 
              0.2847825782518657, "TrainingSize" -> 80, "TrainingTime" -> 
              0.023396783926626794`, "TrainingMemory" -> 257712., 
              "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.35265113941298265`, 0.0798292281564076], 
                Around[0.376708450688937, 0.0779035586054603]}, 
              "AccuracyHistory" -> {
                Around[0.8809523809523807, 0.07998623140343451], 
                Around[0.8333333333333333, 0.08893544294348489]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007924465962305563, "MeanCrossEntropy" -> 
             Around[0.3646797950509598, 0.057037288320997775`], "ModelMemory" -> 
             49138.666666666664`, "TrainingMemory" -> 257712., "TrainingTime" -> 
             0.043349407076315585`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            2], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 100, 
      "PreprocessorEvaluationTime" -> 5.4921875*^-6, "PreprocessorMemory" -> 
      115680, "InputDimension" -> 22, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.823596966440179`17.335047097535018*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.41636439999999997`, "ExperimentCounts" -> 14], 
         Association[
         "TrainingSizes" -> 80, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.40775639999999996`, "ExperimentCounts" -> 19]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"convex"}, "ID" -> 
           223830984131347470], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"smooth"}, "ID" -> 
           3181086525719607783], "f3" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"pink"}, "ID" -> 
           509165656554065290], "f4" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {True}, "ID" -> 
           1604161506447929441], "f5" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"none"}, "ID" -> 
           4712557960321622165], "f6" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"free"}, "ID" -> 
           1736894384284373350], "f7" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"close"}, "ID" -> 
           6385081267771642384], "f8" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"broad"}, "ID" -> 
           9050612953462206946], "f9" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"}, "ID" -> 
           7620751929912453154], "f10" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"enlarging"}, "ID" -> 
           7711695143384896275], "f11" -> 
         Association["Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Missing[]}, "ID" -> 6947422922590196435], "f12" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"smooth"}, "ID" -> 
           5937810478194738894], "f13" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"smooth"}, "ID" -> 
           6353494181561493803], "f14" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"red"}, "ID" -> 
           6386650481869391281], "f15" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"red"}, "ID" -> 
           2405872803971830730], "f16" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"partial"}, "ID" -> 
           4992907507517299211], "f17" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"}, "ID" -> 
           6201216371099642783], "f18" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"two"}, "ID" -> 
           7004436718853321618], "f19" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"evanescent"}, 
           "ID" -> 6489080358938780074], "f20" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"}, "ID" -> 
           1321833030588948872], "f21" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"clustered"}, "ID" -> 
           6714386864055124245], "f22" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"waste"}, "ID" -> 
           8311728235746515674]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.1610359, 
      "MaxTrainingMemory" -> 905928, "DataMemory" -> 100896, "FunctionMemory" -> 
      347776, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 1, 14, 16, 6.8150156`8.58604182709403}, "Instant", 
        "Gregorian", -6.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8230025050013*^9, 3.823618566845293*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"79498216-9442-4bbf-8522-5c46744024e6"]
}, Open  ]],

Cell["\<\
\:5728\:6d4b\:8bd5\:6570\:636e\:4e0a\:7684\:6df7\:6dc6\:77e9\:9635\
\>", "Text",
 CellChangeTimes->{
  3.8142891773012123`*^9, {3.823002490989026*^9, 3.823002498475041*^9}},
 CellID->1401436271,ExpressionUUID->"3b316917-c63d-4764-bcbe-be746804f302"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"c", ",", "testset", ",", "\"\<ConfusionMatrixPlot\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[74]:=",
 CellID->338766401,ExpressionUUID->"07128ba7-9da3-4762-a90a-d65225111e3a"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9361853975063819, 0.8773054107096907, 0.6882455978499273}, {
   0.9334605375157851, 0.4860985862328616, 0.003312813664475061}}, {{1., 0.42,
    0.}, {0.9191406245491329, 0.8128975976176873, 0.5207153236332672}}}, {{0, 
   0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1172", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1172", "\" examples of \"", "\"edible\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9346092503987241`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9279493269992082`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9312673818037347`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1172, " examples of ", "edible", " correctly classified"}], 
         Row[{"Precision = ", 0.9346092503987241}], 
         Row[{"Recall = ", 0.9279493269992082}], 
         Row[{"FScore = ", 0.9312673818037347}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["82", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "82", "\" examples of \"", "\"poisonous\"", 
             "\" misclassified as \"", "\"edible\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.06539074960127592`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.06978723404255319`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          82, " examples of ", "poisonous", " misclassified as ", "edible"}], 
         Row[{"Column fraction = ", 0.06539074960127592}], 
         Row[{"Row fraction = ", 0.06978723404255319}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["91", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "91", "\" examples of \"", "\"edible\"", "\" misclassified as \"",
              "\"poisonous\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.07685810810810811`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.07205067300079177`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          91, " examples of ", "edible", " misclassified as ", "poisonous"}], 
         Row[{"Column fraction = ", 0.07685810810810811}], 
         Row[{"Row fraction = ", 0.07205067300079177}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1093", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1093", "\" examples of \"", "\"poisonous\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9231418918918919`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9302127659574468`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9266638406104282`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1093, " examples of ", "poisonous", " correctly classified"}], 
         Row[{"Precision = ", 0.9231418918918919}], 
         Row[{"Recall = ", 0.9302127659574468}], 
         Row[{"FScore = ", 0.9266638406104282}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1263", "\" example\"", "\"s\"", "\" of class \"", "\"edible\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9279493269992082`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1263, " example", "s", " of class ", "edible"}], 
        Row[{"Recall = ", 0.9279493269992082}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1175", "\" example\"", "\"s\"", "\" of class \"", 
            "\"poisonous\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9302127659574468`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1175, " example", "s", " of class ", "poisonous"}], 
        Row[{"Recall = ", 0.9302127659574468}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1254", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"edible\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9346092503987241`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1254, " example", "s", " classified as ", "edible"}], 
        Row[{"Precision = ", 0.9346092503987241}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1184", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"poisonous\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9231418918918919`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1184, " example", "s", " classified as ", "poisonous"}], 
        Row[{"Precision = ", 0.9231418918918919}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"edible\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"poisonous\"", BoxRotation -> 0.], 
        TraditionalForm]}}, {{1.5, 
       FormBox["1263", TraditionalForm]}, {0.5, 
       FormBox["1175", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["1254", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1184", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"edible\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"poisonous\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{Automatic, 391.2000000000007},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.8230025077425737`*^9, 3.823618569735059*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"cc0cbc68-8f2c-4347-9ef4-7befa401c3cf"]
}, Open  ]],

Cell[TextData[{
 "\:901a\:8fc7 ",
 StyleBox[ButtonBox["ClassPriors",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ClassPriors"],
  FontWeight->"Bold"],
 " \:8bbe\:5b9a\:4e0e\:6570\:636e\:96c6\:65e0\:5173\:7684\:5148\:9a8c\:6982\
\:7387"
}], "Text",
 CellChangeTimes->{{3.814214969105089*^9, 3.814215003725295*^9}, 
   3.814215034220655*^9, {3.823002531978619*^9, 
   3.8230025701773677`*^9}},ExpressionUUID->"03388c02-1e4f-46e2-aa5e-\
56e0d2e99f56"],

Cell["\:5047\:8bbe\:53ef\:98df\:7528\:8611\:83c7\:5360\:603b\:8611\:83c7\:79cd\
\:7c7b\:4e2d\:768475%", "Text",
 CellChangeTimes->{{3.814289184814273*^9, 3.81428919184426*^9}, {
  3.8230025864592953`*^9, 
  3.8230026081636972`*^9}},ExpressionUUID->"882afcb4-4d2e-40aa-9325-\
6d43cfca355b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"priors", " ", "=", " ", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<edible\>\"", "\[Rule]", "0.75"}], ",", 
    RowBox[{"\"\<poisonous\>\"", "\[Rule]", "0.25"}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.8142148831502542`*^9, 3.81421491837224*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"696206fa-f49a-45dc-9140-e9831ebbfd15"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"edible\"\>", "\[Rule]", "0.75`"}], ",", 
   RowBox[{"\<\"poisonous\"\>", "\[Rule]", "0.25`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.823002690082246*^9, 3.823618591408154*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"e96c824e-fad2-410d-855d-6bf2e191d275"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["UtilityFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/UtilityFunction"],
  FontWeight->"Bold"],
 " \:8bbe\:5b9a\:6bcf\:79cd\:5224\:65ad\:6240\:5bf9\:5e94\:7684\:6548\:7528\
\:503c"
}], "Text",
 CellChangeTimes->{{3.814116531370287*^9, 3.814116558878139*^9}, {
  3.8230026319450016`*^9, 
  3.8230026463481283`*^9}},ExpressionUUID->"03a29ce2-4c1c-49f7-b2c0-\
b1cb820f9dce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"utility", " ", "=", " ", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<edible\>\"", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<edible\>\"", "\[Rule]", " ", "1"}], ",", 
        RowBox[{"\"\<poisonous\>\"", "\[Rule]", " ", "0"}], ",", 
        RowBox[{"Indeterminate", "\[Rule]", " ", "0.5"}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<poisonous\>\"", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<edible\>\"", "\[Rule]", " ", 
         RowBox[{"-", "10"}]}], ",", 
        RowBox[{"\"\<poisonous\>\"", "\[Rule]", "1"}], ",", " ", 
        RowBox[{"Indeterminate", "\[Rule]", " ", "0.8"}]}], "|>"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}]], "Input",
 CellLabel->"In[76]:=",
 CellID->1903814788,ExpressionUUID->"2afc6327-5651-44d2-acf3-0f3475bd21c9"],

Cell["ClassPriors \
\:8bbe\:5b9a\:5b8c\:6210\:4ee5\:540e\:ff0c\:91cd\:65b0\:8003\:5bdf\:6df7\:6dc6\
\:77e9\:9635", "Text",
 CellChangeTimes->{
  3.8142891773012123`*^9, {3.814289221624737*^9, 3.814289230533296*^9}, {
   3.814289336194087*^9, 3.8142893404474897`*^9}, {3.814289422874888*^9, 
   3.814289425575214*^9}, {3.8230026653777986`*^9, 3.823002685912429*^9}},
 CellID->1441467900,ExpressionUUID->"19ebce3e-d3c5-49df-b206-2dc7a4739368"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"c", ",", "testset", ",", "\"\<ConfusionMatrixPlot\>\"", ",", 
   RowBox[{"UtilityFunction", "\[Rule]", "utility"}], ",", " ", 
   RowBox[{"ClassPriors", "\[Rule]", "priors"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.814214934495625*^9, 3.814214940376522*^9}},
 CellLabel->"In[77]:=",
 CellID->1264509497,ExpressionUUID->"6550e941-5842-465f-9e18-06ad2810504b"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9220062716360921, 0.823726140915239, 0.5488812982397088}, {
   0.9355342956753789, 0.4840385683514347, 0.00320956704793455}}, {{1., 0.42, 
   0.}, {0.93866580998111, 0.8866782514899151, 0.7126251647179577}}}, {{0, 
   0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1078", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1078", "\" examples of \"", "\"edible\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9668161434977578`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9685534591194969`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9676840215439857`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1078, " examples of ", "edible", " correctly classified"}], 
         Row[{"Precision = ", 0.9668161434977578}], 
         Row[{"Recall = ", 0.9685534591194969}], 
         Row[{"FScore = ", 0.9676840215439857}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["37", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "37", "\" examples of \"", "\"poisonous\"", 
             "\" misclassified as \"", "\"edible\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.033183856502242155`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.03513770180436847`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          37, " examples of ", "poisonous", " misclassified as ", "edible"}], 
         Row[{"Column fraction = ", 0.033183856502242155`}], 
         Row[{"Row fraction = ", 0.03513770180436847}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["35", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "35", "\" examples of \"", "\"edible\"", "\" misclassified as \"",
              "\"poisonous\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.03330161750713606`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.031446540880503145`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          35, " examples of ", "edible", " misclassified as ", "poisonous"}], 
         Row[{"Column fraction = ", 0.03330161750713606}], 
         Row[{"Row fraction = ", 0.031446540880503145`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1016", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1016", "\" examples of \"", "\"poisonous\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.966698382492864`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9648622981956315`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9657794676806084`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1016, " examples of ", "poisonous", " correctly classified"}], 
         Row[{"Precision = ", 0.966698382492864}], 
         Row[{"Recall = ", 0.9648622981956315}], 
         Row[{"FScore = ", 0.9657794676806084}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1263", "\" example\"", "\"s\"", "\" of class \"", "\"edible\"", 
            "\":\""}, "RowDefault"]}, {
          
          TemplateBox[{
           "1113", "\" classified\"", "\", \"", "150", "\" indeterminate\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9685534591194969`"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"RejectionRate = \"", "0.1187648456057007`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1263, " example", "s", " of class ", "edible", ":"}], 
        Row[{1113, " classified", ", ", 150, " indeterminate"}], 
        Row[{"Recall = ", 0.9685534591194969}], 
        Row[{"RejectionRate = ", 0.1187648456057007}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1175", "\" example\"", "\"s\"", "\" of class \"", "\"poisonous\"",
             "\":\""}, "RowDefault"]}, {
          
          TemplateBox[{
           "1053", "\" classified\"", "\", \"", "122", "\" indeterminate\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9648622981956315`"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"RejectionRate = \"", "0.10382978723404256`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1175, " example", "s", " of class ", "poisonous", ":"}], 
        Row[{1053, " classified", ", ", 122, " indeterminate"}], 
        Row[{"Recall = ", 0.9648622981956315}], 
        Row[{"RejectionRate = ", 0.10382978723404256`}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1115", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"edible\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9668161434977578`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1115, " example", "s", " classified as ", "edible"}], 
        Row[{"Precision = ", 0.9668161434977578}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1051", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"poisonous\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.966698382492864`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1051, " example", "s", " classified as ", "poisonous"}], 
        Row[{"Precision = ", 0.966698382492864}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"edible\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"poisonous\"", BoxRotation -> 0.], 
        TraditionalForm]}}, {{1.5, 
       FormBox[
        TemplateBox[{"1113", "\" (\"", "150", "\")\""}, "RowDefault"], 
        TraditionalForm]}, {0.5, 
       FormBox[
        TemplateBox[{"1053", "\" (\"", "122", "\")\""}, "RowDefault"], 
        TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["1115", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1051", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"edible\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"poisonous\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{Automatic, 303.01818181818396`},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.823002694802717*^9, 3.8236185981297407`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"1c6f22d7-bf4a-4dd4-8eb6-8d766376ce2b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5b66\:4e60\:8d44\:6e90", "Section",
 CellChangeTimes->{
  3.720192656070273*^9, 3.814038060624406*^9, {3.8226966003795834`*^9, 
   3.822696604430465*^9}},ExpressionUUID->"00d0164c-1961-45bf-8639-\
819b8328c718"],

Cell[TextData[{
 "Elementary Introduction to the Wolfram Language: ",
 ButtonBox["Chapter 22 | Machine Learning",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/language/elementary-introduction/2nd-ed/22-\
machine-learning.html"], None},
  ButtonNote->
   "https://www.wolfram.com/language/elementary-introduction/2nd-ed/22-\
machine-learning.html"]
}], "Item",
 CellChangeTimes->{{3.8140374633926363`*^9, 3.814037503184197*^9}, 
   3.814037710316571*^9},ExpressionUUID->"7c1f4ec3-63c8-47c2-a3e0-\
f90603d3df9a"],

Cell[TextData[{
 "Wolfram U \:89c6\:9891\:8bfe\:7a0b: ",
 ButtonBox["Learning from Input and Output | Supervised Learning",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/wolfram-u/catalog/wl031/"], None},
  ButtonNote->"https://www.wolfram.com/wolfram-u/catalog/wl031/"]
}], "Item",
 CellChangeTimes->{{3.8140377721038313`*^9, 3.8140378076756887`*^9}, {
  3.8140381196157513`*^9, 3.814038138955965*^9}, {3.8226966128743486`*^9, 
  3.822696613919448*^9}},ExpressionUUID->"40f47c79-b172-4d34-8c20-\
c337dc458cfd"],

Cell[TextData[{
 "Wolfram U \:89c6\:9891\:8bfe\:7a0b: ",
 ButtonBox["An Overview of Machine Learning in the Wolfram Language",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/wolfram-u/catalog/wl030/"], None},
  ButtonNote->"https://www.wolfram.com/wolfram-u/catalog/wl030/"]
}], "Item",
 CellChangeTimes->{{3.814037506188362*^9, 3.814037553594853*^9}, 
   3.8226966211391654`*^9},ExpressionUUID->"5521c233-a568-43a7-b861-\
0d0bcb6e0976"],

Cell[TextData[{
 "Wolfram\:8bed\:8a00\:6700\:65b0\:7279\:6027: ",
 ButtonBox["High-Level Machine Learning",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/language/12/high-level-machine-learning"], 
    None},
  ButtonNote->
   "https://www.wolfram.com/language/12/high-level-machine-learning"]
}], "Item",
 CellChangeTimes->{
  3.814037743744882*^9, {3.814037887878433*^9, 3.814037909895112*^9}, {
   3.8226966248698473`*^9, 
   3.8226966291540585`*^9}},ExpressionUUID->"d6f3132c-d0c2-427c-813e-\
feb29f28f47e"],

Cell[TextData[{
 "Wolfram\:8bed\:8a00\:5e2e\:52a9\:6587\:6863: ",
 ButtonBox["Machine Learning",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/guide/MachineLearning.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/guide/MachineLearning.html"]
}], "Item",
 CellChangeTimes->{{3.814037913249216*^9, 3.8140379635565357`*^9}, {
  3.822696636202774*^9, 
  3.8226966401185617`*^9}},ExpressionUUID->"afd1c597-a65c-4988-8b0c-\
d6a55822f842"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 1028},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
Magnification:>1.1 Inherited,
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"ZHTrainingNB.nb",
ExpressionUUID->"e42fdc4d-7631-4f54-8637-f5d3bdc05afa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 461, 8, 185, "Title",ExpressionUUID->"99752d21-7a5e-4645-a9fb-31d9d59674f8"],
Cell[1044, 32, 363, 6, 44, "Author",ExpressionUUID->"3991237c-57b4-4d36-b804-47fa9c4005dc"],
Cell[1410, 40, 21546, 359, 245, "Text",ExpressionUUID->"03662e20-947f-4998-be5e-da916980c117"],
Cell[CellGroupData[{
Cell[22981, 403, 135, 3, 74, "Section",ExpressionUUID->"ca935767-3ec5-4fc6-86b3-004916aaca4f"],
Cell[CellGroupData[{
Cell[23141, 410, 237, 4, 61, "Subsection",ExpressionUUID->"79f53764-d3f6-4256-9cc2-f3682fa06854"],
Cell[23381, 416, 275, 5, 40, "Item",ExpressionUUID->"d22c98c5-0b3d-4842-b08c-a869722e1986"],
Cell[23659, 423, 508, 12, 40, "Item",ExpressionUUID->"27a430c4-382e-4da6-af67-220dcf141039"],
Cell[24170, 437, 255, 4, 40, "Item",ExpressionUUID->"84a21846-1a50-415e-9aac-9655405663c4"],
Cell[24428, 443, 259, 5, 40, "Item",ExpressionUUID->"64f56d1e-108f-4414-98b0-86bd8dcd7a4b"],
Cell[24690, 450, 245, 4, 40, "Item",ExpressionUUID->"49c75289-751c-40f6-87c0-a7de52902c81"],
Cell[24938, 456, 221, 4, 40, "Item",ExpressionUUID->"4c7785e9-1c10-4425-8ef9-ff4dfdb72921"],
Cell[25162, 462, 246, 4, 40, "Item",ExpressionUUID->"fec3844d-499b-4534-8db0-f7c45b77c388"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25445, 471, 173, 3, 61, "Subsection",ExpressionUUID->"bde86e72-21c5-4ae0-b526-4a5e1b16830d"],
Cell[25621, 476, 490, 13, 40, "Item",ExpressionUUID->"580b14a0-128b-4423-88f4-a0d12f2cc191"],
Cell[26114, 491, 277, 4, 40, "Item",ExpressionUUID->"f428e4a3-efa7-4418-ae52-beb144c10e2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26428, 500, 174, 3, 61, "Subsection",ExpressionUUID->"22ec5ae1-0fdc-433e-b120-5ce4aee12175"],
Cell[26605, 505, 180, 3, 40, "Item",ExpressionUUID->"f2b0e38e-f614-4158-8dfc-3dcf9dfd21b8"],
Cell[26788, 510, 192, 3, 40, "Item",ExpressionUUID->"095250f2-9289-4527-8a09-9bad039a97bf"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[27029, 519, 415, 7, 74, "Section",ExpressionUUID->"cf677860-beab-44b8-9750-1f75762aff06"],
Cell[27447, 528, 583, 10, 75, "Text",ExpressionUUID->"149d9c2f-2cc5-4fec-bd9a-3315f4a5b345"],
Cell[28033, 540, 168, 3, 40, "Item",ExpressionUUID->"f2b56e10-e6a5-48cb-aa75-a237a8cc25cf"],
Cell[28204, 545, 180, 3, 40, "Item",ExpressionUUID->"44fa17b6-e866-4f92-9b5d-9b24ef0bcc2a"],
Cell[28387, 550, 193, 5, 40, "Item",ExpressionUUID->"e766ae45-6bbf-4344-958b-86b4d25e8699"],
Cell[28583, 557, 192, 3, 40, "Item",ExpressionUUID->"3ebe8399-1011-4bde-a058-f7dca6ab6a03"],
Cell[28778, 562, 200, 3, 40, "Item",ExpressionUUID->"90c34a18-28c4-4e96-a095-cc84adb43431"],
Cell[28981, 567, 226, 4, 40, "Item",ExpressionUUID->"1e2becca-2bdc-4e71-b54f-bb7d04fb13fa"],
Cell[29210, 573, 158, 3, 44, "Text",ExpressionUUID->"9e52b1fd-0d24-4eb5-a878-c6b192eee9dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29405, 581, 731, 15, 74, "Section",ExpressionUUID->"4377d5c2-a1be-4db8-8db7-f4a51ce0425e"],
Cell[30139, 598, 421, 6, 44, "Text",ExpressionUUID->"53590bbc-1336-48a4-a319-feb6d483c326"],
Cell[30563, 606, 392, 10, 38, "Input",ExpressionUUID->"4374978f-3706-442c-8354-b5a0814a0fd9",
 CellID->333472059],
Cell[30958, 618, 273, 4, 44, "Text",ExpressionUUID->"4b75f647-f3dd-4376-9e0e-8eb60c6bfaf5"],
Cell[CellGroupData[{
Cell[31256, 626, 193, 4, 38, "Input",ExpressionUUID->"8794654c-c176-4317-8aa1-48c5ff699ad5",
 CellID->1238196041],
Cell[31452, 632, 45920, 873, 69, "Output",ExpressionUUID->"1c04ca21-43be-4ec1-a457-6358030df6e7"]
}, Open  ]],
Cell[77387, 1508, 470, 7, 44, "Text",ExpressionUUID->"13adfda6-78c8-4b29-8767-11d1e191dac5"],
Cell[CellGroupData[{
Cell[77882, 1519, 135, 2, 38, "Input",ExpressionUUID->"635fb4c2-c821-4c0d-8da7-4e1dfdae3d16"],
Cell[78020, 1523, 217, 3, 36, "Output",ExpressionUUID->"22d2e1b8-28b6-42b0-9f1a-ffc3c40bf34b"]
}, Open  ]],
Cell[78252, 1529, 405, 6, 44, "Text",ExpressionUUID->"d6154b44-c2f9-419e-a078-185d26383c59"],
Cell[CellGroupData[{
Cell[78682, 1539, 320, 6, 38, "Input",ExpressionUUID->"c1fc86e4-6f41-46d2-99ab-080e57af87bc"],
Cell[79005, 1547, 255, 5, 36, "Output",ExpressionUUID->"c5d95d49-d2bd-4bf1-bc00-372531164258"]
}, Open  ]],
Cell[79275, 1555, 354, 6, 44, "Text",ExpressionUUID->"d5cf3889-cefe-4c50-96a7-f103b47c91a8"],
Cell[CellGroupData[{
Cell[79654, 1565, 345, 8, 38, "Input",ExpressionUUID->"a1ac2214-6005-4da6-8800-6305afb2eba3"],
Cell[80002, 1575, 7112, 135, 260, "Output",ExpressionUUID->"bd617360-c3cb-4500-b1dc-28d211ff89b4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[87163, 1716, 477, 7, 74, "Section",ExpressionUUID->"7c951d13-3c9f-4dfc-bdba-719a8a610d60"],
Cell[87643, 1725, 353, 6, 44, "Text",ExpressionUUID->"84a3d715-fdf6-4a06-8982-2e25b10e885f"],
Cell[87999, 1733, 406, 12, 38, "Input",ExpressionUUID->"b92eb6c1-8c4e-4cad-b72d-77d117b77dc3",
 CellID->876830498],
Cell[88408, 1747, 177, 3, 44, "Text",ExpressionUUID->"0426829f-0ca3-475f-9627-07d673add5c4"],
Cell[CellGroupData[{
Cell[88610, 1754, 197, 4, 38, "Input",ExpressionUUID->"68e2a877-1f53-440f-b181-319d9c9c852a",
 CellID->296396957],
Cell[88810, 1760, 20152, 348, 120, "Output",ExpressionUUID->"121a8a2a-b534-4a9e-b565-8dc3a180e49b"]
}, Open  ]],
Cell[108977, 2111, 350, 5, 44, "Text",ExpressionUUID->"4d3074ce-89d6-4ac0-bd65-c097b5e14af6"],
Cell[CellGroupData[{
Cell[109352, 2120, 200, 4, 38, "Input",ExpressionUUID->"ed1fcd3c-411e-486f-83b6-32e770a5abb1",
 CellID->444256135],
Cell[109555, 2126, 9690, 194, 90, "Output",ExpressionUUID->"6e05b880-ff96-441a-8ff3-35cccb7718b3"]
}, Open  ]],
Cell[119260, 2323, 342, 5, 44, "Text",ExpressionUUID->"0756a7b8-4ed1-46a7-873b-ee13ef1dd634"],
Cell[CellGroupData[{
Cell[119627, 2332, 328, 6, 38, "Input",ExpressionUUID->"c058c81d-ec84-45fb-87a8-f735c90ced44"],
Cell[119958, 2340, 6860, 117, 217, "Output",ExpressionUUID->"8b833452-53d9-4dca-b6d7-fcbb65a95e10"]
}, Open  ]],
Cell[126833, 2460, 333, 5, 44, "Text",ExpressionUUID->"72b7e3ca-407a-4ead-abfd-ff52608ce73e"],
Cell[CellGroupData[{
Cell[127191, 2469, 257, 4, 38, "Input",ExpressionUUID->"314d48b9-e5b6-4905-995e-234a78da9c2e"],
Cell[127451, 2475, 217, 3, 36, "Output",ExpressionUUID->"8724455b-cf43-4458-8cb8-9ceb2b044754"]
}, Open  ]],
Cell[127683, 2481, 366, 7, 44, "Text",ExpressionUUID->"a8d44fca-c34c-44be-a7dc-bb1f49674898"],
Cell[CellGroupData[{
Cell[128074, 2492, 212, 3, 38, "Input",ExpressionUUID->"fe20cd3c-997c-4781-88f1-61b82e432197"],
Cell[128289, 2497, 11697, 245, 217, "Output",ExpressionUUID->"506967eb-9089-4a7d-96f7-4666e52e66f1"]
}, Open  ]],
Cell[140001, 2745, 553, 8, 44, "Text",ExpressionUUID->"8b6b1bd4-1c62-4015-9369-08e80e860504"],
Cell[CellGroupData[{
Cell[140579, 2757, 1168, 26, 170, "Input",ExpressionUUID->"e62ce054-9c66-45ec-b238-5e6ee582480b"],
Cell[141750, 2785, 15034, 312, 243, "Output",ExpressionUUID->"5f76259b-d17e-46a0-aca6-209ff523429c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[156833, 3103, 382, 6, 74, "Section",ExpressionUUID->"5a339afd-a2c7-4b5a-9814-7d706d23f48b"],
Cell[157218, 3111, 596, 14, 44, "Text",ExpressionUUID->"20cc0607-f2ca-4cd8-937e-22e932cb94ab"],
Cell[157817, 3127, 398, 7, 67, "Text",ExpressionUUID->"b5515d3b-c2a4-4b2c-9dab-5ece427f740d"],
Cell[CellGroupData[{
Cell[158240, 3138, 225, 4, 61, "Subsection",ExpressionUUID->"73523be5-a13a-48cc-addc-5a68f57e697d"],
Cell[158468, 3144, 433, 6, 44, "Text",ExpressionUUID->"2506fde3-f835-43b5-ba22-f4577da444f1"],
Cell[158904, 3152, 445, 9, 126, "Input",ExpressionUUID->"a94f7bae-c9d6-47fb-9090-fc5ea886d3f5"],
Cell[159352, 3163, 399, 6, 44, "Text",ExpressionUUID->"fc091007-1534-4d86-a5b9-03ac3b5e8cc8"],
Cell[CellGroupData[{
Cell[159776, 3173, 244, 4, 38, "Input",ExpressionUUID->"674932e5-e530-4013-a0d0-c7422c6d11bf"],
Cell[160023, 3179, 952, 19, 125, "Output",ExpressionUUID->"dc0f4519-6e31-4fe7-95b6-024f155914ea"]
}, Open  ]],
Cell[160990, 3201, 447, 6, 44, "Text",ExpressionUUID->"4c5d51ee-640c-4235-ba64-6ebaffa1cb51"],
Cell[CellGroupData[{
Cell[161462, 3211, 258, 5, 38, "Input",ExpressionUUID->"b0c82df9-468f-42af-981b-47d07f4798e5"],
Cell[161723, 3218, 204, 3, 36, "Output",ExpressionUUID->"73c9b749-ee9e-45f7-ae34-0a4dd580785a"]
}, Open  ]],
Cell[161942, 3224, 413, 7, 44, "Text",ExpressionUUID->"4173ed70-fae3-44da-814b-e9788821f6fb"],
Cell[CellGroupData[{
Cell[162380, 3235, 311, 6, 38, "Input",ExpressionUUID->"8ffb0bb9-897c-40b2-be28-2bc879a0097f"],
Cell[162694, 3243, 283, 6, 36, "Output",ExpressionUUID->"bd95619a-a7b4-44c8-b9f2-c73cafc1695e"]
}, Open  ]],
Cell[162992, 3252, 497, 7, 44, "Text",ExpressionUUID->"cfa09f26-bcc0-46f7-b1dc-365ec9dcdb2d"],
Cell[CellGroupData[{
Cell[163514, 3263, 284, 6, 38, "Input",ExpressionUUID->"c9f5aa6a-cee0-4c2d-994e-1816b5290d44"],
Cell[163801, 3271, 214, 3, 36, "Output",ExpressionUUID->"6ebd08a0-7059-4a76-ae6d-214d651bb8b7"]
}, Open  ]],
Cell[164030, 3277, 425, 6, 44, "Text",ExpressionUUID->"679f6973-b240-407b-b450-1e124489344d"],
Cell[CellGroupData[{
Cell[164480, 3287, 208, 3, 38, "Input",ExpressionUUID->"2ae4dfe2-d742-4190-8a0a-48dc068b6e15"],
Cell[164691, 3292, 181, 3, 36, "Output",ExpressionUUID->"634d5a4c-3028-472c-8a0d-c449ce95da12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164909, 3300, 223, 3, 38, "Input",ExpressionUUID->"1f46fd18-904c-47c8-ba21-665dffc793ce"],
Cell[165135, 3305, 228, 4, 36, "Output",ExpressionUUID->"afa22813-7455-42a6-99e8-56c101c616e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165400, 3314, 326, 8, 38, "Input",ExpressionUUID->"7355ee82-0f58-4b6f-9092-aa3d7c469c41"],
Cell[165729, 3324, 227, 4, 36, "Output",ExpressionUUID->"8b0d1e68-00d9-4405-97ba-b3402d044d7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165993, 3333, 269, 4, 38, "Input",ExpressionUUID->"bbd1af91-9ac3-410c-b616-bcd129ea81c7"],
Cell[166265, 3339, 399, 9, 23, "Message",ExpressionUUID->"298ce943-9141-4069-95c2-5d4cc6d4e6af"]
}, Open  ]],
Cell[166679, 3351, 939, 23, 97, "Input",ExpressionUUID->"954122cf-574d-4ae8-9365-e629f44591c0"],
Cell[167621, 3376, 472, 7, 44, "Text",ExpressionUUID->"14e34c16-a6cd-4275-b8ed-1f64551b3394"],
Cell[168096, 3385, 392, 8, 38, "Input",ExpressionUUID->"286ba33f-4873-4dda-bcd1-848173dec49a"],
Cell[168491, 3395, 457, 7, 44, "Text",ExpressionUUID->"d14e9442-17b6-4ba8-8062-be7a938d8b88"],
Cell[CellGroupData[{
Cell[168973, 3406, 211, 3, 38, "Input",ExpressionUUID->"44179179-4dc4-4bc3-bbdd-9cd790f7d328"],
Cell[169187, 3411, 150, 2, 36, "Output",ExpressionUUID->"754dbccc-2ed5-408c-89a3-d69b6b1e691f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169374, 3418, 186, 3, 38, "Input",ExpressionUUID->"dd437b98-2c3d-4c9f-bcb3-c2760b41957b"],
Cell[169563, 3423, 153, 2, 36, "Output",ExpressionUUID->"6f16ab06-d3de-44c0-9864-7355819c22dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169753, 3430, 214, 3, 38, "Input",ExpressionUUID->"72bf033d-1bbe-4163-98b2-8292d9afc7d2"],
Cell[169970, 3435, 196, 4, 36, "Output",ExpressionUUID->"0c21106a-09dc-4494-a55f-220fa61f98ec"]
}, Open  ]],
Cell[170181, 3442, 497, 8, 44, "Text",ExpressionUUID->"aa55c64d-2296-4b9b-b2fe-0c5b71274c52"],
Cell[CellGroupData[{
Cell[170703, 3454, 234, 4, 38, "Input",ExpressionUUID->"ea67c367-731d-4d86-a216-2143e2309ca2"],
Cell[170940, 3460, 326, 7, 36, "Output",ExpressionUUID->"a6b4949e-d757-4af7-bfb6-040dcea7ccc1"]
}, Open  ]],
Cell[171281, 3470, 759, 19, 38, "Input",ExpressionUUID->"66f2deb1-871d-4b2b-a57a-faa187b2652b"],
Cell[172043, 3491, 488, 9, 44, "Text",ExpressionUUID->"57e70dd4-8e73-4f83-acae-bdfcb4909d47"],
Cell[CellGroupData[{
Cell[172556, 3504, 245, 4, 38, "Input",ExpressionUUID->"0668a0a2-0e9b-4983-ac44-eb99956dfc82"],
Cell[172804, 3510, 160224, 2887, 69, "Output",ExpressionUUID->"aa5d709c-9a54-4fae-b749-e18297bb3b1e"]
}, Open  ]],
Cell[333043, 6400, 481, 7, 44, "Text",ExpressionUUID->"a3cea788-02ef-4362-a112-95e467cf36eb"],
Cell[CellGroupData[{
Cell[333549, 6411, 211, 3, 38, "Input",ExpressionUUID->"ed059bcf-db20-4964-9985-53f5b8cff819"],
Cell[333763, 6416, 261624, 4964, 620, "Output",ExpressionUUID->"a3ba3a13-3924-4c9d-9303-fc25ebb4679b"]
}, Open  ]],
Cell[595402, 11383, 531, 10, 44, "Text",ExpressionUUID->"787d3f09-cd4c-466b-b897-78188cf78454"],
Cell[CellGroupData[{
Cell[595958, 11397, 283, 5, 38, "Input",ExpressionUUID->"81a9d9f9-2afe-4f35-a76a-eefe2429bb85"],
Cell[596244, 11404, 219481, 3945, 568, "Output",ExpressionUUID->"a9b0d7ce-da4c-4ed8-a7ff-ef694737a5d0"]
}, Open  ]],
Cell[815740, 15352, 517, 7, 44, "Text",ExpressionUUID->"4dfbf04c-3aab-4ef3-b0ab-e20cab1a0e17"],
Cell[CellGroupData[{
Cell[816282, 15363, 217, 3, 38, "Input",ExpressionUUID->"fd73488a-95e2-4875-9294-cfa30a2f6d6d"],
Cell[816502, 15368, 46472, 939, 568, "Output",ExpressionUUID->"5cdb8071-7cb5-4e25-ba24-bcf2d97228a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[863011, 16312, 416, 9, 68, "Input",ExpressionUUID->"9664b1f5-4307-4db1-9504-948dc0e635e2"],
Cell[863430, 16323, 65973, 1482, 904, "Output",ExpressionUUID->"67f02164-ede7-4dc0-8e9a-955b4c73e368"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[929452, 17811, 200, 3, 61, "Subsection",ExpressionUUID->"9250040c-7d8e-46f8-b533-a292d9a71d3c"],
Cell[929655, 17816, 212, 4, 44, "Text",ExpressionUUID->"682d41b3-9bfa-4673-8e73-59e42c331fca"],
Cell[CellGroupData[{
Cell[929892, 17824, 16998, 338, 165, "Input",ExpressionUUID->"5e4bc740-6856-4648-8e1f-f4cc587e5a51"],
Cell[946893, 18164, 537228, 8914, 69, "Output",ExpressionUUID->"cf40c3ec-e42a-4432-b4a9-f64a215aa15e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1484158, 27083, 2615, 57, 53, "Input",ExpressionUUID->"4ccc052c-a4e4-4940-a0fd-6e22c9df4ecd"],
Cell[1486776, 27142, 262, 6, 36, "Output",ExpressionUUID->"9bfe3c69-99ef-4c9f-98b3-1531e58da5b2"]
}, Open  ]],
Cell[1487053, 27151, 209, 4, 44, "Text",ExpressionUUID->"aee61694-2ffd-466e-bacf-8cd85f15ffb4"],
Cell[1487265, 27157, 2717, 71, 77, "Input",ExpressionUUID->"24628fd4-6ee1-4281-a2e7-ececeb2b8d2b"],
Cell[CellGroupData[{
Cell[1490007, 27232, 510, 14, 38, "Input",ExpressionUUID->"667cc53a-1012-4576-93ee-583e29e4cea1"],
Cell[1490520, 27248, 43840, 837, 81, "Output",ExpressionUUID->"b0a74b70-6824-46e4-80dc-c768740b518c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1534397, 28090, 791, 21, 42, "Input",ExpressionUUID->"f1ad64a0-2049-41ea-963c-4f80e0d3a965"],
Cell[1535191, 28113, 158, 3, 36, "Output",ExpressionUUID->"608f2194-3e39-41e8-a747-b037d8e3075e"]
}, Open  ]],
Cell[1535364, 28119, 206, 3, 44, "Text",ExpressionUUID->"d9758763-fb22-4477-990c-1ef9a2d9e27b"],
Cell[CellGroupData[{
Cell[1535595, 28126, 567, 15, 126, "Input",ExpressionUUID->"3af57622-cad0-4573-bfd2-9be63577649e"],
Cell[1536165, 28143, 51834, 976, 69, "Output",ExpressionUUID->"80a6a8c2-54af-42c5-8a48-8ad7fe0fa967"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1588036, 29124, 725, 20, 42, "Input",ExpressionUUID->"8f80384a-18bc-45f9-9a42-95a37072334f"],
Cell[1588764, 29146, 158, 3, 36, "Output",ExpressionUUID->"da4f2f66-7cb4-4714-ba33-4367f769a559"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1588971, 29155, 489, 7, 61, "Subsection",ExpressionUUID->"5da73421-0bd6-4281-bb17-47754a5c8eeb"],
Cell[1589463, 29164, 523, 8, 44, "Text",ExpressionUUID->"ca55ca8a-bee4-46a0-8452-db1f7329869d"],
Cell[CellGroupData[{
Cell[1590011, 29176, 211, 3, 38, "Input",ExpressionUUID->"bc0a9faa-cbf5-4763-8738-486406bc4387"],
Cell[1590225, 29181, 261624, 4964, 608, "Output",ExpressionUUID->"7916f294-af7a-4974-9aff-aa91ebab3416"]
}, Open  ]],
Cell[1851864, 34148, 497, 8, 44, "Text",ExpressionUUID->"fd12ee00-eb61-4615-a99a-26133c2b28ec"],
Cell[CellGroupData[{
Cell[1852386, 34160, 253, 4, 38, "Input",ExpressionUUID->"aab7b277-450f-4200-b9d2-75b8e5324af9"],
Cell[1852642, 34166, 749, 13, 59, "Output",ExpressionUUID->"9805637a-5b1f-4212-93e5-0fabe51594b5"]
}, Open  ]],
Cell[1853406, 34182, 475, 7, 44, "Text",ExpressionUUID->"25fc8cfd-ddb5-456c-b2ae-2dcd7ffa94c3"],
Cell[CellGroupData[{
Cell[1853906, 34193, 538, 12, 68, "Input",ExpressionUUID->"5feb302d-4a31-48e2-875c-d92c048708ff"],
Cell[1854447, 34207, 115857, 2044, 69, "Output",ExpressionUUID->"50c52939-8fba-4d86-93b9-3b4751cf2c4e"]
}, Open  ]],
Cell[1970319, 36254, 445, 7, 44, "Text",ExpressionUUID->"40ce2f18-aff6-461f-9c46-5ac6e5aa590d"],
Cell[1970767, 36263, 195, 4, 38, "Input",ExpressionUUID->"7ec7aca2-e933-4000-8d24-1699a18010c7"],
Cell[1970965, 36269, 446, 7, 44, "Text",ExpressionUUID->"0bedf6e5-d224-4129-a243-7e6dd2e903f1"],
Cell[1971414, 36278, 202, 4, 38, "Input",ExpressionUUID->"558b9fe3-9e2b-4976-b787-18de31b8ebac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1971653, 36287, 387, 6, 61, "Subsection",ExpressionUUID->"1b18813a-2d01-48af-9051-65088776dc04"],
Cell[1972043, 36295, 261, 5, 44, "Text",ExpressionUUID->"83d1c0ba-bc9c-4e9e-b665-8fe5d3813b21"],
Cell[CellGroupData[{
Cell[1972329, 36304, 182, 3, 38, "Input",ExpressionUUID->"1ebfa9aa-1461-4645-886c-58e75924de51"],
Cell[1972514, 36309, 725, 13, 59, "Output",ExpressionUUID->"a19d02cf-1cfe-4e83-9ffa-bda61246981e"]
}, Open  ]],
Cell[1973254, 36325, 537, 8, 44, "Text",ExpressionUUID->"86df0d66-3567-47b5-b9c9-9aec70c1bc6a"],
Cell[CellGroupData[{
Cell[1973816, 36337, 724, 14, 126, "Input",ExpressionUUID->"6be581d1-6404-47aa-b692-9ece899449c5"],
Cell[1974543, 36353, 151132, 2724, 69, "Output",ExpressionUUID->"4d48fbf4-c338-4113-825a-a18b1ea52a82"]
}, Open  ]],
Cell[2125690, 39080, 539, 8, 44, "Text",ExpressionUUID->"6b83c683-82b7-442c-ae04-b2144f7996df"],
Cell[CellGroupData[{
Cell[2126254, 39092, 255, 4, 38, "Input",ExpressionUUID->"ec12139f-cb71-482b-ad0b-dc0670b8dcfb"],
Cell[2126512, 39098, 721, 13, 59, "Output",ExpressionUUID->"a10af8bd-29b1-44e3-bc40-323409488426"]
}, Open  ]],
Cell[2127248, 39114, 493, 9, 44, "Text",ExpressionUUID->"253c0bea-5a92-47da-8b1d-72723522b8da"],
Cell[CellGroupData[{
Cell[2127766, 39127, 293, 5, 38, "Input",ExpressionUUID->"0ea7244f-78d7-4d9e-a189-d97b8923675b"],
Cell[2128062, 39134, 212525, 3828, 568, "Output",ExpressionUUID->"e10bcfeb-8046-4e38-98eb-16a90e6adff3"]
}, Open  ]],
Cell[2340602, 42965, 466, 7, 44, "Text",ExpressionUUID->"6960287b-9608-458c-99c3-f9c6bf34f5ae"],
Cell[CellGroupData[{
Cell[2341093, 42976, 222, 3, 38, "Input",ExpressionUUID->"0ab7cd43-c95f-4898-a7a8-44b10fc6cfad"],
Cell[2341318, 42981, 46573, 940, 568, "Output",ExpressionUUID->"af270a0b-c925-4d7a-ae03-5b172e0bd782"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2387952, 43928, 473, 7, 74, "Section",ExpressionUUID->"2226d9d2-64cc-46c4-b0bf-fbfacfc88b1c"],
Cell[CellGroupData[{
Cell[2388450, 43939, 488, 7, 61, "Subsection",ExpressionUUID->"37cc4671-d433-4d6a-843e-04e97c9f34a9"],
Cell[2388941, 43948, 406, 11, 44, "Text",ExpressionUUID->"e9c4662d-692a-4905-b512-6133a8db15ac"],
Cell[2389350, 43961, 471, 11, 40, "Item",ExpressionUUID->"a08c353a-0bcb-4993-910a-78d4d701dd07"],
Cell[2389824, 43974, 522, 12, 40, "Item",ExpressionUUID->"d4e980fb-729b-48a0-ac00-3bfa5798df4d"],
Cell[2390349, 43988, 485, 11, 40, "Item",ExpressionUUID->"9b85f205-3b6b-44dc-b04c-e05c0a4578d4"],
Cell[2390837, 44001, 486, 11, 40, "Item",ExpressionUUID->"e4bae39f-aefd-4b6c-94a5-60ead6badbd4"],
Cell[2391326, 44014, 475, 11, 40, "Item",ExpressionUUID->"a6579185-7f48-4f09-902a-060bf7ca139c"],
Cell[2391804, 44027, 473, 11, 40, "Item",ExpressionUUID->"dd541d5f-f0e2-47cd-b2cb-c4ab0b3f72e7"],
Cell[2392280, 44040, 486, 11, 40, "Item",ExpressionUUID->"87e578df-d713-4509-9842-15fc41133943"],
Cell[2392769, 44053, 333, 5, 44, "Text",ExpressionUUID->"78600a2c-fca2-4f29-9d75-6c7cadb4fc55"],
Cell[2393105, 44060, 312, 8, 38, "Input",ExpressionUUID->"a30d7c18-da80-444c-ad11-6f6b5a18d428"],
Cell[2393420, 44070, 336, 5, 44, "Text",ExpressionUUID->"80c729fc-d1c1-4d2c-bac9-7b9a26ca8841"],
Cell[2393759, 44077, 273, 6, 38, "Input",ExpressionUUID->"669250d8-bc18-4377-9b6c-63cfd133cc18"],
Cell[2394035, 44085, 332, 5, 44, "Text",ExpressionUUID->"b5f4d7af-04fa-4818-b8e7-831186fd149c"],
Cell[2394370, 44092, 274, 6, 38, "Input",ExpressionUUID->"bb94ceda-bf43-4374-9cda-be0063449cea"],
Cell[2394647, 44100, 369, 5, 44, "Text",ExpressionUUID->"b91f5b12-6d5b-48f4-8f4c-5ee30ba2545e"],
Cell[CellGroupData[{
Cell[2395041, 44109, 928, 25, 126, "Input",ExpressionUUID->"06e5d5fd-5eec-4050-9d2a-734778f7b6fd"],
Cell[2395972, 44136, 26367, 498, 270, "Output",ExpressionUUID->"65aeb562-5da1-4d93-8c0d-d0f6e49d9520"]
}, Open  ]],
Cell[2422354, 44637, 409, 6, 44, "Text",ExpressionUUID->"9b7e84ae-53f9-44ee-bbfc-19e720487f8e"],
Cell[2422766, 44645, 328, 8, 38, "Input",ExpressionUUID->"2e304db7-0499-4fb5-a898-7dc259a696f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2423131, 44658, 326, 5, 61, "Subsection",ExpressionUUID->"6e6bcca5-8edd-4269-80de-39ac8ca67049"],
Cell[2423460, 44665, 632, 15, 44, "Text",ExpressionUUID->"89ad362d-78fc-4a3d-9336-1230805f1015"],
Cell[2424095, 44682, 258, 6, 38, "Input",ExpressionUUID->"e525f5cf-4b4c-4059-b84d-97962dabff3f"],
Cell[2424356, 44690, 648, 15, 44, "Text",ExpressionUUID->"dde50315-e9b4-4519-84a3-323e9106833a"],
Cell[2425007, 44707, 252, 6, 38, "Input",ExpressionUUID->"384312ef-353d-4679-b968-1332c3209638"],
Cell[2425262, 44715, 455, 7, 44, "Text",ExpressionUUID->"a1957cef-9b69-4559-ba1d-1166575bd374"],
Cell[2425720, 44724, 305, 8, 38, "Input",ExpressionUUID->"dfad4fb9-6f34-41b3-91ed-abbdfde8d4bc"],
Cell[2426028, 44734, 581, 9, 44, "Text",ExpressionUUID->"c3a45f9b-1a47-4263-bc53-c4d2d060f016"],
Cell[2426612, 44745, 165, 3, 38, "Input",ExpressionUUID->"73403138-a6ab-495d-9c73-65af78f88b97"],
Cell[2426780, 44750, 185, 3, 38, "Input",ExpressionUUID->"4bc86968-91e2-4067-9ccf-a689cef2aa51"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2427014, 44759, 446, 7, 74, "Section",ExpressionUUID->"c0a2988f-171c-4b5f-a25b-78e5f330dc4a"],
Cell[2427463, 44768, 542, 12, 44, "Text",ExpressionUUID->"d868a029-b0a1-481c-a68a-244a72898ff9"],
Cell[2428008, 44782, 577, 13, 44, "Text",ExpressionUUID->"3b42c074-2541-42ea-a331-4f21c0f5dd49"],
Cell[CellGroupData[{
Cell[2428610, 44799, 569, 12, 68, "Input",ExpressionUUID->"8c908438-39ec-4c23-abc1-e7622d7e3750"],
Cell[2429182, 44813, 29919, 586, 97, "Output",ExpressionUUID->"ffd5e3e0-6597-4ba4-9512-33e96d399b4f"]
}, Open  ]],
Cell[2459116, 45402, 293, 5, 44, "Text",ExpressionUUID->"87b5a914-8de4-4861-82cd-bfdf9c6d7acd"],
Cell[CellGroupData[{
Cell[2459434, 45411, 370, 7, 38, "Input",ExpressionUUID->"77027a01-bb37-4ca0-8a2f-d2877363ab41"],
Cell[2459807, 45420, 149, 2, 36, "Output",ExpressionUUID->"29622315-e6a5-43a8-b9e0-cd7e6bc8cb21"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2459993, 45427, 449, 7, 61, "Subsection",ExpressionUUID->"b0c8cda3-b14a-47f8-924b-f95a33379269"],
Cell[2460445, 45436, 380, 6, 44, "Text",ExpressionUUID->"f45e1ecd-6626-4eff-964a-6e54e8fa21c6"],
Cell[2460828, 45444, 309, 5, 44, "Text",ExpressionUUID->"f2a5a492-c439-45c5-b006-216d533277e3"],
Cell[2461140, 45451, 623, 20, 97, "Input",ExpressionUUID->"f095f429-6849-45de-943a-cc8a366f1399"],
Cell[2461766, 45473, 383, 6, 44, "Text",ExpressionUUID->"6de40f15-c1b8-48ef-ad39-af15ef978275"],
Cell[2462152, 45481, 467, 10, 38, "Input",ExpressionUUID->"f67edce4-e602-4298-b9ab-7343db234be9"],
Cell[2462622, 45493, 235, 4, 44, "Text",ExpressionUUID->"835dcdd3-f06e-4512-a2dc-480b24ffacc6"],
Cell[2462860, 45499, 261, 6, 38, "Input",ExpressionUUID->"c1c315d4-24a9-4328-8c25-783593017954"],
Cell[2463124, 45507, 299, 5, 44, "Text",ExpressionUUID->"64d71647-fd24-45b4-856d-c3b01dfbd231"],
Cell[2463426, 45514, 319, 7, 38, "Input",ExpressionUUID->"e4f33549-4e89-4419-af89-fada18fb2826"],
Cell[2463748, 45523, 334, 5, 44, "Text",ExpressionUUID->"32fe782d-d3bf-4cdb-ab04-bd9235525bbd"],
Cell[2464085, 45530, 357, 9, 68, "Input",ExpressionUUID->"b624885a-9a7b-4bf1-b375-5ae61354f587"],
Cell[2464445, 45541, 226, 4, 44, "Text",ExpressionUUID->"735fc71a-95ef-4f7c-9620-2c5b0c2d1f4d"],
Cell[2464674, 45547, 295, 6, 38, "Input",ExpressionUUID->"db3afb02-f247-44ee-9181-262ff4f8e40b"],
Cell[2464972, 45555, 390, 6, 44, "Text",ExpressionUUID->"15b264a4-4897-4406-bbde-2bdd47216632"],
Cell[2465365, 45563, 740, 18, 97, "Input",ExpressionUUID->"56b67978-9b6d-427c-9ccc-db1817171d23"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2466154, 45587, 308, 5, 74, "Section",ExpressionUUID->"5b8ed094-bf37-4cf0-979f-a7953e0c2ba6"],
Cell[CellGroupData[{
Cell[2466487, 45596, 344, 5, 61, "Subsection",ExpressionUUID->"93991394-f435-4687-b8f1-05e031e29a81"],
Cell[2466834, 45603, 541, 8, 44, "Text",ExpressionUUID->"946b7121-0428-47c7-af1c-b933e7cdc15d"],
Cell[2467378, 45613, 404, 6, 44, "Text",ExpressionUUID->"df277b31-63e0-4592-bfa7-1f74e668b0c5"],
Cell[CellGroupData[{
Cell[2467807, 45623, 642, 13, 68, "Input",ExpressionUUID->"0d61efec-f3c0-490f-a60c-e9799720d02e"],
Cell[2468452, 45638, 47063, 878, 69, "Output",ExpressionUUID->"114e5be5-1ca6-4354-9490-32a5c4f1591d"]
}, Open  ]],
Cell[2515530, 46519, 376, 6, 44, "Text",ExpressionUUID->"6674abb5-f283-4c03-843e-433b88611a5e"],
Cell[CellGroupData[{
Cell[2515931, 46529, 180, 3, 38, "Input",ExpressionUUID->"272b9773-e92e-45c9-b06b-44ec19b12c6e"],
Cell[2516114, 46534, 184, 2, 36, "Output",ExpressionUUID->"022e3cbb-fa82-4a53-a5a1-fed06f0691d7"]
}, Open  ]],
Cell[2516313, 46539, 465, 7, 44, "Text",ExpressionUUID->"b40c5180-e6b7-4644-a870-d49a5771c78b"],
Cell[CellGroupData[{
Cell[2516803, 46550, 427, 11, 38, "Input",ExpressionUUID->"d20837d0-2749-4c32-a29d-048f88ecdef2"],
Cell[2517233, 46563, 3298, 72, 249, "Output",ExpressionUUID->"82b49d5e-a9a5-46fa-8ae9-7fe37f9499dc"]
}, Open  ]],
Cell[2520546, 46638, 418, 6, 44, "Text",ExpressionUUID->"4ba3f3f5-1a97-463c-a127-88099166d0fc"],
Cell[CellGroupData[{
Cell[2520989, 46648, 295, 5, 38, "Input",ExpressionUUID->"f71600bc-69b3-4552-ba6e-1425ebf1762e"],
Cell[2521287, 46655, 355, 7, 36, "Output",ExpressionUUID->"bc571e25-016b-4750-aae8-d5cb959172bf"]
}, Open  ]],
Cell[2521657, 46665, 642, 14, 44, "Text",ExpressionUUID->"48891e75-9aa1-40f1-877f-ca2d344ad735"],
Cell[CellGroupData[{
Cell[2522324, 46683, 445, 10, 38, "Input",ExpressionUUID->"24f692ed-17a0-4c32-8fa6-040414193442"],
Cell[2522772, 46695, 353, 7, 36, "Output",ExpressionUUID->"7de24a44-2d40-4d70-afea-302751954d56"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2523174, 46708, 343, 5, 61, "Subsection",ExpressionUUID->"8b911427-be86-4d91-93dc-0a2741ceb2e2"],
Cell[2523520, 46715, 416, 6, 44, "Text",ExpressionUUID->"c1688868-7e6e-4902-8b02-2739d7011f82"],
Cell[2523939, 46723, 605, 9, 44, "Text",ExpressionUUID->"d05bf371-6560-41ee-afa6-b1a0a986aca6"],
Cell[2524547, 46734, 499, 11, 68, "Input",ExpressionUUID->"fe41d395-548c-408b-ac32-840dadd31782",
 CellID->1648532844],
Cell[2525049, 46747, 416, 6, 44, "Text",ExpressionUUID->"0e19e88f-f4ac-41e3-ae7d-e4baa1f98391"],
Cell[CellGroupData[{
Cell[2525490, 46757, 194, 4, 38, "Input",ExpressionUUID->"d79758b2-9e51-41be-8596-43a678e70429",
 CellID->1080564650],
Cell[2525687, 46763, 47240, 879, 69, "Output",ExpressionUUID->"dd5db72e-bf93-4c2a-899b-01bdd740680a"]
}, Open  ]],
Cell[2572942, 47645, 233, 3, 44, "Text",ExpressionUUID->"600dbea8-44d0-4877-a0a8-21de9b0de8f9",
 CellID->510916105],
Cell[CellGroupData[{
Cell[2573200, 47652, 271, 5, 38, "Input",ExpressionUUID->"aee7a88c-b77e-4a66-81ff-25a11d7be9db",
 CellID->391508067],
Cell[2573474, 47659, 406, 8, 36, "Output",ExpressionUUID->"57700d2c-a060-403c-80ae-eb0df7cc079d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2573917, 47672, 224, 4, 38, "Input",ExpressionUUID->"d4fe862b-2bf1-437f-9df4-1901e1e31e85",
 CellID->1327356029],
Cell[2574144, 47678, 212, 3, 36, "Output",ExpressionUUID->"5630455e-d8a8-4bda-bfa2-c5b734577b43"]
}, Open  ]],
Cell[2574371, 47684, 414, 6, 44, "Text",ExpressionUUID->"35a11264-e160-449e-9561-c640a646595c",
 CellID->2062261006],
Cell[CellGroupData[{
Cell[2574810, 47694, 820, 20, 68, "Input",ExpressionUUID->"0d8cfcbf-ef6b-4ca3-8354-86efb666fd8f",
 CellID->86712585],
Cell[2575633, 47716, 188, 2, 36, "Output",ExpressionUUID->"fd385b4c-e1ff-477f-b6f9-1d1b13419a6b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2575870, 47724, 339, 5, 61, "Subsection",ExpressionUUID->"a78197aa-121a-4fc3-9417-1c5ed143aec0"],
Cell[2576212, 47731, 552, 8, 75, "Text",ExpressionUUID->"20f29da7-ea73-4ce4-b06f-ebdef356d001"],
Cell[2576767, 47741, 255, 3, 44, "Text",ExpressionUUID->"c658c11f-834b-4838-8b35-35f4ffdf936d",
 CellID->1602878693],
Cell[2577025, 47746, 366, 9, 68, "Input",ExpressionUUID->"09c98951-ec34-4688-bc49-2ae6debfb067",
 CellID->1547325283],
Cell[2577394, 47757, 358, 9, 38, "Input",ExpressionUUID->"33e6d667-bd28-4900-a645-181a1ec1bc9e",
 CellID->2016549858],
Cell[2577755, 47768, 251, 5, 44, "Text",ExpressionUUID->"1b811c46-fc36-4b2f-a2f6-85f09673409d",
 CellID->566546452],
Cell[CellGroupData[{
Cell[2578031, 47777, 258, 6, 38, "Input",ExpressionUUID->"1bb7dfff-7f5b-4c47-bd4a-ac0d9f74b54d",
 CellID->3727966],
Cell[2578292, 47785, 91213, 1631, 69, "Output",ExpressionUUID->"79498216-9442-4bbf-8522-5c46744024e6"]
}, Open  ]],
Cell[2669520, 49419, 259, 5, 44, "Text",ExpressionUUID->"3b316917-c63d-4764-bcbe-be746804f302",
 CellID->1401436271],
Cell[CellGroupData[{
Cell[2669804, 49428, 242, 5, 38, "Input",ExpressionUUID->"07128ba7-9da3-4762-a90a-d65225111e3a",
 CellID->338766401],
Cell[2670049, 49435, 10230, 261, 449, "Output",ExpressionUUID->"cc0cbc68-8f2c-4347-9ef4-7befa401c3cf"]
}, Open  ]],
Cell[2680294, 49699, 451, 12, 44, "Text",ExpressionUUID->"03388c02-1e4f-46e2-aa5e-56e0d2e99f56"],
Cell[2680748, 49713, 289, 5, 44, "Text",ExpressionUUID->"882afcb4-4d2e-40aa-9325-6d43cfca355b"],
Cell[CellGroupData[{
Cell[2681062, 49722, 356, 7, 38, "Input",ExpressionUUID->"696206fa-f49a-45dc-9140-e9831ebbfd15"],
Cell[2681421, 49731, 351, 7, 36, "Output",ExpressionUUID->"e96c824e-fad2-410d-855d-6bf2e191d275"]
}, Open  ]],
Cell[2681787, 49741, 419, 11, 44, "Text",ExpressionUUID->"03a29ce2-4c1c-49f7-b2c0-b1cb820f9dce"],
Cell[2682209, 49754, 893, 21, 126, "Input",ExpressionUUID->"2afc6327-5651-44d2-acf3-0f3475bd21c9",
 CellID->1903814788],
Cell[2683105, 49777, 441, 7, 44, "Text",ExpressionUUID->"19ebce3e-d3c5-49df-b206-2dc7a4739368",
 CellID->1441467900],
Cell[CellGroupData[{
Cell[2683571, 49788, 426, 7, 68, "Input",ExpressionUUID->"6550e941-5842-465f-9e18-06ad2810504b",
 CellID->1264509497],
Cell[2684000, 49797, 11162, 283, 352, "Output",ExpressionUUID->"1c6f22d7-bf4a-4dd4-8eb6-8d766376ce2b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2695223, 50087, 219, 4, 74, "Section",ExpressionUUID->"00d0164c-1961-45bf-8639-819b8328c718"],
Cell[2695445, 50093, 540, 13, 40, "Item",ExpressionUUID->"7c1f4ec3-63c8-47c2-a3e0-f90603d3df9a"],
Cell[2695988, 50108, 540, 11, 40, "Item",ExpressionUUID->"40f47c79-b172-4d34-8c20-c337dc458cfd"],
Cell[2696531, 50121, 465, 10, 40, "Item",ExpressionUUID->"5521c233-a568-43a7-b861-0d0bcb6e0976"],
Cell[2696999, 50133, 540, 14, 40, "Item",ExpressionUUID->"d6f3132c-d0c2-427c-813e-feb29f28f47e"],
Cell[2697542, 50149, 506, 13, 40, "Item",ExpressionUUID->"afd1c597-a65c-4988-8b0c-d6a55822f842"]
}, Open  ]]
}, Open  ]]
}
]
*)

